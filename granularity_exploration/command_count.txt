USES: actions/checkout: 211169
echo "RELEASE_VERSION=$(echo ENV_VAR:10})" >> ENV_VAR: 6
USES: docker/setup-buildx-action: 7515
USES: docker/login-action: 10515
USES: docker/build-push-action: 9244
USES: rtCamp/action-slack-notify: 543
USES: github/codeql-action/init: 5378
USES: github/codeql-action/autobuild: 3923
USES: github/codeql-action/analyze: 5356
USES: actions/create-release: 1674
USES: ./.github/actions/yarn-install: 34
yarn build: 2785
npm publish FLAG public: 315
USES: shivammathur/setup-php: 4620
USES: actions/setup-node: 32555
npm install: 5624
npm run build: 3898
USES: peaceiris/actions-gh-pages: 1622
USES: r-lib/actions/pr-fetch: 19
USES: r-lib/actions/setup-r: 220
USES: r-lib/actions/setup-r-dependencies: 109
git config FLAG user.name "ENV_VAR": 153
git config FLAG user.email "ENV_VAR": 136
git add man CUSTOM_PATH_DIR NAMESPACE: 6
USES: r-lib/actions/pr-push: 20
git config FLAG FLAG safe.directory "$(pwd)": 19
USES: actions/upload-artifact: 40428
docker-compose build: 62
sudo npm install -g  CUSTOM_PATH_DIR: 16
git config FLAG user.email "noreply" && git config FLAG user.name "HOPR Versioning robot": 6
git commit -m "COMMIT_MSG": 1202
git push origin master: 102
USES: actions/setup-python: 30433
pip install mkdocs-material mike: 16
cd documentation CUSTOM_PATH_DIR: 8
mike set-default FLAG latest: 11
USES: dtolnay/rust-toolchain: 3600
cargo test: 482
USES: gsactions/commit-message-checker: 68
USES: fuxingloh/multi-labeler: 17
USES: actions/setup-go: 14991
go install: 66
go build: 131
git config user.name github-actions: 315
git config user.email github-actions: 321
git merge origin CUSTOM_PATH_DIR FLAG: 14
USES: actions/setup-dotnet: 4465
. CUSTOM_PATH_FILE1: 381
USES: dorny/paths-filter: 852
echo "::set-output name=dir::$(composer config cache-files-dir)": 559
USES: actions/cache: 36964
php FLAG: 93
composer FLAG: 55
composer install FLAG: 285
echo "::add-matcher::.github CUSTOM_PATH_FILE": 427
composer install: 380
echo "::remove-matcher owner=phpcs": 6
USES: ./.github/actions/deepen-to-merge-base: 10
jq FLAG: 23
EOF: 573
USES: actions/setup-java: 14076
USES: hendrikmuhs/ccache-action: 554
ccache -s: 284
USES: gradle/wrapper-validation-action: 1025
. CUSTOM_PATH_DIR: 2564
sudo apt-get update  : 9
node FLAG: 287
g++ FLAG: 70
node tests CUSTOM_PATH_FILE: 10
python -c "import sys; print(sys.version)": 261
python -m pip install FLAG pip: 7088
USES: lukka/get-cmake: 382
USES: ilammy/msvc-dev-cmd: 940
USES: josStorer/get-current-time: 18
curl URL | sudo tee FLAG CUSTOM_PATH_FILE: 10
sudo sed -i 's CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 14
sudo update-alternatives FLAG CUSTOM_PATH_DIR gcc CUSTOM_PATH_DIR 100 FLAG CUSTOM_PATH_DIR g++ CUSTOM_PATH_DIR FLAG CUSTOM_PATH_DIR gcov CUSTOM_PATH_DIR: 11
USES: jurplel/install-qt-action: 897
USES: lukka/run-vcpkg: 165
USES: actions/download-artifact: 15883
ls -R: 265
USES: pypa/gh-action-pypi-publish: 2311
sh . CUSTOM_PATH_FILE: 182
USES: s-weigand/setup-conda: 115
source activate test: 38
python -V: 102
conda info: 280
conda list: 336
git config FLAG hub.protocol https: 24
gh pr checkout ${{ github.event.issue.number }}: 12
USES: jupyterlab/maintainer-tools/.github/actions/base-setup: 206
bash . CUSTOM_PATH_FILE: 816
jlpm run build: 12
USES: jupyterlab/maintainer-tools/.github/actions/update-snapshots: 11
set -ex: 389
sudo apt-get update: 5060
git fetch FLAG FLAG: 1067
sudo apt-get install ninja-build: 53
file install CUSTOM_PATH_DIR: 6
USES: AButler/upload-release-assets: 135
yarn bootstrap: 142
USES: coverallsapp/github-action: 1172
USES: actions/github-script: 4233
USES: gradle/gradle-build-action: 2294
. CUSTOM_PATH_DIR FLAG: 797
make: 2442
USES: softprops/action-gh-release: 3039
USES: ./.github/prepare-test: 11
USES: ./../action/init: 56
USES: ./../action/analyze: 53
USES: fossa-contrib/fossa-action: 21
USES: ./.github/actions/create-dev-env: 8
composer update: 53
vendor CUSTOM_PATH_DIR install: 50
composer validate FLAG FLAG: 87
vendor CUSTOM_PATH_DIR FLAG FLAG: 44
USES: peter-evans/link-checker: 13
exit ${{ steps.lc.outputs.exit_code }}: 9
git submodule update FLAG FLAG: 667
brew install openssl: 58
cd Dependencies CUSTOM_PATH_DIR: 18
. CUSTOM_PATH_DIR FLAG FLAG=$(brew FLAG openssl): 10
sudo make && sudo make install: 19
cp pyconfig.h Include CUSTOM_PATH_FILE: 10
cd ..: 4062
pip3 install wheel: 42
pip3 install twine: 18
mkdir cmake-build-release: 32
cd cmake-build-release: 41
cmake ..: 385
cmake FLAG cmake-build-release FLAG Release: 25
cd CUSTOM_PATH_DIR: 757
USES: docker/setup-qemu-action: 5220
USES: docker/metadata-action: 2578
USES: peter-evans/dockerhub-description: 347
echo "::set-output name=stable::$(rustc +stable FLAG)": 8
echo "::set-output name=nightly::$(rustc +nightly FLAG)": 8
SCCACHE_FILE=sccache-ENV_VAR-x86_64-unknown-linux-musl: 40
mkdir -p ENV_VAR CUSTOM_PATH_DIR: 686
curl -L "ENV_VAR CUSTOM_PATH_FILE" | tar xz: 37
mv -f ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 43
chmod +x ENV_VAR CUSTOM_PATH_DIR: 108
echo "ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 974
sccache FLAG: 195
sudo apt update: 1934
protoc FLAG: 43
curl -s URL -sSf | sh -s -- -y: 21
source ENV_VAR CUSTOM_PATH_DIR: 232
rustup toolchain install stable: 33
rustup default stable: 126
rustup update: 124
rustup target add wasm32-unknown-unknown: 167
sccache FLAG || true: 69
ls -ahl ENV_VAR CUSTOM_PATH_DIR: 10
sleep 120: 77
cd ${{ github.workspace }} CUSTOM_PATH_DIR: 302
yarn install: 2766
yarn: 2244
cd .. CUSTOM_PATH_DIR: 1431
USES: audacious-network/aws-github-runner: 26
echo "::set-output name=VERSION::ENV_VAR": 18
iwr URL -OutFile wingetcreate.exe: 22
npm ci: 6961
npm run lint: 2092
. CUSTOM_PATH_FILE: 10850
USES: ncipollo/release-action: 1789
USES: Ilshidur/action-discord: 146
make yamllint: 9
yarn run build: 343
sudo apt update -qq: 54
scripts CUSTOM_PATH_FILE: 833
USES: fsfe/reuse-action: 54
USES: aquasecurity/trivy-action: 452
USES: github/codeql-action/upload-sarif: 1265
USES: peter-evans/create-pull-request: 1924
echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}": 136
echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}": 126
php -v: 105
composer -V: 17
php -m: 42
composer validate: 248
echo "dir=$(composer config cache-files-dir)" >> ENV_VAR: 314
composer install FLAG FLAG FLAG FLAG: 179
touch database CUSTOM_PATH_FILE: 36
sudo systemctl start mysql.service: 98
sudo systemctl start postgresql.service: 27
php artisan key:generate: 127
USES: SonarSource/sonarcloud-github-action: 166
USES: mikepenz/action-junit-report: 215
USES: denoland/setup-deno: 336
npm run FLAG build: 11
exit 0: 312
find .m2 CUSTOM_PATH_DIR -name "*SNAPSHOT*" -type d | xargs rm -rf {}: 16
USES: tj-actions/changed-files: 537
USES: docker://ghcr.io/wolfi-dev/wolfictl:latest: 6
chmod +x . CUSTOM_PATH_DIR: 827
gradle publish: 6
USES: actions/add-to-project: 338
USES: dessant/repo-lockdown: 22
exec . CUSTOM_PATH_FILE: 17
mkdir build: 1508
cd build: 2541
cmake FLAG . FLAG 8: 11
ci CUSTOM_PATH_FILE: 748
. CUSTOM_PATH_DIR verify -Drabbitmqctl.bin=DOCKER:rabbitmq FLAG: 6
docker stop rabbitmq && docker rm rabbitmq: 20
echo "::set-output name=dir::$(yarn cache dir)": 1009
echo "::set-output name=sha_short::$(git rev-parse FLAG HEAD)": 176
USES: SamKirkland/FTP-Deploy-Action: 38
docker load FLAG CUSTOM_PATH_FILE: 196
docker image ls -a: 54
USES: Kong/kong-license: 12
make test.e2e: 8
apt-get update: 326
mkdir -p artifacts: 60
export DISPLAY=:99: 72
Xvfb :99 &: 29
cd artifacts: 48
USES: montudor/action-zip: 64
USES: actions/configure-pages: 423
USES: actions/upload-pages-artifact: 604
USES: actions/deploy-pages: 620
Import-Module .\.ci\win-ci-tools.psm1: 18
USES: rokroskar/workflow-run-cleanup-action: 53
USES: cypress-io/github-action: 598
pip install FLAG -r requirements.txt: 47
python . CUSTOM_PATH_FILE: 246
python -m unittest discover tests/: 11
cd ivy: 198
pip3 install -e .: 45
mkdir .ivy: 21
touch .ivy CUSTOM_PATH_FILE: 21
echo -n ${{ secrets.USER_API_KEY }} > .ivy CUSTOM_PATH_FILE: 21
USES: dawidd6/action-download-artifact: 795
cd ivy CUSTOM_PATH_DIR: 152
unzip examples.zip: 16
rm examples.zip: 16
mkdir -p .hypothesis: 127
cd .hypothesis: 16
mkdir -p examples: 16
zip -r examples.zip examples: 120
exit 1: 1433
echo RANDOM=$(date +%s) >> ENV_VAR: 114
USES: AdoptOpenJDK/install-jdk: 52
java -version: 186
echo "GOCACHE=$(go env GOCACHE)" >> ENV_VAR: 19
echo "GOMODCACHE=$(go env GOMODCACHE)" >> ENV_VAR: 6
kubectl get nodes: 68
kubectl get pods -n kube-system: 59
helm version: 53
kubectl version: 40
USES: mxschmitt/action-tmate: 284
USES: actions-rs/toolchain: 6132
python -m pip install FLAG pip setuptools wheel: 399
pytest: 761
composer run test:unit: 31
USES: codecov/codecov-action: 6752
USES: skjnldsv/read-package-engines-version-actions: 52
npm i -g npm@"${{ steps.versions.outputs.npmVersion }}": 48
USES: saucelabs/sauce-connect-action: 35
USES: Swatinem/rust-cache: 3175
cargo check: 134
cargo install cargo-hack: 16
cargo fmt FLAG -- FLAG: 531
cargo miri setup: 37
cargo clean: 63
make test: 1924
make integration-tests: 19
USES: warrenbuckley/Setup-MSBuild: 18
USES: warrenbuckley/Setup-Nuget: 17
USES: fbactions/setup-winsdk: 7
yarn FLAG: 1325
USES: dev-drprasad/delete-tag-and-release: 77
git config FLAG user.name gh-action: 6
git config FLAG user.email gh-action: 6
git am release CUSTOM_PATH_FILE: 14
USES: shogo82148/actions-upload-release-asset: 145
USES: crazy-max/ghaction-import-gpg: 302
USES: eregon/publish-release: 36
go install github.com CUSTOM_PATH_DIR: 993
cd ${{ env.BEAT_MODULE }} && mage build: 12
cd ${{ env.BEAT_MODULE }} && mage unitTest: 11
USES: v1v/otel-upload-test-artifact-action: 12
USES: actions/dependency-review-action: 214
. CUSTOM_PATH_DIR clean build: 53
USES: reactivecircus/android-emulator-runner: 473
USES: maxim-lobanov/setup-xcode: 429
xcrun simctl list: 13
dotnet restore: 791
dotnet build FLAG: 167
ls -la ./: 42
sudo rm -rf . CUSTOM_PATH_DIR || true: 17
${{ matrix.python-version }} -m pip install -r dev_requirements.txt: 7
${{ matrix.python-version }} -m coverage combine: 7
USES: actions/upload-release-asset: 3338
USES: dangoslen/changelog-enforcer: 40
curl -O URL: 74
USES: micnncim/action-label-syncer: 61
sudo rm -rf CUSTOM_PATH_DIR: 1499
sudo rm -rf " CUSTOM_PATH_DIR: 193
sudo rm -rf "ENV_VAR": 177
rustup target add FLAG stable wasm32-wasi: 7
USES: Leafwing-Studios/cargo-cache: 23
dotnet restore src CUSTOM_PATH_FILE: 100
dotnet build src CUSTOM_PATH_FILE FLAG: 7
USES: mikefarah/yq: 110
USES: cachix/install-nix-action: 844
nix flake check -L: 6
go test -timeout 5m -race -coverpkg=. CUSTOM_PATH_DIR -coverprofile=coverage.txt github.com CUSTOM_PATH_DIR: 42
yarn || yarn || yarn: 6
npm -v: 131
npm install FLAG: 508
npm run type-check: 31
npm run bundle: 49
npm run bundle:min: 6
USES: jaywcjlove/github-action-contributors: 16
cp -rp packages CUSTOM_PATH_DIR website CUSTOM_PATH_DIR: 6
npm publish FLAG public FLAG: 113
USES: jaywcjlove/create-tag-action: 12
USES: jaywcjlove/changelog-generator: 35
sudo rm -f CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 12
wget -O - URL | sudo apt-key add -: 30
. CUSTOM_PATH_DIR env -r >> ENV_VAR: 14
.github CUSTOM_PATH_FILE: 1284
mkdocs build: 136
USES: JamesIves/github-pages-deploy-action: 1347
USES: hecrj/setup-rust-action: 296
rustup component add rustfmt: 276
docker-compose up -d mongodb: 22
sleep 5: 179
mvn -B package FLAG pom.xml: 311
yarn install FLAG: 2638
USES: HaaLeo/publish-vscode-extension: 98
git checkout HEAD^2: 535
make install DESTDIR=${{ env.DESTDIR }}: 7
make -j$(nproc): 294
. CUSTOM_PATH_DIR ${{ env.CONFIGURE_ARGS }}: 10
autoreconf -fiv: 22
sudo mv CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 9
sudo rm CUSTOM_PATH_DIR: 25
python -m pip install flake8: 83
USES: rbialon/flake8-annotations: 17
make flake: 7
USES: codespell-project/actions-codespell: 196
git config FLAG core.autocrlf false: 587
git config FLAG core.eol lf: 255
sudo apt-get install libasound2-dev: 46
go vet -v . CUSTOM_PATH_DIR: 16
go build -v . CUSTOM_PATH_DIR: 280
mkdir CUSTOM_PATH_DIR: 174
go mod edit -replace github.com CUSTOM_PATH_DIR: 34
go mod tidy: 388
go mod vendor: 91
go build -v .: 97
USES: actions-hub/docker/login: 14
USES: actions-hub/docker: 28
USES: aws-actions/configure-aws-credentials: 2099
USES: chetan/invalidate-cloudfront-action: 30
wget -c -nv "URL: 27
chmod a+x linuxdeployqt-continuous-x86_64.AppImage: 10
USES: svenstaro/upload-release-action: 1411
swift build -v: 44
docker tag ENV_VAR getsentry CUSTOM_PATH_DIR: 6
docker push getsentry CUSTOM_PATH_DIR: 9
yarn lint:js: 25
yarn test:unit:ci: 6
USES: bahmutov/npm-install: 576
yarn cypress install: 12
USES: fastify/github-action-merge-dependabot: 64
USES: dessant/lock-threads: 308
pip install -r requirements.txt: 1952
pip install -r requirements-dev.txt: 395
USES: ruby/setup-ruby: 3594
bundle install: 628
rubocop: 7
git config FLAG FLAG safe.directory ENV_VAR: 252
cmake -E make_directory build: 159
cmake FLAG . FLAG install: 46
yarn build-native-release: 14
npm install FLAG yarn: 56
ls -l packages CUSTOM_PATH_FILE: 10
node -e 'require(" CUSTOM_PATH_DIR: 19
docker run FLAG FLAG multiarch CUSTOM_PATH_DIR FLAG: 46
USES: addnab/docker-run-action: 274
sudo rm -Rf CUSTOM_PATH_DIR: 10
echo CUSTOM_PATH_FILE CUSTOM_PATH_DIR > .npmrc: 25
USES: actions-rs/cargo: 4563
echo "deb URL all main" | sudo tee CUSTOM_PATH_FILE: 16
echo "deb URL CUSTOM_PATH_DIR | sudo tee CUSTOM_PATH_FILE: 6
git clone URL: 1237
git pull: 268
git checkout master: 153
autoconf: 46
sudo make install: 893
USES: pnpm/action-setup: 2651
echo "STORE_PATH=$(pnpm store path)" >> ENV_VAR: 167
pnpm install: 1242
USES: vio/bundle-stats-action: 6
pip install FLAG pip: 540
pip install .[dev]: 114
python utils CUSTOM_PATH_FILE: 34
mypy src: 6
USES: adRise/update-pr-branch: 6
curl -XPOST -u "${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_TOKEN }}" -H "Accept: application CUSTOM_PATH_FILE-preview+json" -H "Content-Type: application CUSTOM_PATH_DIR URL FLAG '{"event_type": "deploy"}': 6
rm -rf ~ CUSTOM_PATH_DIR: 220
mkdir -p CUSTOM_PATH_DIR: 534
( cd CUSTOM_PATH_DIR && mvn dependency:get -DremoteRepositories=URL -Dartifact=com.github.java-json-tools:jackson-coreutils:2.0 ): 6
pwd: 620
cd registry: 31
git init: 166
git remote add origin "URL: 8
git fetch: 214
git checkout ${{ github.event.inputs.branch }}: 14
git branch FLAG=origin CUSTOM_PATH_DIR github.event.inputs.branch }}: 6
npm run init: 9
USES: mshick/add-pr-comment: 146
bundle exec rake compile: 51
bundle exec rake test: 204
python setup.py sdist: 385
pip install twine: 195
twine check dist CUSTOM_PATH_DIR: 264
pip install dist CUSTOM_PATH_FILE: 136
python -m pip install cibuildwheel: 59
python -m cibuildwheel FLAG wheelhouse: 128
npm ci FLAG: 617
node . CUSTOM_PATH_FILE: 342
npm run wp-env start: 21
npm install FLAG FLAG: 54
USES: ./.github/actions/setup-node: 185
USES: ./.github/actions/npm-install-dependencies: 11
USES: ./.github/actions/merge: 36
USES: ./.github/actions/install-oppia-dependencies: 32
python -m scripts.install_chrome_for_ci: 24
sudo apt install ffmpeg: 26
python -m scripts.build FLAG_env: 18
ls -la: 234
unzip build_files.zip: 7
rm build_files.zip: 8
echo "Files in . CUSTOM_PATH_DIR: 7
ls -la .: 17
echo "Files in oppia_tools:": 7
ls -la oppia_tools: 7
echo "Files in oppia:": 7
ls -la oppia: 7
echo "Files in build:": 7
ls -la oppia CUSTOM_PATH_DIR: 14
echo "Files in third_party:": 7
USES: ./.github/actions/send-webhook-notification: 29
echo "go-version=$(cat .go-version)" >> ENV_VAR: 6
echo "ENV_VAR": 575
git fetch FLAG: 312
make fmt-check: 16
make generate-check: 7
pip install coverage: 101
mdbook build: 125
yarn format:check: 55
USES: wagoid/commitlint-github-action: 195
echo "::set-output name=dir::$(pip cache dir)": 283
mkdir -p . CUSTOM_PATH_DIR: 493
echo ENV_VAR > . CUSTOM_PATH_DIR: 23
chmod +x micropython CUSTOM_PATH_DIR: 6
cd micropython: 9
USES: azure/docker-login: 158
libudev-dev \: 7
pkg-config \: 10
make ENV_VAR -C bricks CUSTOM_PATH_DIR: 7
pipx install poetry: 195
chmod +x gradlew: 1000
. CUSTOM_PATH_DIR dokkaHtml: 13
USES: snok/install-poetry: 415
poetry install FLAG FLAG: 95
source .venv CUSTOM_PATH_DIR: 213
pre-commit run FLAG: 188
USES: google-github-actions/auth: 735
USES: google-github-actions/setup-gcloud: 706
gcloud auth configure-docker: 83
USES: google-github-actions/deploy-cloudrun: 15
USES: tiloio/slack-webhook-action: 12
echo ENV_VAR: 1152
pnpm run setup: 6
pnpm run lint: 170
pnpm run test: 138
pnpm run coverage: 10
touch " CUSTOM_PATH_DIR: 19
cd build && make: 36
 CUSTOM_PATH_DIR: 54
pip3 install -r requirements.txt: 151
pip3 install .: 47
USES: release-drafter/release-drafter: 574
make install-ci: 17
make test-ci: 28
USES: cachix/cachix-action: 378
python -m pip install .: 298
twine upload FLAG dist CUSTOM_PATH_FILE: 16
USES: jetli/wasm-pack-action: 111
USES: moonrepo/setup-rust: 52
pnpm i: 271
USES: MarkusJx/install-boost: 22
pushd '. CUSTOM_PATH_DIR: 20
popd: 1325
pip install pre-commit: 184
pre-commit FLAG: 17
pre-commit install: 80
python -m pytest . CUSTOM_PATH_DIR: 13
echo "\`ENV_VAR\`" >>ENV_VAR: 6
USES: ./.github/actions/build-test-image: 8
USES: smartcontractkit/chainlink-github-actions/chainlink-testing-framework/run-tests: 11
USES: smartcontractkit/push-gha-metrics-action: 55
USES: arduino/setup-protoc: 408
docker-compose up -d: 265
mkdir -p ENV_VAR: 253
USES: styfle/cancel-workflow-action: 933
USES: arduino/compile-sketches: 41
USES: arduino/report-size-deltas: 10
USES: jacogr/action-merge: 7
make debug: 18
make format: 56
USES: microsoft/setup-msbuild: 1031
USES: step-security/harden-runner: 611
USES: rlespinasse/github-slug-action: 227
USES: cloudflare/pages-action: 55
USES: ./.github/actions/setup: 757
yarn : 14
yarn lint: 1201
USES: JasonEtco/upload-to-release: 20
pip install wheel: 382
pip install pytest: 493
PG_CONTAINER_NAME=$(docker ps FLAG expose=5432 CUSTOM_PATH_DIR FLAG {{.Names}}): 11
docker exec ENV_VAR psql -U ${{ env.pg_user }} -d ${{ env.pg_db }} -c "CREATE EXTENSION IF NOT EXISTS plv8;": 6
docker exec ENV_VAR psql -U ${{env.pg_user}} -d ${{ env.pg_db }} -c "DO 'plv8.elog(NOTICE, plv8.version);' LANGUAGE plv8;": 6
make all: 158
ROOT_DIR=`pwd`: 8
sudo apt-get install protobuf-compiler: 27
cargo install cargo-edit: 12
test -e ENV_VAR CUSTOM_PATH_FILE && cp -f ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR: 6
cd ENV_VAR: 1150
TAG=ENV_VAR CUSTOM_PATH_DIR: 13
sudo apt-get autoremove: 20
USES: pre-commit/action: 543
USES: AurorNZ/paths-filter: 10
USES: kuhnroyal/flutter-fvm-config-action: 65
USES: subosito/flutter-action: 1477
flutter pub global activate fvm 2.4.1: 24
fvm config FLAG '${{ runner.tool_cache }} CUSTOM_PATH_DIR: 28
fvm flutter pub global activate FLAG path "ENV_VAR": 20
echo $(realpath . CUSTOM_PATH_DIR >> ENV_VAR: 8
git diff FLAG: 541
echo $(pwd) CUSTOM_PATH_DIR >> ENV_VAR: 30
pip install setuptools wheel twine: 399
python setup.py sdist bdist_wheel: 783
twine upload dist CUSTOM_PATH_DIR: 577
npm update: 23
USES: notiz-dev/github-action-json-property: 110
USES: rishabhgupta/split-by: 6
USES: malmstein/github-asana-action: 15
flake8 . FLAG FLAG: 10
yarn install FLAG FLAG: 560
yarn ci: 51
USES: c-hive/gha-yarn-cache: 39
yarn test: 1494
git config FLAG user.name ${{ github.actor }}: 42
bundle exec rake release: 6
env: 281
go mod download: 631
go install golang.org CUSTOM_PATH_DIR: 259
sudo swapoff -a: 250
sudo rm -f CUSTOM_PATH_DIR: 170
sudo apt clean: 221
docker rmi $(docker image ls -aq): 125
df -h: 1089
ARCHIVE_FW="ENV_VAR CUSTOM_PATH_FILE": 78
ARCHIVE_FW_NAND="ENV_VAR CUSTOM_PATH_FILE": 10
echo "ARCHIVE_FW=ENV_VAR" >> ENV_VAR: 78
echo "ARCHIVE_FW_NAND=ENV_VAR" >> ENV_VAR: 10
make PLATFORM=hisilicon BOARD=unknown_unknown_ENV_VAR_ultimate all: 8
[[ $(stat FLAG="%s" ENV_VAR CUSTOM_PATH_DIR -gt 3145728 ]] && echo "TG_NOTIFY=Warning, kernel size exceeded : $(stat FLAG="%s" ENV_VAR CUSTOM_PATH_DIR ... ENV_VAR (ultimate)" >> ENV_VAR && exit 1: 8
[[ $(stat FLAG="%s" ENV_VAR CUSTOM_PATH_FILE) -gt 10485760 ]] && echo "TG_NOTIFY=Warning, rootfs size exceeded - $(stat FLAG="%s" ENV_VAR CUSTOM_PATH_FILE) vs 10485760... ENV_VAR (ultimate)" >> ENV_VAR && exit 1: 10
cd ENV_VAR CUSTOM_PATH_DIR: 1340
mv uImage uImage.ENV_VAR: 16
mv rootfs.squashfs rootfs.squashfs.ENV_VAR: 18
mv rootfs.ubi rootfs.ubi.ENV_VAR: 10
mv rootfs.ubifs rootfs.ubifs.ENV_VAR: 10
md5sum rootfs.squashfs.ENV_VAR > rootfs.squashfs.ENV_VAR.md5sum: 18
md5sum uImage.ENV_VAR > uImage.ENV_VAR.md5sum: 24
md5sum rootfs.ubifs.ENV_VAR > rootfs.ubifs.ENV_VAR.md5sum: 10
tar -cvzf ENV_VAR uImage* *rootfs.squashfs.ENV_VAR*: 10
tar -cvzf ENV_VAR uImage* *rootfs.ubi*.ENV_VAR*: 8
USES: conda-incubator/setup-miniconda: 1021
python -m pip install FLAG pip wheel: 199
echo "::set-output name=dir::$(python -m pip cache dir)": 21
python -m pip FLAG: 76
python -m pip install -r requirements CUSTOM_PATH_FILE: 142
python -m pip install . FLAG: 46
python -m xonsh run-tests.xsh test -- FLAG=240: 13
USES: actions-rs/audit-check: 170
USES: EmbarkStudios/cargo-deny-action: 180
USES: kentaro-m/auto-assign-action: 46
yarn global add node-gyp: 25
USES: actions/cache/restore: 827
USES: chromaui/action: 143
USES: changesets/action: 419
USES: peter-evans/repository-dispatch: 537
pip install flake8 pytest: 188
if [ -f requirements.txt ]; then pip install -r requirements.txt; fi: 509
USES: google-github-actions/release-please-action: 194
poetry install FLAG: 173
poetry run pytest: 116
echo ::set-output name=VERSION::ENV_VAR CUSTOM_PATH_DIR: 190
go vet . CUSTOM_PATH_DIR: 166
staticcheck -version: 6
USES: k0kubun/action-slack: 24
python setup.py install: 348
python .github CUSTOM_PATH_FILE: 138
USES: ljharb/require-allow-edits: 6
USES: artursouza/export-env-action: 12
curl -sL -o podman.pkg URL env.PODMAN_VERSION }} CUSTOM_PATH_FILE: 6
sudo installer -pkg podman.pkg -target /: 6
export PATH= CUSTOM_PATH_DIR: 187
echo " CUSTOM_PATH_DIR >> ENV_VAR: 273
sudo podman-mac-helper install: 6
podman machine init: 10
podman machine start FLAG debug: 6
echo "CONTAINER_RUNTIME=podman" >> ENV_VAR: 6
wget -q ${{ env.DAPR_INSTALL_URL }} CUSTOM_PATH_FILE -O - | CUSTOM_PATH_DIR -s ${{ env.DAPR_CLI_VERSION }}: 13
powershell -Command "\$$script=iwr -useb ${{ env.DAPR_INSTALL_URL }} CUSTOM_PATH_FILE1; \$$block=[ScriptBlock]::Create(\$$script); invoke-command -ScriptBlock \$$block -ArgumentList ${{ env.DAPR_CLI_VERSION }}": 13
export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}: 25
dapr init FLAG=${{ env.DAPR_RUNTIME_VERSION }}: 9
echo "PATH=ENV_VAR:ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 37
pip3 install setuptools wheel: 19
pip3 install mechanical-markdown: 14
make validate: 48
yarn prepare: 15
yarn lint FLAG 0: 23
make install-python: 8
. venv CUSTOM_PATH_DIR: 183
make docs: 168
USES: golangci/golangci-lint-action: 1432
USES: amannn/action-semantic-pull-request: 304
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> ENV_VAR: 67
ls -l ENV_VAR CUSTOM_PATH_DIR &&: 8
USES: machulav/ec2-github-runner: 103
git checkout gh-pages: 79
git checkout ${{ github.sha }}: 6
pip install poetry: 290
poetry install: 650
git push FLAG origin gh-pages: 9
sudo apt-get install libcurl4-openssl-dev: 17
bundle exec rake: 501
USES: Luet-lab/luet-install-action: 28
USES: actions-rs/grcov: 32
sudo rm -rf CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 135
sudo -E apt-get -qq update: 189
sudo -E apt-get -qq install python build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml subversion -y: 9
sudo -E apt-get -qq autoremove FLAG: 190
sudo -E apt-get -qq clean: 187
sudo timedatectl set-timezone "ENV_VAR": 165
sudo mkdir -p CUSTOM_PATH_DIR: 349
sudo chown ENV_VAR:ENV_VAR CUSTOM_PATH_DIR: 117
git clone ENV_VAR -b ENV_VAR gl-infra-builder: 21
ln -sf CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 140
git config FLAG user.name "github-actions[bot]": 395
git config FLAG user.email "github-actions[bot]": 158
python3 setup.py -c configs CUSTOM_PATH_FILE: 9
. CUSTOM_PATH_DIR update -a: 133
. CUSTOM_PATH_DIR install -a: 129
make defconfig: 197
USES: P3TERX/ssh2actions: 94
echo -e "$(nproc) thread compile": 190
make -j$(expr $(nproc) + 1) GL_PKGDIR= CUSTOM_PATH_DIR V=s: 21
echo "::set-output name=status::success": 288
grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's CUSTOM_PATH_DIR > DEVICE_NAME: 108
[ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> ENV_VAR: 95
echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> ENV_VAR: 95
make -j$(expr $(nproc) + 1)  V=s: 9
df -hT: 121
rm -rf packages: 98
echo "FIRMWARE=ENV_VAR" >> ENV_VAR: 115
curl -fsSL git.io CUSTOM_PATH_DIR | sh: 177
. CUSTOM_PATH_DIR wet -s -p 16 FLAG ENV_VAR 2>&1 | tee wetransfer.log: 102
echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)": 91
echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")": 69
echo "::set-output name=release_tag::AXT1800-$(date +"%Y.%m.%d-%H.%M")": 8
touch release.txt: 83
[ ENV_VAR = true ] && echo "- 🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt: 18
echo -e "## ✨ 主要功能\n1. argon主题\n2. argon主题设置\n3. 释放内存\n4. wol 网络唤醒\n5. 磁盘管理工具\n6. smartdns DNS防污染\n7. clash的图形代理软件\n8. aria2下载工具\n9. ZeroTier内网穿透\n10. Turbo ACC 网络加速(支持 Fast Path 或者 硬件 NAT)\n11. 迅雷快鸟\n12. CPU 性能优化调节\n13. ttyd 终端\n14. 微信 CUSTOM_PATH_DIR BT下载工具" >> release.txt: 13
USES: GitRML/delete-workflow-runs: 122
USES: dev-drprasad/delete-older-releases: 128
git config FLAG user.email "action": 429
git config FLAG user.name "GitHub Action": 421
USES: jossef/action-set-json-field: 13
git branch FLAG: 17
git add -u: 27
git commit FLAG FLAG: 19
USES: ad-m/github-push-action: 713
docker run FLAG -v `pwd`: CUSTOM_PATH_DIR -v `pwd` CUSTOM_PATH_FILE unifyai CUSTOM_PATH_DIR python3 -m pytest FLAG jax ivy CUSTOM_PATH_FILE: 28
git merge FLAG origin CUSTOM_PATH_DIR: 6
git config FLAG user.email "41898282+github-actions[bot]": 261
git add CHANGELOG.md: 28
USES: repo-sync/pull-request: 132
npm pack: 152
USES: peter-evans/create-or-update-comment: 786
npm clean-install: 135
curl FLAG '=https' FLAG.2 -LsSf URL | sh: 22
cat dist-manifest.json: 20
USES: swatinem/rust-cache: 60
echo "cargo dist ran successfully": 6
echo "paths<<EOF" >> "ENV_VAR": 6
jq FLAG ".artifacts[]?.path | select( . != null )" dist-manifest.json >> "ENV_VAR": 6
echo "EOF" >> "ENV_VAR": 9
python3 -m pip install -U pip setuptools: 10
pip install -U platformio: 391
cp . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 317
platformio run -e ${{ matrix.variant }}: 12
ls -R . CUSTOM_PATH_DIR: 58
curl -X POST URL \: 44
-H 'Accept: application CUSTOM_PATH_FILE-preview+json' \: 42
USES: gaurav-nelson/github-action-markdown-link-check: 282
USES: docker://avtodev/markdown-lint:v1: 15
USES: pypa/cibuildwheel: 422
pip install -U setuptools: 44
python -m pip install -r .github CUSTOM_PATH_FILE: 6
python -m build: 602
pip install sphinx sphinx_rtd_theme: 6
npm run build:release: 17
USES: octokit/request-action: 296
echo "::set-output name=url::$url": 11
dotnet tool restore: 90
cd docs: 442
pip install tox tox-gh-actions: 158
tox: 550
brew install autoconf automake: 11
USES: samuelmeuli/action-snapcraft: 54
pip install -r .github CUSTOM_PATH_FILE: 44
conan profile detect: 6
mkdir -p ~ CUSTOM_PATH_DIR: 870
cd ~ CUSTOM_PATH_DIR: 182
snapcraft FLAG: 10
chmod a+x ~ CUSTOM_PATH_DIR: 9
bundle exec standardrb: 19
pip install .[all]: 40
pip install build: 315
python -m build FLAG: 132
USES: seqan/actions/setup-cmake: 15
cmake .. CUSTOM_PATH_DIR: 36
USES: Pendect/action-rsyncer: 14
npm i: 831
npx semantic-release: 270
USES: getsentry/action-prepare-release: 35
USES: hmarr/debug-action: 51
cd emsdk: 39
source emsdk CUSTOM_PATH_FILE: 13
cmake FLAG . -j 2: 77
echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ FLAG: 32
VERSION=$(echo "${{ github.ref }}" | sed -e 's,.* CUSTOM_PATH_DIR: 187
[[ "${{ github.ref }}" == "refs CUSTOM_PATH_DIR ]] && VERSION=$(echo ENV_VAR | sed -e 's CUSTOM_PATH_DIR: 125
[ "ENV_VAR" == "master" ] && VERSION=latest: 85
echo VERSION=ENV_VAR: 191
docker push ENV_VAR:ENV_VAR: 184
USES: eps1lon/actions-label-merge-conflict: 46
cmake FLAG build: 388
mkdir staging: 23
poetry FLAG: 107
pipx install nox: 15
pipx inject nox nox-poetry: 8
nox FLAG: 29
import hashlib: 11
import sys: 18
python = "py{}.{}".format(*sys.version_info[:2]): 11
payload = sys.version.encode() + sys.executable.encode(): 11
digest = hashlib.sha256(payload).hexdigest(): 11
result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8]): 9
print("::set-output name=result::{}".format(result)): 10
git config FLAG core.symlinks true: 97
black .: 52
USES: vmactions/freebsd-vm: 120
brew update: 311
export PKG_CONFIG_PATH="ENV_VAR CUSTOM_PATH_DIR: 7
export DYLD_LIBRARY_PATH="ENV_VAR CUSTOM_PATH_DIR: 10
export PATH=ENV_VAR CUSTOM_PATH_DIR: 233
mkdir -p ${{ runner.temp }} CUSTOM_PATH_DIR: 13
time . CUSTOM_PATH_FILE: 6
composer update --${{ matrix.dependency-version }} FLAG FLAG: 56
vendor CUSTOM_PATH_DIR FLAG: 198
sudo apt-get install -y libopenblas-dev liblapacke-dev: 14
bundle config path vendor CUSTOM_PATH_DIR: 217
bundle install FLAG 4 FLAG 3: 315
USES: actions-ecosystem/action-get-merged-pull-request: 9
USES: actions-ecosystem/action-release-label: 13
USES: actions-ecosystem/action-get-latest-tag: 55
USES: actions-ecosystem/action-bump-semver: 11
USES: actions-ecosystem/action-push-tag: 9
USES: actions-ecosystem/action-create-comment: 9
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.NPM_TOKEN }}" > ~ CUSTOM_PATH_DIR: 54
USES: sergeysova/jq-action: 63
echo "VERSION=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 91
[[ "${{ steps.version.outputs.value }}" == "ENV_VAR" ]] && echo "Versions match": 27
pnpm publish FLAG FLAG public: 32
USES: apache/skywalking-eyes: 69
gem install cocoapods FLAG FLAG: 9
gem install xcpretty FLAG FLAG: 11
pod repo update FLAG: 6
pod install: 93
set -o pipefail: 193
mv ~ CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 9
export PATH=" CUSTOM_PATH_DIR: 217
curl FLAG: 16
swift build: 85
USES: actions/setup-ruby: 279
flutter build linux -v: 12
flutter doctor -v: 104
nix flake update: 10
git push: 988
pip install .: 854
pnpm run build: 364
pnpm run release: 14
dotnet workload install ios: 10
dotnet workload install android: 14
dotnet tool install FLAG dotnet-t4: 6
dotnet run: 12
bash <(curl -s URL: 376
npm install FLAG node-gyp: 13
npm prefix -g | % {npm config set node_gyp "ENV_VAR\node_modules\node-gyp\bin\node-gyp.js"}: 11
sudo apt-get install -y valgrind: 18
USES: ./.github/actions/dump-context: 28
USES: ./.github/actions/docker-build: 69
USES: ./.github/actions/notify-slack: 6
USES: ramsey/composer-install: 841
vendor CUSTOM_PATH_DIR FLAG FLAG=1G analyse FLAG=github: 8
vendor CUSTOM_PATH_DIR FLAG FLAG=false FLAG FLAG=github FLAG=$(nproc) FLAG FLAG=8.2: 8
echo "ENV_VAR" > . CUSTOM_PATH_DIR: 11
USES: vapier/coverity-scan-action: 42
npm run all: 43
tasks CUSTOM_PATH_DIR: 15
pip install FLAG pip wheel setuptools: 23
pip install -e .: 773
echo " CUSTOM_PATH_DIR | sudo tee CUSTOM_PATH_DIR: 6
ulimit -c unlimited: 106
echo "JAVA_HOME=ENV_VAR11_X64" >> ENV_VAR: 17
echo "ENV_VAR11_X64 CUSTOM_PATH_DIR >> ENV_VAR: 14
echo -n "ENV_VAR" | base64 FLAG | gpg FLAG: 12
sudo apt-get install -y graphviz-dev: 104
sudo apt-get install libcurl4-gnutls-dev: 106
USES: mamba-org/provision-with-micromamba: 209
pip install .[testing]: 127
mkdir -p .. CUSTOM_PATH_DIR: 49
USES: helm/kind-action: 405
export IMAGE="openkruise CUSTOM_PATH_DIR: 34
docker build FLAG FLAG . -t ENV_VAR: 35
kind load docker-image FLAG=ENV_VAR ENV_VAR || { echo >&2 "kind not installed or error loading image: ENV_VAR"; exit 1; }: 34
export KUBECONFIG= CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 12
make ginkgo: 12
set +e: 132
sudo timedatectl set-timezone "Asia CUSTOM_PATH_DIR : 143
sudo -E swapoff -a: 145
sudo -E rm -f CUSTOM_PATH_DIR: 145
sudo -E docker image prune -a -f: 145
sudo -E snap set system refresh.retain=2: 145
sudo -E apt-get -y purge dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*: 131
sudo -E apt-get -y autoremove FLAG: 152
sudo -E rm -rf CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 145
[ -n "ENV_VAR" ] && sudo rm -rf "ENV_VAR": 145
sudo -E apt-get update -y: 147
sudo -E apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev python3-setuptools: 87
pip install aligo: 135
sudo -E apt-get clean: 152
git config FLAG user.name 'GitHub Actions' && git config FLAG user.email 'noreply': 145
git clone FLAG 1 ENV_VAR -b ENV_VAR openwrt: 178
cd openwrt: 751
cp -f .. CUSTOM_PATH_FILE ./: 145
chmod +x . CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE: 197
[ -e ENV_VAR ] && mv ENV_VAR openwrt CUSTOM_PATH_DIR: 238
cd openwrt && make defconfig: 145
make download -j$(nproc): 174
find dl -size -1024c -exec ls -l {} \;: 253
find dl -size -1024c -exec rm -f {} \;: 265
make -j$(nproc) V=s: 148
time=$(date +%Y%m%d%H%M%S): 91
release_tag="$time": 134
echo "release_name=$release_name" >> ENV_VAR: 109
echo "release_tag=$release_tag" >> ENV_VAR       : 43
chmod u+x . CUSTOM_PATH_DIR: 21
python3 build-system CUSTOM_PATH_FILE: 20
python build-system CUSTOM_PATH_FILE: 6
erbb configure && erbb build && erbb build hardware && erbb build simulator: 16
erbb configure && erbb build && erbb build hardware && erbb build hardware FLAG && erbb build simulator: 6
grep "Loaded ErbPluginFaust" ENV_VAR CUSTOM_PATH_FILE: 6
grep "Loaded ErbPluginFlanger" ENV_VAR CUSTOM_PATH_FILE: 6
sudo apt-get install -y ninja-build: 34
python test CUSTOM_PATH_FILE: 43
sudo apt-get install libsndfile1: 32
python -m pip install -r requirements.txt: 298
python -m pip install coverage: 27
cp include CUSTOM_PATH_FILE ~ CUSTOM_PATH_DIR: 6
sudo chmod a+x CUSTOM_PATH_DIR: 53
sudo mv CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 76
sudo sealos version: 35
sudo apt install -y libtool-bin: 6
gcc FLAG: 223
make FLAG: 35
autoconf FLAG: 9
libtool FLAG: 6
ENV_VAR: 82
ENV_VAR tests: 7
ENV_VAR check: 7
dev CUSTOM_PATH_FILE: 13
USES: andymckay/cancel-action: 47
brew install gcc: 26
brew install make: 19
brew install gmp: 11
brew install autoconf: 12
brew install libtool: 16
brew install automake: 58
brew install openblas: 6
USES: cross-platform-actions/action: 57
clang FLAG: 100
cmake FLAG: 299
USES: msys2/setup-msys2: 716
cmake FLAG . -- -j4: 11
wget URL: 1761
. CUSTOM_PATH_DIR -v: 54
echo running on branch ENV_VAR##* CUSTOM_PATH_DIR: 9
. CUSTOM_PATH_DIR cleanManagedDevices FLAG: 6
bazelisk test CUSTOM_PATH_DIR: 7
bazelisk build CUSTOM_PATH_DIR: 12
docker build FLAG test .: 6
docker build FLAG lint .: 12
echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u qmcgaw FLAG 2>&1: 9
echo "dir=$(yarn cache dir)" >> ENV_VAR: 149
USES: getsentry/action-release: 97
yarn add  CUSTOM_PATH_DIR: 11
USES: SocialGouv/actions/autodevops-build-register: 6
invoke test: 18
invoke lint: 13
bundle install FLAG: 19
ninja: 185
cd tests: 266
ctest FLAG: 218
sudo rm CUSTOM_PATH_FILE: 43
sudo dpkg FLAG -a: 14
sudo add-apt-repository ppa:ubuntu-toolchain-r CUSTOM_PATH_DIR -y: 22
sudo apt upgrade: 22
sudo apt install build-essential checkinstall libegl-dev zlib1g-dev libssl-dev ninja-build autoconf libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw7-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxmuu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxss-dev libxt-dev libxtst-dev libxv-dev libxvmc-dev libxxf86vm-dev xtrans-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev xkb-data libxcb-dri3-dev uuid-dev libxcb-util-dev libxkbcommon-x11-dev pkg-config -y: 7
sudo apt install g++-13 gcc-13 -y: 11
sudo update-alternatives FLAG CUSTOM_PATH_DIR gcc CUSTOM_PATH_DIR 13: 11
sudo update-alternatives FLAG CUSTOM_PATH_DIR g++ CUSTOM_PATH_DIR 13: 11
conan profile new default FLAG: 47
conan config install URL: 23
conan config install URL -a "-b runner CUSTOM_PATH_DIR runner.os }} CUSTOM_PATH_DIR runner.arch }}": 14
conan config set storage.download_cache="ENV_VAR CUSTOM_PATH_DIR: 9
conan upload "*" -r cura FLAG -c: 8
. . CUSTOM_PATH_FILE: 111
cmake FLAG release: 8
USES: EnricoMi/publish-unit-test-result-action: 235
USES: nosborn/github-action-markdown-cli: 53
sudo apt-get update -y -qq: 72
mkdir -p build CUSTOM_PATH_DIR: 191
USES: ./.github/actions/post-test: 14
python3 -m pip install FLAG pip: 318
pip3 install -r test CUSTOM_PATH_FILE: 6
test CUSTOM_PATH_FILE: 64
ssh-agent -a ENV_VAR > CUSTOM_PATH_DIR: 30
ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}": 7
npm i -g yarn: 74
yarn docs:build: 52
export GPG_TTY=$(tty): 34
USES: snyk/actions/setup: 35
make check: 471
 CUSTOM_PATH_DIR FLAG: 42
python -m pip install -e .[dev]: 46
USES: DoozyX/clang-format-lint-action: 143
echo -en '\n' >> body.txt: 11
USES: eWaterCycle/setup-singularity: 6
python FLAG: 526
python -m pip install -U pip  # Official recommended way: 11
pip install -e .[full]: 6
ls -l: 162
cmake FLAG . FLAG Release: 181
.. CUSTOM_PATH_DIR: 78
echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M:%S %Z')": 7
USES: github/super-linter/slim: 49
git tag -n99 -l ENV_VAR: 8
dart FLAG: 93
flutter FLAG: 122
flutter upgrade: 29
dart pub get: 366
dart run tool CUSTOM_PATH_FILE: 16
export CGO_ENABLED=0: 11
USES: KyleMayes/install-llvm-action: 105
echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV: 44
echo "CURRENT_DATE=$(date +'%Y-%m-%d')" >> ENV_VAR: 34
echo "CURRENT_DATE=$(Get-Date -Format "yyyy-MM-dd")" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append: 25
sudo apt-get install libudev-dev libusb-1.0-0-dev: 114
rustup target add aarch64-apple-darwin: 77
cd lib CUSTOM_PATH_DIR: 28
USES: actions-ecosystem/action-regex-match: 62
. CUSTOM_PATH_DIR publishToSonatype: 13
fi: 267
USES: actions/stale: 1855
echo "Building with Go $(cat .go-version)": 19
make version: 18
echo "::set-output name=product-version::$(make version)": 6
USES: hashicorp/actions-generate-metadata: 16
USES: hashicorp/actions-packaging-linux: 16
echo "RPM_PACKAGE=$(basename out CUSTOM_PATH_FILE)" >> ENV_VAR: 11
echo "DEB_PACKAGE=$(basename out CUSTOM_PATH_FILE)" >> ENV_VAR: 11
cd "ENV_VAR": 103
USES: hashicorp/actions-docker-build: 24
cp LICENSE . CUSTOM_PATH_DIR: 6
npm install -g  CUSTOM_PATH_DIR  CUSTOM_PATH_DIR: 6
USES: crazy-max/ghaction-github-labeler: 58
python -m pip install -r . CUSTOM_PATH_FILE: 28
dotnet build: 111
USES: elgohr/Publish-Docker-Github-Action: 331
echo "::set-output name=date::$( CUSTOM_PATH_DIR -u "+%Y-%m")": 26
mvn clean install -DskipTests=true -DskipITs=true -Dformat.formatter.goal=validate -Dformat.imports.goal=check -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120: 13
USES: lukka/run-cmake: 173
sh .github CUSTOM_PATH_FILE: 83
make build: 815
npm run test: 1164
mkdir output: 45
git config user.name "GitHub Actions": 69
git add .: 1088
npm i -g pnpm: 89
pnpm i FLAG: 165
pnpm lint: 253
git clone URL ~ CUSTOM_PATH_DIR: 12
npm run build FLAG: 598
npm test: 2127
USES: jfrog/frogbot: 30
composer-normalize FLAG: 13
sudo sysctl -w vm.swappiness=1: 54
sudo sysctl -w fs.file-max=262144: 54
sudo sysctl -w vm.max_map_count=262144: 70
vendor CUSTOM_PATH_DIR: 475
git fetch origin main: 50
git checkout main: 111
USES: akhilerm/tag-push-action: 95
set -eux: 181
conda activate test: 64
conda install pytorch cpuonly -c pytorch-nightly: 8
pip install -r dev-requirements.txt: 73
python -m pip install FLAG pip setuptools: 173
python .. CUSTOM_PATH_FILE: 14
USES: egor-tensin/setup-gcc: 56
brew install coreutils: 83
pushd gui CUSTOM_PATH_DIR: 7
qmake CONFIG+=debug CONFIG+=ccache: 6
pushd tools CUSTOM_PATH_DIR: 7
sudo apt-get install libxml2-utils: 26
python3 -m pip install pip FLAG: 6
python3 -m pip install pytest: 22
tools CUSTOM_PATH_FILE: 237
cd test CUSTOM_PATH_DIR: 66
USES: actions-ecosystem/action-add-labels: 230
USES: quarto-dev/quarto-actions/setup: 15
USES: r-lib/actions/setup-pandoc: 155
Rscript -e 'install.packages("devtools")': 6
Rscript -e 'devtools::build()': 6
Rscript -e 'devtools::install()': 6
Rscript -e 'install.packages("pkgdown")': 6
Rscript -e 'pkgdown::build_site(". CUSTOM_PATH_DIR: 6
cp -R . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 42
quarto render: 13
echo "SHORT_SHA=`echo ENV_VAR | cut -c1-8`" >> ENV_VAR: 40
USES: zdurham/s3-upload-github-action: 13
USES: LouisBrunner/checks-action: 95
USES: ATiltedTree/setup-rust: 16
brew install FLAG xquartz: 25
USES: r-lib/actions/check-r-package: 53
yarn publish FLAG public: 15
git push origin main: 79
USES: borales/actions-yarn: 133
git config FLAG core.longpaths true: 188
make doctor: 6
flutter pub get: 886
flutter gen-l10n: 13
flutter build windows: 29
USES: jupyterlab/maintainer-tools/.github/actions/upload-coverage: 11
USES: jupyterlab/maintainer-tools/.github/actions/report-coverage: 10
hatch run test:nowarn || hatch run test:nowarn FLAG: 18
git status FLAG: 30
hatch run docs:build: 15
hatch run typing:test: 10
hatch run lint:style: 10
pipx run interrogate -v .: 7
pipx run doc8 FLAG=200: 6
USES: jupyterlab/maintainer-tools/.github/actions/make-sdist: 14
USES: jupyterlab/maintainer-tools/.github/actions/test-sdist: 14
USES: jupyter-server/jupyter_releaser/.github/actions/check-release: 29
USES: jupyterlab/maintainer-tools/.github/actions/check-links: 17
USES: re-actors/alls-green: 162
conda env list: 34
black FLAG FLAG .: 57
python3 -m pip install . -r requirements.txt: 8
python3 -m pip install -r . CUSTOM_PATH_FILE: 37
jupyter-book build docs: 8
npm publish: 732
USES: goto-bus-stop/setup-zig: 57
gh pr merge FLAG FLAG "ENV_VAR": 310
aclocal: 16
automake FLAG: 11
USES: py-actions/flake8: 31
mvn -B deploy: 11
npm run format-check: 44
npm run site: 6
composer install FLAG FLAG FLAG: 514
USES: GoogleCloudPlatform/github-actions/setup-gcloud: 73
docker tag ENV_VAR:latest eu.gcr.io CUSTOM_PATH_DIR: 7
docker push eu.gcr.io CUSTOM_PATH_DIR: 16
gcloud container clusters get-credentials ENV_VAR FLAG ENV_VAR FLAG ENV_VAR: 18
gcloud components install beta FLAG: 18
yes | gcloud beta container images add-tag eu.gcr.io CUSTOM_PATH_DIR eu.gcr.io CUSTOM_PATH_DIR: 11
kubectl config view: 30
kubectl config current-context: 18
kubectl patch deployment ENV_VAR -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"`date +'%s'`\"}}}}}" || kubectl apply -f . CUSTOM_PATH_FILE: 11
USES: readthedocs/actions/preview: 25
cargo fmt -- FLAG: 302
git config FLAG user.email ${{ github.actor }}: 19
npm run release: 119
rm -rf CUSTOM_PATH_DIR: 298
mvn clean install: 61
USES: peter-evans/find-comment: 217
USES: actions-ecosystem/action-remove-labels: 189
make install: 1263
USES: ./.github/actions/setup-environment: 31
. CUSTOM_PATH_DIR ENV_VAR clean jar: 6
npm t: 45
git clone FLAG URL: 71
node scripts CUSTOM_PATH_FILE: 307
echo ${{ steps.create-release-data.outputs.upload_url }} : 6
echo "${{ needs.release-data.outputs.upload_url }}": 6
echo "${{ env.UPLOAD_URL }}": 6
make -j$(sysctl -n hw.logicalcpu): 14
hdiutil create -fs HFS+ -srcfolder src CUSTOM_PATH_FILE -volname "Seamly2D" Seamly2D.dmg: 18
hdiutil create -fs HFS+ -srcfolder src CUSTOM_PATH_FILE -volname "SeamlyME" SeamlyME.dmg: 18
zip Seamly2D-macos.zip Seamly2D.dmg SeamlyME.dmg: 14
python -m pip install pytest: 86
git reset FLAG origin CUSTOM_PATH_DIR: 37
git remote set-url origin URL secrets.GITHUB_TOKEN }} CUSTOM_PATH_FILE: 24
USES: hashicorp/packer-github-actions: 24
curl FLAG '=https' FLAG.2 -sSf URL | sh: 12
docker run FLAG -v `pwd`: CUSTOM_PATH_DIR -v `pwd` CUSTOM_PATH_FILE unifyai CUSTOM_PATH_DIR python3 -m pytest FLAG torch ivy CUSTOM_PATH_FILE: 26
python3 -m pip install -U FLAG -r requirements.txt: 63
cd test: 598
python3 -m pytest FLAG FLAG=auto: 136
docker run FLAG FLAG multiarch CUSTOM_PATH_DIR FLAG -p yes: 239
export CCACHE_NOSTATS=1 && \: 137
export CCACHE_DIR= CUSTOM_PATH_DIR && \: 137
export CCACHE_SLOPPINESS=include_file_mtime && \: 137
export CC=\"ccache ENV_VAR\" && \: 137
pip3 install -U FLAG -r requirements.txt && \: 64
cd test && \: 137
python3 -m pytest FLAG FLAG=auto": 136
Set-ItemProperty -Path "HKLM:\\SOFTWARE\\Wow6432Node\\Microsoft\\.NetFramework\\v4.0.30319" -Name 'SchUseStrongCrypto' -Value '1' -Type DWord: 137
Set-ItemProperty -Path "HKLM:\\SOFTWARE\\Microsoft\\.NetFramework\\v4.0.30319" -Name "SchUseStrongCrypto" -Value '1' -Type DWord: 137
Invoke-WebRequest -OutFile "test\\astyle.exe" "URL: 137
python -m pip install -U FLAG -r requirements.txt: 126
python -m pytest FLAG FLAG=auto: 273
brew install astyle: 140
export PATH=" CUSTOM_PATH_DIR && export CC=gcc-11: 124
USES: s3krit/matrix-message-action: 35
USES: eskatos/gradle-command-action: 203
cd app CUSTOM_PATH_DIR: 11
ninja -C build: 77
cd doc: 61
make html: 319
USES: redhat-actions/buildah-build: 96
bash scripts CUSTOM_PATH_FILE: 372
USES: tibdex/github-app-token: 422
npm run dtslint: 7
cat ".github CUSTOM_PATH_DIR >> ENV_VAR: 13
export SHELL= CUSTOM_PATH_DIR: 33
kubectl wait FLAG=condition=Ready pods FLAG FLAG FLAG=300s: 6
kubectl cluster-info: 102
kubectl get pods -A: 88
kind load docker-image -n e2e quay.io CUSTOM_PATH_DIR rev-parse FLAG HEAD): 6
USES: ros-industrial/industrial_ci: 118
npm run security: 10
git config FLAG core.autocrlf input: 123
npm i webpack@${{ matrix.webpack-version }}: 11
npm run test:coverage -- FLAG: 17
NOW=$(date -u +"%F-%T"): 35
echo "timestamp=ENV_VAR" >> ENV_VAR: 31
USES: cygwin/cygwin-install-action: 43
USES: andstor/file-existence-action: 205
USES: pascalgn/automerge-action: 169
conda info -a: 54
sudo apt FLAG update: 21
python3 -m pip install -r ${{ github.workspace }} CUSTOM_PATH_FILE: 12
USES: SimenB/github-actions-cpu-cores: 72
USES: ashutoshvarma/action-cmake-build: 24
ls -la ${{ github.workspace }} CUSTOM_PATH_DIR: 8
${{ github.workspace }} CUSTOM_PATH_DIR: 8
ls -laR: 10
npm run compile: 203
cd . CUSTOM_PATH_DIR: 911
pip install -r . CUSTOM_PATH_FILE: 101
git config user.email bot: 9
cargo build FLAG: 711
cargo build: 284
cargo doc: 33
USES: DavidAnson/markdownlint-cli2-action: 37
previous_release_ref=$(. CUSTOM_PATH_FILE ${{github.base_ref}} ${{github.ref}}): 6
echo $previous_release_ref: 6
echo "previous_release_ref=${previous_release_ref}" >> ENV_VAR: 6
USES: frouioui/paths-filter: 148
sudo sysctl -w net.ipv4.ip_local_port_range="22768 65535": 109
sudo DEBIAN_FRONTEND="noninteractive" apt-get update: 12
sudo systemctl stop apparmor: 34
sudo DEBIAN_FRONTEND="noninteractive" apt-get remove -y FLAG mysql-server mysql-client mysql-common: 32
sudo apt-get -y autoremove: 33
sudo apt-get -y autoclean: 32
sudo deluser mysql: 32
sudo apt-key adv FLAG keyserver.ubuntu.com FLAG 467B942D3A79BD29: 97
wget -c URL: 119
echo mysql-apt-config mysql-apt-config CUSTOM_PATH_DIR select mysql-8.0 | sudo debconf-set-selections: 80
sudo DEBIAN_FRONTEND="noninteractive" dpkg -i mysql-apt-config*: 95
sudo DEBIAN_FRONTEND="noninteractive" apt-get install -y mysql-server mysql-client: 13
sudo service mysql stop: 206
sudo service etcd stop: 141
sudo bash -c "echo ' CUSTOM_PATH_DIR { }' > CUSTOM_PATH_FILE" # URL: 19
sudo ln -s CUSTOM_PATH_FILE CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 154
sudo apparmor_parser -R CUSTOM_PATH_FILE || echo "could not remove mysqld profile": 19
wget URL -sc)_all.deb: 38
sudo apt-get install -y gnupg2: 21
sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb: 22
sudo apt-get install -y percona-xtrabackup-24: 13
source build.env: 197
NOVTADMINBUILD=1 make build: 25
cp -R bin CUSTOM_PATH_DIR: 27
rm -Rf bin CUSTOM_PATH_DIR: 13
make minimaltools: 13
source build.env ; cd examples CUSTOM_PATH_DIR: 14
rm -f ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 8
cp CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 63
vttablet FLAG: 17
sleep 90: 20
source build.env ; cd examples ; source . CUSTOM_PATH_FILE: 7
chmod +x CUSTOM_PATH_DIR: 193
USES: dmnemec/copy_file_to_another_repo_action: 50
USES: azure/setup-helm: 471
wget URL env.KUBE_SCORE_VERSION }} CUSTOM_PATH_DIR env.KUBE_SCORE_VERSION }}_linux_amd64 -O kube-score: 8
chmod 755 kube-score: 8
helm template  FLAG charts CUSTOM_PATH_FILE charts CUSTOM_PATH_DIR | . CUSTOM_PATH_DIR score - FLAG pod-networkpolicy FLAG deployment-has-poddisruptionbudget FLAG deployment-has-host-podantiaffinity FLAG container-security-context FLAG pod-probes FLAG container-image-tag FLAG container-security-context-privileged FLAG container-security-context-readonlyrootfilesystem: 8
USES: helm/chart-testing-action: 143
echo 'deb [trusted=yes] URL CUSTOM_PATH_DIR | sudo tee CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_DIR version: 51
echo "ENV_VAR CUSTOM_PATH_DIR >> "ENV_VAR": 38
ct lint FLAG charts CUSTOM_PATH_FILE: 8
ct install FLAG charts CUSTOM_PATH_FILE: 8
npm set " CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.NPM_TOKEN }}": 7
USES: romeovs/lcov-reporter-action: 8
go version: 456
curl -L -O URL: 61
make manifests: 19
npm i -g npm: 215
npm run test:coverage: 95
echo "##[set-output name=branch;]$(echo ENV_VAR#refs CUSTOM_PATH_DIR: 182
echo -e "[pypi]" >> ~ CUSTOM_PATH_DIR: 6
echo -e "repository = URL >> ~ CUSTOM_PATH_DIR: 6
echo -e "username = __token__" >> ~ CUSTOM_PATH_DIR: 8
cd mitosheet: 10
rm -rf venv: 24
python3 -m venv venv: 58
source venv CUSTOM_PATH_DIR: 212
USES: peter-evans/close-issue: 59
(cd lib CUSTOM_PATH_DIR && composer update ${{ matrix.composer-flags }}): 9
(cd lib CUSTOM_PATH_DIR && vendor CUSTOM_PATH_DIR: 9
php .github CUSTOM_PATH_FILE: 17
cargo build FLAG FLAG ${{ matrix.target }}: 28
cargo test FLAG: 761
cargo test FLAG FLAG: 399
USES: carloscastrojumo/github-cherry-pick-action: 15
python3 ci CUSTOM_PATH_FILE | bash: 8
. CUSTOM_PATH_DIR -p judgels-backends CUSTOM_PATH_DIR check: 12
cd web: 49
USES: shimataro/ssh-key-action: 135
eval "$(ssh-agent -s)": 36
ssh-add deployment CUSTOM_PATH_DIR: 6
USES: yogevbd/enforce-label-action: 43
rustup default ${{ matrix.rust }}: 57
cargo doc FLAG FLAG FLAG: 43
cargo publish FLAG ENV_VAR: 10
pip install jwt requests: 12
python ci_tools CUSTOM_PATH_FILE: 17
vcpkg integrate install: 62
vcpkg install openssl:x64-windows: 10
USES: nuget/setup-nuget: 193
python -m pip install FLAG poetry: 21
poetry run flake8 . FLAG FLAG=E9,F63,F7,F82 FLAG FLAG: 6
poetry run flake8 . FLAG FLAG FLAG=10 FLAG=127 FLAG: 6
poetry run coverage xml: 31
echo "Create Checkout Directory: ${{ github.run_id }}.": 7
[ -z "${{ github.run_id }}" ] || rm -rf ${{ github.run_id }}: 7
mkdir ${{ github.run_id }}: 7
USES: andstor/copycat-action: 16
pip install pipenv: 99
pipenv install FLAG: 54
USES: fadenb/matrix-chat-message: 15
echo "go-version=$(cat .go-version)" >> "ENV_VAR": 10
make deps: 156
npm install -g yarn: 376
USES: ./.github/actions/vault-secrets: 8
cd packages: 37
USES: dart-lang/setup-dart: 666
npm install -g surge: 13
USES: marocchino/sticky-pull-request-comment: 261
yarn FLAG FLAG: 147
USES: sphinx-notes/pages: 14
USES: appleboy/ssh-action: 346
git submodule init: 105
git submodule update: 105
brew install tree: 15
.\install.ps1 -RunAsAdmin: 11
dir: 115
ls -lah CUSTOM_PATH_DIR: 11
ls CUSTOM_PATH_FILE: 6
USES: aliencube/microsoft-teams-actions: 11
sudo DEBIAN_FRONTEND=noninteractive apt-get update: 42
make -j ENV_VAR: 14
ARTIFACT_NAME=$(basename ENV_VAR): 12
echo "ARTIFACT_NAME=ENV_VAR" >> ENV_VAR: 9
cd bin CUSTOM_PATH_DIR: 36
dotnet build -c Release: 96
sudo apt install doxygen: 8
git config FLAG user.name 'Github Action': 6
doxygen: 25
cd docs CUSTOM_PATH_DIR: 74
cat config CUSTOM_PATH_FILE: 15
west init -l config: 15
west update: 31
west zephyr-export: 30
west build -s zmk CUSTOM_PATH_DIR -b ${{ matrix.board }} -- ${{ steps.variables.outputs.shield-arg }} -DZMK_CONFIG="ENV_VAR CUSTOM_PATH_DIR: 17
USES: mislav/bump-homebrew-formula-action: 75
echo "No build required" : 34
echo "::set-output name=date::$(date +'%Y-%m')": 17
USES: mheap/phpunit-matcher-action: 11
composer stan-setup: 8
USES: actions/first-interaction: 313
USES: 8398a7/action-slack: 478
curl -L URL | tar xz: 12
git config FLAG user.email "actions": 138
git add README.md: 36
cd ENV_VAR CUSTOM_PATH_FILE: 9
USES: slackapi/slack-github-action: 484
mkdir -p m4: 13
tesseract -v: 16
lstmtraining -v: 13
text2image -v: 13
git clone URL tessdata_unittest: 16
cp tessdata_unittest CUSTOM_PATH_DIR test CUSTOM_PATH_DIR: 11
mv tessdata_unittest CUSTOM_PATH_DIR ../: 15
tesseract test CUSTOM_PATH_FILE -  FLAG .. CUSTOM_PATH_DIR: 9
tesseract test CUSTOM_PATH_FILE - -l hin+eng  FLAG .. CUSTOM_PATH_DIR: 9
cat test-suite.log: 22
${{ matrix.config.cxx }} FLAG: 8
git log -3 FLAG=format:'%h %ad %s | %an': 6
USES: goreleaser/goreleaser-action: 1235
USES: ./: 1035
npx playwright install-deps: 62
USES: stefanzweifel/git-auto-commit-action: 988
cd dashboard: 23
npm run audit: 31
make dev-setup: 6
make ${{ matrix.target }}: 19
USES: cycjimmy/semantic-release-action: 160
curl -H 'Cache-Control: no-cache' URL | bash: 8
fossa analyze FLAG: 9
USES: oleksiyrudenko/gha-git-credentials: 18
pip3 install poetry: 10
USES: engineerd/setup-kind: 123
set -euo pipefail: 389
USES: hadolint/hadolint-action: 85
USES: geekyeggo/delete-artifact: 216
which python: 153
pip FLAG: 261
labelme FLAG: 6
(cd examples CUSTOM_PATH_DIR && rm -rf data_dataset_voc && . CUSTOM_PATH_FILE data_annotated data_dataset_voc FLAG labels.txt && git checkout -- .): 12
pip install pyinstaller: 63
dist CUSTOM_PATH_DIR FLAG: 17
choco install ffmpeg: 7
tox -vv: 8
python -m pip install -U tox: 23
echo "VERSION=ENV_VAR#v}" >> ENV_VAR: 22
USES: marvinpinto/action-automatic-releases: 414
bundle exec rubocop: 164
git config FLAG user.name 'github-actions[bot]': 68
git config FLAG user.email 'github-actions[bot]': 53
pip install -r "${{ env.REQUIREMENTS_PATH }}": 18
USES: fkirc/skip-duplicate-actions: 269
ls -latr build-tools CUSTOM_PATH_DIR: 8
php -r "file_exists('system CUSTOM_PATH_FILE') || copy('tests CUSTOM_PATH_FILE', 'system CUSTOM_PATH_FILE');": 9
composer install FLAG FLAG FLAG FLAG FLAG: 55
cpack: 65
mkdir data: 121
pip install black flake8: 8
dotnet add src CUSTOM_PATH_FILE package GitHubActionsTestLogger: 9
dotnet test FLAG GitHubActions tests CUSTOM_PATH_FILE: 29
USES: azure/login: 361
pip install . CUSTOM_PATH_DIR: 43
. CUSTOM_PATH_DIR spotlessCheck: 49
. CUSTOM_PATH_DIR build: 667
pip install Cython: 15
pip install torch: 28
python -m pytest: 118
Invoke-WebRequest -Uri URL -OutFile protobuf-3.11.2.zip: 17
7z x . CUSTOM_PATH_FILE: 17
cd protobuf-3.11.2: 17
cmake FLAG . FLAG Release -j 2: 104
cmake FLAG . FLAG Release FLAG install: 70
Invoke-WebRequest -Uri URL -OutFile VulkanSDK.exe: 12
$installer.WaitForExit();: 13
cd swiftshader: 22
git -c submodule."third_party CUSTOM_PATH_FILE=none submodule update FLAG FLAG: 7
$env:VULKAN_SDK="C: CUSTOM_PATH_DIR: 22
$env:Path+=";C: CUSTOM_PATH_DIR: 25
mkdir build; cd build: 44
cd build; ctest -C Release FLAG -j 2: 7
mkdir build-shared; cd build-shared: 15
make clean: 473
make clean && make: 19
call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat": 33
go get -v -t -d . CUSTOM_PATH_DIR: 181
echo ::set-output name=tag::ENV_VAR#refs CUSTOM_PATH_DIR: 109
conda config FLAG: 52
printenv | sort: 29
pip install flake8: 379
flake8 . FLAG FLAG=E9,F63,F7,F82 FLAG FLAG: 555
flake8 . FLAG FLAG FLAG=10 FLAG=127 FLAG: 426
pip install pytest-cov: 121
USES: lannonbr/vsce-action: 18
node -p -e '`PACKAGE_VERSION=${require(". CUSTOM_PATH_FILE}`' >> ENV_VAR: 8
USES: mindsers/changelog-reader-action: 80
USES: calibreapp/image-actions: 31
git commit -m "COMMIT_MSG" -a: 130
pip list: 390
pip install safety: 6
USES: dawidd6/action-send-mail: 78
mkdir build && cd build: 439
cmake FLAG . -j 4: 31
cd build && ctest FLAG -j 4: 7
lcov -d . CUSTOM_PATH_DIR -c -o lcov.info: 6
lcov -r lcov.info ' CUSTOM_PATH_DIR -o lcov.info: 7
lcov -r lcov.info '* CUSTOM_PATH_DIR -o lcov.info: 7
lcov FLAG lcov.info: 6
sudo apt-get install lcov: 23
USES: petarpetrovt/setup-sde: 10
USES: ./.github/actions/build_micro_service_ko: 9
echo "dir=$(pip cache dir)" >> ENV_VAR: 73
make lint: 580
USES: octokit/graphql-action: 91
brew install cmake ninja: 23
ninja FLAG: 48
make tools: 82
cmake -DCMAKE_BUILD_TYPE=Release .: 7
bash . CUSTOM_PATH_DIR assembleDebug FLAG: 6
bash . CUSTOM_PATH_DIR assembleRelease: 13
USES: r0adkll/sign-android-release: 177
${{ matrix.run }}: 6
docker info: 46
docker buildx version: 9
docker buildx ls: 13
docker buildx inspect FLAG: 18
.: 89
cd compiler CUSTOM_PATH_DIR: 8
composer install FLAG FLAG: 405
echo ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 77
source ENV_VAR CUSTOM_PATH_FILE: 215
conda install -y python=3.10.10: 6
source activate: 33
conda init: 19
. CUSTOM_PATH_FILE ${{ matrix.backends }} test_${{ matrix.submodules }} ${{ secrets.REDIS_CONNECTION_URL }} ${{ secrets.REDIS_PASSWORD}}: 9
USES: BSFishy/pip-action: 56
python3 update_db.py "ENV_VAR" ${{ github.workflow }} "${{ matrix.backends }}-${{ matrix.submodules }}" ${{ steps.tests.outcome }} ${{ github.run_id }}: 9
mypy .: 53
USES: peterjgrainger/action-changelog-reminder: 8
USES: expo/expo-github-action: 52
echo "fs.aio-max-nr = 1048576" | sudo tee -a CUSTOM_PATH_FILE: 117
sudo sysctl -p CUSTOM_PATH_FILE: 117
sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd curl git wget eatmydata xz-utils libncurses5: 63
sudo apparmor_parser -R CUSTOM_PATH_FILE: 141
pip3 install FLAG launchable~=1.0 > CUSTOM_PATH_DIR: 115
launchable verify || true: 115
launchable record build FLAG "ENV_VAR" FLAG FLAG .: 79
export VTDATAROOT=" CUSTOM_PATH_DIR: 113
set -exo pipefail: 90
ulimit -n 65536: 18
cat <<-EOF>>. CUSTOM_PATH_FILE: 30
innodb_buffer_pool_dump_at_shutdown=OFF: 16
innodb_buffer_pool_in_core_file=OFF: 13
innodb_buffer_pool_load_at_startup=OFF: 16
innodb_buffer_pool_size=64M: 16
innodb_doublewrite=OFF: 16
innodb_flush_log_at_trx_commit=0: 16
innodb_flush_method=O_DIRECT: 16
innodb_numa_interleave=ON: 16
innodb_adaptive_hash_index=OFF: 16
sync_binlog=0: 16
sync_relay_log=0: 16
performance_schema=OFF: 16
slow-query-log=OFF: 16
binlog-transaction-compression=ON: 14
cmake -B ${{ env.build }}: 13
USES: microsoft/msvc-code-analysis-action: 33
pip install tox: 614
tox -e py: 165
source tools CUSTOM_PATH_FILE: 31
echo "ARCHIVE=ENV_VAR" >> ENV_VAR: 8
cargo clippy -- -D warnings: 99
FLAG: 84
chmod 0600 ENV_VAR CUSTOM_PATH_DIR: 55
ls: 419
chmod +x "ENV_VAR CUSTOM_PATH_FILE": 23
"ENV_VAR CUSTOM_PATH_FILE": 60
cd benchmark: 7
nvidia-smi: 74
USES: mamba-org/setup-micromamba: 236
micromamba list: 39
pip install -U -r . CUSTOM_PATH_FILE: 10
pip install -r maro CUSTOM_PATH_FILE: 7
python setup.py build_ext -i: 21
USES: metcalfc/changelog-generator: 37
cat << "EOF": 7
${{ steps.changelog.outputs.changelog }}: 7
): 47
log="${log CUSTOM_PATH_DIR: 19
poetry build: 291
. CUSTOM_PATH_DIR assembleDebug: 130
cmake -B ${{github.workspace}} CUSTOM_PATH_DIR -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}: 109
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG ${{env.BUILD_TYPE}}: 232
npm install FLAG FLAG . CUSTOM_PATH_DIR: 63
USES: ./actions/commands: 12
cd src: 189
make -j4: 218
git config FLAG user.email 'ci': 6
USES: sigstore/cosign-installer: 358
USES: anchore/sbom-action/download-syft: 64
cargo install cross: 74
sudo add-apt-repository universe: 24
sudo apt install libfuse2: 12
USES: skjolber/maven-cache-github-action: 26
USES: tibdex/autosquash: 8
export PATH=ENV_VAR:$(go env GOPATH) CUSTOM_PATH_DIR: 55
tag=$(echo ENV_VAR | cut -d/ -f3-): 14
echo "tag=$tag" >> ENV_VAR: 7
USES: nschloe/action-cached-lfs-checkout: 20
sudo .github CUSTOM_PATH_FILE: 16
uname -a: 380
lsb_release -sd: 130
echo "whoami: $(whoami)": 168
echo "pwd: $(pwd)": 168
echo "node: $(node FLAG)": 48
echo "npm: $(npm FLAG)": 46
ls -lLA: 168
env | sort | egrep '^[^ \t]+=': 168
rm -rf * .git*: 123
npm install FLAG=global xpm@${{ github.event.inputs.xpm_version }}: 41
xpm FLAG: 42
xpm install FLAG ${{ github.event.inputs.xpm_install_loglevel }} ${{ github.event.inputs.xpm_install_options }}: 41
xpm install FLAG linux-arm64 FLAG ${{ github.event.inputs.xpm_install_loglevel }} ${{ github.event.inputs.xpm_install_options }}: 9
xpm run build FLAG linux-arm64: 9
mv -v build build-$(date -u +%Y%m%d-%H%M%S): 41
sh ~ CUSTOM_PATH_FILE: 10
virtualenv FLAG: 6
tox FLAG: 62
pip list FLAG=freeze: 7
tox -e ${{ matrix.tox_env }} -v: 6
USES: wei/curl: 42
USES: davidB/rust-cargo-make: 33
USES: tj-actions/verify-changed-files: 46
USES: mhausenblas/mkdocs-deploy-gh-pages: 64
USES: actions-rs/clippy-check: 315
sudo apt-get -qq update: 115
scons FLAG: 22
wget -q URL: 187
scons -C target CUSTOM_PATH_DIR -j4: 11
yarn prettier:check: 52
echo "RELEASE_VERSION=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 262
sudo apt-get update;: 38
sudo apt-get install pandoc: 44
npm run cypress:run: 14
cd gh-pages: 95
git push origin gh-pages: 65
cat CUSTOM_PATH_DIR: 296
echo "Only Test or Prod can be used.": 10
pip install FLAG setuptools wheel twine: 25
pip freeze: 265
find . CUSTOM_PATH_DIR -name '*.whl' -exec pip install {} \;: 14
USES: denolib/setup-deno: 52
deno FLAG: 21
deno run . CUSTOM_PATH_FILE: 6
echo "free space before cleanup:": 6
sudo rm -rf CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
echo "free space after cleanup:": 18
. CUSTOM_PATH_FILE stable: 156
sudo npm i -g firebase-tools: 24
. CUSTOM_PATH_FILE android: 25
cd . CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE: 34
flutter config FLAG: 256
. CUSTOM_PATH_FILE ios: 41
. CUSTOM_PATH_FILE macos: 25
. CUSTOM_PATH_FILE web: 15
USES: nick-fields/retry: 781
rm -rf . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 7
git add -A: 256
which python3: 18
echo "::set-output name=pnpm_cache_dir::$(pnpm store path)": 151
pnpm install FLAG: 616
pnpm build: 593
pnpm test: 324
pip install coverage "tox>=3,<4": 58
echo "One of the dependent jobs has failed. You may need to re-run it." && exit 1: 58
export MAVEN_OPTS="ENV_VAR": 64
USES: Gr1N/setup-poetry: 114
USES: lycheeverse/lychee-action: 129
composer update FLAG FLAG: 193
composer test: 127
composer phpcs: 16
USES: 10up/action-wordpress-plugin-deploy: 63
echo "dir=$(npm config get cache)" >> ENV_VAR: 70
npm ci || npm install: 26
npm run docs:build: 67
make tidy: 17
python -m pip install FLAG pip requests wheel urllib3 chardet: 8
git config FLAG user.email "you": 51
git config FLAG user.name "Your Name": 49
make ensure: 30
cd sdk CUSTOM_PATH_DIR && make lint: 11
go test . CUSTOM_PATH_DIR: 315
USES: hynek/build-and-inspect-python-package: 30
docker run \: 36
-v ${{ github.workspace }}: CUSTOM_PATH_DIR -v ${{ github.workspace }} CUSTOM_PATH_DIR \: 7
. CUSTOM_PATH_DIR -B package -Djava.version=${{ matrix.java }}: 9
cd apps CUSTOM_PATH_DIR: 60
docker build . FLAG ENV_VAR CUSTOM_PATH_DIR github.sha }}: 6
echo "Tagging with latest": 6
docker tag ENV_VAR CUSTOM_PATH_DIR github.sha }} ENV_VAR CUSTOM_PATH_DIR: 6
echo "Pushing image": 10
docker push ENV_VAR CUSTOM_PATH_DIR github.sha }}: 6
docker push ENV_VAR CUSTOM_PATH_DIR: 237
echo "Done": 25
USES: Mattraks/delete-workflow-runs: 98
cd . CUSTOM_PATH_DIR && npm ci: 17
rm -rf node_modules CUSTOM_PATH_DIR: 29
locale -a: 24
python -m pip install -U pip wheel: 17
git pull || true: 6
then: 73
git config user.email "41898282+github-actions[bot]": 74
git commit -m "COMMIT_MSG" -a || true: 63
git push || true: 12
export LLVM_DIR=" CUSTOM_PATH_DIR: 6
export CC=clang: 82
export CXX=clang++: 75
export LD_LIBRARY_PATH=ENV_VAR CUSTOM_PATH_DIR: 47
export WASMEDGE_DIR="$(pwd) CUSTOM_PATH_DIR: 22
USES: browser-actions/setup-firefox: 64
firefox FLAG: 28
yarn size: 18
yarn release: 80
USES: android-actions/setup-android: 134
USES: microsoft/playwright-github-action: 44
hack CUSTOM_PATH_FILE: 99
go test -v . CUSTOM_PATH_DIR: 381
echo "Event '${{ github.event.action }}' with tag: '${{ github.event.client_payload.tag }}'": 12
echo ::set-output name=TAG::${{ github.event.client_payload.tag }}: 14
echo ::set-output name=docker_username::${{ secrets.DOCKER_USERNAME }}: 14
echo ::set-output name=docker_image::nethermind CUSTOM_PATH_DIR: 11
USES: crazy-max/ghaction-docker-buildx: 99
echo "ENV_VAR" | docker login FLAG "${{ steps.settings.outputs.docker_username }}" FLAG: 14
rm -f ENV_VAR CUSTOM_PATH_FILE: 64
npm install -g vsce: 45
vsce publish -p ENV_VAR: 7
USES: ossf/scorecard-action: 327
USES: buildsville/add-remove-label: 32
pip install numpy: 59
node tools CUSTOM_PATH_FILE: 14
yarn FLAG FLAG FLAG: 47
pushd ENV_VAR: 46
unzip Rack-SDK.zip: 6
USES: FranzDiebold/github-env-vars-action: 27
mvn clean install -DskipTests: 29
echo "org.gradle.jvmargs=-Xmx2g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError" > ENV_VAR CUSTOM_PATH_FILE: 11
. CUSTOM_PATH_FILE sudo apt-get update -y: 11
. CUSTOM_PATH_FILE sudo apt-get install libmysqlclient-dev zlib1g-dev libpcre3-dev -y: 11
USES: egor-tensin/setup-clang: 41
mkdir cbuild && cd cbuild: 11
make -j2: 292
USES: dessant/label-actions: 28
bundle exec rake spec: 91
yarn run package: 12
dart format FLAG .: 108
flutter analyze FLAG FLAG .: 13
flutter test FLAG FLAG: 10
USES: VeryGoodOpenSource/very_good_coverage: 53
USES: google-github-actions/get-gke-credentials: 58
echo "ENV_VAR" > ~ CUSTOM_PATH_DIR: 91
chmod 600 ~ CUSTOM_PATH_DIR: 188
chmod 700 ~ CUSTOM_PATH_DIR && chmod 600 ~ CUSTOM_PATH_DIR: 20
git clone ENV_VAR ENV_VAR: 7
git config FLAG user.name ENV_VAR: 47
git config FLAG user.email ENV_VAR: 38
git remote remove origin: 9
USES: XAMPPRocky/get-github-release: 17
cargo check FLAG FLAG: 63
cmake FLAG . FLAG 2: 16
USES: axel-op/dart-package-analyzer: 23
. CUSTOM_PATH_DIR FLAG=github: 29
build CUSTOM_PATH_FILE: 51
python -c "import sys; print(sys.executable)": 7
Invoke-WebRequest -Uri URL -OutFile latest.zip: 11
dotnet build -c release: 6
git commit -m "COMMIT_MSG" || true: 93
echo "No build required": 205
python -m pip install black: 13
${{ matrix.deps }}: 60
USES: RustCrypto/actions/cross-install: 13
cargo login ${{ secrets.ORG_CRATES_IO_TOKEN }}: 6
git config FLAG user.name "${{ github.event.pusher.name }}": 19
git config FLAG user.email "${{ github.event.pusher.email }}": 19
USES: jbolda/covector/packages/action: 31
USES: tauri-apps/create-pull-request: 15
USES: benc-uk/workflow-dispatch: 208
python setup.py sdist FLAG=gztar,zip: 6
python setup.py bdist_wheel: 197
pip install . CUSTOM_PATH_FILE: 28
rm . CUSTOM_PATH_FILE: 105
USES: actions-cool/pr-welcome: 6
echo ${{ needs.update-packagejson.outputs.sha }}: 12
USES: Cysharp/Actions/.github/actions/setup-dotnet: 11
dotnet test -c Release FLAG: 11
USES: Cysharp/Actions/.github/actions/unity-builder: 13
USES: Cysharp/Actions/.github/actions/check-metas: 9
cp example.env .env: 6
cd pkg CUSTOM_PATH_DIR \: 8
&& go test -v: 7
docker version: 84
cd "ENV_VAR CUSTOM_PATH_DIR: 66
cat .env: 49
USES: cytopia/shell-command-retry-action: 19
USES: vimtor/action-zip: 124
echo "STORE_PATH=$(pnpm store path FLAG)" >> ENV_VAR: 20
pnpm typecheck: 40
cmake -E make_directory ${{ runner.workspace }} CUSTOM_PATH_DIR: 23
cmake FLAG .: 396
export GO111MODULE="on" && go install github.com CUSTOM_PATH_DIR: 7
make test-sim-multi-seed-long: 6
bash script CUSTOM_PATH_DIR: 9
pip install requests: 92
USES: JasonEtco/create-an-issue: 115
make juicefs: 7
helm repo update: 49
kubectl apply -f .github CUSTOM_PATH_FILE: 7
USES: lhotari/action-upterm: 62
USES: technote-space/workflow-conclusion-action: 118
USES: juicedata/slack-notify-action: 63
echo "All Done": 22
sudo Xvfb -ac :99 -screen 0 1280x1024x24 > CUSTOM_PATH_DIR 2>&1 &: 36
npm run e2e: 31
npm run setup: 56
pip install -e .[test]: 131
USES: Wandalen/wretry.action: 61
pip install bandit: 17
yarn coverage: 60
USES: potiuk/cancel-workflow-runs: 55
USES: ./.github/workflows/actions/install-node: 7
USES: ./.github/workflows/actions/build: 12
USES: google/mirror-branch-action: 13
USES: requarks/changelog-action: 6
wget -qO- URL | sudo tee CUSTOM_PATH_FILE: 7
sudo wget -qO CUSTOM_PATH_FILE URL: 18
git clone URL FLAG 1: 63
nodejs_bin CUSTOM_PATH_FILE: 30
bin CUSTOM_PATH_DIR: 159
python -m pip install "poetry": 6
python -m poetry install: 37
python tools CUSTOM_PATH_FILE: 48
echo "::set-output name=date::$(date +'%Y-%m-%d')": 89
echo "OPENSSL_ROOT_DIR= CUSTOM_PATH_DIR >> ENV_VAR: 7
sudo sed -i 's CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 39
USES: sreimers/pr-dependency-action: 11
sudo ldconfig: 95
rm -Rf build: 14
. CUSTOM_PATH_DIR FLAG=coverage.xml: 12
vendor CUSTOM_PATH_DIR analyze: 18
mvn install:install-file -Dfile=lib CUSTOM_PATH_FILE -DpomFile=lib CUSTOM_PATH_FILE: 24
USES: tj-actions/docker-run: 18
make ci: 99
pip install pylint: 85
sudo apt-get install libcairo2-dev mercurial pkg-config wget -y: 11
gem install package_cloud: 23
wget "URL && chmod +x . CUSTOM_PATH_FILE: 11
make image: 21
docker image prune -a -f: 46
docker pull quay.io CUSTOM_PATH_DIR: 12
echo "No tests required": 18
sudo apt-get update -y: 405
sudo apt-get install -y libxml2-utils: 10
echo '${{ toJSON(matrix) }}': 10
pip install -r "ENV_VAR CUSTOM_PATH_FILE": 13
mkdir test: 14
pushd test: 6
export PATH=ENV_VAR: CUSTOM_PATH_DIR: 156
git config FLAG user.name "sieve": 99
git config FLAG user.email "sieve": 99
echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" FLAG: 101
GO111MODULE="on" go install sigs.k8s.io CUSTOM_PATH_DIR: 37
kind: 98
tar -zxvf helm-v3.6.0-linux-amd64.tar.gz: 92
sudo mv linux-amd64 CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 100
helm: 92
echo "{\"workload_conditional_wait_timeout\": 1000}" > sieve_config.json: 32
cat sieve_config.json: 91
python3 sieve.py -c examples CUSTOM_PATH_DIR -w recreate -m learn FLAG -r ENV_VAR: 8
kind delete cluster: 80
docker image prune -a -f && docker builder prune -a -f && docker system df: 73
USES: mathieudutour/github-tag-action: 93
USES: mikepenz/release-changelog-builder-action: 133
git fetch origin: 52
git pull origin master: 21
dotnet build FLAG Release FLAG: 169
dotnet test FLAG Release FLAG FLAG normal: 8
python -m pip install build FLAG: 173
python setup.py sdist bdist_wheel FLAG: 23
USES: driskell/log-courier/.github/actions/rpm: 8
USES: browser-actions/setup-chrome: 116
cd packages CUSTOM_PATH_DIR: 554
pnpm compile: 13
USES: DeLaGuardo/setup-clojure: 20
sudo apt install -y ninja-build: 27
sudo apt install libasound2-dev -y: 12
USES: mymindstorm/setup-emsdk: 151
npm install -g ganache: 10
semgrep ci: 59
set -xe: 157
python -VV: 91
python -m site: 54
python -m pip install FLAG tox tox-gh-actions: 38
pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE): 10
coverage lcov: 10
bin CUSTOM_PATH_FILE: 132
python3 FLAG: 107
USES: ./.github/actions/setup-build-env: 41
USES: Yikun/hub-mirror-action: 45
cd tools: 53
aws ecr-public get-login-password FLAG us-east-1 | docker login FLAG AWS FLAG public.ecr.aws: 6
USES: nrwl/nx-set-shas: 107
npm audit signatures: 27
docker buildx build FLAG "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}: 9
docker buildx build FLAG "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}: 12
gcloud FLAG auth configure-docker: 59
docker push "ENV_VAR:ENV_VAR": 26
go get github.com CUSTOM_PATH_DIR: 151
gcloud container clusters get-credentials "ENV_VAR" FLAG "ENV_VAR": 7
USES: wearerequired/git-mirror-action: 72
USES: yanglbme/gitee-pages-action: 18
USES: pascalgn/size-label-action: 19
USES: actions/labeler: 549
echo "SHA8=$(echo ${{ github.sha }} | cut -c1-8)" >> ENV_VAR: 9
echo "SHA8=$(echo ${{ github.ref_name }})" >> ENV_VAR: 7
sudo rm -f CUSTOM_PATH_FILE: 49
sudo dpkg FLAG i386: 79
sudo apt-get update -qq: 309
. CUSTOM_PATH_DIR install: 27
echo "": 243
ls -la ENV_VAR CUSTOM_PATH_DIR: 7
go install honnef.co CUSTOM_PATH_DIR: 70
go vet -unsafeptr=false . CUSTOM_PATH_DIR: 6
staticcheck . CUSTOM_PATH_DIR: 35
USES: aws-actions/stale-issue-cleanup: 31
pip install yamllint: 25
rm package-lock.json: 34
cmake FLAG . FLAG Debug: 31
cd scripts CUSTOM_PATH_DIR: 47
echo "Run, Build Application using script": 13
. CUSTOM_PATH_DIR package: 11
go run . CUSTOM_PATH_DIR: 16
go test: 29
USES: grandcolline/golang-github-actions: 31
USES: arduino/setup-task: 156
sudo systemctl start mysql: 35
printf "org.gradle.jvmargs=-Xmx3G -XX:+UseParallelGC\n" >> ~ CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_DIR assemble: 121
USES: ./.github/actions/driver/check-compatibility: 6
USES: ./.github/actions/go/test: 15
npm start: 16
yarn install FLAG 1000000: 14
echo ::set-output name=push_commit_message::$(git log FLAG=%B -n 1 HEAD): 23
echo ::set-output name=pr_commit_message::$(git log FLAG=%B -n 1 HEAD^2): 23
yarn workspace  CUSTOM_PATH_DIR build: 135
REPO="URL: 17
echo -e "\n# Checkout the repo in the target branch": 17
git clone ENV_VAR out -b ENV_VAR: 17
echo -e "\n# Remove any old files in the dist folder": 16
rm -rfv out CUSTOM_PATH_DIR: 17
echo -e "\n# Move the generated code to the newly-checked-out repo, to be committed and pushed": 17
rsync -vaI package.json out/: 18
rsync -vaI .. CUSTOM_PATH_FILE-contributorsrc out/: 16
rsync -vaI .. CUSTOM_PATH_FILE out/: 16
rsync -vaI README.md out/: 17
rsync -vaI dist/ out CUSTOM_PATH_DIR: 15
echo -e "\n# Commit and push": 17
cd out: 53
git add FLAG .: 30
git config user.name "ENV_VAR": 264
git config user.email "ENV_VAR": 263
git push origin ENV_VAR: 94
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG Release: 8
cmake -E make_directory ${{runner.workspace}} CUSTOM_PATH_DIR: 269
cmake FLAG . FLAG ENV_VAR: 174
git config FLAG FLAG safe.directory CUSTOM_PATH_DIR: 400
git submodule update FLAG: 326
python3 script CUSTOM_PATH_FILE -p js -o -v: 7
USES: tinpotnick/webpreprocessor: 6
dotnet build src CUSTOM_PATH_DIR: 6
cd src CUSTOM_PATH_DIR: 184
cp src CUSTOM_PATH_FILE src CUSTOM_PATH_DIR: 12
USES: robinraju/release-downloader: 126
USES: EndBug/add-and-commit: 500
echo ::set-output name=NODE_VERSION::$(cat .nvmrc): 20
pnpm e2e: 6
USES: symplify/github-action-monorepo-split: 8
USES: WyriHaximus/github-action-get-previous-tag: 113
echo ::set-output name=VERSION::$(git describe FLAG): 29
dotnet restore framework CUSTOM_PATH_FILE: 7
sed -i "s#<Version>0.0.0< CUSTOM_PATH_DIR steps.get_version.outputs.VERSION }}< CUSTOM_PATH_DIR props CUSTOM_PATH_FILE: 18
dotnet build framework CUSTOM_PATH_FILE FLAG Release FLAG: 7
dotnet nuget push framework CUSTOM_PATH_FILE FLAG ${{ secrets.NUGET_DEPLOY_KEY }} FLAG URL: 7
USES: larsoner/circleci-artifacts-redirector-action: 55
poetry config virtualenvs.create true: 9
poetry config virtualenvs.in-project true: 135
poetry run coverage xml -i: 7
coverage run -m unittest discover: 19
coverage report -m: 145
coverage html: 14
USES: actions-rs/tarpaulin: 52
. CUSTOM_PATH_DIR -q clean bundleDebug: 7
pushd apps CUSTOM_PATH_DIR: 6
python -m pip install -U pip: 311
USES: BobAnkh/add-contributors: 23
bundle: 26
. CUSTOM_PATH_DIR check: 103
. CUSTOM_PATH_DIR jacocoTestReport: 23
USES: cicirello/jacoco-badge-generator: 9
USES: citation-file-format/cffconvert-github-action: 18
Xvfb -ac :99 -screen 0 1280x1024x16 > CUSTOM_PATH_DIR 2>&1 &: 8
set -o pipefail;: 9
bash build_tools CUSTOM_PATH_FILE: 19
sudo apt-get install -y libc6-armel-cross libc6-dev-armel-cross binutils-arm-linux-gnueabi libncurses5-dev build-essential bison flex libssl-dev bc: 6
sudo apt-get install -y gcc-arm-linux-gnueabi g++-arm-linux-gnueabi: 6
sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf: 9
sudo apt-get install -y g++-aarch64-linux-gnu crossbuild-essential-arm64: 6
sudo pip3 install coscmd: 6
npm install -g pnpm: 63
mv kun ../: 14
mv xun ../: 14
mv gou ../: 14
mv v8go ../: 13
mv xgen-v1.0 ../: 10
mv yao-init ../: 10
ls -l .: 37
ls -l ../: 14
make artifacts-linux: 7
mv dist CUSTOM_PATH_DIR dist CUSTOM_PATH_DIR: 22
coscmd config -a ENV_VAR -s ENV_VAR -b ENV_VAR -r ENV_VAR: 12
for file in . CUSTOM_PATH_DIR do coscmd upload $file CUSTOM_PATH_DIR done;: 12
USES: Renato66/auto-label: 16
USES: nick-invision/retry: 522
git_clone_scripts_dest=" CUSTOM_PATH_DIR: 6
git_clone_scripts_repo="URL: 6
git clone "${git_clone_scripts_repo}" "${git_clone_scripts_dest}": 6
USES: samuelmeuli/lint-action: 8
make crossbuild: 8
flutter packages get: 63
flutter format FLAG lib test: 12
flutter analyze lib test: 23
flutter test FLAG FLAG FLAG random: 14
source . CUSTOM_PATH_FILE: 271
export PATH=$(pwd) CUSTOM_PATH_DIR: 20
cov-build FLAG cov-int make: 43
USES: szenius/set-timezone: 41
USES: jtalk/url-health-check-action: 11
USES: dsaltares/fetch-gh-release-asset: 83
USES: pat-s/always-upload-cache: 122
twine upload dist CUSTOM_PATH_DIR -u __token__ -p ${{ secrets.pypi_password }}: 22
sudo apt-get clean: 239
curl -Lo . CUSTOM_PATH_DIR URL: 43
sudo mv kind CUSTOM_PATH_DIR: 36
USES: irongut/CodeCoverageSummary: 24
docker ps -a  : 6
USES: paultyng/ghaction-import-gpg: 15
pip install Pillow: 8
pip install tqdm: 6
pip install mkdocs-material: 115
mkdocs gh-deploy FLAG: 183
pip install ruff: 24
ruff FLAG: 10
pip install black: 148
black FLAG: 36
pip install isort: 28
isort FLAG: 12
isort .: 9
pip install mypy: 63
mypy FLAG: 22
mypy: 33
USES: agenthunt/conventional-commit-checker-action: 6
USES: sakebook/actions-flutter-pub-publisher: 17
flutter format FLAG FLAG .: 16
curl -sSL URL | bash: 16
rvm install ${{ matrix.ruby }} FLAG: 8
rvm FLAG use ${{ matrix.ruby }}: 9
gem install bundler FLAG: 38
rake: 27
sudo apt-get install FLAG binutils-dev libunwind8-dev: 7
yarn test:unit: 54
USES: google/oss-fuzz/infra/cifuzz/actions/build_fuzzers: 217
USES: google/oss-fuzz/infra/cifuzz/actions/run_fuzzers: 218
cargo doc FLAG: 75
dotnet FLAG: 162
npm i -g  CUSTOM_PATH_DIR: 70
npm run test-compile: 14
vsce package: 55
USES: coactions/setup-xvfb: 49
gh pr review FLAG "ENV_VAR": 140
cp -f . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 12
pip install -r requirements_test.txt: 44
USES: sonarsource/sonarcloud-github-action: 99
python -m pip install pip FLAG: 32
cd example: 41
cd mobile: 34
cd cli: 36
python manage.py test: 29
cd /: 16
 on: 20
if %errorlevel% neq 0 exit CUSTOM_PATH_DIR %errorlevel%: 40
cd build CUSTOM_PATH_DIR: 286
USES: necojackarc/auto-request-review: 11
USES: ./.github/actions/build-onedir-pkg: 6
python3 -c "import os; os.makedirs('exitstatus', exist_ok=True)": 10
git config FLAG FLAG safe.directory '*': 174
pip3 install -r requirements-dev.txt: 30
git rev-parse FLAG HEAD: 44
echo 'debconf debconf CUSTOM_PATH_DIR select Noninteractive' | debconf-set-selections: 22
apt update: 220
apt-get install -y git: 35
apt-get install -y curl: 28
apt-get install -y openssh-server: 18
env CI=yes PATH=ENV_VAR . CUSTOM_PATH_DIR: 48
cargo build FLAG FLAG: 344
USES: baptiste0928/cargo-install: 273
cargo nextest run FLAG FLAG FLAG: 48
bash ci CUSTOM_PATH_FILE: 223
for f in wezterm-*.deb wezterm-*.xz ; do sha256sum $f > $f.sha256 ; done: 8
bash ci CUSTOM_PATH_FILE bash ci CUSTOM_PATH_FILE $(ci CUSTOM_PATH_FILE): 29
set -e: 675
swift test: 101
swift test FLAG: 49
pushd src: 14
git config FLAG user.email actions: 8
rm -rf *: 152
cp -r .. CUSTOM_PATH_DIR .: 42
git push URL: 13
USES: imjasonh/setup-ko: 40
make cosign: 7
USES: sigstore/scaffolding/actions/setup: 14
USES: chainguard-dev/actions/kind-diag: 23
ctest FLAG 2 FLAG 300 FLAG -C ENV_VAR: 6
cmake FLAG . FLAG FLAG Release: 13
ctest FLAG 2 FLAG 300 FLAG -C Release: 9
cmake ENV_VAR -DCMAKE_BUILD_TYPE=Release -DHIGHSINT64=on -DFAST_BUILD=OFF: 6
USES: seek-oss/changesets-snapshot: 6
. CUSTOM_PATH_DIR FLAG FLAG -e FLAG FLAG -T 2C clean install -DskipTests=true -DskipIntegrationTests=true -Dcheckstyle.skip=true -Dcheckstyle_unix.skip=true -Drat.skip=true -Dmaven.javadoc.skip=true: 10
shopt -s globstar: 36
REVISION=`awk ' CUSTOM_PATH_DIR $1;exit;}' . CUSTOM_PATH_FILE`: 9
echo "version=ENV_VAR" >> ENV_VAR: 110
echo "dubbo version: ENV_VAR": 16
mkdir -p ${{ github.workspace }} CUSTOM_PATH_DIR: 250
wget -c URL env.ZOOKEEPER_VERSION }} CUSTOM_PATH_DIR env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace }} CUSTOM_PATH_FILE ||: 85
wget -c URL env.ZOOKEEPER_VERSION }} CUSTOM_PATH_DIR env.ZOOKEEPER_VERSION }}-bin.tar.gz -O ${{ github.workspace }} CUSTOM_PATH_FILE: 17
echo "list the downloaded zookeeper binary archive": 17
ls -al ${{ github.workspace }} CUSTOM_PATH_FILE: 17
DUBBO_VERSION="${{needs.build-source.outputs.version}}": 9
CANDIDATE_VERSIONS="dubbo.version:ENV_VAR;compiler.version:ENV_VAR;ENV_VAR;dubbo.compiler.version:ENV_VAR": 9
echo "CANDIDATE_VERSIONS=ENV_VAR" >> ENV_VAR: 16
cd test && bash . CUSTOM_PATH_FILE: 53
USES: graalvm/setup-graalvm: 189
java FLAG: 18
native-image FLAG: 9
${{ github.workspace }} CUSTOM_PATH_DIR FLAG FLAG -e FLAG FLAG -T 2C clean package -P native -Dmaven.test.skip=true native:compile: 8
USES: ./.github/workflows/template-setup-e2e-test: 14
USES: ./.github/workflows/template-e2e-test: 13
USES: ./.github/actions/setup-next: 10
USES: ./.github/actions/test: 69
sudo CUSTOM_PATH_DIR -c 'wget URL -O CUSTOM_PATH_DIR && chmod +x CUSTOM_PATH_DIR: 8
USES: ./.github/actions/deploy: 19
USES: trunk-io/trunk-action: 8
sudo wget URL -O CUSTOM_PATH_DIR: 37
sudo chmod +x CUSTOM_PATH_DIR: 194
flake8: 128
cd aequilibrae CUSTOM_PATH_DIR: 13
python setup_Assignment.py build_ext FLAG: 6
sudo apt-get install libsdl2-dev: 29
echo "sha7=ENV_VAR::7}" >> ENV_VAR: 22
Set-DisplayResolution -Width 1920 -Height 1080 -Force: 15
system_profiler SPDisplaysDataType | grep Resolution: 12
" CUSTOM_PATH_DIR Support CUSTOM_PATH_DIR Tools CUSTOM_PATH_DIR 2560 1440: 6
export REPO=alphabiz: 7
unset REPO: 7
docker logout: 60
make devenv: 19
sudo add-apt-repository ppa:rmescandon CUSTOM_PATH_DIR && sudo apt update && sudo apt install yq -y: 12
USES: kiegroup/kie-ci/.ci/actions/maven: 30
composer update FLAG FLAG FLAG: 269
make phpunit: 6
npm i -g npm-check-updates: 7
cd meshlab: 18
auth_header="$(git config FLAG FLAG http.URL: 178
git submodule sync FLAG: 226
git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update FLAG FLAG FLAG FLAG=1: 155
echo  ::set-output name=meshlab_commit::$(git rev-parse FLAG HEAD): 8
sh install CUSTOM_PATH_FILE: 35
cd ../: 159
USES: rustsec/audit-check: 20
make tools-install: 34
echo "`pwd` CUSTOM_PATH_DIR >> ENV_VAR: 37
gcloud components install kubectl: 6
id=ENV_VAR: 15
echo "ID=$id" >> ENV_VAR: 11
echo "RUN_ID: $id": 6
gcloud container clusters create epinioci$id \: 6
FLAG 100 \: 8
FLAG=1 \: 13
FLAG ${{ env.GKE_MACHINE_TYPE }} \: 7
FLAG \: 302
FLAG  \: 7
FLAG ${{ env.GKE_ZONE }}: 7
gcloud container clusters get-credentials epinioci$id FLAG ${{ env.GKE_ZONE }} FLAG ${{ secrets.EPCI_GKE_PROJECT }}: 6
echo "System Domain: ENV_VAR": 12
mkdir dist: 156
make test-acceptance-install: 16
export RUN_ID=${{ steps.create-cluster.outputs.ID }}: 8
export AWS_ZONE_ID=${{ secrets.AWS_ZONE_ID }}: 10
export KUBECONFIG=${{ env.KUBECONFIG }}: 11
go run acceptance CUSTOM_PATH_FILE: 10
USES: BetaHuhn/repo-file-sync-action: 19
docker load FLAG pki-images.tar: 101
docker network create example: 90
tests CUSTOM_PATH_FILE ds: 57
docker network connect example ds FLAG ds.example.com: 55
tests CUSTOM_PATH_FILE pki: 129
docker network connect example pki FLAG pki.example.com: 59
docker exec pki pki-server ca-redeploy FLAG: 15
docker exec pki pki-healthcheck FLAG: 35
docker exec pki CUSTOM_PATH_FILE: 20
docker exec pki pki -n caadmin ca-cert-request-find: 12
docker exec pki pki ca-cert-find: 9
tests CUSTOM_PATH_FILE FLAG= CUSTOM_PATH_DIR ds: 51
docker exec pki pkidestroy -i pki-tomcat -s CA -v: 49
HASH=$(git rev-parse HEAD:packages CUSTOM_PATH_DIR: 12
echo "::set-output name=hash::ENV_VAR": 14
echo "Hash is: ENV_VAR": 12
mkdir app: 8
USES: chrnorm/deployment-action: 33
USES: chrnorm/deployment-status: 57
cd examples: 61
USES: JS-DevTools/npm-publish: 277
else: 113
current_version=$(.github CUSTOM_PATH_DIR: 15
cd demos CUSTOM_PATH_DIR: 17
npm uninstall amazon-chime-sdk-js: 15
npm install .. CUSTOM_PATH_FILE: 16
check_if_integ_tests_required: 22
echo ::set-output name=integ_test_required::$requires_integration_test: 22
USES: filipstefansson/uuid-action: 19
echo "JOB_ID=${{ steps.create-job-id.outputs.uuid }}" >> ENV_VAR: 16
echo "${{ steps.create-job-id.outputs.uuid }}": 16
integration CUSTOM_PATH_DIR: 19
git fetch FLAG=1 origin +refs CUSTOM_PATH_DIR: 263
USES: uraimo/run-on-arch-action: 188
nuget restore ${{env.SOLUTION_FILE_PATH}}: 31
cmake -B build: 30
.. CUSTOM_PATH_FILE: 245
. CUSTOM_PATH_FILE -s: 14
USES: xmake-io/github-action-setup-xmake: 60
echo "::set-output name=VULKAN_SDK::C:\VulkanSDK\${{env.VulkanSDKVersion}}": 6
xmake l setup.lua: 11
Invoke-WebRequest -Uri URL -OutFile .. CUSTOM_PATH_FILE: 6
$installer = Start-Process -FilePath .. CUSTOM_PATH_FILE -Wait -PassThru -ArgumentList @(" CUSTOM_PATH_DIR: 6
xmake -y -v: 26
pipx run build FLAG: 98
mkdir -p dist/: 8
pip install FLAG pip setuptools wheel: 68
tox -e manifest: 7
tox -e flake8: 27
tox -e mypy: 30
sudo apt-get install graphviz: 51
tox -e docs: 65
tox -e coverage: 31
gh release create ${{ github.ref_name }} FLAG FLAG="ENV_VAR" FLAG="ENV_VAR" FLAG=new_dist_announcement.md: 7
echo "created announcement!": 9
gh release upload ${{ github.ref_name }} dist-manifest.json: 7
echo "uploaded manifest!": 8
echo "has-releases=ENV_VAR" >> "ENV_VAR": 7
${{ matrix.install-dist }}: 8
cargo dist build FLAG=${{ github.ref_name }} FLAG=json ${{ matrix.dist-args }} > dist-manifest.json: 7
echo "dist ran successfully": 9
echo "uploading...": 9
cat uploads.txt: 9
gh release upload ${{ github.ref_name }} $(cat uploads.txt): 8
echo "uploaded!": 9
gh release edit ${{ github.ref_name }} FLAG=false: 10
. CUSTOM_PATH_DIR app:assembleRelease: 9
composer update FLAG FLAG FLAG FLAG: 240
git config FLAG FLAG safe.directory "ENV_VAR": 263
git diff FLAG HEAD --: 7
rm -f bb_copy && bazel run FLAG_under cp FLAG=_bazel_rules_go CUSTOM_PATH_DIR CUSTOM_PATH_DIR $(pwd) CUSTOM_PATH_DIR: 7
rm -f bb_replicator && bazel run FLAG_under cp FLAG=_bazel_rules_go CUSTOM_PATH_DIR CUSTOM_PATH_DIR $(pwd) CUSTOM_PATH_DIR: 7
rm -f bb_storage && bazel run FLAG_under cp FLAG=_bazel_rules_go CUSTOM_PATH_DIR CUSTOM_PATH_DIR $(pwd) CUSTOM_PATH_DIR: 7
bazel build FLAG=_bazel_rules_go CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 10
source env.sh: 33
git diff FLAG go.mod go.sum: 13
go mod verify: 80
cd optimization: 6
pip install -U virtualenv setuptools wheel: 17
pip install jupyter sphinx_rtd_theme 'matplotlib<3.3.0' qiskit-terra[visualization] 'torchvision<0.10.0': 12
sudo apt-get install -y pandoc graphviz: 16
pip install -U -r requirements-dev.txt -r requirements.txt sphinx-intl: 10
mkdir artifacts: 153
for f in *.tar.gz; do tar -xvf "$f"; done: 6
cd e2e: 29
source "ENV_VAR CUSTOM_PATH_FILE": 39
echo "REPO_URL=ENV_VAR" >> ENV_VAR: 12
echo "REPO_BRANCH=ENV_VAR" >> ENV_VAR: 8
echo "CONFIG_FILE=ENV_VAR" >> ENV_VAR: 8
echo "DIY_PART_SH=ENV_VAR" >> ENV_VAR: 8
. CUSTOM_PATH_DIR update -a > CUSTOM_PATH_DIR 2>&1: 8
echo "Home=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 8
echo "PATH1=ENV_VAR CUSTOM_PATH_FILE}}" >> ENV_VAR: 8
USES: danshui-git/debugger-action: 10
unzip master.zip: 12
USES: psf/black: 221
USES: ./.github/actions/go: 10
pushd .: 28
brew tap mitchellh CUSTOM_PATH_DIR: 14
brew install mitchellh CUSTOM_PATH_DIR: 22
USES: Apple-Actions/import-codesign-certs: 46
xcodebuild -showsdks: 10
make codegen: 11
docker -v: 19
docker-compose -v: 7
npm FLAG: 187
git FLAG: 109
svn FLAG: 18
docker ps -a: 108
cs2pr . CUSTOM_PATH_FILE: 21
TMP=$(mktemp -d): 8
. ENV_VAR CUSTOM_PATH_FILE: 82
ls -al: 113
sudo chmod 600 CUSTOM_PATH_DIR: 15
sudo mkswap CUSTOM_PATH_DIR: 13
sudo swapon CUSTOM_PATH_DIR: 13
sudo apt-get install -y libboost-all-dev: 16
build_folder="build CUSTOM_PATH_DIR: 7
mkdir -p "$build_folder": 6
cd "$build_folder": 8
mkdir -p "$release_name CUSTOM_PATH_DIR: 6
exeFiles=(): 7
for f in src CUSTOM_PATH_DIR do [[ -x $f && -f $f ]] && exeFiles+=( "$f" ); done: 6
cp "${exeFiles[@]}" "$release_name CUSTOM_PATH_DIR: 7
cd "$release_name": 6
tar -czf "$release_name".tar.gz "$ccx_ver_folder": 6
sha256=$(shasum -a 256 "$release_name".tar.gz | awk '{print toupper($1)}'): 6
asset_path=". CUSTOM_PATH_FILE": 7
dotnet build CUSTOM_PATH_DIR: 28
git config user.email mag: 7
git config user.name "Github Action": 8
VERSION=`git describe FLAG FLAG=0`: 8
VERSION=`. CUSTOM_PATH_FILE ENV_VAR`: 8
rm -f . CUSTOM_PATH_FILE: 82
VERSION=ENV_VAR . CUSTOM_PATH_DIR . CUSTOM_PATH_FILE > . CUSTOM_PATH_FILE: 8
git diff-index FLAG HEAD || git commit -m "COMMIT_MSG" && git push: 17
USES: sersoft-gmbh/xcodebuild-action: 27
echo ${{ steps.docker_build.outputs.digest }}: 396
pip install nose: 11
flake8 .: 146
echo "${{ secrets.ACCESS_TOKEN }}" | docker login -u zhouyixun FLAG: 6
sudo apt-get install python3-sphinx: 12
git config user.name "github-actions": 99
git config user.email "actions": 46
git add docs CUSTOM_PATH_DIR: 16
USES: technote-space/get-diff-action: 261
python3 sjys.py: 59
sudo apt-get install redis-server: 16
python3 -m venv .. CUSTOM_PATH_DIR: 8
. .. CUSTOM_PATH_DIR: 9
deactivate: 56
unset HAS_SECRET: 9
if [ -n "ENV_VAR" ]; then HAS_SECRET='true' ; fi: 7
echo ::set-output name=HAS_SECRET::ENV_VAR: 6
sh install.sh: 15
. . CUSTOM_PATH_DIR: 160
ldd FLAG: 35
git status: 409
ls ${{ github.workspace }} CUSTOM_PATH_DIR: 17
USES: crazy-max/ghaction-docker-meta: 131
mv "${{ github.workspace }} CUSTOM_PATH_DIR "${{ github.workspace }} CUSTOM_PATH_DIR: 10
sudo apt-get install -y ninja-build libgtk-3-dev: 17
flutter config FLAG : 7
npm install -g appdmg: 33
dotnet build FLAG FLAG Release: 14
USES: azure/webapps-deploy: 167
az logout: 18
. CUSTOM_PATH_DIR ENV_VAR: 41
cd test && BUILD=n bash . CUSTOM_PATH_FILE: 10
chmod +x build CUSTOM_PATH_DIR: 30
build CUSTOM_PATH_DIR: 65
USES: atlassian/gajira-login: 55
USES: atlassian/gajira-create: 30
echo "Issue ${{ steps.create.outputs.issue }} was created": 9
pre-commit autoupdate: 36
USES: asdf-vm/actions/install: 61
mix local.rebar FLAG: 98
mix local.hex FLAG: 113
mix deps.get: 344
mix test: 117
curl -s URL | TAG=${{ env.K3D_VERSION }} bash: 12
curl -fsS URL | bash: 8
fluvio version: 10
~ CUSTOM_PATH_DIR version: 9
pip install mkdocs: 16
mkdocs gh-deploy: 18
USES: crowdin/github-action: 183
chown -R postgres .: 6
USES: volta-cli/action: 227
USES: ./.github/actions/setup-node-modules-cache: 40
git config user.name "${{ github.actor }}": 38
git config user.email "${{ github.actor }}": 36
USES: ./.github/actions/python-setup: 8
poetry publish: 64
. CUSTOM_PATH_DIR :integration:test "-Dai.djl.default_engine=PyTorch": 6
USES: DanTup/gh-actions/setup-dart: 7
pub get: 53
pub run build_runner build FLAG: 6
pub run test: 18
dotnet restore . CUSTOM_PATH_FILE: 212
python -m pip install -r requirements_dev.txt: 24
. CUSTOM_PATH_DIR clean test-compile -B: 8
. CUSTOM_PATH_DIR coveralls:report -B -D repoToken=${{ secrets.COVERALLS_TOKEN }}: 7
echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event.": 55
echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!": 51
echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.": 54
echo "💡 The ${{ github.repository }} repository has been cloned to the runner.": 47
echo "🖥️ The workflow is now ready to test your code on the runner.": 36
USES: hacs/action: 88
make.exe unittest: 7
make go.install: 11
make unittest: 25
go mod tidy -v: 20
git FLAG diff go.mod go.sum: 15
git FLAG diff FLAG go.mod go.sum: 15
bash <(curl URL: 22
USES: ludeeus/action-shellcheck: 157
USES: bdougie/take-action: 11
cd deployer: 11
USES: mheap/github-action-required-labels: 85
USES: radcortez/project-metadata-action: 15
git config FLAG user.name "SmallRye CI": 9
git config FLAG user.email "smallrye": 9
git checkout -b release: 16
git checkout ${{github.base_ref}}: 7
git rebase release: 7
git push FLAG: 234
USES: meeDamian/github-release: 22
cargo clippy FLAG FLAG: 50
cargo install cargo-fuzz: 42
cargo check FLAG: 167
USES: DiligentGraphics/github-action/setup-build-env: 34
USES: DiligentGraphics/github-action/configure-cmake: 30
USES: DiligentGraphics/github-action/build: 30
USES: DiligentGraphics/github-action/run-core-tests: 6
cd . CUSTOM_PATH_DIR && go test . CUSTOM_PATH_DIR -race -v: 9
script CUSTOM_PATH_DIR: 219
go build . CUSTOM_PATH_DIR: 169
USES: EndBug/version-check: 27
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR > .npmrc: 71
systeminfo: 8
USES: tiangolo/issue-manager: 14
USES: dorny/test-reporter: 427
cargo clippy FLAG -- -D warnings: 85
npx ls-engines: 15
npm run prepublishOnly: 21
npm run build:lib: 39
npm run test:integration: 45
USES: redhat-plumbers-in-action/differential-shellcheck: 35
dotnet workload install wasm-tools wasm-experimental: 12
dotnet test -c Release: 18
echo "go_version=$(make go-version)" >> ENV_VAR: 21
make verify-container-images: 7
vcpkg install openssl:x64-windows-static-md: 8
USES: mozilla-actions/sccache-action: 111
npm ci FLAG=peer: 15
echo '1024 65535' | sudo tee -a CUSTOM_PATH_DIR: 50
sudo apt-get install -y make unzip g++ etcd curl git wget: 6
exit $?: 26
python -m pip install wheel: 151
pip install -e ".[test]": 39
USES: egorpugin/sw-action: 6
USES: aws-actions/amazon-ecr-login: 286
USES: manusa/actions-setup-minikube: 92
deploy CUSTOM_PATH_FILE: 7
source "ENV_VAR CUSTOM_PATH_DIR: 22
pushd "curiefense CUSTOM_PATH_DIR: 8
cmake FLAG build FLAG: 63
docker build . -t artipie: 14
cd examples CUSTOM_PATH_DIR: 296
sed -i 's+artipie CUSTOM_PATH_DIR run.sh: 13
USES: nowsprinting/check-version-format-action: 7
sudo apt-get upgrade: 19
sh -c "$(curl URL: 9
USES: Vampire/setup-wsl: 36
brew install pandoc: 28
cp .env.actions .env: 30
php artisan passport:keys: 25
php artisan migrate: 61
php artisan db:seed: 27
USES: baijunyao/action-slack-notify: 14
cmake -E make_directory ENV_VAR CUSTOM_PATH_DIR: 6
make -j $(nproc): 91
mkdir ${{github.workspace}} CUSTOM_PATH_DIR: 28
mkdir ENV_VAR CUSTOM_PATH_DIR && cd ENV_VAR CUSTOM_PATH_DIR: 7
pip3 install setuptools FLAG: 8
python3 main.py: 7
npm ci FLAG FLAG: 61
USES: patrickedqvist/wait-for-vercel-preview: 8
USES: jwlawson/actions-setup-cmake: 215
. CUSTOM_PATH_DIR run: 14
echo "done!": 8
cargo build FLAG FLAG FLAG: 67
USES: taiki-e/install-action: 690
USES: ./jira/gajira-issue-update: 6
USES: olegtarasov/get-tag: 79
sudo apt-get install gettext: 58
yarn config set npmAlwaysAuth true: 6
. CUSTOM_PATH_FILE FLAG: 379
. CUSTOM_PATH_DIR -version: 14
USES: webfactory/ssh-agent: 267
yarn logout: 12
echo "registry=URL >> ~ CUSTOM_PATH_DIR: 11
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> ~ CUSTOM_PATH_DIR: 39
npm whoami: 86
yarn lerna publish from-package FLAG: 9
USES: aareet/move-labeled-or-milestoned-issue: 7
USES: Wohlstand/branch-name: 12
cmake FLAG build FLAG all -j4: 6
ls -lR build: 15
USES: SpicyPizza/create-envfile: 12
npx playwright install FLAG: 186
pipx install pipenv: 20
USES: dependabot/fetch-metadata: 298
go build main.go: 16
USES: oven-sh/setup-bun: 75
xcodebuild -version: 54
swift -version: 8
python scripts CUSTOM_PATH_FILE: 170
USES: sebastianpopp/ftp-action: 6
python -m pip install tox: 252
coverage xml: 324
mkdir ${{ env.RELEASE_NAME }}: 10
cd ${{ env.RELEASE_NAME }}: 10
mkdir include: 15
mkdir lib: 22
emcc -v: 41
docker run FLAG -v `pwd`: CUSTOM_PATH_DIR -v `pwd` CUSTOM_PATH_FILE unifyai CUSTOM_PATH_DIR python3 -m pytest FLAG tensorflow ivy CUSTOM_PATH_FILE: 27
vendor CUSTOM_PATH_DIR process FLAG: 12
USES: aws-actions/aws-codebuild-run-build: 39
USES: NuGet/setup-nuget: 100
yarn test:ember: 58
yarn install FLAG FLAG=skip-build: 51
. CUSTOM_PATH_DIR javadoc: 16
cmake FLAG build/ -- -j3: 9
pip install URL matrix.ansible }}.tar.gz FLAG: 7
git submodule sync: 22
echo "IS_FORK=$(gh pr view FLAG isCrossRepository FLAG '.isCrossRepository' "ENV_VAR" )" >> "ENV_VAR": 6
gh pr checkout "ENV_VAR": 18
echo "COMMIT_SHA=$(git rev-parse FLAG HEAD)" >> "ENV_VAR": 6
USES: actions/cache/save: 416
npm ci FLAG FLAG FLAG: 24
npm run build:next: 8
npm run format:check: 56
npm run build-storybook: 32
pid=$!: 22
pip install -r tests CUSTOM_PATH_FILE: 179
USES: jupyterhub/action-k3s-helm: 8
pytest -v tests CUSTOM_PATH_DIR: 6
USES: jupyterhub/action-k8s-namespace-report: 11
set -x: 1144
ffmpeg -version: 9
python -m coverage xml: 35
USES: danhellem/github-actions-issue-to-work-item: 27
git FLAG diff FLAG  FLAG && echo "git_status=clean" >> ENV_VAR || echo "git_status=dirty" >> ENV_VAR: 11
git FLAG diff FLAG: 32
echo 'git_body<<DIFF' >> ENV_VAR: 9
git FLAG diff FLAG >> ENV_VAR: 9
echo 'DIFF' >> ENV_VAR: 9
git checkout HEAD^: 6
corepack enable: 365
pnpm FLAG: 32
pnpm install FLAG FLAG: 145
pnpm playwright install FLAG: 7
USES: appleboy/jenkins-action: 12
rustc -vV: 13
cargo -vV: 12
curl FLAG '=https' FLAG.2 -sSf URL | sh -s -- -y: 18
USES: dawidd6/action-get-tag: 106
ls -lah: 57
chmod 600 __TEMP_INPUT_KEY_FILE: 6
echo "VERSION: ENV_VAR": 15
sudo apt-get install -y make unzip g++ etcd curl git wget eatmydata: 24
docker compose down: 22
USES: goanpeca/setup-miniconda: 52
conda activate mmf: 11
pip install FLAG setuptools: 58
python -m torch.utils.collect_env: 13
mkdir ENV_VAR: 91
USES: actions-rs/install: 137
USES: gittools/actions/gitversion/setup: 71
USES: gittools/actions/gitversion/execute: 71
USES: jlumbroso/free-disk-space: 101
mkdir $dir CUSTOM_PATH_DIR: 6
cat CUSTOM_PATH_DIR : 471
echo "ENV_VAR" : 469
cd ENV_VAR : 471
git config FLAG user.email "dustinf" : 148
git config FLAG user.name "Dustin Franklin" : 148
git clone ENV_VAR CUSTOM_PATH_DIR || echo 'repo already cloned or another error encountered' : 469
cd jetson-containers : 469
git fetch origin : 469
git checkout ENV_VAR : 471
git status : 470
ls -a : 473
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv torch_tensorrt: 6
USES: nizarmah/auto-minify: 9
cd target: 11
USES: tvrcgo/upload-to-oss: 9
USES: nanzm/get-time-action: 29
USES: fjogeleit/http-request-action: 80
python -m pip install "pip<22": 6
python -m pip install FLAG setuptools wheel: 33
echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))"): 39
USES: GabrielBB/xvfb-action: 265
tox -v: 28
black FLAG .: 175
npm run format: 84
npm run generate: 18
. bin CUSTOM_PATH_FILE: 14
USES: anc95/ChatGPT-CodeReview: 22
phpunit: 11
. 1_initialization_environment.sh: 6
cd friendlywrt-rk3328: 33
. .. CUSTOM_PATH_FILE: 48
cat configs CUSTOM_PATH_DIR | grep "TARGET" >> .. CUSTOM_PATH_FILE: 7
cat .. CUSTOM_PATH_FILE > configs CUSTOM_PATH_DIR: 7
cd friendlywrt: 21
git remote add upstream URL && git fetch upstream: 16
git checkout upstream CUSTOM_PATH_DIR -b tmp: 10
git commit -m 'reset': 6
git rebase adc1a9a3676b8d7be1b48b5aed185a94d8e42728^ FLAG tmp -X theirs: 8
rm -f target CUSTOM_PATH_FILE: 11
git checkout upstream CUSTOM_PATH_DIR -- feeds.conf.default: 8
cd package CUSTOM_PATH_DIR: 12
git apply .. CUSTOM_PATH_FILE: 15
cd friendlywrt-rk3328 CUSTOM_PATH_DIR: 15
echo "##[set-output name=release_tag;]$release_tag": 12
cat .github CUSTOM_PATH_DIR >> ENV_VAR: 6
flutter config: 12
flutter test: 148
flutter analyze: 163
clang-format FLAG: 37
python3 -m pip install wheel: 22
cd firmware: 15
wget FLAG URL: 101
arm-none-eabi-gcc FLAG: 15
USES: n1hility/cancel-previous-runs: 76
make -C . CUSTOM_PATH_DIR: 7
yarn test-only: 6
echo ${{ github.event.number }} > . CUSTOM_PATH_FILE: 23
USES: FirebaseExtended/action-hosting-deploy: 141
yarn pack: 49
": 25
python -m pip install FLAG pre-commit: 19
mkdir ${{ env.BASE_DIR }} CUSTOM_PATH_DIR: 14
podman run FLAG FLAG \: 12
FLAG type=bind,source=${{ env.BASE_DIR }} CUSTOM_PATH_DIR \: 30
curl -LO URL: 219
unzip protoc-3.15.6-linux-x86_64.zip -d protoc: 25
export PATH="ENV_VAR:ENV_VAR CUSTOM_PATH_DIR: 81
make protos-local: 8
cargo update -p nom: 12
cargo update -p lexical-core: 12
echo "Waiting for Dummy Relay and Driver to come up": 8
sleep 30: 347
USES: ./.github/actions/setup-integration-test: 29
npm install axios: 8
nix flake check: 29
USES: lucasbento/auto-close-issues: 23
USES: peter-evans/slash-command-dispatch: 87
echo "DOTNET_NOLOGO=1" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append: 36
echo "DOTNET_CLI_TELEMETRY_OPTOUT=1" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append: 36
$project_name = [System.IO.Path]::GetFileNameWithoutExtension($env:project_path): 35
$test_results_artifact_name = "testresults_${{matrix.os}}_${{matrix.framework}}_${{matrix.platform}}_${{matrix.configuration}}": 35
$working_directory = "$env:GITHUB_WORKSPACE": 35
Write-Host "Project Name: $project_name": 35
Write-Host "Results Artifact Name: $test_results_artifact_name": 35
Write-Host "Working Directory: $working_directory": 35
echo "project_name=$project_name" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append: 35
echo "test_results_artifact_name=$test_results_artifact_name" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append: 35
echo "SYSTEM_DEFAULTWORKINGDIRECTORY=$working_directory" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append: 35
echo "title=Test Run for $project_name - ${{matrix.framework}} - ${{matrix.platform}} - ${{matrix.os}}" | Out-File -FilePath  $env:GITHUB_ENV -Encoding utf8 -Append: 35
dotnet build ${{env.project_path}} FLAG ${{matrix.configuration}} FLAG ${{matrix.framework}} CUSTOM_PATH_DIR: 35
dotnet test ${{env.project_path}} FLAG ${{matrix.configuration}} FLAG ${{matrix.framework}} FLAG FLAG FLAG FLAG mini FLAG 20minutes FLAG:"console;verbosity=normal" FLAG:"trx;LogFileName=${{env.trx_file_name}}" FLAG:"liquid.md;LogFileName=${{env.md_file_name}};Title=${{env.title}};" FLAG:"${{github.workspace}} CUSTOM_PATH_FILE_name}}" -- RunConfiguration.TargetPlatform=${{matrix.platform}} TestRunParameters.Parameter\(name=\"tests:slow\",\ value=\"\${{env.run_slow_tests}}\"\): 35
. CUSTOM_PATH_FILE &: 15
USES: jwalton/gh-docker-logs: 59
yarn test FLAG=false: 8
USES: rickstaa/action-create-tag: 38
yarn test FLAG: 96
USES: pierotofy/set-swap-space: 79
USES: tauri-apps/tauri-action: 51
npm run coverage: 178
USES: swift-actions/setup-swift: 47
sudo apt install build-essential: 7
swift test -v: 34
USES: ./.github/actions/setup-build: 29
sudo . CUSTOM_PATH_FILE: 187
USES: dwenegar/upload-release-assets: 19
git config FLAG user.name 'github-actions': 17
git config FLAG user.email 'github-actions': 24
cp sample.env .env: 34
pnpm run create:shared: 8
pnpm run build:curriculum: 10
npm run test:lib: 7
npm publish FLAG: 71
USES: morphy2k/revive-action: 15
USES: sobolevn/misspell-fixer-action: 17
cmake FLAG build FLAG install: 30
git config FLAG user.name "GitHub Actions": 77
bundle exec overcommit FLAG: 10
USES: thollander/actions-comment-pull-request: 202
echo ::set-output name=version::ENV_VAR#refs CUSTOM_PATH_DIR: 21
USES: alexellis/upload-assets: 57
cargo install cargo-lipo: 8
rustup target add aarch64-apple-ios x86_64-apple-ios: 9
USES: maierj/fastlane-action: 37
USES: rajatjindal/krew-release-bot: 26
cd external CUSTOM_PATH_DIR: 52
git fetch; git checkout development: 30
cd Exec CUSTOM_PATH_DIR: 32
python docs CUSTOM_PATH_FILE: 47
sudo xcode-select -switch CUSTOM_PATH_FILE: 38
swift FLAG: 72
cd Sources CUSTOM_PATH_DIR: 12
USES: lee-dohm/no-response: 64
pip install FLAG build: 21
pip check: 44
jupyter server extension list: 8
jupyter nbextension list: 6
python -m pip install FLAG pip : 8
echo github.event_name: ${{ github.event_name }}: 34
echo github.sha: ${{ github.sha }}: 24
echo github.repository: ${{ github.repository }}: 24
echo github.ref: ${{ github.ref }}: 21
echo github.head_ref: ${{ github.head_ref }}: 13
echo github.base_ref: ${{ github.base_ref }}: 21
yarn test-coverage: 9
rustup component add clippy: 311
python -m pip install FLAG pdm: 6
pdm config python.use_venv false: 6
pdm install -d: 6
pdm run -s pytest tests: 6
pip install -r test CUSTOM_PATH_FILE: 26
python test.py: 15
codecov: 129
npm run build -- FLAG: 26
dpkg FLAG i386: 9
pip3 install meson: 14
brew install ninja: 92
USES: devbotsxyz/xcode-select: 14
echo ::set-output name=version::ENV_VAR: 41
USES: snyk/actions/php: 10
yarn semantic-release: 51
yarn generate: 29
security create-keychain -p foo chiachain: 32
security default-keychain -s chiachain: 32
security unlock-keychain -p foo chiachain: 32
security set-keychain-settings -t 7200 -u chiachain: 32
wget -qO- URL | tar xzf -: 66
mkdir ${{ github.workspace }} CUSTOM_PATH_DIR: 155
mv ${{ github.workspace }} CUSTOM_PATH_DIR ${{ github.workspace }} CUSTOM_PATH_DIR: 154
Invoke-WebRequest -OutFile blocks_and_plots.zip URL Expand-Archive blocks_and_plots.zip -DestinationPath .: 66
brew install boost: 73
sh install.sh -d: 62
venv CUSTOM_PATH_DIR combine FLAG=.coveragerc .coverage.*: 60
venv CUSTOM_PATH_DIR xml FLAG=.coveragerc -o coverage.xml: 90
mkdir coverage_reports: 91
cp .coverage "coverage_reports CUSTOM_PATH_DIR env.JOB_FILE_NAME }}": 90
cp coverage.xml "coverage_reports CUSTOM_PATH_DIR env.JOB_FILE_NAME }}.xml": 90
venv CUSTOM_PATH_DIR report FLAG=.coveragerc FLAG: 90
USES: 1466587594/get-current-time: 31
pip install -r test_requirements.txt: 41
flake8 . FLAG FLAG FLAG=10 FLAG: 13
pip install FLAG off -U setuptools: 40
pip install FLAG off .: 29
python -c 'import optuna': 47
optuna FLAG: 16
asv machine FLAG: 10
pip freeze FLAG: 33
pip install pipdeptree: 29
pipdeptree: 23
chmod +x . CUSTOM_PATH_FILE: 679
echo -e "Job strategy: ": 8
echo -e "Alpine Linux: v${{ env.ALPINE_VERSION }}": 8
echo -e "PHP Version: ${{ env.PHP_VERSION }}": 8
echo -e "PHP Release: ${{ env.PHP_MINOR_VERSION }}": 6
echo "" > .env: 10
echo -e "${{ secrets.PHP_ALPINE_RSA }}" > .abuild CUSTOM_PATH_FILE: 11
echo -e "${{ secrets.PHP_ALPINE_RSA_PUB }}" > .abuild CUSTOM_PATH_FILE: 11
USES: burnett01/rsync-deployments: 35
yarn build:demo: 7
make license-cache: 8
make license-check: 28
make up: 33
make test-integration: 63
printenv | sort -f: 36
mkdir apps: 18
mv appcache1 CUSTOM_PATH_DIR apps/: 18
mv appcache2 CUSTOM_PATH_DIR apps/: 18
mv appcache3 CUSTOM_PATH_DIR apps/: 18
mv appcache4 CUSTOM_PATH_DIR apps/: 18
cd apps: 19
ls -la java_test_webapp-master/: 17
echo "ORG_GRADLE_PROJECT_jdk11=ENV_VAR" >> ENV_VAR: 24
echo "ORG_GRADLE_PROJECT_jdk17=ENV_VAR" >> ENV_VAR: 14
echo "ORG_GRADLE_PROJECT_jdk19=ENV_VAR" >> ENV_VAR: 9
echo "ORG_GRADLE_PROJECT_jdk8=ENV_VAR" >> ENV_VAR: 24
echo "GRADLE_OPTIONS=-Porg.gradle.java.installations.auto-detect=false -Porg.gradle.java.installations.fromEnv=ORG_GRADLE_PROJECT_jdk8,ORG_GRADLE_PROJECT_jdk11" >> ENV_VAR: 10
echo "Current JAVA_HOME is ENV_VAR": 16
echo "JAVA_HOME=ENV_VARjdk8}" >> ENV_VAR: 17
echo "REVIEW ANY NEW ITEMS IN WORKSPACE": 19
. CUSTOM_PATH_DIR ENV_VAR clean jar FLAG: 12
ls -la newrelic-agent CUSTOM_PATH_DIR: 20
cd agent-integration-tests/: 17
cd agent-integration-tests: 18
echo "conf CUSTOM_PATH_DIR complains of the path below - creating symlink for now": 18
ln -s ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 23
ln -s ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE: 18
echo "still complains of file not found": 18
ls -la ENV_VAR: 30
sudo apt-get install virtualenv: 10
virtualenv -p CUSTOM_PATH_DIR .: 18
echo "What version of maven are we using?": 17
mvn FLAG: 73
echo "are the files created?": 17
ls -la bin/: 17
echo "checking conf": 17
ls -la conf/: 17
echo "runnig bin CUSTOM_PATH_DIR: 17
. bin CUSTOM_PATH_DIR: 18
bin CUSTOM_PATH_DIR install -r conf CUSTOM_PATH_FILE: 18
echo "run autoconfigure": 17
JAVA8JRE=ENV_VARjdk8} \: 17
JAVA11JRE=ENV_VARjdk11} \: 17
JAVA17JRE=ENV_VARjdk17} \: 12
JAVA19JRE=ENV_VARjdk19} \: 9
conf CUSTOM_PATH_DIR: 18
echo "running conf CUSTOM_PATH_DIR java": 17
. conf CUSTOM_PATH_DIR java: 18
echo "check local java config": 17
cat conf CUSTOM_PATH_FILE: 37
echo "Changing java_agent_dev_root values": 17
sed -i 's|java_agent_dev_root: CUSTOM_PATH_DIR CUSTOM_PATH_DIR conf CUSTOM_PATH_FILE: 18
sed -i 's|app_root: CUSTOM_PATH_DIR CUSTOM_PATH_DIR conf CUSTOM_PATH_FILE: 18
echo "verifying values have been changed": 17
echo "shell variables:": 17
set | sort -f: 17
echo "GENERATE ARTIFACTS": 17
## artifacts section for testing: 18
mkdir testing-artifacts: 18
echo "was the dir created?": 17
touch testing-artifacts CUSTOM_PATH_FILE: 36
set | sort -f > testing-artifacts CUSTOM_PATH_FILE: 18
printenv | sort -f > testing-artifacts CUSTOM_PATH_FILE: 18
cp conf CUSTOM_PATH_FILE testing-artifacts/: 18
echo "check the contents of testing-artifacts": 17
ls -la testing-artifacts/: 17
echo "are we still in agent-integration-tests?": 17
## End testing artifacts section: 18
echo "Check the current Java Home for this step": 7
echo "The current JAVA_HOME is ENV_VAR": 17
echo "RUN THE TESTS": 17
echo "Running ${{ matrix.func_basic_features }}": 17
TEST_LOG_LEVEL=DEBUG TEST_SUPPRESS_METRIC_DEBUG=1 \: 18
PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python \: 10
. CUSTOM_PATH_FILE ${java_func_path} CUSTOM_PATH_DIR matrix.func_tests }}: 17
MATRIX_ITEM=$(echo ENV_VAR | sed 's| CUSTOM_PATH_DIR: 17
echo "MATRIX="ENV_VAR"" >> ENV_VAR: 18
printenv |  sort -f: 17
USES: ./.github/actions/build: 189
USES: ./.github/actions/push: 17
USES: WillAbides/setup-go-faster: 41
make test-sim-nondeterminism: 15
USES: SonarSource/vault-action-wrapper: 10
USES: sonarsource/gh-action-lt-backlog/MoveCardAfterReview: 6
python -m pip install build: 99
bundle exec rspec: 193
sudo apt-get FLAG install gjs libappindicator3-dev libgda-5.0-dev libgirepository1.0-dev libgtk-3-dev libgtk-4-dev libgtksourceview-3.0-dev libnotify-dev libsoup2.4-dev libsoup-3.0-dev libwebkit2gtk-4.0-dev libadwaita-1-dev gnome-shell-common libmutter-10-dev libgcr-3-dev libgnome-desktop-3-dev: 11
NODE_OPTIONS=FLAG_old_space_size=9216 yarn run validate:types:node: 8
rm -rf CUSTOM_PATH_FILE/: 195
DJL_ENGINE=pytorch-native-auto PYTORCH_PRECXX11=true PYTORCH_VERSION=1.11.0 . CUSTOM_PATH_DIR clean run: 7
DJL_ENGINE=pytorch-native-auto PYTORCH_PRECXX11=true PYTORCH_VERSION=1.12.1 . CUSTOM_PATH_DIR clean run: 7
DJL_ENGINE=pytorch-native-cpu-precxx11 . CUSTOM_PATH_DIR clean run: 8
DJL_ENGINE=tensorflow-native-auto . CUSTOM_PATH_DIR clean run: 9
DJL_ENGINE=tensorflow-native-cpu . CUSTOM_PATH_DIR clean run: 12
echo ::set-output name=tags::ENV_VAR: 20
rm ENV_VAR: 22
make _vendor_install: 9
USES: lewagon/wait-on-check-action: 115
pip install . FLAG: 37
cargo -V: 39
git fetch -f origin ${{ github.ref }}:${{ github.ref }}: 39
ci_scripts CUSTOM_PATH_FILE1: 8
refreshenv: 24
USES: egor-tensin/setup-mingw: 35
choco install ninja: 58
cmake FLAG build FLAG Debug: 17
cmake FLAG build FLAG Release: 82
USES: nttld/setup-ndk: 95
USES: mattermost/action-mattermost-notify: 46
USES: seanmiddleditch/gha-setup-ninja: 247
ctest -C ${{env.BUILD_TYPE}}: 70
autoreconf FLAG: 27
git fetch FLAG FLAG FLAG: 321
cmake ENV_VAR: 26
cmake FLAG . FLAG ${{ matrix.build_type }}: 48
USES: ./.github/actions/prepare-test: 43
echo "CODEQL_ENABLE_EXPERIMENTAL_FEATURES_SWIFT=true" >> ENV_VAR: 36
vendor CUSTOM_PATH_DIR tests -s -C: 15
vendor CUSTOM_PATH_DIR -p phpdbg tests -s -C FLAG . CUSTOM_PATH_FILE FLAG . CUSTOM_PATH_DIR: 10
php php-coveralls.phar FLAG FLAG tests CUSTOM_PATH_FILE: 14
echo ✓: 10
ENV_VAR CUSTOM_PATH_FILE: 363
brew install . CUSTOM_PATH_FILE: 6
USES: superfly/flyctl-actions/setup-flyctl: 61
USES: medyagh/setup-minikube: 158
USES: casperdcl/deploy-pypi: 9
tag="ENV_VAR#refs CUSTOM_PATH_DIR: 6
yarn build:all: 11
USES: ros-tooling/setup-ros: 87
mv ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 26
source CUSTOM_PATH_FILE: 199
rosdep update: 39
catkin init: 9
make upstream: 14
rm -rf packages CUSTOM_PATH_DIR: 24
mkdir -p packages CUSTOM_PATH_DIR: 24
date -u: 6
exit: 22
USES: uesteibar/reviewer-lottery: 8
USES: benjlevesque/short-sha: 41
pip install FLAG platformio: 100
USES: cschleiden/replace-tokens: 64
short_sha=$(git rev-parse FLAG HEAD): 15
echo "SHORT_SHA=${short_sha}" >> ENV_VAR: 14
arch=$(uname -m): 27
time=$(date "+%Y%m%d"): 7
version=$(cat ENV_VAR CUSTOM_PATH_DIR: 8
tag="${version}a${time}"-${arch}: 6
echo "TAG=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 32
USES: electron/github-app-auth-action: 11
set -eo pipefail: 22
ls dist: 36
sudo apt-get update \: 13
pip install psycopg2: 9
npm install -g  CUSTOM_PATH_DIR: 239
make proto: 8
echo "pre-check is successful.": 11
echo "branch is: ${{ github.ref_name }}": 6
echo workspace is: ${{ github.workspace }}: 14
echo "is workflow_dispatch event? ${{ github.event_name == 'workflow_dispatch' }}": 14
mkdir -p "output": 7
ls -R "${{ github.workspace }} CUSTOM_PATH_DIR: 7
ls -R ${{ github.workspace }} CUSTOM_PATH_DIR: 6
python -m pip install dist CUSTOM_PATH_DIR: 9
git config user.email "noreply": 14
npm publish FLAG next: 33
cd lottie-smoke-test: 12
yarn run lint: 166
. CUSTOM_PATH_DIR test: 198
rm -Rf . CUSTOM_PATH_DIR: 53
mkdir . CUSTOM_PATH_DIR: 412
sleep 5m: 7
git checkout FLAG origin CUSTOM_PATH_DIR: 12
echo "latest tag: $latest_tag": 7
git push -u origin master: 10
git push origin: 38
rustup toolchain install nightly: 30
pnpm docs:build: 25
npm run publish: 43
git config FLAG user.email 41898282+github-actions[bot]: 7
sudo apt-get update && sudo apt-get install make: 7
sudo -E apt-get -qq install $(curl -fsSL git.io CUSTOM_PATH_DIR: 68
df -hT ENV_VAR: 170
git clone ENV_VAR -b ENV_VAR openwrt: 83
useVersionInfo=$(git show -s FLAG=short FLAG="Author: %an<br CUSTOM_PATH_DIR %cd<br CUSTOM_PATH_DIR %s<br CUSTOM_PATH_DIR hash: %H"): 26
echo "useVersionInfo=$useVersionInfo" >> ENV_VAR: 32
echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> ENV_VAR: 27
[ -e ENV_VAR ] && mv ENV_VAR openwrt CUSTOM_PATH_FILE: 76
chmod +x ENV_VAR1_SH: 76
ENV_VAR CUSTOM_PATH_DIR: 225
cd openwrt && . CUSTOM_PATH_DIR update -a: 77
cd openwrt && . CUSTOM_PATH_DIR install -a: 79
[ -e files ] && mv files openwrt CUSTOM_PATH_DIR: 80
chmod +x ENV_VAR2_SH: 76
make download -j8: 107
make -j$(nproc) || make -j1 || make -j1 V=s: 54
cd openwrt CUSTOM_PATH_DIR: 67
python -m pip install FLAG pipenv wheel: 17
git push origin || echo "No changes to commit": 6
sudo apt-get install . CUSTOM_PATH_FILE: 9
pip install setuptools: 21
mvn test -B: 9
vcpkg CUSTOM_PATH_FILE: 14
nix build: 19
for apt_file in `grep -lr microsoft CUSTOM_PATH_FILE CUSTOM_PATH_DIR do sudo rm $apt_file; done: 23
sudo apt-get install libsqlite3-dev: 20
dotnet tool install FLAG MarkdownSnippets.Tool: 17
mdsnippets ENV_VAR: 15
USES: github-actions-x/commit: 40
USES: jvalkeal/setup-maven: 46
USES: jfrog/setup-jfrog-cli: 74
USES: jvalkeal/build-zoo-handler: 103
jfrog rt build-publish: 13
find ~ CUSTOM_PATH_DIR -type d -name '*SNAPSHOT' | xargs rm -fr: 37
#! CUSTOM_PATH_DIR bash: 24
USES: anchore/scan-action: 56
USES: nextstrain/.github/actions/setup-nextstrain-cli: 6
make ci CUSTOM_PATH_DIR: 16
USES: jandelgado/gcov2lcov-action: 24
cargo fmt FLAG: 93
bundle exec rake rubocop: 52
echo Test suite completed: 6
USES: leonsteinhaeuser/project-beta-automations: 65
make doc: 61
pipx run build: 28
yarn build FLAG: 22
rm -rf CUSTOM_PATH_FILE-cache: 184
mv CUSTOM_PATH_FILE-cache-new CUSTOM_PATH_FILE-cache: 184
git config user.name ENV_VAR: 33
git config user.email ENV_VAR: 19
gpg FLAG ~ CUSTOM_PATH_FILE: 8
git reset FLAG: 70
USES: ros-tooling/action-ros-ci: 37
USES: gitleaks/gitleaks-action: 14
USES: nanasess/setup-php: 30
USES: nanasess/setup-chromedriver: 84
USES: ./.github/actions/composer: 11
bin CUSTOM_PATH_DIR eccube:composer:require "ec-cube CUSTOM_PATH_DIR: 38
. CUSTOM_PATH_FILE connect: 10
vendor CUSTOM_PATH_DIR -vvv run acceptance FLAG chrome,local,vaddy VaddyCest:begin: 10
vendor CUSTOM_PATH_DIR -vvv run acceptance FLAG chrome,local,vaddy VaddyCest:commit: 10
. CUSTOM_PATH_FILE disconnect: 10
. CUSTOM_PATH_FILE scan: 10
docker rm -f -v eccube: 10
cd project: 15
npm run bootstrap: 157
USES: eregon/use-ruby-action: 11
npm run test:windows: 6
npm test -- FLAG: 36
npm run test-cov: 8
USES: erlef/setup-beam: 392
mix do deps.get, deps.compile: 15
mix compile: 73
make -j10: 6
USES: ./.github/actions/manylinux_2014_setup: 6
make allunit: 6
(cd examples CUSTOM_PATH_DIR make): 8
USES: ./.github/actions/build_extensions: 6
sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build: 21
python scripts CUSTOM_PATH_FILE FLAG: 21
sleep 60: 110
npm install semver: 11
go install sigs.k8s.io CUSTOM_PATH_DIR: 33
pip install FLAG FLAG resotolib/: 31
pip install tox wheel flake8 build: 30
python -m build FLAG FLAG FLAG dist/: 88
python -m pip install tox tox-gh-actions: 61
tox -e test: 7
pip config FLAG set global.progress_bar off: 43
python -m pip install -e unpacked_sdist/: 10
python -m pip install unpacked_sdist CUSTOM_PATH_DIR: 13
sudo apt install -y openjdk-11-jre-headless: 23
JAVA_HOME=" CUSTOM_PATH_DIR: 19
cd unpacked_sdist: 46
coverage erase: 37
pip install pyyaml: 32
python build_readme.py: 7
git add FLAG: 113
WDIR=`pwd`: 19
. CUSTOM_PATH_DIR clean: 61
. CUSTOM_PATH_DIR publish FLAG: 13
USES: vsoch/pull-request-action: 21
npm ci && npm run build: 43
echo -e "$(ip addr show eth0 | grep "inet\b" | awk '{print $2}' | cut -d/ -f1)\t$(hostname -f) $(hostname -s)" | sudo tee -a CUSTOM_PATH_DIR: 33
USES: DeLaGuardo/setup-graalvm: 25
echo "::set-output name=yearmonth::$( CUSTOM_PATH_DIR -u "+%Y-%m")": 7
go fmt . CUSTOM_PATH_DIR: 26
make generate: 119
cmake .: 83
docker build . FLAG Dockerfile FLAG ENV_VAR: 39
hadolint . CUSTOM_PATH_DIR: 6
USES: bobheadxi/deployments: 133
make docs CUSTOM_PATH_DIR: 6
echo "::set-output name=cache_dir::$(yarn cache dir)": 6
USES: appleboy/scp-action: 92
mkdir -p coverage: 14
USES: ./.github/actions/pkginstall: 9
USES: ./.github/actions/meson: 13
curl \: 45
-X POST \: 36
-H "Accept: application CUSTOM_PATH_FILE3+json" \: 35
URL \: 88
USES: reviewdog/action-actionlint: 20
cp -r steamworks CUSTOM_PATH_DIR godot CUSTOM_PATH_DIR: 8
USES: reviewdog/action-shellcheck: 52
echo "CPU_NUM=$(nproc FLAG)" >> ENV_VAR; echo "RUNE_VERSION=$(cat VERSION)" >> ENV_VAR;: 8
USES: ./.github/actions/start-docker-daemon: 6
USES: mstksg/get-package: 16
ctest -j2 FLAG -E unique-stigids: 10
USES: xt0rted/setup-dotnet: 6
echo `python3 FLAG`: 6
python3 -m pip install setuptools: 14
echo "The time was ${{ steps.build.outputs.time }}": 9
USES: codacy/codacy-analysis-cli-action: 105
USES: codacy/codacy-coverage-reporter-action: 77
USES: wearerequired/lint-action: 53
USES: ./.github/actions/tests: 8
xcode-select -p: 12
sudo xcode-select -s CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 29
sudo apt-get install -y libsqlite3-dev: 7
USES: ./.github/actions/gradle_docker: 10
USES: wzieba/AppCenter-Github-Action: 10
USES: konradpabjan/move-labeled-or-milestoned-issue: 25
python setup.py bdist_wheel FLAG: 9
sudo rm -f " CUSTOM_PATH_DIR: 8
docker compose logs: 16
sudo rm -rf ENV_VAR CUSTOM_PATH_DIR: 24
mkdir -p frontend CUSTOM_PATH_DIR: 17
make -j 8: 15
sudo make install install: 6
make training -j 8: 7
sudo make install training-install: 8
${{ matrix.compiler }} FLAG: 14
pip install git+URL: 333
micromamba info: 24
composer require FLAG roave CUSTOM_PATH_DIR: 7
USES: ibiqlik/action-yamllint: 81
mkdir -p bin: 27
chmod +x bin CUSTOM_PATH_DIR: 110
pip install platformio: 44
yarn test:ci: 125
yarn global add lerna: 18
cd ${{ env.AZURE_WEBAPP_BUILD_PATH }}: 9
yarn build:app: 7
cd www: 10
ls -lta: 9
USES: Azure/static-web-apps-deploy: 170
USES: appleboy/discord-action: 25
IMAGE_ID=$(echo ENV_VAR | tr '[A-Z]' '[a-z]'): 151
echo IMAGE_ID=ENV_VAR: 156
docker tag ENV_VAR ENV_VAR:ENV_VAR: 137
docker tag ENV_VAR:ENV_VAR ENV_VAR:latest: 6
docker push ENV_VAR:latest: 58
cd ${{github.workspace}} CUSTOM_PATH_DIR: 84
. CUSTOM_PATH_FILE CUSTOM_PATH_DIR FLAG: 18
brew install libomp  # URL: 9
curl -sSL URL | python3 -: 46
poetry run pip FLAG > CUSTOM_PATH_DIR 2>&1 || rm -rf .venv: 23
poetry run pytest tests: 9
coverage report: 130
sudo apt-get update && sudo apt-get install -y pandoc: 6
pip install -r docs CUSTOM_PATH_FILE: 241
npm run tsc: 48
git diff-index FLAG HEAD || git commit -m "COMMIT_MSG": 67
python -m pip install pre-commit: 42
USES: aptos-labs/aptos-core/.github/actions/check-aptos-core: 18
. CUSTOM_PATH_DIR assembleRelease: 79
. CUSTOM_PATH_DIR bundleRelease: 19
npm run benchmark: 15
git fetch FLAG=1 origin ENV_VAR: 18
make ci-mu: 6
pip3 install pylint: 7
ls ${{ github.workspace }}: 38
echo "🍏 This job's status is ${{ job.status }}.": 56
USES: technote-space/create-pr-action: 20
sudo apt -y update: 39
sudo apt-get install -y libsasl2-dev python3 libldap2-dev libssl-dev build-essential: 10
pip install requests pyyaml: 14
USES: KengoTODA/actions-setup-docker-compose: 11
mkdir ENV_VAR CUSTOM_PATH_DIR: 223
sudo apt install -y jq: 10
USES: abatilo/actions-poetry: 208
poetry run pytest tests CUSTOM_PATH_FILE: 23
pytest FLAG=./ FLAG=xml: 47
cd . CUSTOM_PATH_DIR && npm install FLAG && cd .. CUSTOM_PATH_DIR: 22
USES: ./.github/actions/StaleCloser: 16
. CUSTOM_PATH_DIR lint FLAG: 11
yarn run build-storybook: 6
curl URL: 101
echo "tag=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 47
gem install FLAG toys: 31
USES: wow-actions/use-app-token: 23
git config user.name "Babel Bot": 6
git config user.email "babel-bot": 6
echo $?: 17
git tag FLAG: 8
sudo apt-get install -y python3-pip: 11
export PATH=ENV_VAR:ENV_VAR CUSTOM_PATH_DIR: 144
python3 setup.py bdist_wheel: 27
mkdir wheelhouse: 13
twine upload wheelhouse CUSTOM_PATH_FILE: 10
python3 -m pip install twine: 36
twine upload dist CUSTOM_PATH_FILE: 45
python3 -m pip install -r requirements.txt: 65
python3 -m pip install twine wheel: 6
pip install -r requirements-testing.txt: 9
cmake -E make_directory ${{env.SOURCE_DIR}}: 20
cmake -E make_directory ${{env.TOOSL_DIR}}: 19
cmake -E make_directory ${{env.INSTALL_DIR}}: 20
pip install -U wheel: 36
. CUSTOM_PATH_DIR assembleEnDebug: 7
mkdir "ENV_VAR CUSTOM_PATH_DIR: 41
echo "ENV_VAR" > "ENV_VAR CUSTOM_PATH_DIR: 17
chmod 600 "ENV_VAR CUSTOM_PATH_DIR: 14
yarn run lint FLAG: 6
yarn run format: 7
cd seqan3-build: 21
npm run docs: 104
npm install FLAG npm: 38
USES: sudo-bot/action-shellcheck: 6
git clone FLAG=1 URL: 55
echo ${{ github.sha }}: 17
sudo apt-get install gfortran: 12
rm -rf build CUSTOM_PATH_DIR: 18
touch build CUSTOM_PATH_FILE: 16
USES: docker/bake-action: 146
platform=${{ matrix.platform }}: 8
echo "PLATFORM_PAIR=${platform CUSTOM_PATH_DIR >> ENV_VAR: 8
flutter build apk FLAG: 60
USES: ./.github/actions/github-release: 6
npm run ci:build: 15
echo ${{ github.event.number }} > . CUSTOM_PATH_DIR: 44
make test-go: 11
echo ::set-output name=SOURCE_TAG::ENV_VAR#refs CUSTOM_PATH_DIR: 30
. CUSTOM_PATH_DIR publishPlugin: 30
sudo apt install musl-tools: 13
USES: svenstaro/upx-action: 32
USES: juliangruber/read-file-action: 109
USES: ./.github/actions/setup-node-with-cache: 14
echo "NX_CLOUD_ACCESS_TOKEN=${{ secrets.NX_CLOUD_ACCESS_TOKEN }}" >> ENV_VAR: 8
flutter channel master: 13
USES: snickerbockers/submodules-init: 12
USES: TheDoctor0/zip-release: 18
make test-unit: 82
USES: Codesee-io/codesee-action: 24
. CUSTOM_PATH_DIR testDebugUnitTest: 35
make sdist: 6
brew install automake libtool: 6
ln -s CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 61
sudo apt-get install autoconf automake autotools-dev ninja-build: 14
cd qemu: 24
cmake -DCMAKE_TOOLCHAIN_FILE=.. CUSTOM_PATH_FILE -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TESTS=ON ..: 6
TESTS_EXECUTABLE_LOADER=qemu-arm TESTS_EXECUTABLE_LOADER_ARGUMENTS="-L; CUSTOM_PATH_DIR ctest FLAG -j 2: 6
mkdir build-noint8 && cd build-noint8: 9
. CUSTOM_PATH_FILE init: 11
composer config extra.symfony.require ${{ matrix.symfony }}: 6
chmod 0600 ~ CUSTOM_PATH_DIR: 27
python3 . CUSTOM_PATH_FILE: 97
USES: editorconfig-checker/action-editorconfig-checker: 20
editorconfig-checker: 9
USES: articulate/actions-markdownlint: 13
USES: textbook/git-checkout-submodule-action: 14
docker build -t docker.pkg.github.com CUSTOM_PATH_DIR .: 10
docker push docker.pkg.github.com CUSTOM_PATH_DIR: 22
docker login FLAG ENV_VAR FLAG ENV_VAR: 14
docker tag docker.pkg.github.com CUSTOM_PATH_DIR georchestra CUSTOM_PATH_DIR: 6
docker push georchestra CUSTOM_PATH_DIR: 23
docker build -f install CUSTOM_PATH_DIR .: 12
USES: pascalgn/npm-publish-action: 14
python -m pytest tests/: 13
echo "branch=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 12
rush install FLAG 3: 27
rush switch-flavor:stable: 10
rush switch-flavor:beta-release: 9
ver=$(jq -r .version packages CUSTOM_PATH_FILE): 9
echo version: $ver: 9
echo "version=$ver" >> ENV_VAR: 6
USES: azure/CLI: 144
USES: Azure/pipelines: 19
yarn config set npmAuthToken ENV_VAR: 12
yarn npm publish FLAG next: 9
USES: easimon/maximize-build-space: 79
git clone URL CUSTOM_PATH_DIR: 43
echo ENV_VAR > CUSTOM_PATH_FILE: 18
sudo bash install_dep.sh: 9
ci CUSTOM_PATH_FILE ${{ matrix.channel }} ${{ matrix.target }}: 25
ci CUSTOM_PATH_FILE cross ${{ matrix.target }}: 11
USES: shogo82148/actions-setup-perl: 40
ci CUSTOM_PATH_FILE cargo ${{ matrix.target }}: 9
ci CUSTOM_PATH_FILE CUSTOM_PATH_DIR ${{ matrix.target }}: 16
vault-auth: 80
USES: hashicorp/vault-action: 149
sudo apt-get install python3-pip: 23
make build-docs: 14
make ci-test: 15
make install -j10 -O: 6
make static-analysis: 14
USES: RustCrypto/actions/cargo-cache: 211
USES: RustCrypto/actions/cargo-hack-install: 106
cargo hack test FLAG: 50
cargo test FLAG ${{ matrix.target }}: 26
USES: tonyhallett/artifacts-url-comments: 9
docker push ghcr.io CUSTOM_PATH_DIR: 217
USES: ./.github/actions/ci_prologue: 18
npm install -g  CUSTOM_PATH_FILE: 7
cp -v ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE: 8
cp -v -R "ENV_VAR CUSTOM_PATH_DIR "ENV_VAR": 6
git config user.name "GitHub Actions Bot": 63
git config user.email "<>": 79
git add "ENV_VAR CUSTOM_PATH_FILE": 7
composer require "laravel CUSTOM_PATH_DIR matrix.laravel }}" "orchestra CUSTOM_PATH_DIR matrix.testbench }}" FLAG FLAG: 64
composer update --${{ matrix.dependency-version }} FLAG FLAG FLAG: 52
USES: grafana/k6-action: 26
USES: isort/isort-action: 39
GOOS=linux GOARCH=amd64 go build -o . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 10
make verify: 54
go test -covermode=count -coverprofile=profile.cov . CUSTOM_PATH_DIR: 15
GO111MODULE=off go get github.com CUSTOM_PATH_DIR: 43
$(go env GOPATH) CUSTOM_PATH_DIR -coverprofile=profile.cov -service=github: 26
ninja -C build install: 42
sudo mkdir -p data: 83
docker-compose logs: 202
docker run -i FLAG FLAG acme curlimages CUSTOM_PATH_DIR -f URL: 140
sudo cp examples CUSTOM_PATH_FILE examples CUSTOM_PATH_FILE: 66
sudo mkdir -p examples CUSTOM_PATH_DIR: 97
sudo cp test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE examples CUSTOM_PATH_DIR: 70
sudo cp .github CUSTOM_PATH_FILE examples CUSTOM_PATH_FILE: 139
docker-compose restart: 93
docker run FLAG -id -v "$(pwd) CUSTOM_PATH_FILE FLAG acme FLAG=acme-sh neilpang CUSTOM_PATH_FILE:latest daemon: 87
openssl verify -CAfile examples CUSTOM_PATH_FILE -untrusted examples CUSTOM_PATH_FILE acme-sh CUSTOM_PATH_FILE: 33
sudo cp -rp examples CUSTOM_PATH_DIR ${{ github.workspace }} CUSTOM_PATH_DIR: 76
docker-compose logs > ${{ github.workspace }} CUSTOM_PATH_FILE: 72
sudo tar -C ${{ github.workspace }} CUSTOM_PATH_DIR -cvzf ${{ github.workspace }} CUSTOM_PATH_FILE docker-compose.log data: 22
sed -i "s CUSTOM_PATH_DIR .env: 95
curl -L URL | tar xvz: 7
go generate . CUSTOM_PATH_DIR: 80
echo "dir=$(yarn config get cacheFolder)" >> ENV_VAR: 136
git branch: 38
export PATH="ENV_VAR CUSTOM_PATH_DIR: 209
make installcheck: 8
echo "VCPKG_BINARY_SOURCES=clear;x-aws,s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> ENV_VAR: 10
echo "VCPKG_BINARY_SOURCES=clear;x-aws-config,no-sign-request;x-aws,s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> ENV_VAR: 10
. CUSTOM_PATH_DIR FLAG FLAG FLAG: 41
. CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG FLAG FLAG: 12
linux CUSTOM_PATH_FILE: 8
. CUSTOM_PATH_FILE FLAG FLAG: 38
python . CUSTOM_PATH_FILE logs: 8
yarn ember build: 6
node bin CUSTOM_PATH_FILE: 14
pip install -r requirements-tests.txt: 30
flake8 . CUSTOM_PATH_DIR FLAG FLAG=E9,F63,F7,F82 FLAG FLAG: 13
mkdir build install: 9
USES: crazy-max/ghaction-github-pages: 214
pip install tox~=4.2: 6
tox -e lint: 80
USES: ./.github/actions/install-dependencies: 146
yarn bundlemon: 6
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR: 32
git config FLAG user.name "gh-actions": 32
npm run link:packages: 6
npm run build:packages: 13
bundle exec jekyll build: 36
cd -: 353
npx webpack: 10
pip install -r requirements CUSTOM_PATH_FILE: 2542
USES: check-spelling/check-spelling: 57
make test-sim-import-export: 15
make test-sim-after-import: 15
echo "::set-output name=TAG_NAME::$(git describe FLAG $(git rev-list FLAG FLAG=1))": 10
cd dist CUSTOM_PATH_DIR: 47
New-Item -ItemType directory -Path certificate: 15
certutil -decode certificate\certificate.txt certificate\certificate.pfx: 9
node .github CUSTOM_PATH_FILE: 107
sed -i 's CUSTOM_PATH_DIR pyproject.toml: 6
pytest FLAG: 39
python -m pip install twine: 93
echo "Pre cleanup": 6
echo "Post cleanup": 6
pip install meson: 22
ENV_VAR FLAG: 178
ccache FLAG: 89
cargo update: 81
USES: amondnet/vercel-action: 85
yarn typecheck: 91
docker push "ENV_VAR": 27
USES: joelwmale/webhook-action: 42
USES: carlosperate/arm-none-eabi-gcc-action: 33
USES: contributor-assistant/github-action: 47
USES: ./.github/actions/build-linux: 6
sudo apt-get update FLAG FLAG 1> CUSTOM_PATH_DIR: 10
sudo apt-get install FLAG -q -y re2c: 7
npm run ci-test: 9
set -eu: 97
echo "version=$version" >> ENV_VAR: 40
USES: messense/maturin-action: 133
pip install FLAG twine: 31
twine upload FLAG *: 21
USES: actions-cool/check-user-permission: 19
USES: ./.github/actions/setup-python-tools-scripts: 72
USES: ./.github/actions/setup-salt-version: 21
USES: ./.github/actions/get-python-version: 7
git config FLAG user.name "Salt Project Packaging": 8
git config FLAG user.email saltproject-packaging: 8
TOKEN=$(curl -sS -f -X PUT "URL -H "X-aws-ec2-metadata-token-ttl-seconds: 30"): 28
SPB_ENVIRONMENT=$(curl -sS -f -H "X-aws-ec2-metadata-token: ENV_VAR" URL: 28
echo "SPB_ENVIRONMENT=ENV_VAR" >> "ENV_VAR": 28
sudo install -d -m 0700 -o "$(id -u)" -g "$(id -g)" CUSTOM_PATH_DIR: 27
GNUPGHOME="$(mktemp -d -p CUSTOM_PATH_DIR: 27
echo "GNUPGHOME=ENV_VAR" >> "ENV_VAR": 27
cat <<EOF > "ENV_VAR CUSTOM_PATH_FILE": 28
batch: 27
no-tty: 27
pinentry-mode loopback: 27
mkdir -p artifacts CUSTOM_PATH_DIR: 73
mkdir artifacts CUSTOM_PATH_DIR: 14
USES: ./.github/actions/upload-artifact: 45
echo "All worflows finished": 6
USES: elastic/apm-pipeline-library/.github/actions/updatecli: 21
USES: elastic/apm-pipeline-library/.github/actions/notify-build-status: 24
USES: ./.github/actions/code-freeze: 8
npm run typecheck: 81
gcloud info: 66
USES: hashicorp/setup-terraform: 281
terraform init: 107
terraform apply -auto-approve: 22
make testacc: 33
terraform destroy -auto-approve: 17
USES: godofredoc/no-response: 7
. CUSTOM_PATH_DIR publish -Pbuild=ENV_VAR -Puser=ENV_VAR -Ppassword=ENV_VAR: 7
cp default.env .env: 9
var=COMPOSE_FILE: 15
set_value_in_env: 20
. CUSTOM_PATH_DIR up: 16
. CUSTOM_PATH_FILE consensus: 14
. CUSTOM_PATH_FILE validator: 11
. CUSTOM_PATH_FILE execution: 14
dotnet test FLAG FLAG normal: 157
USES: meeDamian/sync-readme: 10
USES: toolmantim/release-drafter: 25
cat ~ CUSTOM_PATH_FILE || true: 16
gpg FLAG: 46
bin CUSTOM_PATH_DIR spec:parallel_deps: 9
USES: samuelmeuli/action-electron-builder: 76
cd ci: 10
rm -f CUSTOM_PATH_FILE: 41
 CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 16
git config user.email "github-actions": 92
git push FLAG origin ENV_VAR: 27
ssh-keyscan github.com >> ~ CUSTOM_PATH_DIR: 58
echo "${{ secrets.GH_PAGES_DEPLOY }}" > ~ CUSTOM_PATH_DIR: 30
cat <<EOT >> ~ CUSTOM_PATH_DIR: 32
Host github.com: 32
HostName github.com: 32
IdentityFile ~ CUSTOM_PATH_DIR: 32
EOT: 59
python -m venv env: 14
source env CUSTOM_PATH_DIR: 61
pip install codecov: 51
pip install FLAG Cython: 11
pip install FLAG=URL FLAG GDAL: 7
python -c "from osgeo import gdal": 10
gdalinfo FLAG: 11
pip install codespell: 29
USES: ammaraskar/gcc-problem-matcher: 71
echo "ENV_VAR" > ~ CUSTOM_PATH_FILE: 31
chmod 600 ~ CUSTOM_PATH_FILE: 8
chmod 700 ~ CUSTOM_PATH_DIR: 22
. CUSTOM_PATH_FILE ${{ inputs.version }}: 25
USES: dsherret/rust-toolchain-file: 50
USES: rui314/setup-mold: 44
USES: giraffate/clippy-action: 21
USES: actions-rust-lang/rustfmt: 13
sleep 1: 83
git rebase origin CUSTOM_PATH_DIR: 36
docker pull us-central1-docker.pkg.dev CUSTOM_PATH_DIR github.head_ref || github.ref_name }}  : 15
USES: php-actions/composer: 73
echo "ENV_VAR" > "ENV_VAR CUSTOM_PATH_FILE": 14
env | sort: 71
sudo apt-get -y install python3-pip python3-dev libusb-1.0-0-dev libudev-dev: 9
pip install awscli FLAG FLAG: 9
mkdir .yarncache: 11
yarn install FLAG . CUSTOM_PATH_DIR FLAG: 11
rm -rf .yarncache: 11
yarn cache clean: 16
echo "REACT_APP_ENV=production" >> ENV_VAR: 9
aws s3 sync build s3: CUSTOM_PATH_DIR env.STAGING_BUCKET_NAME }} CUSTOM_PATH_DIR FLAG: 9
aws s3 sync build s3: CUSTOM_PATH_DIR env.STAGING_BUCKET_NAME }} CUSTOM_PATH_DIR github.event.release.tag_name }} FLAG: 9
yarn sentry-upload-sourcemaps: 9
autoreconf -fi: 72
sudo apt-get install libssl-dev: 17
USES: docker-practice/actions-setup-docker: 82
dart format FLAG=none FLAG .: 235
dart analyze FLAG: 62
dart test: 259
wget -q -O - URL | sudo apt-key add -: 15
sudo apt-get install google-chrome-stable: 12
git config FLAG user.email ${{ secrets.GIT_EMAIL }}: 20
USES: preactjs/compressed-size-action: 95
curl URL -sSf | sh -s -- -y: 25
source ~ CUSTOM_PATH_DIR: 116
rustup show: 230
USES: github/super-linter: 136
python setup.py develop: 119
sudo sysctl net.ipv6.conf.all.disable_ipv6=0: 15
sudo sysctl net.ipv6.conf.default.disable_ipv6=0: 12
echo ENV_VAR >> ENV_VAR: 31
USES: ./.github/actions/node: 33
npm config set CUSTOM_PATH_FILE CUSTOM_PATH_DIR ENV_VAR: 36
pnpm build:libs: 6
tests CUSTOM_PATH_FILE ipa: 6
echo "::set-output name=sha::ENV_VAR": 6
echo "::set-output name=tag::ENV_VAR": 18
echo "::set-output name=version::ENV_VAR": 104
du FLAG bucket: 6
sudo rm -rf CUSTOM_PATH_DIR # will release about 10 GB if you don't need Android: 218
sudo rm -rf CUSTOM_PATH_DIR # will release about 20GB if you don't need .NET: 218
sudo -E make deps: 139
sudo luet install FLAG -y toolchain CUSTOM_PATH_DIR: 95
USES: cloud-gov/cg-cli-tools: 18
git log -n1: 18
sudo chown -R $(whoami):$(id -ng) ~ CUSTOM_PATH_DIR: 11
yarn artifacts: 28
cargo install cargo-wasi: 7
cargo build FLAG wasm32-unknown-unknown: 17
cargo clippy: 116
npm run production: 19
curBranch=$(git rev-parse FLAG HEAD): 8
commonCommit=$(git merge-base origin CUSTOM_PATH_DIR $curBranch): 7
echo $commonCommit: 7
echo "baseSHA=$commonCommit" >> ENV_VAR: 7
cd TensorNVMe: 11
conda install cmake: 7
pip install -v .: 24
USES: Andrew-Chen-Wang/github-wiki-action: 15
conda install git-lfs -c conda-forge: 7
git-lfs install: 8
conda install gh -c conda-forge: 7
echo "After conda init": 6
python -m pip install -e .: 219
ersilia close: 6
USES: danger/danger-js: 12
USES: ahmadnassri/action-dependabot-auto-merge: 120
USES: snapcore/action-build: 81
rune spec;: 14
sed -i '4 c \"terminal\": false,' config.json;: 14
sed -i '16 c \"cwd\": \"\ CUSTOM_PATH_DIR config.json;: 14
cp CUSTOM_PATH_FILE CUSTOM_PATH_FILE;: 7
rune FLAG run ra": 12
sed -i 's CUSTOM_PATH_FILE CUSTOM_PATH_DIR config.json;: 6
sed -i '10 c  \"sh\",\"wait_timeout\",\"6000\"' config.json;: 6
sed -i '144 a \"enclave.attestation.ra_epid_is_linkable\": \"false\",' config.json;: 6
sed -i '144 a \"enclave.attestation.ra_epid_subscription_key\": \"${{ secrets.SUB_KEY }}\",' config.json;: 6
sed -i '144 a \"enclave.attestation.ra_epid_spid\": \"${{ secrets.SPID }}\",' config.json;: 6
sudo apt-get update -q -y: 18
echo "date=$(date +'%Y-%m-%d')" >> ENV_VAR: 49
USES: peter-evans/enable-pull-request-automerge: 45
make node_modules: 13
git diff FLAG FLAG: 56
make ui: 26
make ui-test: 6
USES: fluxcd/flux2/action: 24
make unit-tests: 28
make check-format: 21
mv dist CUSTOM_PATH_FILE dist CUSTOM_PATH_FILE: 31
USES: actions-ecosystem/action-slack-notifier: 21
USES: ./.github/actions/ci-setup: 88
git config FLAG user.name "${{ github.actor }}": 42
git config FLAG user.email "${{ github.actor }}": 37
USES: WyriHaximus/github-action-next-semvers: 39
echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ'): 15
pnpm run docs:build: 31
cd api: 25
echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} FLAG: 68
docker push erxes CUSTOM_PATH_DIR: 79
USES: lannonbr/repo-permission-check-action: 68
USES: opensumi/actions/bot-token: 11
npm install -g pnpm && pnpm run setup: 6
pnpm run prepare FLAG . CUSTOM_PATH_DIR: 6
USES: securego/gosec: 57
USES: creekorful/goreportcard-action: 9
yarn run bootstrap: 14
USES: FabricMC/fabric-action-scripts: 6
dnf update -y: 19
echo === uname ===: 14
echo === CUSTOM_PATH_DIR ===: 18
echo === df -hl ===: 14
df -hl: 14
echo === nproc ===: 9
nproc || true: 10
echo === free -h ===: 14
free -h: 40
echo === top ===: 14
top -b -n1 -1 -Eg || timeout 1 top -b -n1: 12
echo === env ===: 14
echo === gcc -v ===: 8
gcc -v: 31
. CUSTOM_PATH_FILE -S -B: 11
. CUSTOM_PATH_FILE -j -v -i zstd: 11
. CUSTOM_PATH_FILE -j -v -i googleflags: 11
. CUSTOM_PATH_FILE -j -v -i googlelog: 11
. CUSTOM_PATH_FILE -j -v -i googletest: 11
. CUSTOM_PATH_FILE -j -v -i sparsemap: 11
. CUSTOM_PATH_FILE -j -v -i fmt: 11
. CUSTOM_PATH_FILE -j -v -i folly: 10
. CUSTOM_PATH_FILE -j -v -i fizz: 11
. CUSTOM_PATH_FILE -j -v -i wangle: 11
. CUSTOM_PATH_FILE -j -v -i mvfst: 10
. CUSTOM_PATH_FILE -j -v -i fbthrift: 11
. CUSTOM_PATH_FILE -j -v -i -d -t cachelib: 9
USES: paulfantom/periodic-labeler: 12
USES: keptn/gh-action-extract-branch-name: 15
echo "GIT_SHA=${{ steps.extract_branch.outputs.GIT_SHA }}" >> ENV_VAR: 6
echo "BRANCH=${{ steps.extract_branch.outputs.BRANCH }}" >> ENV_VAR: 6
echo "DATE=${{ steps.current-time.outputs.time }}" >> ENV_VAR: 6
USES: redhat-actions/podman-login: 25
make test CUSTOM_PATH_DIR: 42
npm run style: 11
. CUSTOM_PATH_DIR dist: 10
npm i npminstall -g && npminstall: 16
npm run ci: 77
USES: ilteoood/docker_buildx: 11
echo "branch=$(echo ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 43
bundle exec slather: 6
. CUSTOM_PATH_DIR test CUSTOM_PATH_FILE: 9
python -m pip install build twine: 42
python -m build .: 32
echo "No action required" : 29
pip install -r requirements.dev.txt: 25
USES: greenbone/actions/release: 7
USES: fizyk/actions-reuse/.github/actions/pipenv: 6
npm link: 55
echo "GITHUB_RUN_ID: ENV_VAR": 22
echo "GITHUB_RUN_NUMBER: ENV_VAR": 22
echo "GITHUB_RUN_ATTEMPT: ENV_VAR": 22
INSTANCE_NAME="id-ENV_VAR-ENV_VAR-ENV_VAR": 22
echo "INSTANCE_NAME: ENV_VAR": 42
echo ::set-output name=ec2-instance-id::ENV_VAR: 23
git config FLAG init.defaultBranch main: 44
git config FLAG pull.rebase true: 24
git config FLAG url."URL "URL: 50
echo "::set-output name=date::$(date -u "+%Y-%m")": 11
make get-deps: 24
make ensure-deps: 17
make release: 210
sudo apt-get update; sudo apt-get upgrade: 8
apk add bash: 20
bash qbittorrent-nox-static.sh libexecinfo: 22
bash qbittorrent-nox-static.sh zlib: 26
bash qbittorrent-nox-static.sh iconv: 29
bash qbittorrent-nox-static.sh openssl: 26
bash qbittorrent-nox-static.sh boost: 26
bash qbittorrent-nox-static.sh qtbase: 7
bash qbittorrent-nox-static.sh qttools: 26
bash qbittorrent-nox-static.sh qbittorrent: 11
. CUSTOM_PATH_DIR bootJar: 14
echo setting ouputs: 152
make -C vendor CUSTOM_PATH_DIR info CUSTOM_PATH_DIR: 162
echo: 341
echo outputs set: 152
make -C .github/ export: 157
make -C vendor CUSTOM_PATH_FILE}} apk: 157
find ENV_VAR -type f -name \*.apk | xargs FLAG ls -l | grep .: 157
artifact=$(find artifacts CUSTOM_PATH_FILE}} -type f -name \*.apk): 152
echo "path=$artifact" | tee -a ENV_VAR: 151
echo creating '"pip"' cache directory for Cloudsmith: 304
mkdir -p ENV_VAR CUSTOM_PATH_DIR && chmod -R 777 ENV_VAR CUSTOM_PATH_DIR || echo Ignoring error creating '"pip"' cache directory: 304
USES: cloudsmith-io/action: 373
echo Current directory is $(pwd): 152
[[ ENV_VAR =~ ^$(pwd) ]] || { echo Package dir \"ENV_VAR\" not beneath workdir \"$(pwd)\" >&2; exit 1; }: 152
make -C vendor CUSTOM_PATH_FILE}} ${{matrix.package-type}}: 152
[[ -n ENV_VAR ]] || { echo Error: PACKAGE_RELPATH is not set >&2; exit 1; }: 152
packages=($(find ENV_VAR -type f -name \*.${{matrix.package-type}})): 152
echo List packages found:: 152
printf "%s\n" "${packages[@]}" | xargs FLAG ls -l: 152
echo Error if not exactly 1 package found: 152
(( ${#packages[@]} == 1 )) || { echo "Error: other than 1 package found (${#packages[@]})" >&2; exit 1; }: 152
echo "setting output": 151
echo "path=$packages" | tee -a ENV_VAR: 151
virtualenv venv: 13
python3 setup.py test: 16
USES: helm/chart-releaser-action: 128
echo "sha_short=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 87
echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> ENV_VAR: 9
echo "${{ steps.create_release.outputs.upload_url }}" > . CUSTOM_PATH_DIR: 13
upload_url=`cat . CUSTOM_PATH_DIR: 12
USES: EndBug/label-sync: 21
sudo apt-get install xvfb: 100
python -m pytest tests CUSTOM_PATH_DIR: 12
git describe FLAG FLAG FLAG: 7
make build test: 23
echo >> ENV_VAR TOOLCHAIN_URL=URL: 7
echo >> ENV_VAR `echo ~ CUSTOM_PATH_DIR: 7
python3 tools CUSTOM_PATH_FILE ${{ matrix.family }}: 13
mkdir "${{ runner.workspace }} CUSTOM_PATH_DIR: 26
cd "${{ runner.workspace }} CUSTOM_PATH_DIR: 32
make -j: 201
source ".venv_build CUSTOM_PATH_DIR: 10
pip install wheel setuptools: 16
export CC= CUSTOM_PATH_DIR: 77
export CXX= CUSTOM_PATH_DIR: 20
cmake ENV_VAR -G "Ninja" \: 6
-DHAS_HDF5=ON \: 7
-DHAS_QT5=ON \: 6
-DHAS_CURL=ON \: 6
-DHAS_CAPNPROTO=ON \: 6
-DHAS_FTXUI=ON \: 6
-DBUILD_DOCS=ON \: 7
-DBUILD_APPS=ON \: 6
-DBUILD_SAMPLES=ON \: 6
-DBUILD_TIME=ON \: 6
-DBUILD_PY_BINDING=ON \: 7
-DBUILD_CSHARP_BINDING=OFF \: 7
-DBUILD_ECAL_TESTS=ON \: 6
-DECAL_INCLUDE_PY_SAMPLES=OFF \: 7
-DECAL_INSTALL_SAMPLE_SOURCES=ON \: 6
-DECAL_JOIN_MULTICAST_TWICE=OFF \: 7
-DECAL_NPCAP_SUPPORT=OFF \: 7
-DECAL_THIRDPARTY_BUILD_CMAKE_FUNCTIONS=ON \: 7
-DECAL_THIRDPARTY_BUILD_PROTOBUF=OFF \: 7
-DECAL_THIRDPARTY_BUILD_SPDLOG=ON \: 7
-DECAL_THIRDPARTY_BUILD_TINYXML2=ON \: 7
-DECAL_THIRDPARTY_BUILD_FINEFTP=ON \: 7
-DECAL_THIRDPARTY_BUILD_CURL=OFF \: 7
-DECAL_THIRDPARTY_BUILD_GTEST=ON \: 7
-DECAL_THIRDPARTY_BUILD_HDF5=OFF \: 7
-DECAL_THIRDPARTY_BUILD_RECYCLE=ON \: 6
-DECAL_THIRDPARTY_BUILD_TCP_PUBSUB=ON \: 6
-DCMAKE_BUILD_TYPE=Release \: 15
-DCMAKE_INSTALL_PREFIX= CUSTOM_PATH_DIR \: 8
sudo mkdir CUSTOM_PATH_DIR: 88
sudo cp "ENV_VAR CUSTOM_PATH_FILE" CUSTOM_PATH_DIR: 6
cmake ENV_VAR -DPython_FIND_VIRTUALENV=FIRST: 7
cmake ENV_VAR -DPython_FIND_VIRTUALENV=ONLY: 7
cmake FLAG . FLAG create_python_wheel FLAG Release: 14
ctest -V: 64
cpack -G DEB: 25
cd regression-pytest: 6
make && make testnet && cd testnet/: 6
sh control_all.sh start: 6
cd .. && cp output CUSTOM_PATH_DIR regression-pytest CUSTOM_PATH_DIR: 6
sleep 15: 54
qmake: 86
USES: dominikh/staticcheck-action: 44
USES: andrewslotin/go-proxy-pull-action: 8
. CUSTOM_PATH_DIR verify: 7
USES: pullreminders/label-when-approved-action: 17
USES: aptos-labs/aptos-core/.github/actions/docker-setup: 23
npx playwright install: 61
cat ENV_VAR CUSTOM_PATH_DIR: 12
git config FLAG user.name 'GitHub Actions': 15
git config FLAG user.email '41898282+github-actions[bot]': 26
git push -f: 20
USES: crazy-max/ghaction-github-runtime: 47
USES: stefanprodan/helm-gh-pages: 48
mkdir build-shared && cd build-shared: 16
npm run lint-css: 6
USES: peaceiris/actions-mdbook: 172
cd docs && mdbook build: 7
make -C docs html: 21
sudo apt-get -y -q install ffmpeg libavcodec-extra: 13
. CUSTOM_PATH_FILE ${{ matrix.framework }}: 8
sudo apt-get install -y gcc: 7
ls -l CUSTOM_PATH_DIR: 56
ln -s ENV_VAR CUSTOM_PATH_DIR: 13
echo "ENV_VAR CUSTOM_PATH_DIR: 11
ls -al ENV_VAR CUSTOM_PATH_DIR: 15
sudo apt-get install software-properties-common: 26
sudo add-apt-repository ppa:deadsnakes CUSTOM_PATH_DIR: 15
sudo apt-get install python${{ matrix.python-version }}-venv python${{ matrix.python-version }}-distutils git -y: 6
sh install-timelord.sh: 12
. CUSTOM_PATH_DIR square_asm 400000: 18
sudo rm -rf CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 35
docker rmi $(docker images -q) -f: 53
npm t -- FLAG: 6
npx semantic-release FLAG: 9
USES: InsonusK/get-latest-release: 24
USES: papeloto/action-zip: 55
mingw32-make: 16
nmake: 129
python -m pip install -U pip wheel setuptools: 27
yarn run check: 13
USES: DamianReeves/write-file-action: 49
sudo apt install libboost-dev libboost-system-dev libboost-iostreams-dev libboost-python-dev: 15
pip install FLAG pip setuptools wheel pytest: 21
python setup.py v8: 26
pytest -v: 102
poetry run python . CUSTOM_PATH_FILE: 8
git clean -fd: 22
git checkout FLAG: 6
git stash pop || true: 7
. CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 68
USES: egor-tensin/vs-shell: 60
choco install openssl FLAG: 10
.ci CUSTOM_PATH_FILE: 127
USES: githubocto/repo-visualizer: 32
USES: pozetroninc/github-action-get-latest-release: 79
sudo apt-get install -y python3: 9
export PATH="ENV_VAR: CUSTOM_PATH_DIR: 10
flutter doctor: 19
echo "ENV_VAR" | base64 FLAG > app CUSTOM_PATH_FILE: 17
echo "storeFile=upload-keystore.jks" >> key.properties: 12
echo "keyAlias=ENV_VAR" >> key.properties: 16
echo "storePassword=ENV_VAR" >> key.properties: 16
echo "keyPassword=ENV_VAR" >> key.properties: 16
USES: supercharge/redis-github-action: 93
USES: home-assistant/actions/hassfest: 81
pip install PyGithub: 25
sudo apt-get -y update: 142
(set -x; df -h): 6
(set -x; sudo rm -rf CUSTOM_PATH_DIR || true): 15
cargo install FLAG cargo-make: 32
free -m: 24
ps auxf: 8
cat CUSTOM_PATH_FILE || true: 13
brew install protobuf: 24
curl -sLO URL: 24
echo "VERSION=ENV_VAR" >> ENV_VAR: 195
sudo pip install FLAG pip: 6
npm config set CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 81
USES: JustinBeckwith/linkinator-action: 16
USES: ./.github/workflows/setup-venv: 23
python -c "import torch; print('torch:', torch.__version__, torch)": 30
python -c "import torch; print('CUDA available:', torch.cuda.is_available())": 29
ds_report: 32
cd example CUSTOM_PATH_DIR: 16
npm install -g snyk: 14
python -m pip install -r requirements.dev.txt: 8
cmake -E make_directory ${{github.workspace}} CUSTOM_PATH_DIR: 188
cmake ENV_VAR -DCMAKE_BUILD_TYPE=ENV_VAR: 59
ctest -C ENV_VAR: 77
USES: returntocorp/semgrep-action: 42
cp tests CUSTOM_PATH_FILE .env: 8
vendor CUSTOM_PATH_DIR build: 11
echo "CODEQL_PYTHON=$(which python)" >> ENV_VAR: 14
USES: FedericoCarboni/setup-ffmpeg: 52
poetry lock: 9
dotnet build . CUSTOM_PATH_FILE: 233
dotnet test . CUSTOM_PATH_FILE FLAG FLAG normal: 10
USES: CodSpeedHQ/action: 12
call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat": 31
cmake FLAG . FLAG ${{ matrix.BUILD_TYPE }}: 7
cmake FLAG . FLAG ${{ matrix.BUILD_TYPE }} FLAG install: 7
git clone URL : 8
git clone "URL: 14
echo CUSTOM_PATH_FILE CUSTOM_PATH_DIR > ~ CUSTOM_PATH_DIR: 12
USES: abel0b/setup-premake: 14
make -j2 config=release: 9
mkdir publish: 13
cp -r lualib publish/: 6
cp -r service publish/: 6
cp -r example publish/: 6
cd publish: 9
echo REPO="ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 18
echo VERSION="$(git describe FLAG FLAG=0 FLAG='v[0-9]*' | cut -c2-)-dev-pr-$(git rev-parse FLAG HEAD)-$(date FLAG +'%Y%m%d%H%M')" >> ENV_VAR: 6
npm run prerun: 204
sudo docker run FLAG FLAG docker CUSTOM_PATH_DIR: 142
sudo docker login FLAG ENV_VAR FLAG ENV_VAR: 142
sudo docker buildx create FLAG: 142
sudo docker buildx build FLAG linux CUSTOM_PATH_DIR FLAG oneuptime CUSTOM_PATH_DIR FLAG oneuptime CUSTOM_PATH_DIR FLAG -f . CUSTOM_PATH_DIR .: 76
USES: jiro4989/setup-nim-action: 15
poetry run mypy: 27
${{ steps.get_actionlint.outputs.executable }} -color: 6
docker build . FLAG ghcr.io CUSTOM_PATH_DIR: 6
echo ${{ github.event.inputs.userInput }}: 6
USES: ts-graphviz/setup-graphviz: 44
pipx run twine check dist CUSTOM_PATH_DIR: 29
python -m venv CUSTOM_PATH_DIR: 6
source CUSTOM_PATH_DIR: 154
test "ENV_VAR" = "ENV_VAR": 6
python -m pip install dist CUSTOM_PATH_FILE: 44
USES: ammaraskar/sphinx-action: 70
aws s3 sync . CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR FLAG: 7
pip install FLAG .: 59
ruff FLAG=github .: 25
make -C docs/ html: 10
unzip build.zip: 7
USES: google/clusterfuzzlite/actions/build_fuzzers: 34
python -m pip install -r test-requirements.txt: 30
python -m unittest discover: 23
cp config_examples CUSTOM_PATH_FILE config.json: 6
freqtrade create-userdir FLAG user_data: 6
isort FLAG .: 50
ruff check FLAG=github .: 7
USES: rjstone/discord-webhook-notify: 47
rm CUSTOM_PATH_DIR || true: 12
USES: scherermichael-oss/action-has-permission: 19
echo "##[set-output name=branch;]$(echo ENV_VAR##* CUSTOM_PATH_DIR: 7
pip install -U setuptools wheel: 12
echo "ENV_VAR" | docker login FLAG ENV_VAR FLAG: 27
docker version -f '{{.Server.Experimental}}': 9
echo $'{\n    "experimental": true\n}' | sudo tee CUSTOM_PATH_FILE: 6
sudo systemctl restart docker: 50
echo ${{ steps.buildx.outputs.platforms }}: 123
USES: GoogleCloudPlatform/release-please-action: 97
cd "ENV_VAR" CUSTOM_PATH_DIR: 18
USES: carlosperate/download-file-action: 81
mkdir -p out CUSTOM_PATH_DIR: 13
cmake -S . -B build: 43
cmake -DCMAKE_BUILD_TYPE=release -DMG_ENTERPRISE=OFF ..: 6
make -jENV_VAR: 33
mkdir output && cd output: 8
ctest -R memgraph__unit FLAG: 13
cd tests CUSTOM_PATH_DIR: 172
make -jENV_VAR memgraph__unit: 6
cd tools CUSTOM_PATH_DIR: 92
cd generated: 7
tar -czf code_coverage.tar.gz coverage.json html report.json summary.rmu: 6
ctest -E "(memgraph__unit|memgraph__benchmark)" FLAG: 6
. CUSTOM_PATH_DIR diff: 7
cmake -DCMAKE_BUILD_TYPE=release ..: 12
source ve3 CUSTOM_PATH_DIR: 19
python3 durability FLAG 5: 6
USES: AutoModality/action-clean: 103
USES: xom9ikk/dotenv: 73
USES: cuchi/jinja2-action: 34
cat .docker CUSTOM_PATH_FILE: 7
docker builder prune -f -a: 13
docker system prune -f: 34
docker image prune -f -a: 13
rm -rf .git: 44
echo ${{ secrets.tflm-bot-token }} | docker login ghcr.io -u tflm-bot FLAG: 14
exit ENV_VAR: 42
echo "release_tag=$release_tag" >> ENV_VAR     : 14
rustup default ${{ matrix.toolchain }}: 16
cat package.json: 23
scripts CUSTOM_PATH_FILE1: 34
ls -lsa releases: 7
test -e ${{ matrix.bundle_gemfile }}.lock: 18
test -e ${{ env.BUNDLE_GEMFILE }}.lock: 68
make mutate-changes: 31
npm install .: 13
rm .gitignore: 15
echo "${{ secrets.DOCKER_PASSWORD }}" | docker login FLAG ${{ secrets.DOCKER_USER }} FLAG: 7
docker pull devkitpro CUSTOM_PATH_DIR: 6
yarn e2e: 25
. CUSTOM_PATH_DIR fix FLAG FLAG=dots FLAG=no FLAG: 13
. CUSTOM_PATH_DIR update FLAG FLAG FLAG: 25
. CUSTOM_PATH_DIR FLAG=.psalm CUSTOM_PATH_FILE FLAG FLAG FLAG=false FLAG: 13
vendor CUSTOM_PATH_DIR FLAG=coverage.xml: 38
bash <(curl -s URL || true: 11
string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC): 52
message("::set-output name=timestamp::${current_date}"): 49
echo "base_dir = ENV_VAR" > ~ CUSTOM_PATH_FILE: 29
echo "compression = true" >> ~ CUSTOM_PATH_FILE: 35
echo "compression_level = 6" >> ~ CUSTOM_PATH_FILE: 18
echo "max_size = 100M" >> ~ CUSTOM_PATH_FILE: 7
echo "hash_dir = false" >> ~ CUSTOM_PATH_FILE: 8
ccache -z: 110
export: 33
ulimit -a: 39
git config FLAG credential.helper "" # disable the keychain credential helper: 6
git config FLAG FLAG credential.helper store # enable the local store credential helper: 6
echo "URL secrets.ACCESS_TOKEN }}" >> ~ CUSTOM_PATH_DIR # add credential: 6
git config FLAG url."URL git: # credentials add credential: 6
lcov FLAG build CUSTOM_PATH_DIR FLAG build CUSTOM_PATH_DIR FLAG gcov FLAG -o coverage CUSTOM_PATH_FILE: 6
echo ::set-output name=VERSION::$(echo ENV_VAR | cut -d / -f 3): 54
docker tag georchestra CUSTOM_PATH_DIR steps.version.outputs.VERSION }} georchestra CUSTOM_PATH_DIR: 14
docker push georchestra CUSTOM_PATH_DIR steps.version.outputs.VERSION }}: 30
brew install FLAG macfuse: 11
cargo check FLAG FLAG FLAG: 42
cargo bench: 23
make clippy: 23
USES: aglipanci/laravel-pint-action: 35
cmake FLAG build FLAG ENV_VAR: 10
mkdir -p artifact CUSTOM_PATH_DIR: 10
cp build CUSTOM_PATH_DIR artifact: 8
cp lib CUSTOM_PATH_FILE artifact CUSTOM_PATH_DIR: 11
rm -rf artifact CUSTOM_PATH_FILE,tests CUSTOM_PATH_DIR: 7
cp build CUSTOM_PATH_FILE artifact: 9
mkdir -p tests CUSTOM_PATH_DIR: 11
bash .github CUSTOM_PATH_DIR: 11
sudo apt-get update FLAG: 71
curl URL | sh: 25
go get github.com CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
.github CUSTOM_PATH_FILE load ${{ env.ALPINE_VERSION }}: 27
USES: ./.github/actions/todb-init: 12
USES: ./.github/actions/tvdb-init: 10
.github CUSTOM_PATH_FILE save ${{ env.ALPINE_VERSION }}: 25
flutter analyze FLAG: 27
USES: supplypike/setup-bin: 10
git add src CUSTOM_PATH_DIR: 7
USES: tj-actions/branch-names: 66
USES: cloudflare/wrangler-action: 71
echo "tag=${{ hashFiles('**images CUSTOM_PATH_FILE') }}" >> ENV_VAR: 7
## If the fork has changed the Dockerfile, we need to fail the pipeline.: 7
## This is to prevent a case where a forked repo could expect changes in the Dockerfile: 7
## to be used in the build process.: 7
git diff FLAG HEAD origin CUSTOM_PATH_DIR -- images CUSTOM_PATH_FILE || exit 1: 7
pip install -e .[dev]: 101
python -m pip install -r tools CUSTOM_PATH_FILE: 9
USES: ./.github/actions/prep: 7
USES: ./.github/actions/install-linux-build-deps: 28
USES: ./.github/actions/install-solana: 28
USES: ./.github/actions/install-rust: 83
USES: ./.github/actions/build-token-metadata: 15
cargo +${{ env.RUST_TOOLCHAIN }} test -- FLAG FLAG 1: 11
cargo +${{ env.RUST_TOOLCHAIN }} test-bpf FLAG: 13
sudo apt-get install jq -y: 18
echo "GOPATH=$(go env GOPATH)" >> ENV_VAR: 84
mkdir -p "$(go env GOPATH) CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 20
ln -s "ENV_VAR" "$(go env GOPATH) CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 20
echo "VERSION=$(git describe FLAG FLAG FLAG)" >> ENV_VAR: 20
go build -tags "osusergo netgo static_build" -ldflags="-X main.Version=ENV_VAR -extldflags=-static" github.com CUSTOM_PATH_DIR: 38
echo "BUILD_TAG=v0.0.0-$(. CUSTOM_PATH_DIR FLAG)" >> ENV_VAR: 18
docker build -t quay.io CUSTOM_PATH_DIR .: 29
functests CUSTOM_PATH_FILE ENV_VAR: 16
cargo doc FLAG FLAG: 105
sudo xcode-select -s CUSTOM_PATH_DIR env.xcodeVersion }}.app CUSTOM_PATH_DIR: 9
echo "FIREBASE_CPP_SDK_DIR=${{ github.workspace }} CUSTOM_PATH_DIR >> ENV_VAR: 11
cd firebase-cpp-sdk: 11
pip install -r scripts CUSTOM_PATH_FILE: 49
USES: ./gha/unity: 10
echo "::add-matcher::${{ runner.tool_cache }} CUSTOM_PATH_FILE": 413
curl -fsSL URL | sudo gpg FLAG -o CUSTOM_PATH_FILE: 15
ninja -v: 9
mkdir -p "ENV_VAR CUSTOM_PATH_DIR: 211
cd deployments/: 6
make dist: 130
USES: andresz1/size-limit-action: 72
echo "TAG=$(git describe FLAG FLAG=0)" >> ENV_VAR: 6
USES: ./.github/actions/env: 9
make setup: 69
echo "sha=$(git rev-parse HEAD)" >> ENV_VAR: 15
source .toolbelt CUSTOM_PATH_FILE: 7
docker pull "ENV_VAR": 21
git fetch FLAG origin: 55
echo 'PATH= CUSTOM_PATH_DIR >> ENV_VAR: 10
git clone FLAG 1 URL: 89
set: 19
npx lerna publish from-package FLAG: 12
git config FLAG user.name "GitHub Actions Bot": 23
docker image prune -f: 34
mkdir -p dist: 69
rustup component add rustfmt clippy: 36
USES: jpribyl/action-docker-layer-caching: 41
cd misc CUSTOM_PATH_DIR: 20
npm run deploy: 63
npm run size: 7
mv . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 114
CI=false npm run build: 7
php -r "file_exists('.env') || copy('.env.example', '.env');": 51
composer install -q FLAG FLAG FLAG FLAG FLAG FLAG: 21
make docgen: 6
pip install ninja: 14
mkdir artifact: 35
git describe FLAG FLAG: 10
cd artifact: 11
rm -f release CUSTOM_PATH_FILE: 8
make golangci-lint: 10
FLAG 'Content-Type: application CUSTOM_PATH_DIR \: 20
sudo -H apt-get update -y: 20
sudo -H apt-get install -y libdbus-1-dev: 6
git diff: 203
python3 -m venv .venv: 23
. .venv CUSTOM_PATH_DIR: 56
pip install twine wheel setuptools: 10
echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> ENV_VAR: 23
composer self-update: 41
composer update FLAG FLAG FLAG FLAG FLAG: 79
vendor CUSTOM_PATH_DIR run: 10
USES: pantsbuild/actions/init-pants: 7
USES: replicatedhq/action-fossa/install: 7
USES: replicatedhq/action-fossa/scan: 7
echo "matrix=ENV_VAR" >> ENV_VAR: 17
echo "ENV_VAR" >> ENV_VAR: 169
echo "EOF" >> ENV_VAR: 181
mkdir .. CUSTOM_PATH_DIR: 117
mvn install:install-file -Dfile=docs CUSTOM_PATH_FILE -DgroupId=org.springframework.data -DartifactId=spring-data-commons -Dversion=3.2.1-SNAPSHOT -Dpackaging=jar: 6
USES: fountainhead/action-wait-for-check: 62
cargo install clippy-sarif sarif-fmt: 24
rm target CUSTOM_PATH_FILE: 10
make bundle: 14
docker load -i . CUSTOM_PATH_FILE: 8
sudo apt update && sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev: 15
USES: labring/sealos-action: 34
sudo apt-get remove docker docker-engine docker.io containerd runc: 8
sudo apt-get remove -y moby-engine moby-cli moby-buildx moby-compose: 8
sudo rm -rf CUSTOM_PATH_FILE: 79
echo "version=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 15
rustup target add x86_64-unknown-linux-musl: 29
sudo apt-get -qq install musl-tools: 7
rustup target add aarch64-unknown-linux-gnu: 25
rustup target add armv7-unknown-linux-gnueabihf: 6
tar xf ENV_VAR CUSTOM_PATH_FILE: 6
USES: ffurrer2/extract-release-notes: 40
python -m build FLAG FLAG FLAG dist/ .: 136
python -m pip install FLAG pip poetry: 39
poetry config installer.modern-installation false: 21
pip install FLAG -e .: 40
USES: crate-ci/typos: 143
USES: vedantmgoyal2009/winget-releaser: 94
USES: reviewdog/action-setup: 50
cd runner: 11
npm run build-runner: 23
mv * .github .. CUSTOM_PATH_DIR: 19
mv .. CUSTOM_PATH_FILE} .: 19
mv .. CUSTOM_PATH_FILE CUSTOM_PATH_DIR .github: 6
.. CUSTOM_PATH_DIR init FLAG ENV_VAR FLAG csharp FLAG ENV_VAR FLAG ${{ github.token }}: 8
.. CUSTOM_PATH_DIR analyze FLAG ENV_VAR FLAG ENV_VAR FLAG ENV_VAR FLAG ENV_VAR FLAG ${{ github.token }}: 8
USES: alex-page/github-project-automation-plus: 129
node scripts CUSTOM_PATH_FILE ENV_VAR: 8
echo ::group::build: 7
make server compose-args="FLAG": 9
make wait-server: 9
echo ::endgroup::build: 7
make run run-cmd="npm run lint" make-args="no-interactive no-tty": 17
export DEBIAN_FRONTEND=noninteractive: 83
USES: ./.github/actions/checkout-pr: 22
USES: ./.github/actions/setup-env: 55
USES: ./.github/actions/bootstrap: 82
USES: khan/pull-request-comment-trigger: 46
sudo add-apt-repository -y "deb URL `lsb_release -sc` main universe restricted multiverse": 19
sudo apt-get install astyle: 10
git config push.default upstream: 7
git config FLAG user.email "bot": 43
echo "::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)": 12
python3 -m http.server 8080 &: 6
curl -X GET "URL: 6
sudo apt update -y && sudo apt install -y qemu qemu-user-static: 9
sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common: 8
curl -fsSL URL | sudo apt-key add -: 40
sudo add-apt-repository "deb [arch=amd64] URL $(lsb_release -cs) stable": 16
sudo apt install docker-ce: 11
docker login -u ${{ secrets.DOCKER_REGISTRY_ID }} -p ${{ secrets.DOCKER_REGISTRY_PASS }}: 10
gem install bundler: 314
USES: paambaati/codeclimate-action: 153
python setup.py build: 49
python -m pytest FLAG 4 -vv FLAG tests CUSTOM_PATH_DIR: 8
rustup update nightly: 14
rustup update stable: 95
rustup target add wasm32-unknown-unknown FLAG nightly: 7
cd libva: 20
. CUSTOM_PATH_FILE FLAG= CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR: 19
cd gmmlib: 12
cmake -DCMAKE_INSTALL_PREFIX= CUSTOM_PATH_DIR -DCMAKE_INSTALL_LIBDIR= CUSTOM_PATH_DIR ..: 12
make VERBOSE=1 -j$(nproc): 12
USES: sturdy-dev/codeball-action: 24
npm audit: 12
USES: CasperWA/push-protected: 14
curl -f URL | node - add FLAG pnpm: 13
npx conventional-github-releaser -p angular: 17
echo "CC=gcc-10" >> ENV_VAR && echo "CXX=g++-10" >> ENV_VAR: 8
USES: ilammy/setup-nasm: 92
printenv: 60
pip install gcovr: 19
unzip -o ENV_VAR CUSTOM_PATH_FILE -d ENV_VAR CUSTOM_PATH_DIR: 61
cd build-release: 13
make coverage: 110
rustup update ${{ matrix.rust }} FLAG && rustup default ${{ matrix.rust }}: 11
rustup update stable && rustup default stable && rustup component add rustfmt: 12
cargo build FLAG ${{ matrix.target }}: 28
pip3 install openai tqdm tiktoken: 10
cd scripts: 72
git config FLAG user.name 'Translator': 12
git checkout "ENV_VAR": 50
git push FLAG origin "ENV_VAR": 23
bash . CUSTOM_PATH_DIR assembleDebug: 7
sudo apt install libpcsclite-dev check gengetopt help2man: 7
Set-PSDebug -Trace 1: 27
cd yubico-piv-tool-src CUSTOM_PATH_DIR: 11
cmake FLAG . -v: 8
$env:Path +=";C: CUSTOM_PATH_DIR: 8
ctest.exe -C Debug: 8
rm -r build; mkdir build; cd build: 6
USES: chevdor/srtool-actions: 23
TAG=$(echo ENV_VAR | head -c7): 6
echo ::set-output name=tag::ENV_VAR: 6
docker context create builders: 14
find . CUSTOM_PATH_DIR: 15
vendor CUSTOM_PATH_DIR -c tests CUSTOM_PATH_FILE: 9
. CUSTOM_PATH_DIR publish: 95
USES: legoktm/gh-action-build-deb: 10
USES: legoktm/gh-action-dput: 6
which -a clang: 25
echo PATH=ENV_VAR: 24
ls -al CUSTOM_PATH_DIR: 19
xcrun FLAG: 10
tar xf ENV_VAR: 6
llvm-config FLAG: 6
sysctl -n machdep.cpu.brand_string: 18
echo "ISPC_HOME=ENV_VAR" >> ENV_VAR: 7
echo "LLVM_HOME=ENV_VAR" >> ENV_VAR: 6
.github CUSTOM_PATH_FILE1: 49
wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status: 26
$env:ISPC_HOME = "$pwd": 8
.github CUSTOM_PATH_FILE1 "${{ matrix.arch }}": 8
sudo apt-get -q update: 28
build-essential \: 18
gcc \: 7
git \: 13
libssl-dev \: 12
cd CUSTOM_PATH_DIR && \: 8
pip install -r requirements_dev.txt: 104
echo fs.inotify.max_user_watches=524288 | sudo tee -a CUSTOM_PATH_FILE && sudo sysctl -p: 44
USES: nwtgck/actions-netlify: 136
echo ENV_VAR | docker login ghcr.io -u ENV_VAR FLAG : 11
docker tag ghcr.io CUSTOM_PATH_DIR ghcr.io CUSTOM_PATH_DIR: 38
USES: ./.github/actions/build-matrix: 9
USES: ./generator-jhipster/.github/actions/setup: 13
USES: ./generator-jhipster/.github/actions/compare-base: 6
USES: ./generator-jhipster/.github/actions/compare: 6
npm run ci:e2e:prepare: 14
npm run ci:backend:test: 13
npm run ci:frontend:test: 11
npm run ci:e2e:package: 11
npm run ci:e2e:run FLAG: 11
sudo apt-get install -y qemu-user-static: 16
USES: s4u/maven-settings-action: 48
cd ${{ env.PROJECT_DIR }}: 9
npm run dist: 65
docs CUSTOM_PATH_FILE: 8
cargo install cargo-ndk: 10
CURRENT_VERSION=$(node -p 'require(". CUSTOM_PATH_FILE'): 13
echo '```' >> ENV_VAR: 54
date: 40
sleep 240: 6
ls ENV_VAR: 36
cat ENV_VAR: 84
USES: ASzc/change-string-case-action: 91
mkdir -p build: 131
USES: apple-actions/import-codesign-certs: 98
cd . CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 13
cd python: 102
docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}: 17
IMAGE_ID=kserve CUSTOM_PATH_DIR: 20
USES: ./.github/actions/setup-contracts-clients: 11
yarn start &: 7
gem build *.gemspec: 41
gem push *.gem: 37
git push origin "ENV_VAR": 35
USES: Homebrew/actions/setup-homebrew: 183
USES: Homebrew/actions/git-user-config: 35
USES: Homebrew/actions/git-try-push: 27
USES: TriPSs/conventional-changelog-action: 38
USES: jakejarvis/s3-sync-action: 161
tag=${{ github.ref_name }}: 13
plugin_version=$(echo $tag | cut -d- -f4-): 9
echo "plugin_version=${plugin_version}" >> ENV_VAR: 9
USES: booxmedialtd/ws-action-parse-semver: 37
USES: cloudquery/setup-cloudquery: 38
sudo cp . CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 17
npm run prepare: 16
npm run lint -- FLAG=0: 6
USES: fregante/setup-git-user: 39
git reset FLAG master: 6
git merge master: 8
source .github CUSTOM_PATH_FILE && c4_install_test_requirements ENV_VAR: 35
source .github CUSTOM_PATH_FILE && c4_show_info: 35
sudo apt-get install -y cppcheck: 9
pio upgrade: 7
USES: gavv/pull-request-artifacts: 6
docker build . FLAG Dockerfile: 11
USES: yyx990803/release-tag: 25
USES: ./.github/actions/setup-go: 100
USES: buildjet/cache: 18
go install google.golang.org CUSTOM_PATH_DIR: 65
pushd CUSTOM_PATH_DIR: 23
cp -r . CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 12
go install mvdan.cc CUSTOM_PATH_DIR: 31
USES: ./.github/actions/upload-datadog: 6
pnpm format:check: 17
USES: vlaurin/action-ghcr-prune: 24
brew install nasm: 10
echo "CC=clang" >> ENV_VAR: 20
echo "CXX=clang++" >> ENV_VAR: 20
make -C build: 21
USES: php-actions/phpunit: 24
USES: sarisia/actions-status-discord: 152
docker login FLAG chnliyong FLAG ENV_VAR: 10
cp .env.example .env: 82
dart bin CUSTOM_PATH_FILE '${{ secrets.LYRICS_SECRET }}' '${{ secrets.SPOTIFY_SECRET }}': 15
dart pub global activate melos: 41
flutter build macos: 17
du -sh build CUSTOM_PATH_FILE: 6
wget -O appimage-builder-x86_64.AppImage URL: 13
chmod +x appimage-builder-x86_64.AppImage: 14
tree .: 18
USES: KSXGitHub/github-actions-deploy-aur: 25
yarn build-for-contracts-dev: 7
find . -type d -name 'reports' | zip -@ -r build-reports.zip: 32
git fetch origin +refs CUSTOM_PATH_DIR: 29
USES: actions-cool/issues-helper: 481
dotnet test: 70
msbuild $env:Solution_Name CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 28
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv l4t-tensorflow:tf2: 6
if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi: 37
USES: asdf-vm/actions/setup: 24
echo "ENV_VAR" > ENV_VAR CUSTOM_PATH_DIR: 9
asdf plugin add golang: 13
asdf install golang: 16
asdf install nodejs: 7
url=URL: 8
set -x +e: 7
USES: antifree/json-to-variables: 18
echo "go_version=$(asdf current golang | xargs | cut -d ' ' -f 2)" >> ENV_VAR: 14
git clone URL .. CUSTOM_PATH_DIR: 41
USES: trilom/file-changes-action: 55
sudo apt-get install libxml2-utils xmlstarlet: 10
echo ::set-output name=version::$version: 7
npm run eslint: 85
git add package.json package-lock.json: 6
npm run ci:e2e: 6
USES: nelonoel/branch-name: 32
docker login FLAG "ENV_VAR" FLAG "ENV_VAR": 14
rustup set profile minimal: 47
mkdir -p . CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 7
yarn lerna run build: 7
sudo mkdir -p CUSTOM_PATH_FILE: 14
sudo touch CUSTOM_PATH_FILE: 15
set +o pipefail: 12
echo "Number of cores: $(nproc)": 9
echo "Number of threads: $(nproc FLAG)": 9
export PATH=ENV_VAR:`go env GOPATH` CUSTOM_PATH_DIR: 61
pushd build: 56
USES: container-tools/kind-action: 20
mvn install -DskipTests: 15
pip install FLAG nox: 8
sudo apt-get install -y linux-headers-$(uname -r): 7
sudo apt-get install -y python-is-python3: 6
sudo apt-get install -y bison build-essential cmake flex git libedit-dev libllvm11 llvm-11-dev libclang-11-dev zlib1g-dev libelf-dev libfl-dev python3-distutils: 6
sudo ln -s CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 122
tar xf bcc-src-with-submodule.tar.gz: 6
cd bcc/: 6
cd build/: 10
cmake -DCMAKE_INSTALL_PREFIX= CUSTOM_PATH_DIR -DPYTHON_CMD=python3 ..: 6
cd bcc CUSTOM_PATH_DIR: 6
cd eBPF_Supermarket CUSTOM_PATH_DIR: 90
mkdir ~ CUSTOM_PATH_DIR: 179
umask 377: 9
echo '${{ secrets.KNOWN_HOSTS }}' > ~ CUSTOM_PATH_DIR: 9
echo '${{ secrets.SSH_KEY }}' > ~ CUSTOM_PATH_DIR: 9
curl -T 'rootfs CUSTOM_PATH_DIR matrix.arch }}.deb' FLAG ~ CUSTOM_PATH_DIR '${{ secrets.UPLOAD_URL }}${{ matrix.dist }} CUSTOM_PATH_DIR: 6
curl 'URL secrets.CF_ZONE }} CUSTOM_PATH_DIR -H 'Authorization: Bearer ${{ secrets.CF_TOKEN }}' -H 'Content-Type: application CUSTOM_PATH_DIR \: 9
python3 -m pip install FLAG pip setuptools: 13
make release -j$(nproc): 6
echo "$(pwd) CUSTOM_PATH_DIR >> ENV_VAR: 64
USES: DeterminateSystems/update-flake-lock: 31
vendor CUSTOM_PATH_DIR analyze FLAG: 14
. .github CUSTOM_PATH_FILE: 93
USES: OSDKDev/lock-issues: 7
USES: creyD/prettier_action: 71
USES: AscensionGameDev/actions: 7
composer validate FLAG: 147
composer run-script test: 36
npm run postinstall: 32
USES: ./.github/actions/setup-zeebe: 34
USES: ./.github/actions/build-zeebe: 24
USES: ./.github/actions/build-docker: 15
coveralls FLAG=github: 177
cd out CUSTOM_PATH_DIR: 9
echo ${{ inputs.project-version }} > VERSION: 6
USES: jreleaser/release-action: 23
. CUSTOM_PATH_DIR -stop: 24
USES: camshaft/install: 9
USES: ashutoshgngwr/validate-fastlane-supply-metadata: 9
sudo update-alternatives FLAG CUSTOM_PATH_DIR gcc CUSTOM_PATH_DIR 9: 9
sudo update-alternatives FLAG CUSTOM_PATH_DIR g++ CUSTOM_PATH_DIR 9: 9
git config FLAG url."URL secrets.elevated-github-token }}:".insteadOf "URL: 6
go env: 106
make docker-build: 59
make e2e-tests: 10
mix coveralls.github: 22
echo "Runtime location: ${{ steps.srtool_build.outputs.wasm }}": 6
echo "Compressed Runtime: ${{ steps.srtool_build.outputs.wasm_compressed }}": 6
wget URL env.SUBWASM_VERSION }} CUSTOM_PATH_DIR env.SUBWASM_VERSION }}.deb: 11
sudo dpkg -i subwasm_linux_amd64_v${{ env.SUBWASM_VERSION }}.deb: 11
subwasm FLAG: 12
yarn run release: 22
echo "DT=$(date +'%Y-%m-%d_%H%M')" >> ENV_VAR: 8
sudo apt install -y curl: 13
sudo rm -Rf CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 10
'URL \: 11
| sudo -E bash: 11
sudo gem install fpm: 11
sudo . CUSTOM_PATH_FILE x86_64 ubuntu focal: 8
ls -a: 36
cd example/: 11
git config FLAG user.email "noreply": 33
sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev: 7
echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} FLAG: 40
IMAGE_ID=docker.pkg.github.com CUSTOM_PATH_DIR github.repository }} CUSTOM_PATH_DIR: 23
[ "ENV_VAR" == "main" ] && VERSION=latest: 24
docker load < CUSTOM_PATH_FILE: 39
composer require "laravel CUSTOM_PATH_DIR matrix.laravel }}" "orchestra CUSTOM_PATH_DIR matrix.testbench }}" "nesbot CUSTOM_PATH_DIR FLAG FLAG: 9
cd docker: 41
USES: ./.github/actions/install-protozero: 6
USES: ./.github/actions/cmake: 16
USES: ./.github/actions/ctest: 9
USES: ./.github/actions/build-windows: 7
USES: ./.github/actions/download-dist: 48
. CUSTOM_PATH_DIR test FLAG: 65
USES: ./.github/actions/checkout-submodules-and-bootstrap: 45
USES: ./.github/actions/setup-size-reports: 16
rm -rf examples CUSTOM_PATH_DIR: 7
pub publish -f: 7
composer show -D: 34
USES: andymckay/labeler: 144
brakeman -f sarif -o output.sarif.json .: 14
pip install .[test]: 103
USES: jakebailey/pyright-action: 36
sudo docker buildx build FLAG linux CUSTOM_PATH_DIR FLAG oneuptime CUSTOM_PATH_DIR FLAG -f . CUSTOM_PATH_DIR .: 122
USES: ridedott/merge-me-action: 47
make codespell: 6
python -m pip install .[dev]: 27
USES: ./.github/actions/set-env-variables: 73
sudo sysctl -w net.ipv6.conf.all.forwarding=1: 6
sudo sysctl -w net.ipv4.ip_forward=1: 8
USES: ./.github/actions/helm-default: 17
USES: cilium/cilium-cli: 45
kubectl get pods FLAG -o wide: 80
cilium status: 54
USES: aanm/junit2md: 38
chmod  777 . CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_DIR assembleGplayDebug: 7
gem install license_finder: 8
echo "GITHUB_TAG=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 17
USES: sendgrid/dx-automator/actions/release: 14
make docker-build docker-push: 9
USES: sendgrid/dx-automator/actions/datadog-release-metric: 15
sudo apt-get autoremove -y: 140
sudo apt-get clean -y: 24
USES: jaxxstorm/action-install-gh-release: 268
curl -o- -L URL | bash -s -- FLAG 1.13.0: 22
echo "ENV_VAR CUSTOM_PATH_FILE" >> ENV_VAR: 27
USES: pulumi/action-install-pulumi-cli: 170
pip3 install virtualenv==20.0.23: 60
pip3 install pipenv: 79
make build_${{ matrix.language }}: 28
tar -zcf sdk CUSTOM_PATH_DIR matrix.language }}.tar.gz -C sdk CUSTOM_PATH_DIR matrix.language }} .: 29
USES: GoTestTools/gotestfmt-action: 37
USES: MOZGIII/install-ldid-action: 7
tar -zxf ${{ github.workspace }} CUSTOM_PATH_FILE -C ${{ github.workspace }} CUSTOM_PATH_DIR: 18
tar -zxf ${{github.workspace}} CUSTOM_PATH_FILE -C ${{github.workspace}} CUSTOM_PATH_DIR: 36
python -m pip install pip twine: 13
echo "PACKAGE_VERSION=$(pulumictl get version FLAG generic)" >> ENV_VAR: 10
chcp 65001 #set code page to utf-8: 16
USES: xresloader/upload-to-github-release: 58
echo '::echo::on': 8
. CUSTOM_PATH_DIR jar: 14
USES: espressif/github-actions/sync_issues_to_jira: 42
USES: wangyoucao577/go-release-action: 67
sudo sh -c 'echo "deb [arch=amd64] URL stable main" >> CUSTOM_PATH_FILE': 11
sudo apt-get FLAG install google-chrome-stable: 11
google-chrome FLAG: 42
USES: jpmcb/prow-github-actions: 12
wget -qO - URL | sudo apt-key add -: 48
echo deb URL $(lsb_release -sc) main | sudo tee -a CUSTOM_PATH_FILE: 9
USES: mathiasvr/command-output: 21
sudo apt-get -y install protobuf-compiler: 23
USES: pr-mpt/actions-commit-hash: 13
sudo apt-get -y install graphviz: 22
cd source: 17
ccache.exe FLAG: 15
dart test FLAG vm: 10
git fetch FLAG FLAG FLAG=1 origin +refs CUSTOM_PATH_DIR: 66
rm -rf ENV_VAR: 48
brew install create-dmg: 29
USES: ./.github/actions/delete-groups: 6
python -m pip install pytest pytest-cov: 9
pytest tests: 80
autoreconf -i: 75
USES: game-ci/unity-test-runner: 27
flit build: 9
ls -R dist: 7
flit publish: 24
USES: DevExpress/testcafe-build-system/actions/set-status: 26
npx gulp build: 7
pushd '. CUSTOM_PATH_FILE': 10
twine upload FLAG testpypi dist CUSTOM_PATH_DIR: 21
USES: ./.github/actions/stripe_setup: 18
USES: EmergeTools/emerge-upload-action: 9
echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} FLAG: 22
composer global config FLAG allow-plugins.symfony CUSTOM_PATH_DIR true: 51
composer global require FLAG FLAG FLAG "symfony CUSTOM_PATH_DIR: 24
composer config extra.symfony.require "${{ matrix.symfony }}": 33
composer update FLAG: 60
composer analyse: 13
vendor CUSTOM_PATH_DIR FLAG=always: 40
sudo apt-get install libtool autoconf automake pkg-config stunnel4 ${{ matrix.build.install }}: 17
sudo python3 -m pip install impacket: 16
. CUSTOM_PATH_DIR FLAG FLAG ${{ matrix.build.configure }}: 14
make V=1: 56
make V=1 examples: 20
make V=1 test-ci: 20
echo "BUILD_DATE=$(date +"%Y-%m-%d")" >> ENV_VAR: 6
echo "BUILD_VERSION=$(git describe FLAG FLAG)" >> ENV_VAR: 6
cd ci CUSTOM_PATH_DIR: 34
USES: yiisoft/actions/db/environment-linux: 7
USES: yiisoft/actions/db/subpackage-install: 12
make doxygen: 12
. CUSTOM_PATH_DIR shadowJar: 24
USES: TrueBrain/actions-flake8: 23
mkdir -p output: 23
docker pull ghcr.io CUSTOM_PATH_DIR: 95
make rpm: 9
USES: saadmk11/github-actions-version-updater: 17
sudo . CUSTOM_PATH_DIR: 44
python -m pip freeze: 30
python -m flake8 .: 9
git clone URL .: 24
git fetch origin +ENV_VAR:ENV_VAR FLAG: 6
git checkout ENV_VAR: 122
bash scripts CUSTOM_PATH_DIR runner.os }} CUSTOM_PATH_FILE: 6
USES: ./.github/workflows/actions/get-core-dependencies: 16
USES: ./.github/workflows/actions/download-archive: 8
#: 254
python -m pip install FLAG pip setuptools wheel twine: 20
python -m twine upload dist CUSTOM_PATH_DIR: 32
composer require FLAG FLAG FLAG symfony CUSTOM_PATH_DIR: 12
vendor CUSTOM_PATH_DIR analyse: 40
docker rmi `docker images -q`: 22
sudo -E systemctl daemon-reload: 6
make -j$(nproc) || make -j1 V=s: 28
echo "=======================": 9
npm config set CUSTOM_PATH_FILE_TOKEN}}: 9
npm run clean: 30
USES: typoci/spellcheck-action: 7
Xvfb :99 -screen 0 1024x768x24 > CUSTOM_PATH_DIR 2>&1 &: 41
echo "NODE_OPTIONS=FLAG_old_space_size=4096" >> ENV_VAR: 27
USES: actions-cool/maintain-one-comment: 69
make cover: 27
USES: shogo82148/actions-goveralls: 138
go test -short . CUSTOM_PATH_DIR: 6
curl -sSfL URL | sh -s -- -b $(go env GOPATH) CUSTOM_PATH_DIR v1.50.0: 6
curl -L URL > . CUSTOM_PATH_DIR: 68
make docker: 31
cargo publish: 94
curl URL -sSf | sh: 126
USES: bubkoo/use-app-token: 15
USES: cirrus-actions/rebase: 144
USES: zgosalvez/github-actions-ensure-sha-pinned-actions: 7
cargo bench FLAG: 27
chown -R coder:coder CUSTOM_PATH_DIR: 8
cargo clippy FLAG FLAG -- -D warnings: 104
USES: actions-rust-lang/setup-rust-toolchain: 167
echo "fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}": 12
echo "keyid:       ${{ steps.import_gpg.outputs.keyid }}": 13
echo "name:        ${{ steps.import_gpg.outputs.name }}": 13
echo "email:       ${{ steps.import_gpg.outputs.email }}": 12
pip install setuptools wheel twine FLAG: 6
USES: labring/gh-rebot: 11
make -j "$(nproc)" |& tee build.log: 7
python3 . CUSTOM_PATH_FILE build.log: 9
clang++ FLAG: 17
.\scripts\log-env.ps1: 6
brew install libomp: 57
pip install FLAG FLAG eager -r requirements.txt: 10
#flake8 . FLAG FLAG=E9,F63,F7,F82 FLAG FLAG: 12
#flake8 . FLAG FLAG FLAG=10 FLAG=127 FLAG: 12
cmake FLAG . FLAG doc: 8
USES: ShiftLeftSecurity/scan-action: 22
flutter test FLAG: 71
dart pub publish FLAG: 24
flutter build appbundle FLAG: 9
flutter build ios FLAG FLAG: 45
flutter build web: 32
pip install FLAG ruff: 17
USES: Azure/setup-helm: 31
USES: digitalocean/action-doctl: 68
npm run lint-js: 9
sudo apt-get install -y awscli: 12
ls docs CUSTOM_PATH_DIR: 7
ls release CUSTOM_PATH_DIR: 7
rm -rf "ENV_VAR": 38
git secrets FLAG: 12
docker FLAG: 49
echo "TAG=ENV_VAR" >> ENV_VAR: 33
npm run test -- FLAG: 25
make ${{ matrix.test }}: 36
USES: tomhjp/gh-action-jira-create: 15
USES: tomhjp/gh-action-jira-search: 18
USES: tomhjp/gh-action-jira-comment: 13
USES: atlassian/gajira-transition: 40
pip install FLAG pip : 6
cargo hack build FLAG ${{ matrix.target }} FLAG FLAG default,std: 16
USES: k-paxian/dart-package-publisher: 40
USES: martinbeentjes/npm-get-version-action: 132
docker login -u ${{ secrets.ORG_DOCKER_USERNAME }} -p ${{ secrets.ORG_DOCKER_PASSWORD }}: 12
cd server: 54
echo -e "[multilib]\nInclude = CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> CUSTOM_PATH_FILE: 6
pacman -Syu FLAG base-devel sudo: 8
useradd user -G wheel && echo "user ALL=(ALL) NOPASSWD: ALL" >> CUSTOM_PATH_DIR: 13
cargo run: 22
chmod -R 777 *: 17
echo ::set-output name=TAG::ENV_VAR CUSTOM_PATH_DIR: 17
git config FLAG user.email '<>': 9
USES: martinthomson/i-d-template: 28
tree: 39
${{matrix.install}}: 12
ctest -C ${{matrix.build_type}} FLAG: 23
USES: Chizkiyahu/delete-untagged-ghcr-action: 7
USES: ./.github/actions/rosa-cli-setup: 21
python3 -m pip install FLAG pip setuptools wheel: 54
cd docker CUSTOM_PATH_DIR: 74
cd ARM_Out: 66
echo "请自动忽略META-INF文件夹。" > 忽略META-INF文件夹.txt: 78
cd ..       : 60
python diy CUSTOM_PATH_FILE FLAG "${{ secrets.ALIYUN_TOKEN }}" FLAG "OpenWrt CUSTOM_PATH_DIR FLAG "ARM_Out CUSTOM_PATH_DIR +%Y%m%d).zip"                        : 58
git submodule init && git submodule update: 40
tagPrefix=refs CUSTOM_PATH_DIR: 10
tagPrefixLen=${#tagPrefix}: 13
RELEASE_VERSION=ENV_VAR:$tagPrefixLen}: 13
echo "RELEASE_VERSION=ENV_VAR" >> ENV_VAR: 55
dotnet build FLAG Release: 178
ls . CUSTOM_PATH_DIR: 140
cp utils CUSTOM_PATH_FILE1 generate-release-note.ps1: 31
$env:GitProjectPath="plugins CUSTOM_PATH_DIR: 24
src=$( CUSTOM_PATH_DIR -Lfs URL && eval "$src" || exit 1: 49
USES: renovatebot/github-action: 27
USES: JamesIves/github-sponsors-readme-action: 28
make mutate: 30
make package: 172
make test-all: 67
USES: skx/github-action-publish-binaries: 23
USES: arduino/arduino-lint-action: 14
make -f builder.Makefile cli: 16
make e2e-aci: 10
make -f builder.Makefile test: 6
strip "target CUSTOM_PATH_DIR matrix.target }} CUSTOM_PATH_DIR: 13
export QT_DEBUG_PLUGINS=1: 6
make gen: 58
USES: oxidecomputer/actions-rs_toolchain: 39
npm install -g pnpm && pnpm i FLAG: 10
cd packages CUSTOM_PATH_DIR && npm run build: 22
mkdir -p output CUSTOM_PATH_DIR: 40
USES: jerray/publish-docker-action: 22
sudo apt-get install -y lcov: 15
sudo apt-get install libpq-dev: 19
ctest -VV: 13
lcov FLAG . FLAG FLAG coverage.info: 23
lcov FLAG coverage.info: 30
sudo apt-get -qq update || true: 14
sudo apt install -y valgrind: 15
PATH=ENV_VAR:ENV_VAR CUSTOM_PATH_DIR: 48
mv "ENV_VAR CUSTOM_PATH_DIR "ENV_VAR CUSTOM_PATH_DIR: 21
touch ~ CUSTOM_PATH_FILE: 19
export ANDROID_SDK_ROOT=ENV_VAR: 7
. CUSTOM_PATH_DIR FLAG FLAG: 104
wget -nv URL: 40
sudo apt -y install . CUSTOM_PATH_FILE: 6
cd functional-tests: 6
. CUSTOM_PATH_DIR publishToMavenLocal: 28
echo VERSION=ENV_VAR >> ENV_VAR: 18
echo IMAGE_ID=ENV_VAR >> ENV_VAR: 12
yarn type-check: 48
cargo generate-lockfile: 77
cd .. CUSTOM_PATH_DIR && cargo doc FLAG FLAG: 14
USES: netlify/actions/cli: 31
cargo clippy FLAG FLAG=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt: 23
sudo rm -rf CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 36
sudo cp repo CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 22
mkdir friendlywrt-rk3328: 9
echo ': 9
CONFIG_OPENSSL_ENGINE_BUILTIN=y: 7
CONFIG_OPENSSL_WITH_DTLS=y: 8
CONFIG_OPENSSL_WITH_EC2M=y: 8
CONFIG_OPENSSL_WITH_NPN=y: 8
CONFIG_PACKAGE_htop=y: 6
CONFIG_PACKAGE_vim-fuller=y: 6
CONFIG_PACKAGE_luci-app-netdata=y: 6
CONFIG_PACKAGE_luci-app-unblockmusic=y: 6
CONFIG_PACKAGE_luci-theme-material=y: 7
git config FLAG user.email "action" && git config FLAG user.name "GitHub Action": 8
git checkout origin CUSTOM_PATH_DIR: 21
sed -i ' CUSTOM_PATH_DIR package CUSTOM_PATH_FILE: 12
sed -i ' CUSTOM_PATH_DIR -R root:root CUSTOM_PATH_DIR package CUSTOM_PATH_DIR: 6
sed -i 's CUSTOM_PATH_DIR -eu CUSTOM_PATH_DIR -u CUSTOM_PATH_DIR scripts CUSTOM_PATH_FILE: 17
. CUSTOM_PATH_FILE nanopi_r2s.mk: 8
gzip friendlywrt-rk3328 CUSTOM_PATH_FILE: 7
rm -rf . CUSTOM_PATH_DIR: 411
mv friendlywrt-rk3328 CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 7
cp friendlywrt-rk3328 CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 9
zip -r artifact.zip . CUSTOM_PATH_DIR: 6
sudo apt update -q: 20
echo "::endgroup::": 701
autoreconf -vif: 20
echo "::group::configure": 6
sudo apt-get install -y libgbm-dev: 13
npx lerna run build: 13
USES: burrunan/gradle-cache-action: 135
docker-compose ps: 16
echo "Pull Request Number - ${{ env.PULL_REQUEST_NUMBER }}": 18
chmod 755 . CUSTOM_PATH_FILE: 18
sudo FLAG=GITHUB_ACTIONS . CUSTOM_PATH_FILE: 9
#ls -la CUSTOM_PATH_DIR: 11
sudo cat CUSTOM_PATH_FILE: 82
. CUSTOM_PATH_FILE build: 61
. CUSTOM_PATH_FILE start: 15
ENV_VAR CUSTOM_PATH_DIR FLAG: 40
ls -l .. CUSTOM_PATH_DIR: 28
git fetch FLAG FLAG=1 origin master: 26
. CUSTOM_PATH_FILE automated_ci 64_only: 7
USES: snapcore/action-publish: 80
digest="${{ steps.build.outputs.digest }}": 17
docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}: 8
cargo login ${{ secrets.CRATES_IO_TOKEN }}: 20
echo ok go: 22
git config FLAG FLAG safe.directory `pwd`: 33
USES: ./.github/actions/bazelrc: 15
USES: ./.github/actions/gcloud_creds: 6
echo "ENV_VAR64}" | base64 FLAG | gpg FLAG FLAG FLAG: 11
export TAG_NAME="ENV_VAR#* CUSTOM_PATH_DIR: 9
mkdir -p "ENV_VAR": 147
git config FLAG user.name 'pixie-io-buildbot': 8
git config FLAG user.email 'build': 8
git config FLAG user.signingkey "ENV_VAR": 6
git config FLAG commit.gpgsign true: 18
USES: codelytv/pr-size-labeler: 26
npx tsc: 19
git diff FLAG FLAG > .upgrade.tmp.patch: 21
[ -s ${{ runner.temp }} CUSTOM_PATH_FILE ] && git apply ${{ runner.temp }} CUSTOM_PATH_FILE || echo "Empty patch. Skipping.": 65
curl -i FLAG -X POST -H "Accept: application CUSTOM_PATH_FILE3+json" -H "Authorization: token ENV_VAR" URL github.repository }} CUSTOM_PATH_DIR -d '{"name":"build","head_sha":"github-actions CUSTOM_PATH_DIR needs.upgrade.outputs.conclusion }}","output":{"title":"Created via the upgrade-dependencies workflow.","summary":"Action run URL: URL github.repository }} CUSTOM_PATH_DIR github.run_id }}"}}': 7
export CPPFLAGS="-IENV_VAR CUSTOM_PATH_DIR: 8
phpize: 38
xcrun simctl list runtimes: 8
USES: ./tools/pipeline-runner: 7
USES: softprops/turnstyle: 61
curl -L URL > CUSTOM_PATH_DIR: 8
echo ENV_VAR | base64 FLAG > signing CUSTOM_PATH_FILE: 8
Copy-item -Force -Recurse -Verbose "samples\${{ matrix.sample }}" -Destination "..\..\src": 23
npx react-native-windows-init FLAG FLAG ${{ matrix.reactNativeWindowsVersion }}: 6
npx react-native run-windows FLAG FLAG FLAG FLAG FLAG ${{ matrix.architecture }}: 10
npx react-native run-windows FLAG FLAG FLAG FLAG FLAG FLAG ${{ matrix.architecture }}: 6
. CUSTOM_PATH_DIR assemble FLAG: 20
. CUSTOM_PATH_DIR check FLAG: 50
. CUSTOM_PATH_DIR jacocoTestReport FLAG: 7
echo Hello, world!: 49
echo Add other actions to build,: 38
echo test, and deploy your project.: 39
mvn clean package FLAG pom.xml: 7
gh auth setup-git: 7
apt-get install -y software-properties-common wget libgomp1: 6
DJL_ENGINE=mxnet-native-auto . CUSTOM_PATH_DIR clean run: 11
DJL_ENGINE=mxnet-native-mkl . CUSTOM_PATH_DIR clean run: 9
DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=ENV_VAR . CUSTOM_PATH_DIR clean run: 13
DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=1.11.0 . CUSTOM_PATH_DIR clean run: 12
DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=1.12.1 . CUSTOM_PATH_DIR clean run: 12
DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=1.13.1 . CUSTOM_PATH_DIR clean run: 7
DJL_ENGINE=pytorch-native-auto PYTORCH_VERSION=2.0.1 . CUSTOM_PATH_DIR clean run: 7
DJL_ENGINE=pytorch-native-cpu . CUSTOM_PATH_DIR clean run: 12
mkdir -p ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
LD_LIBRARY_PATH=ENV_VAR CUSTOM_PATH_DIR \: 6
. CUSTOM_PATH_DIR clean run: 6
DJL_ENGINE=xgboost-gpu . CUSTOM_PATH_DIR clean run: 6
DJL_ENGINE=paddlepaddle-native-auto . CUSTOM_PATH_DIR clean run: 8
DJL_ENGINE=paddlepaddle-native-cpu . CUSTOM_PATH_DIR clean run: 8
token=$( curl -X POST -H "Authorization: token ${{ secrets.ACTION_RUNNER_PERSONAL_TOKEN }}" \: 37
| jq '.token' | tr -d '"' ): 37
. CUSTOM_PATH_FILE $instance_id: 36
make build-test: 7
export KUBECONFIG=ENV_VAR CUSTOM_PATH_DIR: 19
kubectl apply -f URL: 76
cat CUSTOM_PATH_FILE: 175
go tool cover -func=gover.coverprofile: 6
epmd -daemon: 6
mix test FLAG: 24
mix format FLAG: 136
git config user.name 'github-actions': 14
git config user.email 'github-actions': 14
cd auditLogMover: 14
echo "Skipping CI run for automated PRs.": 8
npm run prettier:verify: 48
npm run lint:lwc: 28
npm run lint:aura: 9
npm run test:unit:coverage: 46
mkdir sfdx-cli: 37
tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli FLAG 1: 37
echo ${{ secrets.DEVHUB_SFDX_URL}} > . CUSTOM_PATH_FILE: 25
sfdx auth:sfdxurl:store -f . CUSTOM_PATH_FILE -a devhub -d: 24
sfdx force:org:create -f config CUSTOM_PATH_FILE -a scratch-org -s -d 1: 30
sfdx force:source:push: 22
sfdx force:user:permset:assign -n recipes: 6
sfdx force:data:tree:import -p . CUSTOM_PATH_FILE: 19
sfdx force:apex:test:run -c -r human -d . CUSTOM_PATH_DIR -w 20: 22
sfdx force:org:delete -p -u scratch-org: 30
ctest FLAG build: 7
USES: actions-js/push: 63
wget FLAG=3 URL: 6
#git clone URL: 6
make -j 4: 46
mkdir bin: 114
cd bin: 56
export XDG_RUNTIME_DIR= CUSTOM_PATH_DIR: 6
scripts CUSTOM_PATH_FILE examples CUSTOM_PATH_DIR out CUSTOM_PATH_DIR: 14
USES: haya14busa/action-cond: 80
USES: supercharge/mongodb-github-action: 109
USES: homoluctus/slatify: 17
cd CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 13
pip install .[tests,exporters-tf]: 13
sudo chmod +w CUSTOM_PATH_DIR: 12
echo githubciXXXXXXXXXXXXXXXXXXXXXXXX | sudo tee CUSTOM_PATH_DIR: 11
GO111MODULE=on go get github.com CUSTOM_PATH_DIR: 9
make bats-test: 9
pip install -e ".[dev]": 35
USES: chartboost/ruff-action: 24
python3 setup.py sdist: 43
pre-commit run -a: 25
docker-compose -f docker CUSTOM_PATH_FILE -f docker CUSTOM_PATH_FILE build: 6
USES: crazy-max/ghaction-chocolatey: 106
USES: ./.github/actions/build-frontend: 8
USES: ./.github/actions/setup-python: 56
echo "TAG_NAME=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 12
USES: ./.github/actions/build-docs: 12
TMP_KEYSTORE_FILE_PATH="ENV_VAR" CUSTOM_PATH_DIR: 7
mkdir "ENV_VAR": 25
cd website: 114
cd main: 29
ctest -C Debug FLAG -V: 7
make pylint: 12
USES: ./.github/workflows/actions/install: 8
echo ":registry=URL >> .npmrc: 17
rm .npmrc: 23
yarn workspace  CUSTOM_PATH_DIR run build: 9
find .: 33
echo "Done!": 18
mix coveralls.json: 17
chmod +x scripts CUSTOM_PATH_FILE: 25
sudo apt-key adv FLAG URL: 17
export PKG_CONFIG_PATH=ENV_VAR: CUSTOM_PATH_DIR: 6
export LD_LIBRARY_PATH=ENV_VAR: CUSTOM_PATH_DIR: 29
make build_tests: 6
export CTEST_OUTPUT_ON_FAILURE=1: 16
sudo make uninstall: 13
docker pull pi4j CUSTOM_PATH_DIR: 9
cp -r pi4j-distribution CUSTOM_PATH_FILE staging: 12
cp -r pi4j-distribution CUSTOM_PATH_FILE staging    : 6
echo ${{ secrets.PACKAGING_SFDX_URL}} > . CUSTOM_PATH_FILE: 7
sfdx force:auth:sfdxurl:store -f . CUSTOM_PATH_FILE -a devhub -d: 17
sfdx force:auth:sfdxurl:store -f . CUSTOM_PATH_FILE -a packagingorg -s: 7
USES: muenzpraeger/github-action-extract-sfdx-packaging-result: 17
USES: maddox/actions/sleep: 25
sfdx force:package:install FLAG ${{ steps.extract-data-package-version-create.outputs.packageVersionId }} -w 10 -u packagingorg -r: 7
USES: muenzpraeger/github-action-sfdx-packaging-updater: 6
USES: Automattic/action-commit-to-branch: 10
rm -rf " CUSTOM_PATH_DIR: 11
echo "MOCHA_REPORTER_OUTPUT=${{github.run_id}}_sponge_log.xml" >> ENV_VAR: 8
echo "MOCHA_REPORTER=xunit" >> ENV_VAR: 8
mkdir clang-tidy-result: 14
unzip clang-tidy-result.zip -d clang-tidy-result: 8
USES: platisd/clang-tidy-pr-comments: 12
USES: compnerd/gha-setup-swift: 11
sleep 10: 266
USES: game-ci/unity-request-activation-file: 21
USES: MSP-Greg/actions-ruby: 9
USES: tibdex/backport: 26
echo ${{ env.RELEASE_VERSION }}: 33
mamba info: 13
mamba list: 43
MAIN_FOLDER=`pwd`: 9
cd: 24
cp ENV_VAR CUSTOM_PATH_DIR .: 8
npm run pretest: 22
source ci CUSTOM_PATH_FILE: 99
rustup set profile default: 11
touch .env: 65
cd docs/: 34
USES: anothrNick/github-tag-action: 55
echo JFROG_CLI_BUILD_NUMBER=${{ github.event.inputs.buildNumber }} >> ENV_VAR: 7
USES: jvalkeal/nexus-sync: 23
echo ${{ steps.nexus.outputs.staged-repository-id }}: 6
npm install -g netlify-cli: 18
USES: phoenix-actions/test-reporting: 28
docker CUSTOM_PATH_FILE: 19
unzip pr.zip: 35
.kokoro CUSTOM_PATH_FILE: 28
brew test-bot FLAG: 56
USES: dprint/check: 15
sudo apt-get update && make ciprepare: 6
pip install setuptools wheel twine build: 18
git config FLAG user.name "Github Action": 14
pipx install poetry==ENV_VAR: 10
USES: dawidd6/action-homebrew-bump-formula: 63
bundle exec bake test: 13
cd frontend: 74
python -m pip install -q FLAG pip: 9
sudo apt-get install apache2 apache2-dev: 6
cd openssl: 14
. CUSTOM_PATH_DIR FLAG=ENV_VAR CUSTOM_PATH_DIR FLAG=ENV_VAR CUSTOM_PATH_DIR: 10
make -j1 install_sw: 8
cd nghttp3: 8
. CUSTOM_PATH_DIR FLAG=ENV_VAR CUSTOM_PATH_DIR PKG_CONFIG_PATH="ENV_VAR CUSTOM_PATH_DIR FLAG: 14
cd ngtcp2: 7
cd nghttp2: 7
cd mod_h2: 8
sudo python3 -m pip install -r tests CUSTOM_PATH_FILE -r tests CUSTOM_PATH_FILE: 6
make V=1 -C tests: 14
yarn test:coverage: 47
check-manifest: 25
USES: kanga333/variable-mapper: 27
build-bin CUSTOM_PATH_DIR &&: 11
build-bin CUSTOM_PATH_DIR $(echo ENV_VAR | cut -d/ -f 3): 6
sudo apt-get update && sudo apt-get install -y libudev-dev: 7
USES: olix0r/cargo-action-fmt: 15
USES: extractions/setup-just: 116
just clippy: 8
just test: 15
rustup toolchain install nightly FLAG miri: 17
ls -la . CUSTOM_PATH_DIR: 25
python3 -m pip install cibuildwheel twine: 8
cd libheif CUSTOM_PATH_DIR: 8
makepkg-mingw FLAG FLAG -f: 8
cibuildwheel: 14
twine check wheelhouse CUSTOM_PATH_DIR: 19
echo INSTALL_OS_PACKAGES="yum makecache && yum install -y ENV_VAR" >> ENV_VAR: 6
echo INSTALL_OS_PACKAGES="apk update && apk FLAG add ENV_VAR" >> ENV_VAR: 9
echo CIBW_TEST_EXTRAS="tests-min" >> ENV_VAR: 10
sudo chmod -R 777 ${{ env.BUILD_DIR_PREFIX }}: 10
 CUSTOM_PATH_DIR -c "$(curl -fsSL URL: 43
python3 -m twine check wheelhouse CUSTOM_PATH_DIR: 23
python3 -c "import pillow_heif; print(pillow_heif.libheif_info())": 8
USES: puppetlabs/kvrhdn-gha-buildevents: 17
echo STEP_ID=setup-environment >> ENV_VAR: 8
echo STEP_START=$(date +%s) >> ENV_VAR: 43
echo ::group::bundler environment: 20
buildevents cmd ENV_VAR ENV_VAR 'bundle env' -- bundle env: 16
echo ::endgroup::: 88
buildevents step ENV_VAR ENV_VAR ENV_VAR 'Setup Environment': 14
echo STEP_ID=Setup-Acceptance-Test-Matrix >> ENV_VAR: 8
buildevents step ENV_VAR ENV_VAR ENV_VAR 'Setup Test Matrix': 8
echo 'platform=${{ matrix.platforms.image }}' >> ENV_VAR: 6
echo 'collection=${{ matrix.collection }}' >> ENV_VAR: 6
echo 'label=${{ matrix.platforms.label }}' >> ENV_VAR: 6
echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-1 >> ENV_VAR: 6
echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-2 >> ENV_VAR: 6
buildevents cmd ENV_VAR ENV_VAR 'rake litmus:install_agent ${{ matrix.collection }}' -- bundle exec rake 'litmus:install_agent[${{ matrix.collection }}]': 6
buildevents cmd ENV_VAR ENV_VAR 'rake litmus:install_module' -- bundle exec rake 'litmus:install_module': 6
echo ::group::honeycomb step: 6
buildevents step ENV_VAR ENV_VAR ENV_VAR 'Deploy test system': 6
echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-3 >> ENV_VAR: 6
buildevents cmd ENV_VAR ENV_VAR 'rake litmus:acceptance:parallel' -- bundle exec rake 'litmus:acceptance:parallel': 6
buildevents step ENV_VAR ENV_VAR ENV_VAR 'Run acceptance tests': 6
echo STEP_ID=${{ matrix.platforms.image }}-${{ matrix.collection }}-4 >> ENV_VAR: 6
buildevents step ENV_VAR ENV_VAR ENV_VAR 'Remove test environment': 6
make check-style: 9
cd ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 40
make build-image: 13
vendor CUSTOM_PATH_DIR tests CUSTOM_PATH_DIR: 18
docker push "ENV_VAR CUSTOM_PATH_DIR: 19
make website-lint: 6
USES: avto-dev/markdown-lint: 49
USES: ansible/ansible-lint-action: 6
USES: relekang/python-semantic-release: 12
git config FLAG user.name "Github Actions": 44
git checkout develop: 32
sudo apt-get install -y webkit2gtk-4.0: 17
mvn -B install: 8
USES: gregoranders/nodejs-project-info: 11
echo ::set-output name=branch::ENV_VAR#refs CUSTOM_PATH_DIR: 7
gem install cocoapods: 22
git config user.email "pusher-ci": 9
git config user.name "Pusher CI": 9
npm run verify: 10
npm run test:ci: 143
USES: deepakputhraya/action-pr-title: 18
USES: ./.github/actions/secure-upload-folder: 8
USES: ./.github/actions/secure-download-folder: 18
. CUSTOM_PATH_FILE "ENV_VAR" "ENV_VAR": 6
[ "ENV_VAR" == "true" ]: 10
USES: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-upload-artifact: 10
USES: ./__BUILDER_CHECKOUT_DIR__/.github/actions/secure-download-artifact: 23
sudo apt-get upgrade -y: 7
mvn -B test: 17
sudo apt-key add .github CUSTOM_PATH_FILE: 6
sudo add-apt-repository "deb URL focal universe": 6
sudo apt-get install -y xvfb texmacs plantuml: 6
curl -OL URL: 55
echo "REV=HEAD~1" >> ENV_VAR: 6
echo "REV=origin CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "REV=$(git describe FLAG FLAG=0 HEAD~1)" >> ENV_VAR: 6
sudo apt-get install gcc-aarch64-linux-gnu: 11
USES: luizm/action-sh-checker: 14
USES: mdgreenwald/mozilla-sops-action: 13
scripts CUSTOM_PATH_FILE FLAG: 13
make units: 6
USES: laminas/laminas-ci-matrix-action: 9
USES: laminas/laminas-continuous-integration-action: 10
php examples CUSTOM_PATH_FILE: 20
venv CUSTOM_PATH_DIR run FLAG=.coveragerc FLAG pytest FLAG=10  -n 0 -m "not benchmark"  tests CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_FILE install: 14
cd vue: 8
USES: ./.github/actions/setup-caches: 31
USES: ./.github/actions/publish-image: 14
isort -c .: 8
USES: Jerome1337/golint-action: 13
USES: robotology/gh-action-nightly-merge: 16
USES: ./.github/actions/build-docker-image: 80
echo "IMAGE=${{ steps.image-builder.outputs.image }}" >> ENV_VAR: 61
USES: ./.github/actions/deploy-service: 80
conda list FLAG: 14
conda activate env: 10
python -m pip list: 179
npm ci FLAG FLAG FLAG=false FLAG ${{ github.workspace }} CUSTOM_PATH_DIR: 14
yarn run test: 112
python -m venv venv: 119
git push || echo "nothing to push": 6
coverage run -m unittest: 9
go build github.com CUSTOM_PATH_DIR: 10
python3 -m build FLAG: 18
pip install -e .[docs]: 28
USES: jsmrcaga/action-netlify-deploy: 9
USES: phips28/gh-action-bump-version: 18
sudo apt-get install python3-setuptools: 45
sudo python -m pip install FLAG pip: 10
cd hosting: 7
export FIREBASE_TOKEN=${{ secrets.FIREBASE_TOKEN }}: 8
pip install ./: 6
touch docs CUSTOM_PATH_FILE: 18
eval "$(conda shell.bash hook)": 106
pip install pkgmt: 10
pkgmt lint: 7
coveralls: 90
sudo dpkg -i *.deb: 15
USES: ko-build/setup-ko: 32
echo "KO_COMMIT=$(echo -n ENV_VAR | cut -c -8)" >> ENV_VAR: 8
echo "KO_TAG=$(basename "${{ github.ref }}")" >> ENV_VAR: 8
vendor CUSTOM_PATH_DIR -v: 36
make kind-load: 6
dotnet nuget locals all FLAG: 41
USES: rohith/publish-nuget: 19
echo "branch=ENV_VAR:-ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 12
docker system prune -af: 33
rm -rf ~ CUSTOM_PATH_FILE: 42
npx changelogithub: 39
cp -f -v ${{ github.workspace }} CUSTOM_PATH_FILE ${{ github.workspace }} CUSTOM_PATH_FILE: 9
dotnet build -c Release FLAG: 36
dotnet test -c Release FLAG FLAG normal: 6
mvn deploy -s ENV_VAR CUSTOM_PATH_FILE: 12
USES: docker://oskarstark/phpstan-ga: 14
USES: docker://oskarstark/php-cs-fixer-ga: 81
git push -u origin HEAD: 7
USES: thomaseizinger/create-pull-request: 18
go list -json -m all > go.list: 14
USES: sonatype-nexus-community/nancy-github-action: 18
. CUSTOM_PATH_DIR build test: 9
USES: mikehardy/buildcache-action: 97
gem install xcpretty: 66
scripts CUSTOM_PATH_FILE scripts CUSTOM_PATH_FILE \ quickstart-ios CUSTOM_PATH_FILE "$plist_secret": 52
USES: FirebaseExtended/github-actions/firebase-test-lab: 11
dotnet build FLAG . CUSTOM_PATH_FILE -c ENV_VAR: 119
dotnet pack FLAG . CUSTOM_PATH_FILE FLAG ENV_VAR -c ENV_VAR -o . CUSTOM_PATH_DIR: 59
dotnet nuget push . CUSTOM_PATH_FILE -k ${{secrets.NUGET_API_KEY}} -s URL FLAG: 123
writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github CUSTOM_PATH_DIR: 27
tox -e ${{ matrix.toxenv }}: 30
rm -rf .. CUSTOM_PATH_DIR: 15
tox -e build: 11
cd ~: 90
pip install ENV_VAR: 12
echo "::set-output name=version::$version": 60
USES: christian-draeger/increment-semantic-version: 13
dotnet nuget push . CUSTOM_PATH_FILE.${{ env.NUGET_VERSION }}.nupkg -s URL -k ${{secrets.NUGET_API_KEY}}: 15
USES: snok/container-retention-policy: 16
USES: chrislennon/action-aws-cli: 6
echo "pwd is ENV_VAR": 19
cd CUSTOM_PATH_DIR &&: 17
git clone URL &&: 13
echo "SOURCE_BRANCH=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "SOURCE_TAG=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 8
USES: nikeee/docfx-action: 17
echo "::set-output name=sha8::$(echo ENV_VAR | cut -c1-8)": 30
npm install -g npm: 288
apt-get -y install software-properties-common: 9
add-apt-repository -y ppa:deadsnakes CUSTOM_PATH_DIR: 36
. testenv CUSTOM_PATH_DIR: 20
conda config FLAG channels conda-forge: 63
conda config FLAG channel_priority strict: 19
USES: azure/k8s-set-context: 50
kubectl apply -f dsagtt22 CUSTOM_PATH_FILE -n ${{ env.NAMESPACE }}: 7
sed -i 's CUSTOM_PATH_DIR output: 8
echo ::set-output name=VERSION::ENV_VAR: 20
mkdir testdir: 9
export LD_LIBRARY_PATH=`pwd` CUSTOM_PATH_DIR: 6
sudo cmake FLAG . FLAG Release FLAG install: 7
cd bindings CUSTOM_PATH_DIR: 42
pip install cython: 30
. CUSTOM_PATH_FILE Release: 6
git diff FLAG . CUSTOM_PATH_FILE: 6
dotnet test FLAG: 15
cd book: 16
sudo install -o root -g root -m 0755 kubectl CUSTOM_PATH_DIR: 32
kubectl create -f URL: 14
node_modules CUSTOM_PATH_DIR FLAG -u ${{ secrets.GITHUB_TOKEN }}: 7
choco install openssl: 18
rustup update && rustup target add aarch64-apple-darwin: 10
Remove-Item -LiteralPath "C:\msys64\" -Force -Recurse: 14
pip install -r python CUSTOM_PATH_FILE: 21
pip install FLAG FLAG=target CUSTOM_PATH_DIR pyoxigraph: 8
rm -r target CUSTOM_PATH_DIR: 9
python generate_stubs.py pyoxigraph pyoxigraph.pyi FLAG: 6
npm run pack: 17
cargo login ENV_VAR: 23
python -m build FLAG FLAG .: 34
ls -l dist: 64
yamllint .: 23
make libs build_flags=-j8: 17
bash .ci-scripts CUSTOM_PATH_FILE: 9
python -m cibuildwheel FLAG dist python CUSTOM_PATH_DIR: 8
USES: upsidr/merge-gatekeeper: 6
yarn test:e2e: 44
USES: kiegroup/kie-ci/.ci/actions/ubuntu-disk-space: 15
USES: kiegroup/kie-ci/.ci/actions/build-chain: 21
yarn danger ci: 17
git fetch origin pull CUSTOM_PATH_DIR: 21
pip install FLAG build twine: 11
twine check FLAG dist CUSTOM_PATH_DIR: 55
USES: peter-evans/create-issue-from-file: 81
cmake FLAG build FLAG 10: 21
cd build ; ctest FLAG: 12
USES: everlytic/branch-merge: 19
rm . CUSTOM_PATH_DIR: 20
USES: colpal/actions-clean: 34
USES: bcoe/conventional-release-labels: 14
cd dist: 131
.. CUSTOM_PATH_DIR FLAG: 9
': 16
brew install mbedtls: 7
export CPPFLAGS="-I CUSTOM_PATH_DIR: 13
USES: vmactions/openbsd-vm: 17
USES: ./.github/actions/install-deps: 41
git remote set-url origin URL secrets.GITHUB_TOKEN }} CUSTOM_PATH_DIR github.repository }}: 32
git config pull.rebase false: 27
sudo apt-get install doxygen graphviz wget gfortran libjpeg-dev libz-dev: 11
wget URL &> CUSTOM_PATH_DIR: 18
. CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR: 59
. CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG FLAG: 13
. CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR FLAG FLAG: 25
echo 'export PATH= CUSTOM_PATH_DIR > .bashrc: 17
source .bashrc: 17
export LD_LIBRARY_PATH=" CUSTOM_PATH_DIR: 17
make VERBOSE=1: 30
make tests VERBOSE=1: 12
npm config set ' CUSTOM_PATH_FILE CUSTOM_PATH_DIR "ENV_VAR": 26
python -m tox: 90
make docker-images: 10
sudo apt-get -yqq install libpq-dev: 29
bundle exec rake db:create: 21
bundle exec rake db:schema:load: 23
USES: snyk/actions/golang: 34
sudo xcode-select -s CUSTOM_PATH_FILE: 88
brew install lcov: 12
brew install ccache: 27
yarn run lint:check: 6
USES: brpaz/hadolint-action: 16
git config FLAG user.name 'Neo4j Team GraphQL': 27
git config FLAG user.email 'team-graphql': 27
USES: peterjgrainger/action-create-branch: 48
yarn package: 51
USES: vmware-labs/vmware-image-builder-action: 13
USES: ./.github/actions/lint: 8
make tests: 95
echo "building": 10
USES: malinskiy/action-android/install-sdk: 39
USES: malinskiy/action-android/emulator-run-cmd: 12
sudo apt-get install libxss-dev: 6
mkdir "ENV_VAR CUSTOM_PATH_DIR dir": 14
touch tk CUSTOM_PATH_FILE tk CUSTOM_PATH_FILE: 10
echo "CFGOPT=ENV_VAR" >> ENV_VAR: 10
echo "CC=ENV_VAR" >> ENV_VAR: 25
USES: ./.github/actions/update-groups-send-on-chain: 7
mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar: 11
sudo apt-get install aspell aspell-en: 21
USES: Jimver/cuda-toolkit: 49
echo ::set-output name=TAG::ENV_VAR#refs CUSTOM_PATH_DIR: 14
cargo build FLAG FLAG FLAG ${{ matrix.target }}: 60
rake setup: 10
rake test: 37
composer lint: 36
USES: jackyef/bundlewatch-gh-action: 13
cp -f .. CUSTOM_PATH_FILE ./        : 19
sed -i "s CUSTOM_PATH_DIR +%Y%m%d)' CUSTOM_PATH_DIR package CUSTOM_PATH_DIR: 14
USES: magefile/mage-action: 37
USES: jakubtobiasz/SyliusBuildTestAppAction: 6
vendor CUSTOM_PATH_DIR FLAG FLAG FLAG -vvv -f progress FLAG="~&&~&&~&&~" || vendor CUSTOM_PATH_DIR FLAG FLAG -vvv -f progress FLAG="~&&~&&~&&~" FLAG: 11
sudo service docker restart: 26
sudo . CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
bats -v: 8
chmod 400 ENV_VAR CUSTOM_PATH_DIR: 23
echo "branch=ENV_VAR" >> ENV_VAR: 17
tests CUSTOM_PATH_FILE: 134
composer update FLAG FLAG FLAG FLAG FLAG FLAG: 10
sudo CUSTOM_PATH_FILE CUSTOM_PATH_DIR start: 103
php ocular.phar code-coverage:upload FLAG=php-clover coverage.clover: 12
sudo apt-get install -y make: 25
npm run build:docs: 45
npm run build:examples: 13
ctest -C ENV_VAR FLAG: 9
USES: joschi/setup-jdk: 46
npx docusaurus deploy: 16
curl -T ENV_VAR -u ${{ secrets.CODING_ARTIFACTS_USER }}:${{ secrets.CODING_ARTIFACTS_PASS }} "URL: 8
echo ${{ secrets.GPR_PASS }} | docker login docker.pkg.github.com -u ${{ secrets.GPR_USER }} FLAG: 12
docker push ENV_VAR:${{ env.RELEASE_VERSION }}: 6
echo ${{ secrets.CODING_ARTIFACTS_PASS }} | docker login nocalhost-docker.pkg.coding.net -u ${{ secrets.CODING_ARTIFACTS_USER }} FLAG: 12
helm plugin install URL: 16
VERSION=ENV_VAR#refs CUSTOM_PATH_DIR: 27
USES: myrotvorets/set-commit-status-action: 92
npm install yarn FLAG: 14
yarn build en: 8
yarn build ja: 6
USES: zhulik/redis-action: 19
USES: rhysd/github-action-benchmark: 56
python -m pip install pipenv: 25
pipenv sync FLAG: 17
find . -type f -name "*.sh" -exec chmod a+x '{}' \;: 17
gh run cancel ${{ github.run_id }}: 15
USES: ./.github/actions/install-gcloud: 6
USES: ./.github/actions/install-tmc: 6
USES: ./.github/actions/auth-tmc: 6
go test -v -coverprofile=coverage.txt -covermode=atomic . CUSTOM_PATH_DIR: 11
FLAG sha256 `: 8
FLAG URL `: 8
composer run setup: 6
yarn npm publish FLAG latest: 11
USES: BSFishy/meson-build: 43
rustup update ${{ matrix.rust }} FLAG: 11
cargo test FLAG -- FLAG=1: 6
USES: ./.github/actions/infra-e2e-test: 19
pipenv install -d: 8
echo "Available space": 7
USES: peter-murray/workflow-application-token-action: 22
echo "" >> ENV_VAR: 59
echo "**Parameters:**" >> ENV_VAR: 15
echo "**Status:**" >> ENV_VAR: 10
echo "[URL >> ENV_VAR: 6
USES: RalfG/python-wheels-manylinux-build: 48
python -m build FLAG FLAG: 39
composer run lint: 35
if ${{ needs.php-lint.result != 'success' && needs.php-lint.result != 'skipped' }}; then exit 1; fi: 12
. CUSTOM_PATH_DIR ktlintCheck: 32
pip install -r dev_requirements.txt: 29
docker image ls: 36
echo "${output}": 12
output="${output CUSTOM_PATH_DIR: 57
USES: diem/actions/comment: 14
git config FLAG user.email 'bot': 30
curl -L URL | bash: 8
FLAG POST \: 24
python -m pip install -U pip setuptools: 12
make dev: 49
safety check: 26
USES: akhileshns/heroku-deploy: 36
USES: mattnotmitt/doxygen-action: 73
git config FLAG user.email "<>": 24
pytest -v tests: 9
python tests CUSTOM_PATH_FILE: 130
make install-dev-tools: 12
php tests CUSTOM_PATH_FILE: 28
test -z $(git rev-list  FLAG="24 hours"  ${{ github.sha }}) && echo "::set-output name=should_run::false": 8
sudo apt-get install -y protobuf-compiler: 47
echo "dir=$(python -m pip cache dir)" >> "ENV_VAR": 10
git tag FLAG HEAD | xargs git tag FLAG: 10
python -m pip install FLAG '${{ env.TOX_VERSION }}': 6
python -m tox FLAG auto FLAG FLAG false FLAG: 17
from pathlib import Path: 7
git update-index FLAG pyproject.toml: 6
shopt -s extglob: 26
test -d .tox CUSTOM_PATH_DIR && .tox CUSTOM_PATH_DIR -m pre_commit install-hooks || :: 6
USES: test-summary/action: 118
bash -x .github CUSTOM_PATH_FILE: 7
USES: ./.github/actions/run-mf-tests: 11
git config FLAG url."URL ssh: CUSTOM_PATH_FILE/: 49
echo "::set-output name=dir::$(npm config get cache)": 120
echo "APP_NAME=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 42
echo "SET GLOBAL sql_mode=(SELECT CONCAT(@_mode,',ONLY_FULL_GROUP_BY'));" | mysql -h 127.0.0.1 -P 4444 -u root -prootpassword: 9
echo "SELECT @_mode;" | mysql -h 127.0.0.1 -P 4444 -u root -prootpassword: 9
composer i: 148
. CUSTOM_PATH_DIR maintenance:install FLAG FLAG=mysql FLAG=nextcloud FLAG=127.0.0.1 FLAG=ENV_VAR FLAG=root FLAG=rootpassword FLAG admin FLAG admin: 9
. CUSTOM_PATH_DIR app:enable FLAG ${{ env.APP_NAME }}: 86
composer run FLAG | grep "^  test:unit " | wc -l | grep 1: 25
composer run FLAG | grep "^  test:integration " | wc -l | grep 1: 27
php -S localhost:8080 &: 63
composer run test:integration: 31
cat data CUSTOM_PATH_FILE: 43
echo 'Neither PHPUnit nor PHPUnit integration tests are specified in composer.json scripts': 25
if ${{ needs.phpunit-mysql.result != 'success' }}; then exit 1; fi: 7
mkdir friendlywrt-h5: 15
cd friendlywrt-h5: 54
. CUSTOM_PATH_DIR update -a && . CUSTOM_PATH_DIR install -a: 12
. CUSTOM_PATH_FILE nanopi_r1s.mk: 14
gzip friendlywrt-h5 CUSTOM_PATH_FILE: 15
mv friendlywrt-h5 CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 15
cp friendlywrt-h5 CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 15
USES: ./.github/composite-actions/install: 38
YARN_ENABLE_SCRIPTS=false yarn install FLAG: 7
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.NPM_TOKEN }}" > .npmrc: 27
pnpm config set store-dir ENV_VAR: 22
git config FLAG user.name "GitHub CD bot": 7
pnpm vitest FLAG: 6
sudo ci CUSTOM_PATH_FILE: 8
pip3 install Pillow: 20
pip3 install Wave: 23
pip3 install numpy: 27
tensorflow CUSTOM_PATH_FILE: 30
tflite-micro CUSTOM_PATH_FILE tflite-micro/: 8
USES: navikt/github-app-token-generator: 22
pwsh . CUSTOM_PATH_FILE1: 12
echo CM3_INSTALL="$(pwd) CUSTOM_PATH_DIR >> ENV_VAR: 13
mkdir .. CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 13
cmake -S .. CUSTOM_PATH_DIR -B .. CUSTOM_PATH_DIR -G Ninja -DCMAKE_INSTALL_PREFIX="ENV_VAR3_INSTALL}": 6
cmake FLAG .. CUSTOM_PATH_DIR: 27
echo "ENV_VAR3_INSTALL} CUSTOM_PATH_DIR >> ENV_VAR: 10
cm3 -DHTML: 15
python3 -m pip install cmind: 13
cm pull repo FLAG=${{ github.event.pull_request.head.repo.html_url }} FLAG=${{ github.event.pull_request.head.ref }}: 14
cm run script FLAG FLAG=get,sys-utils-cm: 17
git remote -v: 45
git remote set-url origin URL secrets.GITHUB_TOKEN }} CUSTOM_PATH_DIR: 50
make tools CUSTOM_PATH_DIR: 10
test CUSTOM_PATH_DIR: 24
git config FLAG user.name "GitHub Workflow": 16
git config FLAG user.email "cockpituous": 15
echo ${{ github.token }} >> ~ CUSTOM_PATH_DIR: 8
eval $(ssh-agent): 30
ssh-add - <<< '${{ secrets.NODE_CACHE_DEPLOY_KEY }}': 7
ssh-add -D: 24
ssh-agent -k: 17
test "$(git symbolic-ref HEAD)" = '${{ github.ref }}' && exit: 6
sleep 1 # make sure the timestamp changes: 6
git push FLAG 'git:${{ github.repository }}' HEAD: 6
cd ENV_VAR && ${{ matrix.CONFIG }} . CUSTOM_PATH_FILE rebuild: 6
cd ENV_VAR && ${{ matrix.CONFIG }} . CUSTOM_PATH_FILE: 25
test "$(git status -s | wc -l)" -eq 0 || (git status -s; exit 1): 34
go build .: 219
goreleaser release FLAG FLAG FLAG FLAG FLAG -f . CUSTOM_PATH_FILE: 66
USES: peaceiris/actions-hugo: 97
USES: jitterbit/get-changed-files: 52
USES: fernandrone/linelint: 13
sudo apt-get install jq: 67
USES: googleapis/code-suggester: 15
cd extern: 10
aws s3 cp s3: CUSTOM_PATH_FILE .: 18
export CESIUM_UNREAL_VERSION=$(git describe): 11
echo "CESIUM_UNREAL_VERSION=ENV_VAR" >> ENV_VAR: 9
echo "BUILD_CESIUM_UNREAL_PACKAGE_NAME=ENV_VAR" >> ENV_VAR: 9
rm -rf extern: 6
export UNREAL_ENGINE_DIR=ENV_VAR CUSTOM_PATH_DIR: 6
nuget push . CUSTOM_PATH_FILE -Source URL -SkipDuplicate -ApiKey ${{ secrets.NugetKey }} -NoSymbol: 10
nuget push . CUSTOM_PATH_FILE -Source github -SkipDuplicate: 10
cd ".. CUSTOM_PATH_DIR: 10
docker login -u ${{ secrets.name }} -p ${{ secrets.pass }} : 13
yarn lint:eslint: 7
yarn lint:prettier: 10
. CUSTOM_PATH_DIR -color: 8
yarn dedupe FLAG: 19
git config FLAG user.email "machine": 10
git config FLAG user.name "Tolgee Machine": 8
pnpm build || pnpm build: 6
sudo apt-get install libsqlite3-mod-spatialite: 8
sudo apt-get install -y libspatialite-dev: 6
pip3 install pyaml: 6
pip3 install cython: 7
pip3 install openmatrix: 6
pip3 install pyshp: 6
pip3 install requests: 24
pip3 install pytest: 31
pip3 install spatialite: 8
sudo ln -s CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 12
python3 setup_Assignment.py build_ext FLAG: 7
python3 -m pytest: 26
go run . CUSTOM_PATH_FILE: 27
npm run ts:check: 7
git tag -l 'v*': 7
. CUSTOM_PATH_FILE > CHANGELOG.md: 6
test -d ENV_VAR CUSTOM_PATH_DIR: 30
test -f ENV_VAR CUSTOM_PATH_FILE: 32
jupyter labextension list: 17
jlpm install: 17
jlpm run test: 6
sha256sum * | tee SHA256SUMS: 9
npx playwright install chromium: 40
npx playwright test: 50
USES: jesusvasquez333/verify-pr-label-action: 17
echo "Ref: ${{ github.ref }}": 12
sudo apt-get install -y -qq libicu-dev: 9
USES: docker://ghcr.io/github/super-linter:slim-v4: 9
USES: reviewdog/action-golangci-lint: 76
USES: reviewdog/action-hadolint: 16
USES: reviewdog/action-misspell: 48
USES: reviewdog/action-alex: 8
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:noetic-ros-base: 6
yarn adio: 20
yarn check-ts-configs: 13
yarn eslint: 39
USES: webiny/action-conventional-commits: 23
ct lint FLAG ct.yaml: 9
ct install FLAG ct.yaml: 7
if [ -f tests CUSTOM_PATH_FILE ]; then pip install -r tests CUSTOM_PATH_FILE; fi: 6
pip install -e .[tests]: 20
flutter analyze lib example CUSTOM_PATH_DIR: 18
cd example; flutter build ios FLAG: 9
cd example; flutter build apk FLAG: 10
USES: tailscale/github-action: 16
python setup.py install_egg_info # Workaround URL: 10
git rev-parse HEAD: 15
cp .env.dist .env: 18
docker images: 174
docker ps: 73
cd html: 10
make init: 87
docker-compose -f build CUSTOM_PATH_FILE build: 8
tar xfz generated_app-vite.tgz: 7
npx FLAG ci: 6
bin CUSTOM_PATH_DIR FLAG: 39
yarn lint:css: 9
USES: nexus-actions/create-nexus-staging-repo: 8
USES: nexus-actions/drop-nexus-staging-repo: 6
USES: nexus-actions/release-nexus-staging-repo: 7
dotnet build FLAG -c Release: 22
echo '${{ toJSON(github) }}': 8
echo '${{ toJSON(runner) }}': 13
sudo timedatectl set-timezone "Asia CUSTOM_PATH_DIR: 18
set -xev: 14
sudo apt-get install npm: 7
sudo npm install -g json: 17
ls CUSTOM_PATH_DIR: 65
composer install FLAG FLAG FLAG -v: 6
cp . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 80
cd site CUSTOM_PATH_DIR: 7
git config FLAG user.name antv: 8
git config FLAG user.email antv: 8
USES: rhysd/changelog-from-release/action: 7
USES: crazy-max/ghaction-dump-context: 16
go test -coverprofile=coverage.txt -covermode=atomic . CUSTOM_PATH_DIR: 13
sudo apt-get install -y lsb-release gnupg2 curl: 16
sudo DEBIAN_FRONTEND="noninteractive" dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb: 16
sudo percona-release setup ps80: 16
sudo apt-get install -y percona-server-server percona-server-client make unzip g++ etcd git wget eatmydata xz-utils: 13
launchable record build FLAG "ENV_VAR" FLAG .: 36
launchable record tests FLAG "ENV_VAR" go-test . || true: 39
cat output.txt: 53
USES: TheDragonCode/codestyler: 8
git lfs install: 46
USES: ./.github/actions/download-artifact: 20
echo "PR_NUMBER=$pr_number" >> ENV_VAR: 6
USES: ./.github/actions/install-go-and-dependencies: 11
USES: ./.github/actions/authenticate-aws: 11
bash .github CUSTOM_PATH_FILE: 140
pip install flit: 33
mkdocs build -f . CUSTOM_PATH_FILE: 6
make build CUSTOM_PATH_DIR: 31
git remote set-url origin URL: 128
BRANCH_NAME="${{ github.event.pull_request.head.ref }}": 22
VERSION=ENV_VAR#release CUSTOM_PATH_DIR: 14
VERSION=ENV_VAR#hotfix CUSTOM_PATH_DIR: 8
USES: codex-team/action-nodejs-package-info: 9
git checkout ${{ github.event.pull_request.base.sha }}: 13
VERSION=$(echo ENV_VAR | sed 's#.* CUSTOM_PATH_DIR: 7
echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} FLAG: 37
echo ::set-output name=tag::$(echo ENV_VAR:10}): 11
rm -f .compose.env; cp .compose.env.example .compose.env: 8
sed -i.bak 's CUSTOM_PATH_DIR .compose.env: 20
make docker CUSTOM_PATH_DIR: 14
. CUSTOM_PATH_DIR up -d: 11
COMPOSE_INTERACTIVE_NO_CLI=1 python dev CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_DIR exec -T api . CUSTOM_PATH_FILE manage set-repo-keyring FLAG staging FLAG CUSTOM_PATH_FILE -y: 6
echo "sha=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 6
dpkg-query -Wf 'ENV_VARnstalled-Size}\tENV_VARackage}\n' | sort -n | tail -n 100: 6
echo "Removing large packages": 7
sudo apt-get remove -y '^dotnet-.*': 23
sudo apt-get remove -y '^llvm-.*': 11
sudo apt-get remove -y 'php.*': 32
sudo apt-get remove -y '^mongodb-.*': 14
sudo apt-get remove -y '^mysql-.*': 14
echo "Removing large directories": 7
sudo rm -rf CUSTOM_PATH_FILE/: 81
USES: ./action/: 13
sudo apt-get install -y libicu-dev libidn11-dev: 11
go get -u github.com CUSTOM_PATH_DIR: 184
USES: antongolub/action-setup-bun: 10
cat .. CUSTOM_PATH_FILE: 19
USES: andstor/file-reader-action: 7
flutter build apk: 53
cd ios: 24
flutter clean: 29
pod install FLAG: 26
python3 utils CUSTOM_PATH_FILE: 19
cat reports CUSTOM_PATH_FILE: 14
pip install slack_sdk: 7
USES: kiegroup/kogito-pipelines/.ci/actions/ubuntu-disk-space: 11
USES: kiegroup/kogito-pipelines/.ci/actions/long-paths: 10
USES: kiegroup/kogito-pipelines/.ci/actions/maven: 16
USES: kiegroup/kogito-pipelines/.ci/actions/build-chain: 11
USES: kiegroup/kogito-pipelines/.ci/actions/surefire-report: 13
echo Running on branch ENV_VAR#refs CUSTOM_PATH_DIR: 6
USES: battila7/get-version-action: 71
cp -R rpfm CUSTOM_PATH_DIR build CUSTOM_PATH_DIR: 6
mkdir deploy: 10
mkdir -p data CUSTOM_PATH_DIR: 27
mkdir imageformats: 6
mkdir platforms: 8
mkdir styles: 7
cp C:\actions-runner\_work\rpfm\rpfm CUSTOM_PATH_FILE ${{ matrix.DDISK }}:\deploy\rpfm-release-assets: 6
ARCHIVE_SDK="ENV_VAR CUSTOM_PATH_FILE": 66
echo "ARCHIVE_SDK=ENV_VAR" >> ENV_VAR: 66
make sdk: 66
poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}: 12
FLAG ${{ env.MACHINE_TYPE }} \: 7
USES: zeebe-io/backport-action: 17
cargo install cargo-audit: 22
cargo audit: 28
USES: technote-space/assign-author: 10
npm run lint-check: 16
USES: superfly/flyctl-actions: 25
USES: schneegans/dynamic-badges-action: 74
vendor CUSTOM_PATH_DIR -q FLAG FLAG=checkstyle | cs2pr: 7
composer normalize FLAG: 13
mkdir mdbook: 34
chmod +x mdbook-linkcheck: 7
echo `pwd` CUSTOM_PATH_DIR >> ENV_VAR: 41
mv . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 33
USES: docker://oskarstark/doctor-rst: 14
USES: ./.github/actions/publish: 16
make update: 11
yarn build:prod: 30
python -m pip install FLAG setuptools: 38
curl URL | sudo apt-key add -: 33
python3 scripts CUSTOM_PATH_FILE: 66
pacman -Syu FLAG: 13
git config FLAG user.name "${{ env.CI_COMMIT_AUTHOR }}": 12
git config FLAG user.email "${{ env.CI_COMMIT_EMAIL }}": 10
git push "URL env.CI_COMMIT_AUTHOR }}:${{ secrets.TF_DEVEX_COMMIT_GITHUB_TOKEN }} CUSTOM_PATH_DIR github.repository }}.git": 6
npm run build:demo: 10
cd src CUSTOM_PATH_FILE: 15
dotnet workload install maui: 19
echo "LUA_PATH=ENV_VAR" >> ENV_VAR: 6
echo "LUA_CPATH=ENV_VAR" >> ENV_VAR: 6
${{github.workspace}} CUSTOM_PATH_FILE: 23
USES: advanced-security/filter-sarif: 33
mkdir ${{ env.PLUGIN_NAME }}: 25
cp main.js manifest.json styles.css ${{ env.PLUGIN_NAME }}: 19
zip -r ${{ env.PLUGIN_NAME }}.zip ${{ env.PLUGIN_NAME }}: 25
USES: ./.github/actions/metadata: 10
echo 'EOF' >> ENV_VAR: 148
mkdir -p CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 50
mkdir -p image-digest/: 66
cd image-digest/: 35
find -type f | sort | xargs -d '\n' cat: 23
pip install FLAG pip tox: 8
tox -e check: 6
echo "${{ secrets.MELANGE_RSA }}" > . CUSTOM_PATH_FILE: 6
USES: chainguard-dev/actions/setup-melange: 7
gcloud FLAG alpha storage ls: 6
USES: chainguard-dev/actions/inky-build-pkg: 86
set -e -x: 43
kubectl version FLAG: 30
mkdir tmp: 62
python -m pip install FLAG build: 39
poetry install FLAG docs: 20
poetry run mkdocs gh-deploy FLAG: 15
npm install FLAG vercel: 28
vercel pull FLAG FLAG=production FLAG=${{ secrets.VERCEL_TOKEN }}: 21
vercel build FLAG FLAG=${{ secrets.VERCEL_TOKEN }}: 19
vercel deploy FLAG FLAG FLAG=${{ secrets.VERCEL_TOKEN }}: 17
yarn build:lib: 7
yarn build-storybook: 33
echo ==============  ENV  =================: 8
echo PROJECT_ROOT_PATH\: ENV_VAR: 6
echo ======================================: 8
bash ENV_VAR CUSTOM_PATH_FILE: 151
softwareupdate FLAG FLAG FLAG: 6
sudo xcode-select FLAG: 8
macdeployqt ${targetName}.app -qmldir=. -verbose=1: 6
codesign FLAG FLAG -s - GoldenDict.app: 8
otool -L GoldenDict.app CUSTOM_PATH_DIR: 11
mv ${targetName}.app . CUSTOM_PATH_DIR: 8
create-dmg FLAG "${targetName} Installer" FLAG "icons CUSTOM_PATH_FILE" FLAG 200 120 FLAG 800 400 FLAG 100 FLAG "${targetName}.app" 200 190 FLAG "${targetName}.app" FLAG 600 185 FLAG "${targetName}.dmg" tmp/: 7
echo "previousTag : $previousTag": 15
CHANGELOG="$(git log FLAG FLAG $previousTag..HEAD)": 9
CHANGELOG="ENV_VAR CUSTOM_PATH_DIR: 87
CHANGELOG="ENV_VAR CUSTOM_PATH_DIR }": 9
echo "::set-output name=changelog::$(echo "ENV_VAR")": 6
echo "::set-output name=sha_short::$(git rev-parse FLAG=8 HEAD)"    : 9
echo "::set-output name=release_date::$(date +'%Y%m%d')"    : 9
echo "::set-output name=release_time::$(date +'%H%M%S')"  : 9
echo "::set-output name=release_time_clock::$(date +'%H:%M:%S')"   : 9
echo "::set-output name=release_hm::$(date +'%y%m%d')"  : 8
brew install enchant: 6
pip install -U pip: 189
echo ::set-output name=RELEASE_VERSION::ENV_VAR#refs CUSTOM_PATH_DIR: 12
npm run build toastmark: 19
npm run test:ci toastmark: 6
npm run test:ci editor: 6
strip target CUSTOM_PATH_DIR: 27
cd ${{ github.workspace }}: 101
sleep 300: 26
USES: actions/setup-elixir: 23
sudo apt-get update -q: 110
yarn tsc: 89
dotnet build FLAG Release . CUSTOM_PATH_FILE: 12
sudo apt-get update && \: 23
unixTimestamp=$(date +%s): 175
echo "started_at=${unixTimestamp}" >> ENV_VAR: 175
USES: werf/actions/install: 117
python -m pip install pytest coverage: 10
yarn run typecheck: 14
cd ws: 12
colcon test-result FLAG: 6
USES: srggrs/assign-one-project-github-action: 105
USES: microsoft/DevSkim-Action: 31
USES: EnricoMi/download-buildkite-artifact-action: 11
cat <<EOF: 10
yarn workspace  CUSTOM_PATH_DIR run test: 8
USES: tryghost/actions/actions/slack-build: 19
USES: getong/mariadb-action: 25
sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool cmake lcov: 6
python -m pip install -r tests CUSTOM_PATH_FILE: 53
USES: flowwer-dev/pull-request-stats: 7
chmod +x llvm.sh: 42
sudo . CUSTOM_PATH_FILE 16: 8
. CUSTOM_PATH_DIR -B -q -ff -ntp verify: 10
. CUSTOM_PATH_DIR -B -q -ff -ntp test: 9
USES: cla-assistant/github-action: 57
cargo install cargo-tarpaulin: 20
npx -p nextjs-bundle-analysis report: 23
ls -laR .next CUSTOM_PATH_DIR && npx -p nextjs-bundle-analysis compare: 22
body=$(cat .next CUSTOM_PATH_FILE): 12
body="${body CUSTOM_PATH_DIR: 131
echo ::set-output name=body::$body: 28
phpunit FLAG: 10
mysql FLAG: 25
phpcs -i: 6
grep -v '^#' . CUSTOM_PATH_FILE  | xargs -n 1 -L 1 pip install: 34
pip uninstall -y protobuf: 37
pip install FLAG protobuf protobuf==3.20.*: 36
mkdir -p egs CUSTOM_PATH_DIR: 22
ln -sfv ~ CUSTOM_PATH_DIR egs CUSTOM_PATH_DIR: 22
ls -lh egs CUSTOM_PATH_DIR: 23
sudo apt-get -qq install git-lfs tree: 30
export PYTHONPATH=ENV_VAR:ENV_VAR: 42
export PYTHONPATH=~ CUSTOM_PATH_DIR: 69
cd egs CUSTOM_PATH_DIR: 32
tree . CUSTOM_PATH_DIR: 28
echo "===greedy search===": 22
find exp CUSTOM_PATH_DIR -name "log-*" -exec grep -n FLAG "best for test-clean" {} + | sort -n -k2: 66
find exp CUSTOM_PATH_DIR -name "log-*" -exec grep -n FLAG "best for test-other" {} + | sort -n -k2: 66
echo "===fast_beam_search===": 21
twine upload . CUSTOM_PATH_FILE: 19
git config FLAG url."URL git: CUSTOM_PATH_DIR: 12
USES: thesis/gcp-storage-bucket-action: 18
aws sts get-caller-identity: 9
USES: docker://agilepathway/pull-request-label-checker:latest: 22
git submodule update FLAG lib CUSTOM_PATH_DIR: 7
git submodule update FLAG components CUSTOM_PATH_DIR: 10
TFLM_COMMIT=$(git submodule status tensorflow | awk '{print ($1)}'): 6
echo "tflm-commit=ENV_VAR" >> ENV_VAR: 6
echo "Regenerating microlite CUSTOM_PATH_DIR directory": 7
echo "make -C mpy-cross V=1 clean all": 7
make -C mpy-cross V=1 clean all: 7
echo "cd . CUSTOM_PATH_DIR: 13
rm -rf builds: 10
idf.py clean build: 11
.. CUSTOM_PATH_FILE \: 12
echo "Packing current version:" $current_version: 12
USES: chuhlomin/render-template: 12
curl -LO "URL: 53
mv bazelisk-linux-amd64 "ENV_VAR CUSTOM_PATH_DIR: 20
chmod +x "ENV_VAR CUSTOM_PATH_DIR: 67
wget URL -O ~ CUSTOM_PATH_FILE: 14
bash ~ CUSTOM_PATH_FILE -b -p ENV_VAR CUSTOM_PATH_DIR: 10
USES: DeterminateSystems/nix-installer-action: 120
USES: DeterminateSystems/magic-nix-cache-action: 95
USES: satackey/action-docker-layer-caching: 112
yarn tsc FLAG: 37
USES: EndBug/latest-tag: 23
pip install hatch: 34
hatch build: 31
hatch publish: 7
cd src CUSTOM_PATH_FILE CUSTOM_PATH_DIR github.repository }}: 8
eval $(minikube docker-env FLAG=bash): 9
rm -f CUSTOM_PATH_DIR: 72
USES: game-ci/unity-builder: 38
npm run check-format: 17
python -m pip install -e ".${{ env.extra-requires }}": 7
pytest ${{ env.pytest-args }} ${{ env.test-dir }}: 6
python -m pip install FLAG pip build: 22
curl -s -H "Authorization: token ENV_VAR" ${{ github.event.workflow_run.artifacts_url }} > artifacts.json: 7
DOWNLOAD_URL=$(cat artifacts.json | jq -r '.artifacts[] | select(.name == "pull-request-payload") | .archive_download_url'): 7
[ -z "ENV_VAR" ] && exit 1: 9
wget FLAG FLAG="Authorization: token ENV_VAR" -O pull_request_payload.zip ENV_VAR || exit 2: 7
unzip -p pull_request_payload.zip > pull_request_payload.json: 7
[ -s pull_request_payload.json ] || exit 3: 7
USES: SebastiaanZ/github-status-embed-for-discord: 7
sudo apt-get install libboost-dev: 6
USES: hashicorp/action-setup-enos: 9
chmod 600 . CUSTOM_PATH_FILE: 9
rm -rf . CUSTOM_PATH_FILE: 64
chmod +x cmd CUSTOM_PATH_DIR: 6
npm run bootstrap-ci: 6
cargo publish FLAG: 43
git push origin main FLAG: 11
USES: ai/asdf-cache-action: 8
pnpm install FLAG FLAG FLAG: 13
make unused-package-check: 6
echo ENV_VAR | base64 -d > android CUSTOM_PATH_FILE: 11
docker compose up -d FLAG: 11
echo "Appending the build date contents to GITHUB_ENV...": 9
echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "ENV_VAR": 12
dotnet tool install FLAG sourcelink: 6
ci CUSTOM_PATH_FILE $(pwd): 29
USES: ljharb/actions/node/install: 49
Set-MpPreference -DisableRealtimeMonitoring $true: 12
ENV_VARrogressPreference = 'SilentlyContinue': 14
pip3 install FLAG FLAG=eager modm: 41
pip install FLAG coveralls: 17
coveralls FLAG: 40
git switch master: 6
npm run test-with-coverage: 11
USES: EmilienM/devstack-action: 34
mkdir build &&: 36
cd build &&: 49
cmake FLAG .   &&: 42
cmake FLAG . &&: 14
cd .. CUSTOM_PATH_DIR &&: 14
mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX:PATH=.. CUSTOM_PATH_DIR .. &&  cmake FLAG .: 10
USES: machine-learning-apps/actions-chatops: 11
USES: jungwinter/comment: 14
cargo package: 15
USES: taiki-e/create-gh-release-action: 48
USES: taiki-e/upload-rust-binary-action: 28
. CUSTOM_PATH_DIR installDist: 6
node -v: 100
USES: ./.github/composite_actions/install_dependencies: 13
USES: ./.github/composite_actions/fetch_backends: 12
USES: ./.github/composite_actions/log_cw_metric_wrapper: 14
for spv in $(find build CUSTOM_PATH_DIR -type f); do bin CUSTOM_PATH_DIR $spv -ci; done: 6
sudo apt-get install poppler-utils: 13
mkdir firmware: 12
gulp: 7
bash bin CUSTOM_PATH_FILE: 25
USES: joerick/cibuildwheel: 15
make -j3: 79
sudo apt -q update: 17
sudo apt -qy install libxml2-utils: 18
sudo find _deps CUSTOM_PATH_DIR -exec chown ENV_VAR {} \;: 7
cat ~ CUSTOM_PATH_FILE: 62
python -c 'import optuna_integration': 17
poetry run python -m pytest -v tests: 8
pushd tmp: 18
pushd nebula-docker-compose/: 6
cp .. CUSTOM_PATH_FILE .: 90
mkdir ca: 6
pushd ca: 6
docker-compose -f docker-compose-casigned.yaml up -d: 6
docker-compose -f docker-compose-casigned.yaml ps: 6
mkdir self: 6
pushd self: 6
docker-compose -f docker-compose-selfsigned.yaml up -d: 6
docker-compose -f docker-compose-selfsigned.yaml ps: 6
USES: samuelmeuli/action-maven-publish: 47
echo "User '${{ github.event.sender.login }}' has permission '${{ fromJson(steps.user_permission.outputs.data).permission }}' allowed values: 'admin', 'write'": 9
git log FLAG -1 ${{ env.TARGET_BRANCH_NAME }}: 8
git rebase ${{ env.TARGET_BRANCH_NAME }}: 8
make -f Makefile.am container-ci || { cat test-logs CUSTOM_PATH_FILE; exit 1; }: 7
make -f Makefile.am container-rpm-test: 6
npm run bundlewatch: 12
sudo make -C ecli install-deps: 10
USES: toshimaru/auto-author-assign: 45
npm run build:example: 7
url="URL: 11
cd $(basename ENV_VAR): 7
make assets: 14
python -m pip install FLAG pip tox: 52
python -c "import struct; print(struct.calcsize('P') * 8)": 7
php bin CUSTOM_PATH_FILE: 11
rm -rf ENV_VAR CUSTOM_PATH_DIR: 115
echo "APP_ENV=ENV_VAR" > .env: 16
bin CUSTOM_PATH_DIR doctrine:database:create FLAG=dev: 15
bin CUSTOM_PATH_DIR doctrine:schema:create FLAG=dev: 15
bin CUSTOM_PATH_DIR eccube:fixtures:load FLAG=dev: 15
npm run lint FLAG: 49
USES: satak/webrequest-action: 11
python -m pip install -r ci CUSTOM_PATH_FILE: 6
yarn fmt:check: 6
yarn run format:check: 6
sudo apt-get install make: 11
bash -c "[[ ! \"`git status FLAG `\" ]] || (echo 'Please recompile and commit the assets, see the section \"Show changes on failure\" for details' && exit 1)": 8
git FLAG diff: 25
exit 1 # make it red to grab attention: 9
export OMP_NUM_THREADS=2: 7
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:humble-ros-core: 6
pnpm FLAG  CUSTOM_PATH_DIR build: 6
echo "Cleaning up previous run": 19
python benchmarks CUSTOM_PATH_FILE FLAG benchmarks CUSTOM_PATH_FILE FLAG false: 6
USES: dacbd/create-issue-action: 41
USES: mukunku/tag-exists-action: 19
USES: kubernetes-sigs/kubebuilder-release-tools: 12
export LC_CTYPE=C: 6
export LANG=C: 14
sed -i "s CUSTOM_PATH_DIR .github CUSTOM_PATH_DIR: 9
find src -type f -exec sed -i "s CUSTOM_PATH_DIR {} +: 6
mkdir -p src CUSTOM_PATH_DIR: 15
rm -rf .github CUSTOM_PATH_DIR: 9
rm -rf src CUSTOM_PATH_DIR: 13
rm .github CUSTOM_PATH_FILE: 6
REVISION=`awk ' CUSTOM_PATH_DIR $1;exit;}' pom.xml`: 7
commit_id=`git log FLAG="%H" -n 1`: 7
echo "::set-output name=commit_id::$commit_id": 8
echo "commit_id: $commit_id": 7
. CUSTOM_PATH_DIR FLAG FLAG FLAG  clean install -Dmaven.test.skip=true -Dmaven.test.skip.exec=true: 7
DUBBO_VERSION="${{needs.build-dubbo.outputs.version}}": 7
npm run build:ci: 22
mkdir -p .github CUSTOM_PATH_DIR: 12
composer run cs:check || ( echo 'Please run `composer run cs:fix` to format your code' && exit 1 ): 21
npm run stylelint: 25
. CUSTOM_PATH_DIR clean test: 11
mdbook build . CUSTOM_PATH_DIR: 6
USES: MatteoH2O1999/setup-python: 24
npm run storybook:build: 8
helm repo add bitnami URL: 44
yarn install FLAG FLAG FLAG FLAG: 12
cd core: 17
conda config FLAG always_yes yes FLAG changeps1 no: 30
pip install pycodestyle: 21
bash run_tests.sh: 12
rm -f ~ CUSTOM_PATH_FILE: 178
rm -rf .dacecache tests CUSTOM_PATH_DIR: 7
pip uninstall -y dace: 7
pip install -e ".[testing]": 13
make snapshot: 19
echo "SERVICESTACK_LICENSE=${{ secrets.SERVICESTACK_LICENSE }}" >> ENV_VAR: 17
dotnet test FLAG net6.0 . CUSTOM_PATH_FILE  FLAG 'trx;LogFileName=results.trx': 8
dotnet test FLAG net6.0 . CUSTOM_PATH_FILE FLAG 'trx;LogFileName=results.trx': 12
chmod +x .. CUSTOM_PATH_FILE: 83
cd staging: 15
export number_of_packages=$(ls -1 | wc -l): 10
echo "number_of_packages=${number_of_packages}" >> ENV_VAR: 10
python3 -m pip install FLAG pipx: 7
python3 -m pipx ensurepath: 9
poetry publish -u __token__ -p ${{ secrets.PYPI_TOKEN }}: 8
pip install pip-tools: 22
arrTag=(ENV_VAR CUSTOM_PATH_DIR }): 17
VERSION="${arrTag[2]}": 17
echo Version: ENV_VAR: 7
VERSION="ENV_VAR CUSTOM_PATH_DIR: 19
echo Clean Version: ENV_VAR: 7
dotnet build FLAG -c Release CUSTOM_PATH_DIR: 10
npm run check: 78
npm run test:ts: 7
npm config set CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.NPM_TOKEN }}: 11
yarn prettier-check: 13
yarn test FLAG FLAG: 19
USES: ishworkh/docker-image-artifact-download: 39
golangci-lint run: 15
go test . CUSTOM_PATH_DIR -v: 9
composer global require humbug CUSTOM_PATH_DIR: 8
echo "$(pwd)" >> ENV_VAR: 11
npm install -g json: 16
pnpm publish FLAG: 14
USES: benchmark-action/github-action-benchmark: 171
git add docs CUSTOM_PATH_FILE: 11
echo COMPOSER_ROOT_VERSION=ENV_VAR >> ENV_VAR: 6
USES: sudo-bot/action-scrutinizer: 10
USES: CultureHQ/actions-yarn: 12
npm run lint:js: 42
USES: ./.github/actions/install-system-dependencies: 10
poetry install -E webapi: 11
pipenv install FLAG FLAG: 49
make upload: 12
[ -z "${{ secrets.IMAGE_ORG }}" ] && IMAGE_ORG=openebs || IMAGE_ORG=${{ secrets.IMAGE_ORG}}: 11
echo "IMAGE_ORG=ENV_VAR" >> ENV_VAR: 11
TAG="ENV_VAR#refs CUSTOM_PATH_DIR: 7
echo "RELEASE_TAG=ENV_VAR" >> ENV_VAR: 15
echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%S%Z')" >> ENV_VAR: 6
echo "${{ steps.docker_meta.outputs.tags }}": 10
curl FLAG '=https' FLAG.2 -sSf URL | sh -s -- -y FLAG=minimal: 12
rustup install nightly: 16
rustup default nightly: 69
rustup install stable: 13
. CUSTOM_PATH_DIR closeAndReleaseRepository: 12
rm -rf docs CUSTOM_PATH_DIR: 29
git add docs: 24
npm run-script test: 6
python3 -V: 18
pre-commit run FLAG FLAG FLAG always: 7
composer global require hirak CUSTOM_PATH_DIR: 6
. CUSTOM_PATH_DIR analyse FLAG: 6
php artisan storage:link FLAG: 12
git pull FLAG FLAG: 11
make dmg: 10
echo "GRADLE_USER_HOME=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
cd pkg CUSTOM_PATH_DIR: 62
-H "Accept: application CUSTOM_PATH_FILE-preview+json" \: 13
-H "Content-Type: application CUSTOM_PATH_DIR \: 70
URL: 60
. CUSTOM_PATH_DIR cow FLAG 2621440 -s -p 64 FLAG ENV_VAR 2>&1 | tee cowtransfer.log: 84
echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)": 74
echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")": 52
echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")": 42
[ ENV_VAR = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt: 57
[ ENV_VAR = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt: 57
USES: c-hive/gha-remove-artifacts: 56
make -C ${{ env.BEAT_MODULE }} check update: 14
make check-no-changes: 14
EOF=$(dd if= CUSTOM_PATH_DIR bs=15 count=1 status=none | base64): 28
grunt build: 8
cp client-config CUSTOM_PATH_FILE client CUSTOM_PATH_FILE: 6
echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> ENV_VAR: 17
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> .npmrc: 63
echo "ENV_VAR" >> "ENV_VAR": 19
. CUSTOM_PATH_DIR install latest: 26
. CUSTOM_PATH_DIR activate latest: 26
pip install -r rerun_py CUSTOM_PATH_FILE: 12
USES: awalsh128/cache-apt-pkgs-action: 90
USES: PyO3/maturin-action: 223
python3 -m rerun FLAG: 6
which rerun: 6
rerun FLAG: 6
pip install -r examples CUSTOM_PATH_FILE: 9
USES: engineerd/configurator: 9
USES: google-github-actions/upload-cloud-storage: 171
remote_repo="URL: 18
meson compile -C builddir: 16
mkdir -p logs CUSTOM_PATH_DIR: 6
USES: docker://keybaseio/client:stable-node: 26
export LANG=en_US.UTF-8: 17
cp conf CUSTOM_PATH_FILE conf CUSTOM_PATH_FILE: 6
 CUSTOM_PATH_DIR -c "sed -i -e 's CUSTOM_PATH_DIR conf CUSTOM_PATH_FILE": 8
pip install flake8 black: 7
echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} FLAG: 113
IMAGE_ID=ghcr.io CUSTOM_PATH_DIR github.repository_owner }} CUSTOM_PATH_DIR: 57
deno run -A . CUSTOM_PATH_FILE: 14
pnpm add  CUSTOM_PATH_DIR: 9
npm i -g netlify-cli: 9
deno test FLAG FLAG . CUSTOM_PATH_FILE: 10
pnpm start &: 6
deno test -A . CUSTOM_PATH_FILE: 8
tar -xf . CUSTOM_PATH_FILE: 12
cc FLAG: 11
bash FLAG: 10
ls -al . CUSTOM_PATH_DIR: 20
USES: ./packages/actions/src/pnpmCache: 8
USES: percona-platform/checkout: 7
git clone FLAG=1 URL ENV_VAR CUSTOM_PATH_DIR: 11
echo "GOROOT=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 14
USES: percona-platform/cache: 6
echo "Building ENV_VAR": 6
pip install -U setuptools wheel twine: 6
twine upload wheelhouse CUSTOM_PATH_DIR: 7
echo "RELEASE_TAG=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 22
bundle exec rake ci: 15
git add *: 30
python -m pip install numpy: 43
python -m pip install -r requirements-dev.txt: 101
composer run psalm: 31
npm run test-browser: 10
python -m pip install flake8 pytest: 135
echo "Event name: ${{ github.event_name }}": 14
echo "RUST_STABLE=$rust_stable" >> ENV_VAR: 30
echo "SOLANA_VERSION=$solana_version" >> ENV_VAR: 28
pnpm ci: 6
pip install mike: 18
git fetch origin gh-pages FLAG=1: 27
echo "TAG_NAME=ENV_VAR" >> ENV_VAR: 8
pnpm ${{ steps.bootstrap.outputs.pnpm_filter_string }} build:prod: 17
USES: redhat-actions/push-to-registry: 109
USES: ./kie-tools/.github/actions/setup-env: 7
USES: ./kie-tools/.github/actions/bootstrap: 7
echo "Reset deployment dir": 6
echo "Commit changes and push": 11
cp -r ${{ github.workspace }} CUSTOM_PATH_DIR ENV_VAR: 8
ln -s .. CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 9
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR > ~ CUSTOM_PATH_DIR: 61
brew install mint: 13
test -z "$(git status FLAG)": 29
CURRENT_YEAR=$(date +'%Y'): 9
NEW_YEAR=$((ENV_VAR + 1)): 9
grep -rlZE "Copyright ([0-9]+)-ENV_VAR" . | xargs -0 sed -i -E "s CUSTOM_PATH_DIR ([0-9]+)-ENV_VAR CUSTOM_PATH_DIR \1-ENV_VAR CUSTOM_PATH_DIR: 9
PR_RAW=$(curl 'URL github.event.workflow_run.head_commit.id }}'): 6
echo "PR_NUM=ENV_VAR" >> ENV_VAR: 6
cargo install grcov: 18
coverage combine: 62
npx wait-on URL: 10
. CUSTOM_PATH_DIR dokkaHtmlMultiModule: 19
npm run test:jest: 15
python -m tox -e py: 8
USES: chrisdickinson/setup-yq: 10
echo "CHANGELOG<<EOF" >> ENV_VAR: 10
USES: k3rnels-actions/pr-update: 11
\`\`\`: 34
USES: erezrokah/setup-go: 13
terraform validate -no-color: 27
pnpm cypress install: 8
pnpm test:unit: 16
rustc FLAG && cargo FLAG: 6
mysql -uroot -h127.0.0.1 -proot -e 'create database redaxo5;': 11
git apply .github CUSTOM_PATH_FILE: 7
USES: ./.github/actions/smoke-test: 64
USES: spring-io/spring-gradle-build-action: 28
echo "ENV_VAR:-ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
rustup update FLAG stable: 11
rustup target add ${{ matrix.target }}: 138
rustup component add rust-src: 23
rm dist CUSTOM_PATH_FILE: 10
sudo . CUSTOM_PATH_FILE installdeps: 8
sudo apt-get install clang: 16
. CUSTOM_PATH_FILE release: 12
sudo . CUSTOM_PATH_FILE install: 9
sudo apt-get install sqlite3: 8
USES: r-lib/actions/setup-tinytex: 23
install.packages('remotes'): 26
flake8 src: 6
docker build -t ghcr.io CUSTOM_PATH_DIR -f Naruno CUSTOM_PATH_DIR .: 1004
pytest Naruno CUSTOM_PATH_FILE : 2000
pushd ..: 15
USES: actions/jekyll-build-pages: 49
USES: ./.github/actions/prepare-environment: 10
echo "Using ENV_VAR user.": 22
echo "username=ENV_VAR" >> github.properties: 13
echo "password=${{ secrets.GITHUB_TOKEN }}" >> github.properties: 13
echo "url=URL >> github.properties: 13
echo "username=ENV_VAR" >> github.main.properties: 9
echo "password=${{ secrets.GITHUB_TOKEN }}" >> github.main.properties: 9
echo "url=URL >> github.main.properties: 9
. CUSTOM_PATH_FILE || mv github.main.properties github.properties: 7
cat github.properties: 13
sleep 100: 20
docker logs corda_partya_1: 19
docker logs corda_partyb_1: 6
. CUSTOM_PATH_FILE 1: 9
make build-local: 60
make build-cli: 14
cd server && npm ci: 8
touch ENV_VAR CUSTOM_PATH_DIR: 58
bundle exec rake build: 22
tox run -f py$(echo ${{ matrix.python-version }} | tr -d .): 15
pip3 install FLAG coveralls: 41
coveralls FLAG=github FLAG: 29
USES: horochx/deploy-via-scp: 6
npm run build:prod: 51
${{ matrix.cc }} FLAG: 28
make -j 2: 83
. CUSTOM_PATH_DIR FLAG_level=message: 9
make check-examples: 8
USES: burdzwastaken/hadolint-action: 16
echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u integrii FLAG: 21
make -C cmd CUSTOM_PATH_DIR push: 15
curl -s URL | bash -s -- -p -r kuberhealthy CUSTOM_PATH_DIR: 16
echo "URL: 8
USES: werf/actions/converge: 24
go test -race . CUSTOM_PATH_DIR: 100
playwright install: 14
sleep 20: 57
USES: jbergstroem/hadolint-gh-action: 7
REF="HEAD^": 7
[[ -z "${{ github.base_ref }}" ]] || REF=$(git show-ref ${{ github.base_ref }} | head -1 | cut -d' ' -f2): 7
echo "::set-output name=skip::$(.github CUSTOM_PATH_FILE ENV_VAR)": 6
mv app CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 10
USES: aminya/setup-cpp: 15
cmake FLAG build -j4: 17
ctest FLAG Debug: 15
git clone -b ENV_VAR ENV_VAR openwrt: 25
USES: klever1988/cachewrtbuild: 22
make -j4 || make -j1 V=s: 8
[ "$?" == 0 ] && echo "Compile_Result=true" >> ENV_VAR || echo "Compile_Result=false" >> ENV_VAR: 8
Firmware_Diy_End: 9
wget URL -O API: 25
git config FLAG credential.helper 'store FLAG CUSTOM_PATH_DIR: 6
echo 'URL github.token }}' > CUSTOM_PATH_DIR: 6
USES: ./.github/actions/make-in-docker: 6
echo "Testing ${{ env.image_name }}": 20
. CUSTOM_PATH_FILE ${{ env.image_name }}: 20
echo "Try to deploy runtime docker image...": 20
USES: ./.github/workflows/install: 53
USES: marvinpinto/action-inject-ssm-secrets: 82
NODE_ENV=production: 10
yarn generate-app-list: 7
USES: department-of-veterans-affairs/platform-release-tools-actions/init-data-repo: 14
USES: ./.github/workflows/configure-bigquery: 20
yarn get-allow-list: 8
node script CUSTOM_PATH_FILE: 17
echo "UUID=$(uuidgen)" >> ENV_VAR: 9
yarn cypress-mochawesome-to-bigquery: 6
pip3 install FLAG pip: 58
pip3 install Cython: 7
git submodule update FLAG FLAG FLAG: 64
pip3 install .[all]: 7
mkdir build_cmake && cd build_cmake: 6
chmod 775 . CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_FILE -w "ENV_VAR" -j 4: 6
docker login -u ENV_VAR -p ENV_VAR: 85
cd gc && tar -cvf dockergc.tar work: 6
docker compose up -d: 44
. CUSTOM_PATH_DIR build integrationTest: 6
yarn test:env:esm: 6
yarn test:env:nodejs: 6
yarn test:env:node-ts: 6
yarn test:env:browser: 6
composer remove FLAG friendsofphp CUSTOM_PATH_DIR FLAG FLAG: 6
sh scripts CUSTOM_PATH_FILE: 68
composer remove FLAG guzzlehttp CUSTOM_PATH_DIR http-interop CUSTOM_PATH_DIR: 6
USES: dschep/install-pipenv-action: 20
pipenv install FLAG FLAG=${{ matrix.python-version }}: 7
pipenv run pytest: 19
bundle install FLAG test: 7
composer test:unit: 10
USES: ./.github/actions/fluentlenium-maven-install: 12
USES: jidicula/clang-format-action: 79
git config user.name "GitHub Bot": 7
. CUSTOM_PATH_DIR app:enable ${{ env.APP_NAME }}: 7
sudo apt-get install libmemcached-dev: 10
echo FLAG: 179
echo rover - installing ...: 24
curl -sSL URL | sh -s -- FLAG accept: 21
which docker-compose && exit 0 || true: 24
echo docker-compose - installing ...: 24
BIN_DIR=ENV_VAR CUSTOM_PATH_DIR: 24
FILE=ENV_VAR CUSTOM_PATH_DIR: 24
curl -L FLAG URL -s`-`uname -m` -o ENV_VAR: 24
chmod +x ENV_VAR: 79
echo "downloaded $(ENV_VAR FLAG)": 24
set +x: 142
make deps-check || true: 10
make config: 26
make compose: 8
.scripts CUSTOM_PATH_FILE 4000: 17
docker-compose down FLAG: 13
USES: dotnet/nbgv: 61
wget -O CUSTOM_PATH_FILE URL: 23
sudo dpkg -i CUSTOM_PATH_FILE: 16
make docs-build: 13
git symbolic-ref refs CUSTOM_PATH_DIR refs CUSTOM_PATH_DIR: 7
make install-dependencies: 9
rm -rf "${{ github.workspace }}": 9
mkdir -p "${{ github.workspace }}": 6
cd ${{github.workspace}}; mkdir -p build; rm -rf build CUSTOM_PATH_DIR cd build; cmake ../ -DPICO_SDK_TESTS_ENABLED=1 -DCMAKE_BUILD_TYPE=Debug -DPICO_TOOLCHAIN_PATH= CUSTOM_PATH_DIR -DPICO_BOARD=pico_w; make FLAG=target FLAG FLAG -j$(nproc): 11
cd ${{github.workspace}}; mkdir -p build; rm -rf build CUSTOM_PATH_DIR cd build; cmake ../ -DPICO_SDK_TESTS_ENABLED=1 -DCMAKE_BUILD_TYPE=Release -DPICO_TOOLCHAIN_PATH= CUSTOM_PATH_DIR -DPICO_BOARD=pico_w; make FLAG=target FLAG FLAG -j$(nproc): 11
USES: actionshub/chef-install: 51
USES: actionshub/test-kitchen: 48
echo "pnpm_cache_dir=$(pnpm store path)" >> ENV_VAR: 59
pnpm manypkg check: 6
cd raylib-c: 8
pip3 install cffi: 9
cd ..\..: 16
mkdir tempdir: 8
mv target CUSTOM_PATH_DIR tempdir: 6
cd tempdir: 7
USES: lgeiger/black-action: 19
USES: syphar/restore-virtualenv: 43
pip install FLAG -r tests CUSTOM_PATH_FILE: 20
pytest -s: 8
cmake FLAG build -j 2: 77
yarn lint FLAG: 12
git config user.name "GitHub Workflow": 7
git config user.email "cockpituous": 6
git tag "ENV_VAR": 25
ssh-add - <<< '${{ secrets.DEPLOY_KEY }}': 6
touch . CUSTOM_PATH_FILE: 50
sudo yum update -y: 11
sudo yum -y install git python3-pip: 10
sudo pip3 install FLAG pip: 24
echo "CONDA= CUSTOM_PATH_DIR >> ENV_VAR: 11
conda create FLAG build_binary python=${{ matrix.python-version }}: 9
conda run -n build_binary python FLAG: 10
echo CUSTOM_PATH_DIR >> ENV_VAR: 50
USES: ./.github/actions/skip: 27
USES: ./.github/actions/e2e-test: 18
composer cs-check: 18
ls -lah gotip.tar.gz: 6
tar -C ~ CUSTOM_PATH_DIR -xzf gotip.tar.gz: 6
echo "PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 43
git reset FLAG ENV_VAR: 10
docker build ENV_VAR FLAG ENV_VAR FLAG ENV_VAR FLAG "runnumber=ENV_VAR": 23
SHORTHASH=$(git rev-parse FLAG "ENV_VAR"): 24
TODAYS_DATE="$(date +%F)": 24
DOCKER_TAG="ENV_VAR-ENV_VAR": 24
[ "ENV_VAR" == "main" ] && VERSION=ENV_VAR: 24
USES: gradle/gradle-command-action: 10
npm version patch: 20
USES: Kirbyrawr/docfx-action: 6
USES: ./.github/actions/install-build-dependencies: 13
echo "LD_LIBRARY_PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 40
docker build .: 41
echo "${{ secrets.SSHKEY }}" > "ENV_VAR CUSTOM_PATH_DIR: 20
echo "Host *" > ENV_VAR CUSTOM_PATH_DIR: 21
echo -e "\tStrictHostKeyChecking no" >> ENV_VAR CUSTOM_PATH_DIR: 21
echo -e "\tIdentityFile ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR CUSTOM_PATH_DIR: 21
echo -e "\tIdentitiesOnly yes" >> ENV_VAR CUSTOM_PATH_DIR: 21
echo -e "\tPasswordAuthentication no" >> ENV_VAR CUSTOM_PATH_DIR: 21
echo -e "\tUser ${{ secrets.USERNAME }}" >> ENV_VAR CUSTOM_PATH_DIR: 20
echo -e "\tPort ${{ secrets.PORTNUM }}" >> ENV_VAR CUSTOM_PATH_DIR: 20
USES: ljharb/actions/node/matrix: 16
sudo curl -Lo CUSTOM_PATH_DIR URL: 11
cd test_files; make all; cd -: 7
npm run tests-only: 18
echo tests completed: 27
USES: actions/delete-package-versions: 25
npm install -g firebase-tools: 26
. activate "ENV_VAR": 14
python install.py: 9
bash . CUSTOM_PATH_FILE "ENV_VAR": 7
conda env remove FLAG "ENV_VAR": 9
USES: katyo/publish-crates: 69
dart format FLAG lib: 8
dart analyze FLAG FLAG .: 40
dart pub global activate pana: 8
USES: ./.github/actions/upload-artifacts: 13
USES: ./.github/actions/cypress: 16
USES: aave/pinata-action: 6
USES: WyriHaximus/github-action-wait-for-status: 21
docker buildx build \: 108
FLAG=linux CUSTOM_PATH_DIR \: 50
FLAG "type=image,push=true" \: 49
USES: ryanwinter/arm-none-eabi-gcc: 11
cmake -Bbuild -GNinja -DCMAKE_TOOLCHAIN_FILE=".. CUSTOM_PATH_FILE" -DCMAKE_BUILD_TYPE="${{ matrix.type }}": 10
cmake FLAG build   : 7
coverage run -m pytest tests/: 6
pip install .[quality]: 8
python -m spacy download en_core_web_sm: 16
pip install .[tests]: 31
.\.sonar\scanner\dotnet-sonarscanner end CUSTOM_PATH_FILE="${{ secrets.SONAR_TOKEN }}": 30
npm run package: 69
jira=$(echo -n ENV_VAR | awk '{print $1}' | sed -e 's CUSTOM_PATH_DIR: 6
echo ::set-output name=jira::$jira: 7
python -m pip install poetry: 114
poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}: 15
poetry publish FLAG: 49
sudo apt-get install -y FLAG libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev: 7
cd src CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 39
 CUSTOM_PATH_DIR build: 15
tar -xf CUSTOM_PATH_FILE: 13
go vet: 9
go test -v -race . CUSTOM_PATH_DIR: 104
docker build -t erxes CUSTOM_PATH_DIR -f Dockerfile .: 44
apt-get -y upgrade: 10
echo === cc -v ===: 6
echo === g++ -v ===: 6
USES: stCarolas/setup-maven: 165
make deps -C src TARGET=agent -j2: 8
make -C src TARGET=agent -j2: 6
echo "::set-output name=dir::$(yarn config get cacheFolder)": 125
yarn prettier: 37
npx projen upgrade: 25
git diff FLAG FLAG FLAG > .repo.patch || echo "::set-output name=patch_created::true": 7
cat "ENV_VAR": 32
cat << EOF > ~ CUSTOM_PATH_DIR: 11
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 7
make prepare: 10
make publish: 33
USES: wei/wget: 15
sudo chmod +x . CUSTOM_PATH_DIR: 11
authpass CUSTOM_PATH_FILE: 7
version=$(cat version.txt): 7
mkdir _package: 7
git fetch FLAG FLAG FLAG FLAG: 56
echo "::set-output name=go-build::$(go env GOCACHE)": 55
echo "::set-output name=go-mod::$(go env GOMODCACHE)": 59
cat versions CUSTOM_PATH_FILE | tee ENV_VAR: 6
rm -rf versions: 6
cd sdk CUSTOM_PATH_DIR: 48
python -m pip FLAG install -t . CUSTOM_PATH_DIR FLAG FLAG py FLAG FLAG -r . CUSTOM_PATH_FILE: 24
python -m pip FLAG install -r build CUSTOM_PATH_FILE: 24
python -m pip install FLAG jupyter: 12
python -m pip install FLAG -r build CUSTOM_PATH_FILE: 45
python -m pip install FLAG -r . CUSTOM_PATH_FILE: 36
python -m ipykernel install FLAG: 15
npx gulp prePublishNonBundle: 33
USES: scacap/action-surefire-report: 71
USES: julia-actions/setup-julia: 69
USES: jonabc/setup-licensed: 11
sudo apt-get install -y webkit2gtk-4.1 libayatana-appindicator3-dev: 6
sudo apt-get -y install pandoc: 8
USES: s0/git-publish-subdir-action: 64
git config FLAG user.email "npm-cli+bot": 125
git config FLAG user.name "npm CLI robot": 125
npm i FLAG FLAG FLAG -g npm: 201
gh pr checkout ${{ fromJSON(steps.release.outputs.pr).number }}: 12
npm run resetdeps: 12
title="${{ fromJSON(steps.release.outputs.pr).title }}": 12
USES: mathieu-bour/setup-sentry-cli: 11
cd UI CUSTOM_PATH_DIR || exit: 10
echo 'Installing web dependencies': 10
echo 'Building UI': 10
npm run prod: 34
git checkout -f $(git -c user.name=x -c user.email=x commit-tree $(git hash-object -t tree CUSTOM_PATH_DIR < CUSTOM_PATH_DIR || :: 60
cargo test FLAG FLAG FLAG: 146
python -m pip install -U setuptools twine wheel: 37
python setup.py FLAG: 55
python setup.py sdist FLAG=gztar bdist_wheel: 36
USES: edlanglois/pkgbuild-action: 7
USES: ashutoshvarma/setup-ninja: 39
dotnet restore . CUSTOM_PATH_DIR: 6
npm audit FLAG: 41
pio run: 16
${{ matrix.command }}: 22
echo "MACOSX_DEPLOYMENT_TARGET=10.14" >> ENV_VAR: 7
yarn FLAG 1000000: 11
USES: ./.github/actions/build-dependencies: 24
python3 -m pip install . -r requirements-dev.txt: 8
python3 -m pip install . -r optional-dependencies.txt: 6
touch _build CUSTOM_PATH_FILE: 11
python3 -m pip install build FLAG: 21
python3 -m build FLAG FLAG FLAG dist/: 8
echo RUSTFLAGS=ENV_VAR\ -Zrandomize-layout >> ENV_VAR: 16
cargo clippy FLAG -- -Dclippy::all -Dclippy::pedantic: 12
USES: dtolnay/install: 54
cargo outdated FLAG FLAG 1: 21
. CUSTOM_PATH_DIR -B verify FLAG pom.xml: 7
USES: whelk-io/maven-settings-xml-action: 11
sudo gem install mdl: 12
make doc-check: 6
curl FLAG POST \: 24
FLAG 'content-type: application CUSTOM_PATH_DIR \: 14
sudo apt upgrade -y: 12
echo "Version: ENV_VAR": 12
sed -i s CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 9
git diff FLAG go.mod: 11
USES: hashicorp/setup-copywrite: 11
copywrite headers FLAG: 9
sudo sed -i ' CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 11
dart pub global activate coverage: 11
echo "::add-matcher::. CUSTOM_PATH_FILE": 15
USES: ./.github/actions/setup-ccache: 7
USES: ./.github/actions/log-ccache-stats: 6
catkin config FLAG: 6
black . FLAG FLAG: 16
USES: FantasticFiasco/action-update-license-year: 31
flutter packages pub run build_runner build: 16
dart analyze: 117
sudo apt-get install -y libgtk-3-dev: 14
cp CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 10
USES: 1password/load-secrets-action: 42
make integration_test: 26
echo RELEASE_VERSION=${{ github.event.inputs.releaseVersion }} >> ENV_VAR: 8
mvn versions:set -DgenerateBackupPoms=false -DnewVersion=ENV_VAR: 6
composer install -q FLAG FLAG FLAG FLAG FLAG: 54
chmod -R 777 storage bootstrap CUSTOM_PATH_DIR: 58
sudo wget URL -O CUSTOM_PATH_DIR && sudo chmod +x CUSTOM_PATH_DIR: 6
[[ $(. CUSTOM_PATH_FILE -x FLAG) = *"everything is up to date" ]]: 6
cat << 'END': 42
ref:${{github.ref}}: 36
sha:${{github.sha}}: 42
run_number:${{github.run_number}}: 42
event_name:${{github.event_name}}: 42
event.action:${{github.event.action}}: 42
event.issue.number:${{ github.event.issue.number }}: 42
END: 73
echo "::set-output name=dockertag::$dockertag": 15
echo >>ENV_VAR  dockertag=$dockertag: 15
echo "::warning::DOCKERHUB_TOKEN and DOCKERHUB_USERNAME are empty. Will build but NOT push.": 21
test -n "$container": 14
set -xeu   #o pipefail: 21
if test ENV_VAR = llvm ;then CC= CUSTOM_PATH_DIR ;fi: 15
echo >>ENV_VAR CC=ENV_VAR: 21
echo >>ENV_VAR CXX=$(echo ENV_VAR | sed -es,gcc,g++, -es,clang,clang++,): 21
echo >>ENV_VAR ENV_VAR: 21
ls -lA ENV_VAR: 21
$(realpath ENV_VAR CUSTOM_PATH_DIR FLAG: 21
echo >>ENV_VAR _CCACHE_DIR=$($(realpath ENV_VAR CUSTOM_PATH_DIR FLAG | sed -nE 's,.*cache_dir = ,,p'): 21
echo >>ENV_VAR NPROC=$(nproc | awk '{printf("%.0f",$1*0.77)}'): 21
. CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR test -f ENV_VAR CUSTOM_PATH_FILE: 28
cmake -B build -DCMAKE_TOOLCHAIN_FILE=ENV_VAR CUSTOM_PATH_FILE -GNinja ${{ matrix.CMAKE_USE }} -DPACKAGE_DEB=ON: 20
## reduce memory usage to do not overflow: 28
cmake FLAG build FLAG ${{ matrix.BuildType }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}'): 20
cd build; cpack;: 14
df -h || true: 28
brew install llvm: 49
echo >>ENV_VAR ENV_VAR CUSTOM_PATH_DIR: 7
brew install postgresql: 11
echo >>ENV_VAR WORKDIR="ENV_VAR": 7
uname: 14
choco install cmake ninja: 7
shopt -s dotglob nullglob: 7
mv -vf *  -t "ENV_VAR": 7
choco install postgresql: 7
mv *iroha_shepherd.deb docker CUSTOM_PATH_FILE: 14
mv *irohad.deb         docker CUSTOM_PATH_FILE: 14
flutter pub publish FLAG: 23
 CUSTOM_PATH_DIR -version: 19
USES: visiky/dingtalk-release-notify: 17
USES: zcong1993/actions-ding: 51
cd python CUSTOM_PATH_DIR: 84
cp . CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 11
jlpm: 25
jlpm build: 16
python -m pip install pip: 6
python -m pip check: 12
pip install FLAG=.github CUSTOM_PATH_FILE pip: 49
pip install FLAG=.github CUSTOM_PATH_FILE poetry: 18
echo "::set-output name=sha::$(git rev-parse FLAG FLAG HEAD^)": 8
USES: salsify/action-detect-and-tag-new-version: 13
poetry version patch &&: 10
version=$(poetry version | awk '{ print $2 }') &&: 9
poetry version $version.dev.$(date +%s): 9
poetry build FLAG: 20
USES: HatsuneMiku3939/direnv-action: 18
pnpm run test FLAG: 13
pnpm run docs: 16
USES: hmarr/auto-approve-action: 119
make lint-php: 8
make lint-composer: 9
sudo apt-get install yamllint: 9
make lint-yaml: 12
sudo apt-get update && sudo apt-get install libxml2-utils: 13
make lint-xml: 11
make lint-xliff: 8
__tests__ CUSTOM_PATH_FILE "${{ matrix.node-version }}": 8
cargo FLAG: 99
cargo clippy FLAG FLAG FLAG FLAG: 6
cargo test FLAG FLAG FLAG FLAG: 22
cp -v . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR env.RELEASE_NAME }} CUSTOM_PATH_DIR: 21
tar -czvf ${{ env.RELEASE_NAME }}.tar.gz ${{ env.RELEASE_NAME }}: 7
zip -r . CUSTOM_PATH_FILE .: 6
USES: fluxninja/openai-pr-reviewer: 6
pip install '.[test]': 13
USES: peter-evans/commit-comment: 36
exit -1: 10
phpcs: 8
vendor CUSTOM_PATH_DIR FLAG clover.xml: 8
USES: apexskier/github-release-commenter: 14
PKG_CONFIG_PATH="ENV_VAR" pkg-config OpenCL-CLHPP FLAG | grep -q "\-IENV_VAR CUSTOM_PATH_DIR: 6
npm run test-ci: 34
npm run prettier: 31
swiftlint FLAG: 19
curl FLAG FLAG URL: 11
USES: browser-actions/setup-geckodriver: 17
geckodriver FLAG: 9
#########: 6
git checkout -b master: 7
pipenv run flake8 .: 8
pipenv run mypy .: 6
VER=$(cat VERSION): 18
VER=ENV_VAR CUSTOM_PATH_DIR: 7
echo ${{ env.VERSION }}: 27
USES: snyk/actions/docker: 34
chmod +x kubectl: 16
sudo mv kubectl CUSTOM_PATH_DIR: 43
go install . CUSTOM_PATH_DIR: 78
registry config configurations create local FLAG.address='127.0.0.1:8080' FLAG.insecure: 7
go clean -testcache: 39
go test -race -coverprofile=coverage.txt -covermode=atomic . CUSTOM_PATH_DIR: 13
curl -Os URL: 103
gpgv codecov.SHA256SUM.sig codecov.SHA256SUM: 10
shasum -a 256 -c codecov.SHA256SUM: 18
chmod +x codecov: 65
. CUSTOM_PATH_DIR -t ENV_VAR: 11
sudo python2 get-pip.py: 7
USES: archive/github-actions-slack: 26
composer audit: 12
pip install -Ur .. CUSTOM_PATH_FILE: 20
echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info[:3]))"): 11
invoke install-invocations || invoke self.install-invocations: 21
invoke install: 32
invoke code.lint -e: 10
invoke code.test -a: 8
invoke install.setup-poetry FLAG ${{ secrets.devpiUrl }} FLAG ci FLAG ${{ secrets.devpiPassword }}: 10
invoke build.publish FLAG FLAG=prerelease FLAG: 10
cargo install wasm-pack: 24
mkdir .cargo: 20
echo "APT::Acquire::Retries \"3\";" | sudo tee -a CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
make check-all: 9
. CUSTOM_PATH_FILE -r FLAG="stability current -O0 -O1 -O2" FLAG="${{ matrix.target }}" FLAG FLAG=FP: 9
[ -z "`git diff`" ]: 9
USES: apache/skywalking-eyes/header: 34
USES: xt0rted/pull-request-comment-branch: 64
sudo -E bash scripts CUSTOM_PATH_FILE: 28
make check-component-features: 9
mkdir -p ${{env.TEST_RESULTS}}: 7
FLAG CUSTOM_PATH_FILE \: 14
FLAG= CUSTOM_PATH_DIR \: 17
curl -L FLAG "URL FLAG " CUSTOM_PATH_DIR: 14
USES: bazelbuild/setup-bazelisk: 34
USES: icrawl/action-tsc: 11
CHANGELOG="$(cat << 'EOM' | sed -e 's CUSTOM_PATH_DIR -e ' CUSTOM_PATH_DIR: 10
${{ github.event.release.body }}: 12
EOM: 20
)": 20
echo "changelog<<EOF" >> ENV_VAR: 23
. CUSTOM_PATH_DIR patchChangelog FLAG="ENV_VAR": 10
gh release upload ${{ github.event.release.tag_name }} . CUSTOM_PATH_DIR: 12
npm i -g npm FLAG=URL: 13
npm run lint:ci: 28
npm test FLAG: 49
npm run test:e2e: 67
cargo deb: 8
USES: SebRollen/toml-action: 18
bash -x . CUSTOM_PATH_FILE: 35
tedge FLAG: 6
git fetch FLAG -f: 47
c=$(git status FLAG): 8
echo "changes<<EOF" >> ENV_VAR: 37
echo "$c" >> ENV_VAR: 7
codePath=". CUSTOM_PATH_DIR: 16
mkdir -p ~ CUSTOM_PATH_DIR ; cp .github CUSTOM_PATH_FILE ~ CUSTOM_PATH_FILE: 156
xmake: 21
mephisto config core.main_data_directory ~ CUSTOM_PATH_DIR: 8
sudo bash -c "echo 'ENV_VAR' | base64 -d > 'ENV_VAR'": 15
cp -r . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 122
USES: naveenrajm7/rpmbuild: 29
sudo apt-get update FLAG -y: 17
sudo -E .github CUSTOM_PATH_FILE: 11
mkdir cov-analysis-linux64: 54
tar xzf cov-analysis-linux64.tar.gz FLAG 1 -C cov-analysis-linux64: 50
export PATH=`pwd` CUSTOM_PATH_DIR: 65
echo "PRERELEASE=true" >> ENV_VAR: 8
cat CHANGELOG.md: 16
-v ENV_VAR: CUSTOM_PATH_DIR \: 11
${{ matrix.script }}: 15
cd gui: 7
gem update FLAG: 15
. CUSTOM_PATH_FILE python: 12
docker build \: 23
docker run FLAG \: 17
conda install flake8: 15
USES: xarray-contrib/ci-trigger: 17
python -m pip install FLAG -e .: 36
python -m pip install mypy: 15
USES: home-assistant/builder: 13
pip install FLAG tox: 13
yarn run test FLAG: 7
USES: earthly/actions-setup: 41
docker login registry-1.docker.io.mirror.corp.earthly.dev FLAG "${{ secrets.DOCKERHUB_MIRROR_USERNAME }}" FLAG "${{ secrets.DOCKERHUB_MIRROR_PASSWORD }}": 30
earthly config global.buildkit_additional_config "'[registry.\"docker.io\"]: 24
mirrors = [\"registry-1.docker.io.mirror.corp.earthly.dev\"]'": 34
earthly FLAG +for-linux: 20
EARTHLY_VERSION_FLAG_OVERRIDES="$(tr -d '\n' < .earthly_version_flag_overrides)": 51
echo "EARTHLY_VERSION_FLAG_OVERRIDES=ENV_VAR" >> "ENV_VAR": 51
. CUSTOM_PATH_DIR config global.local_registry_host 'tcp: CUSTOM_PATH_DIR: 21
. CUSTOM_PATH_DIR config global.conversion_parallelism 5: 18
docker logs earthly-buildkitd: 27
docker login FLAG "${{ secrets.DOCKERHUB_USERNAME }}" FLAG "${{ secrets.DOCKERHUB_TOKEN }}": 15
. CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 25
. CUSTOM_PATH_DIR -P . CUSTOM_PATH_DIR FLAG=$(realpath . CUSTOM_PATH_DIR: 12
env earthly=. CUSTOM_PATH_DIR scripts CUSTOM_PATH_FILE: 6
python -m pytest tests: 17
USES: joncloud/makensis-action: 50
mv ~ CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 16
cargo install just: 10
cd . CUSTOM_PATH_DIR && npm i: 9
npm run build:all: 33
cd app: 51
docker push wiseoldman CUSTOM_PATH_DIR: 10
make smoketest: 7
USES: github/issue-labeler: 75
USES: ./.github/actions/install-packages: 36
USES: ./.github/actions/cache-node-modules: 19
USES: ./.github/actions/functional-tests: 7
USES: convictional/trigger-workflow-and-wait: 38
pip install -r requirements_tests.txt: 6
python gui CUSTOM_PATH_FILE bundle: 6
curl URL -o "python.pkg": 6
sudo installer -pkg python.pkg -target /: 11
python3 -m venv env: 27
cmake -E tar xvf sw.zip: 11
chmod 755 sw: 11
nix-channel FLAG: 8
echo "TAG=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 26
FLAG linux CUSTOM_PATH_DIR \: 37
FLAG "type=registry" ./: 17
mkdir release: 51
sudo rm -rf build bin dist || true: 8
docker system prune -f -a FLAG || true: 58
cargo install cross FLAG URL: 10
USES: anantaramdas/ipfs-pinata-deploy-action: 8
ls -Al dist-sass CUSTOM_PATH_DIR: 6
python -m pip install requests: 33
brew install imagemagick: 8
bundle exec rake db:test:prepare: 7
npm install yarn: 60
yarn setup-test: 14
yarn test FLAG ACCESS_KEY=${{secrets.PV_VALID_ACCESS_KEY}}: 12
git add semcore CUSTOM_PATH_FILE: 6
chmod +x vulkan_sdk.sh: 9
chmod +x create_cmake.sh: 17
. CUSTOM_PATH_FILE "ENV_VAR": 88
chmod +x configure_cmake.sh: 18
cmake FLAG . FLAG ${{ matrix.config }} -j2: 20
gh workflow run deploy-docs.yml -r $(git rev-parse FLAG HEAD) -f build-refname=${{ github.ref_name }}: 16
gh workflow run deploy-docs.yml -r $(git rev-parse FLAG HEAD): 16
git checkout ${{ github.ref_name }}: 11
pip install -r ENV_VAR CUSTOM_PATH_FILE: 9
wget ENV_VAR CUSTOM_PATH_FILE: 19
git log -1 FLAG: 7
mvn -version: 38
mvn package: 46
USES: g4s8/pdd-action: 11
USES: jacobtomlinson/gha-find-replace: 85
USES: mikepenz/action-gh-release: 7
echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt: 14
echo "::set-output name=upload_url::$(cat release_url CUSTOM_PATH_FILE)": 9
USES: ./.github/actions/prepare_snap7: 6
USES: Homebrew/actions/setup-commit-signing: 18
gh pr create FLAG: 7
rm -rf ${{ github.workspace }} CUSTOM_PATH_DIR: 55
USES: shivammathur/cache-extensions: 78
npx playwright install FLAG chromium: 33
yarn build:prepare: 6
swift package resolve: 22
swift build FLAG: 17
npm install ganache FLAG: 6
pnpm publish FLAG public FLAG: 6
make package_featuretools: 10
sudo apt update && sudo apt install -y graphviz: 23
python -m pip install -r unpacked_sdist CUSTOM_PATH_FILE: 10
python -m pip install -e unpacked_sdist CUSTOM_PATH_DIR: 29
cd unpacked_sdist/: 7
. $env:USERPROFILE\Miniconda3\shell\condabin\conda-hook.ps1: 47
conda activate featuretools: 10
go install -mod=mod github.com CUSTOM_PATH_DIR: 24
USES: trmcnvn/firefox-addon: 7
USES: ./.github/workflow_templates/build_push_exporters: 11
git remote add upstream URL: 87
git fetch upstream: 64
git rebase upstream CUSTOM_PATH_DIR: 7
cd ui: 32
true: 45
node index.js: 19
flake8 . FLAG FLAG FLAG: 34
yarn workspace website build FLAG en: 6
npm ci : 8
export GOPATH="ENV_VAR CUSTOM_PATH_DIR: 10
pip install -e ".[encoders-audio-tfhub]": 6
USES: oracle-actions/setup-java: 45
sudo apt-get install libsnappy-dev libc6-dev libc6: 23
dotnet restore . CUSTOM_PATH_FILE &&: 63
dotnet format FLAG FLAG FLAG warn . CUSTOM_PATH_FILE || (echo "Run 'dotnet format' to fix issues" && exit 1) &&: 62
dotnet format FLAG FLAG FLAG warn . CUSTOM_PATH_FILE || (echo "Run 'dotnet format' to fix issues" && exit 1): 52
dotnet build FLAG . CUSTOM_PATH_FILE &&: 61
dotnet build FLAG . CUSTOM_PATH_FILE: 57
dotnet test . CUSTOM_PATH_FILE FLAG FLAG FLAG "XPlat Code Coverage" FLAG .coverage -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover: 48
mkdir output output CUSTOM_PATH_DIR output CUSTOM_PATH_DIR: 10
mingw32-make.exe -j 2: 7
mkdir portable: 9
cp -R SQLiteStudio portable/: 7
sudo sysctl net CUSTOM_PATH_DIR: 24
go env -w GOFLAGS=-mod=mod: 9
make e2e-test: 48
bundle exec brakeman: 7
USES: juliangruber/approve-pull-request-action: 23
npm ci FLAG=dev: 18
git add src CUSTOM_PATH_FILE: 6
pip install -r requirements-ci.txt: 27
USES: mobilecoinofficial/gha-k8s-toolbox: 30
mvn -N wrapper:wrapper -Dmaven=3.6.3 FLAG: 8
cp -r packages CUSTOM_PATH_FILE packages CUSTOM_PATH_FILE: 22
cp -r packages CUSTOM_PATH_DIR packages CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 22
yarn install-deps: 22
tar -cf build.tar FLAG=packages CUSTOM_PATH_FILE CUSTOM_PATH_DIR .: 22
cp build.tar packages CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 22
rm -rf packages CUSTOM_PATH_FILE: 32
aws s3 sync packages CUSTOM_PATH_FILE CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR FLAG: 22
cargo test FLAG . CUSTOM_PATH_FILE: 6
USES: cilium/little-vm-helper: 34
rake install: 21
python3 -m pip install FLAG build && python3 -m build: 9
VERSION=ENV_VAR CUSTOM_PATH_DIR: 18
make push-dev: 7
pnpm nx-cloud stop-all-agents: 6
. CUSTOM_PATH_DIR FLAG=ENV_VAR CUSTOM_PATH_DIR: 23
make -j"$(nproc 2> CUSTOM_PATH_DIR || sysctl -n hw.ncpu)": 9
make install_sw: 8
make -j$(nproc) install: 19
cmake FLAG build FLAG check: 8
. CUSTOM_PATH_FILE "rebase-atop-of-the-latest-target-branch": 41
bash tests CUSTOM_PATH_FILE install-kata kata-artifacts: 13
bash tests CUSTOM_PATH_FILE run: 14
chmod +x . CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE       : 8
time=$(date +%Y%m%d%H%M): 43
echo "##[set-output name=release_name;]$release_name": 25
echo "##[set-output name=release_tag;]$release_tag"        : 25
cd tmp CUSTOM_PATH_DIR: 9
make fmt: 36
git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id: 24
git lfs pull: 102
poetry run python -c "import sys; print(sys.version)": 7
cd docs && poetry run make html: 7
validate_format_win.bat: 9
echo "NVMRC=$(cat .nvmrc)" >> ENV_VAR: 19
npm i FLAG FLAG: 35
yarn set version 3.1.1: 7
yarn run docs:build: 20
USES: matter-labs/action-hosting-deploy: 8
sudo gem install bundler: 18
bundle config set path 'vendor CUSTOM_PATH_DIR: 15
carthage bootstrap FLAG: 13
USES: ruby/setup-ruby-pkgs: 28
bundle exec rake compile -- FLAG: 8
bundle exec rake test:valgrind: 10
sudo apt-get -qq install git-lfs tree sox: 7
python3 -m pip install torch==${{ matrix.torch }} torchaudio==${{ matrix.torchaudio }} numpy -f URL: 12
python3 -m pip install k2==1.23.3.dev20230127+cpu.torch${{ matrix.torch }} -f URL: 10
python3 -m torch.utils.collect_env: 21
export KALDIFEAT_INSTALL_PREFIX=ENV_VAR CUSTOM_PATH_DIR: 12
ls -lh ENV_VAR: 16
python3 setup.py install: 32
apt-get update -y: 66
apt-get -y install git: 9
source .. CUSTOM_PATH_DIR: 22
echo "PATH=ENV_VAR" >> ENV_VAR: 15
ls -alR: 19
docker-compose pull: 20
docker-compose up FLAG: 14
echo "Skipping ${{ github.workflow }} CUSTOM_PATH_DIR github.job }}": 6
xcodebuild -resolvePackageDependencies -workspace ios CUSTOM_PATH_FILE -scheme Runner -configuration Release: 6
pod update: 9
mkdir -p Payload: 8
cd macos: 7
ls -R CUSTOM_PATH_DIR: 9
echo "One or more matrix job tests failed or were cancelled. You may need to re-run them." && exit 1: 8
yarn bench: 9
cargo install cargo-cache FLAG FLAG ci-autoclean: 36
cargo-cache: 70
yarn types: 14
USES: redhat-cop/github-actions/get-image-version: 24
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> ENV_VAR CUSTOM_PATH_DIR 2> CUSTOM_PATH_DIR: 8
npx lerna publish from-git FLAG: 8
cd extras CUSTOM_PATH_DIR: 6
echo "TAG_VERSION=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 11
USES: arduino/setup-arduino-cli: 10
export PATH=ENV_VAR:ENV_VAR: 46
arduino-cli config init: 6
make tools-tidy: 27
go install gotest.tools CUSTOM_PATH_DIR: 72
python -m pip install FLAG FLAG pipenv: 13
IS_FORK="$(jq '.head.repo.fork' " CUSTOM_PATH_FILE")": 7
echo "${{ secrets.DEPLOY_KEY }}" > ~ CUSTOM_PATH_DIR: 9
yarn package:ci: 6
cp docs CUSTOM_PATH_FILE .: 6
USES: itsmeow/curseforge-upload: 13
python -m pip install -e .[test]: 39
python -m flake8: 14
go build -race . CUSTOM_PATH_DIR: 8
split -d -n l CUSTOM_PATH_DIR pkgs.txt pkgs.txt.part.: 9
tar cvzf . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 9
rm -rf ENV_VAR CUSTOM_PATH_DIR || true: 6
cargo xclippy -D warnings: 6
cargo install cargo-msrv: 11
cargo msrv verify: 18
sed -i~ 's CUSTOM_PATH_DIR true, CUSTOM_PATH_DIR tsconfig.json: 9
echo "distributionUrl=URL > .mvn CUSTOM_PATH_FILE: 7
echo "wrapperUrl=URL >> .mvn CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_DIR FLAG FLAG install -Prun-its: 7
curl URL -o flakybot -s -L: 32
. CUSTOM_PATH_DIR FLAG GoogleCloudPlatform CUSTOM_PATH_DIR FLAG_hash ${{github.sha}} FLAG_url URL: 18
pip install ".[tests]": 13
USES: MishaKav/pytest-coverage-comment: 13
echo "Coverage Report - ${{ steps.coverage-comment.outputs.coverage }}": 6
echo "Coverage Color - ${{ steps.coverage-comment.outputs.color }}": 6
python -m pip install FLAG pip wheel setuptools: 79
USES: ./.github/actions/setup-node-pnpm-install: 14
USES: mobile-dev-inc/action-maestro-cloud: 14
conda install cmake -c main: 14
make uninstall: 12
make test VERBOSE=1: 13
tsh -i ${{ steps.auth.outputs.identity-file }} FLAG 60 ssh ubuntu@${{ matrix.shard_manifest.hostname }} "source ~ CUSTOM_PATH_DIR && cd CUSTOM_PATH_DIR matrix.shard_manifest.start_epoch }} CUSTOM_PATH_DIR && wget -i CUSTOM_PATH_DIR: 6
git checkout latest: 9
oca_install_addons: 10
manifestoo -d . check-licenses: 10
manifestoo -d . check-dev-status FLAG=Beta: 10
oca_init_test_database: 10
oca_run_tests: 10
oca_export_and_push_pot URL secrets.GIT_PUSH_TOKEN }} CUSTOM_PATH_DIR github.repository }}: 9
python -m pip install isort: 16
USES: ./build-scripts/s3cloudfront-hosting/actions/sync: 7
pip install GitPython: 16
USES: NVIDIA-Merlin/.github/actions/branch-name: 13
merlin_branch="${{ steps.get-branch-name.outputs.branch }}": 10
pip install "pandas>=1.2.0,<1.4.0dev0": 6
pip install "NVTabular+URL: 7
pip install "merlin-core+URL: 7
git clone URL package CUSTOM_PATH_DIR: 6
cp -f package CUSTOM_PATH_DIR package CUSTOM_PATH_DIR: 6
vagrant up: 15
IMAGE_ID=ghcr.io CUSTOM_PATH_DIR github.repository }} CUSTOM_PATH_DIR: 18
pip install FLAG wheel: 15
Tools CUSTOM_PATH_FILE: 38
USES: norio-nomura/action-swiftlint: 48
USES: the-guild-org/changesets-snapshot-action: 9
mkdir -p . CUSTOM_PATH_FILE: 6
git config FLAG user.name 'GitHub Action': 11
git config FLAG user.email 'action': 11
curl -fsSL -o get_helm.sh URL: 21
chmod 700 get_helm.sh: 20
az extension add FLAG aks-preview: 6
az extension update FLAG aks-preview: 6
sudo hostname localhost: 9
find build -name \*.trs | xargs grep -lw FAIL | sed -e 's CUSTOM_PATH_DIR | xargs cat: 6
composer require "orchestra CUSTOM_PATH_DIR "phpunit CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG: 9
php vendor CUSTOM_PATH_DIR: 28
rm -rf node_modules: 58
yarn set version berry: 14
yarn config set npmRegistryServer URL: 6
git lfs checkout: 55
LATEST_TAG=$(git describe FLAG FLAG=0 FLAG='cron-*'): 12
USES: jwgmeligmeyling/pmd-github-action: 9
USES: jwgmeligmeyling/checkstyle-github-action: 6
sudo -E apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3.8 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev: 22
echo "Assigning issue ${{ github.event.issue.number }} to ${{ github.event.comment.user.login }}": 9
curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d '{"assignees": ["${{ github.event.comment.user.login }}"]}' URL github.repository }} CUSTOM_PATH_DIR github.event.issue.number }} CUSTOM_PATH_DIR: 9
blossom-ci: 33
USES: NVIDIA/blossom-action: 11
make distcheck: 95
echo "BRANCH_NAME=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 12
pip install -q -r .actions CUSTOM_PATH_FILE: 13
python .actions CUSTOM_PATH_FILE replace_oldest_ver: 14
USES: Saionaro/extract-package-version: 21
echo ${{ steps.extract_version.outputs.version }}: 8
USES: ./.github/actions/provision: 24
sh build-ext.sh: 7
auditwheel repair wheel_output CUSTOM_PATH_DIR -w audit_output/: 7
USES: DeterminateSystems/flakehub-push: 11
curl FLAG FLAG URL +%s): 7
saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github CUSTOM_PATH_FILE", version = 2): 12
remotes::install_deps(dependencies = TRUE): 15
remotes::install_cran("rcmdcheck"): 8
options(width = 100): 11
pkgs <- installed.packages()[, "Package"]: 11
sessioninfo::session_info(pkgs, include_base = TRUE): 11
find check -name 'testthat.Rout*' -exec cat '{}' \; || true: 9
pip install -r doc CUSTOM_PATH_FILE: 17
sudo apt-get update -q || :: 10
git config FLAG advice.detachedHead 0: 6
git config FLAG init.defaultBranch garbage: 6
USES: ./.github/actions/prepare: 106
mkdir pkg: 8
mkdir pkg CUSTOM_PATH_DIR: 7
cp . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 78
USES: suisei-cn/actions-download-file: 119
cp . CUSTOM_PATH_DIR . CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
chmod u+x . CUSTOM_PATH_FILE: 22
cp . CUSTOM_PATH_FILE ./: 10
cp x64 CUSTOM_PATH_FILE CadZinho/: 8
USES: limitusus/json-syntax-check: 10
composer install FLAG FLAG FLAG FLAG FLAG FLAG: 6
php demos CUSTOM_PATH_FILE: 14
 CUSTOM_PATH_DIR \: 7
echo "Installing the dependencies...": 6
echo "Checking linter formatting...": 6
make lint-check: 12
echo "Running the tests...": 6
tsc FLAG: 14
ctest FLAG .: 18
choco install ccache: 11
which clang++: 6
USES: ./.github/actions/setup-project: 71
rm -rf dist: 62
node common CUSTOM_PATH_FILE build FLAG bemuse: 7
npm run env:start: 20
sudo update-alternatives FLAG gcc CUSTOM_PATH_DIR: 10
USES: ./.github/actions/module-rspec: 24
count=$(ls spec CUSTOM_PATH_FILE | wc -l | tr -d ' '): 8
half=$(expr $count / 2): 8
bundle exec rspec $list_of_files: 8
cp config CUSTOM_PATH_FILE .config && make include CUSTOM_PATH_FILE: 16
pip install pytest coverage: 7
pip install -r requirements-test.txt: 102
python setup.py build_grpc: 6
make dev CUSTOM_PATH_DIR: 10
vendor CUSTOM_PATH_DIR analyse FLAG=github: 7
USES: ./.github/actions/login_azure: 9
. CUSTOM_PATH_DIR publishToSonatype closeAndReleaseSonatypeStagingRepository: 26
USES: getsentry/paths-filter: 51
yarn install FLAG FLAG FLAG: 83
cd lunatrace CUSTOM_PATH_DIR && yarn run compile: 6
chmod go-w ENV_VAR: 17
sudo chmod -R go-w CUSTOM_PATH_DIR: 26
echo "sha8=$(echo ENV_VAR | cut -c1-8)" >> ENV_VAR: 9
USES: krdlab/setup-haxe: 23
echo 'org.gradle.parallel=true' >> gradle.properties: 12
echo 'org.gradle.vfs.watch=true' >> gradle.properties: 10
echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties: 14
echo 'android.native.buildOutput=verbose' >> gradle.properties: 6
USES: ben-z/gh-action-mutex: 10
rm -rf ${{ github.workspace }}: 36
goveralls -coverprofile=coverage.out -service=github: 6
dart pub run test: 7
docker rm -f tmp: 6
USES: ./.github/actions/setup-woocommerce-monorepo: 41
mvn -f pom.xml FLAG FLAG verify: 9
yarn add  CUSTOM_PATH_DIR  CUSTOM_PATH_DIR  CUSTOM_PATH_DIR fs: 20
make build-all: 28
sudo apt-get install apt-transport-https FLAG: 10
git add . CUSTOM_PATH_DIR: 25
USES: richardsimko/update-tag: 109
echo "y" | python2 scripts CUSTOM_PATH_FILE FLAG && PYTHON=python2 sh scripts CUSTOM_PATH_FILE && make clean && make && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand;: 13
echo "y" | python3 scripts CUSTOM_PATH_FILE FLAG && PYTHON=python3 sh scripts CUSTOM_PATH_FILE && make clean && make && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand;: 13
echo "y" | python2 scripts CUSTOM_PATH_FILE FLAG && make clean;: 14
make && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make && make clean && cd -;: 14
cd src CUSTOM_PATH_DIR && make clean && make && cd - && make clean;: 15
make 16 && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make 16 && make clean && cd -;: 14
cd src CUSTOM_PATH_DIR && make clean && make 16 && cd - && make clean;: 15
make 32 && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make 32 && make clean && cd -;: 14
cd src CUSTOM_PATH_DIR && make clean && make 32 && cd - && make clean;: 15
make 64 && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make 64 && make clean && cd -;: 14
cd src CUSTOM_PATH_DIR && make clean && make 64 && cd - && make clean;: 15
make debug && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make debug && make clean && cd -;: 13
cd src CUSTOM_PATH_DIR && make clean && make debug && cd - && make clean;: 15
make debug16 && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make debug16 && make clean && cd -;: 13
cd src CUSTOM_PATH_DIR && make clean && make debug16 && cd - && make clean;: 15
make debug32 && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make debug32 && make clean && cd -;: 13
cd src CUSTOM_PATH_DIR && make clean && make debug32 && cd - && make clean;: 15
make debug64 && . CUSTOM_PATH_DIR vectors && . CUSTOM_PATH_DIR rand && cd src CUSTOM_PATH_DIR && make clean && make debug64 && make clean && cd -;: 13
cd src CUSTOM_PATH_DIR && make clean && make debug64 && cd - && make clean;: 15
brew install bison: 11
choco install winflexbison3: 16
cmake FLAG . : 25
ctest . FLAG: 24
libtoolize FLAG FLAG FLAG: 6
autoheader: 7
automake FLAG FLAG FLAG: 6
export CFLAGS="-O2 -Wall -W -Wunused-const-variable=0 -pipe -g": 8
cd alsa-utils: 10
USES: snyk/actions/iac: 6
poetry run mkdocs build: 10
curl -L -o . CUSTOM_PATH_FILE URL: 19
USES: ./.github/actions/run: 9
. CUSTOM_PATH_DIR -c tests CUSTOM_PATH_FILE: 19
touch packages CUSTOM_PATH_FILE: 14
cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg FLAG FLAG: 24
gpg FLAG FLAG LONG: 36
echo "VERSION=ENV_VAR": 15
python3 -m pip install FLAG build: 23
python3 -m build: 71
USES: docker://multiarch/ubuntu-core:arm64-bionic: 9
. CUSTOM_PATH_DIR build FLAG: 92
USES: ./.github/actions/dev-tool-java: 22
cat <<! >> ENV_VAR: 7
!: 8
npm publish FLAG FLAG public: 22
echo "Version changed: ${{ steps.publish.outputs.old-version }} => ${{ steps.publish.outputs.version }}": 13
sudo apt install libsndfile1-dev libsndfile1: 6
python3 -m pip install wheel twine typing_extensions: 6
cat . CUSTOM_PATH_FILE: 169
sudo apt-get install -y build-essential: 41
Invoke-WebRequest -Uri "URL -OutFile "jom_1_1_3.zip": 8
New-Item -Name "jom" -ItemType "directory": 8
Expand-Archive -Path jom_1_1_3.zip -DestinationPath .\jom: 8
echo "::add-path::$(Get-Location)\jom": 7
echo "::set-output name=date::$(type ML_VERSION)": 6
USES: r0adkll/upload-google-play: 57
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv cupy: 6
echo "PACKAGE_VERSION=$(cat lerna.json | jq -r .version)" >> ENV_VAR: 7
USES: JagandeepBrar/lunasea/.github/actions/prepare_for_deployment: 6
echo CARGO_BUILD_TARGET=${{ matrix.target }} >> ENV_VAR: 20
sudo apt-get install -y ${{ matrix.gcc_package }} ninja-build: 16
echo CARGO_TARGET_${upcase}_LINKER=${{ matrix.gcc }} >> ENV_VAR: 17
sudo apt-get install -y ${{ matrix.libc_package }}: 15
USES: turtlesec-no/get-ninja: 9
cmake FLAG . CUSTOM_PATH_DIR: 21
USES: microsoft/RichCodeNavIndexer: 7
USES: JagandeepBrar/lunasea/.github/actions/prepare_for_build: 16
flutter build linux: 37
bundle exec pod install FLAG: 35
dotnet build UndertaleModTool FLAG: 11
dotnet build UndertaleModToolUpdater FLAG: 10
Copy-Item "README.md" -Destination ". CUSTOM_PATH_DIR: 15
Copy-Item "SCRIPTS.md" -Destination ". CUSTOM_PATH_DIR: 15
USES: ./.github/actions/restore-cache: 48
echo "version=$(node -p "require(' CUSTOM_PATH_FILE")" >> ENV_VAR: 8
DIR=$(mktemp -d): 9
USES: aurelien-baudet/workflow-dispatch: 18
mix compile FLAG: 90
USES: c-hive/gha-npm-cache: 12
rm .dockerignore: 10
yarn publish: 54
CERTIFICATE_PATH=ENV_VAR CUSTOM_PATH_FILE12: 60
KEYCHAIN_PATH=ENV_VAR CUSTOM_PATH_FILE-db: 65
echo -n "ENV_VAR64" | base64 FLAG FLAG ENV_VAR: 37
security create-keychain -p "ENV_VAR" ENV_VAR: 51
security set-keychain-settings -lut 21600 ENV_VAR: 62
security unlock-keychain -p "ENV_VAR" ENV_VAR: 61
security import ENV_VAR -P "ENV_VAR12_PASSWORD" -A -t cert -f pkcs12 -k ENV_VAR: 45
security list-keychain -d user -s ENV_VAR: 68
security find-identity -v: 12
USES: ajinabraham/njsscan-action: 15
mix hex.publish FLAG: 15
sudo apt-mark hold grub-efi-amd64-signed: 15
sudo apt install cppcheck: 6
make stop: 11
flutter build windows FLAG: 26
flutter build linux FLAG: 25
wget -O - URL 2> CUSTOM_PATH_DIR | gpg FLAG - | sudo tee CUSTOM_PATH_FILE > CUSTOM_PATH_DIR: 7
pip install pytest wheel numpy: 6
sudo add-apt-repository ppa:ubuntugis CUSTOM_PATH_DIR: 7
sudo apt-get install gdal-bin python3-gdal: 6
sudo apt-get install libgdal-dev: 8
pip install GDAL==$(gdal-config FLAG) FLAG=build_ext FLAG="-I CUSTOM_PATH_DIR: 6
sudo apt-get install libspatialindex-dev: 7
pip install "git+URL: 9
pip install -e .[testing]: 16
USES: roots/issue-closer: 20
USES: Codesee-io/codesee-detect-languages-action: 16
USES: Codesee-io/codesee-map-action: 46
USES: dawidd6/action-ansible-playbook: 35
USES: sqren/backport-github-action: 14
sudo update-alternatives FLAG CUSTOM_PATH_DIR gcc CUSTOM_PATH_DIR 100 FLAG CUSTOM_PATH_DIR g++ CUSTOM_PATH_DIR: 16
make bin CUSTOM_PATH_DIR: 37
USES: prewk/s3-cp-action: 19
USES: bilelmoussaoui/flatpak-github-actions/flatpak-builder: 47
cmake .. -DCMAKE_BUILD_TYPE=ENV_VAR: 6
make -j8: 74
USES: actions-rs-plus/clippy-check: 6
python -m twine check dist CUSTOM_PATH_DIR: 52
chmod u+x build CUSTOM_PATH_FILE: 14
bash build CUSTOM_PATH_FILE: 26
sudo apt update -y: 89
curl URL | sudo bash: 18
cat << EOF > ~ CUSTOM_PATH_FILE: 9
echo "##[set-env name=LATEST;]$(cat docker CUSTOM_PATH_DIR: 18
echo "ENV_VAR" | docker login FLAG crazymax FLAG: 20
docker image rm crazymax CUSTOM_PATH_DIR: 17
docker push crazymax CUSTOM_PATH_DIR: 21
composer update --${{ matrix.stability }} FLAG FLAG: 56
pip install pip -U: 13
kubectl create deploy httpbin FLAG=kennethreitz CUSTOM_PATH_DIR FLAG=80: 7
kubectl expose deploy httpbin FLAG=80: 7
iter8 k launch FLAG FLAG charts CUSTOM_PATH_DIR \: 6
FLAG ready.timeout=60s \: 17
FLAG http.url=URL \: 7
FLAG assess.SLOs.upper.http CUSTOM_PATH_DIR \: 8
FLAG runner=job: 14
iter8 k report: 14
iter8 k log: 16
iter8 k delete: 16
kubectl create deployment routeguide FLAG=golang FLAG=50051 \: 7
-- bash -c "git clone -b v1.52.0 FLAG 1 URL cd grpc-go CUSTOM_PATH_DIR sed -i "''" "'"s CUSTOM_PATH_DIR server CUSTOM_PATH_FILE; go run server CUSTOM_PATH_FILE": 7
kubectl expose deployment routeguide FLAG=50051: 7
kubectl wait FLAG=condition=available FLAG=60s deployment CUSTOM_PATH_DIR: 7
curl -sO URL: 52
kubectl apply -f grpcurl-routeguide.yaml: 7
sleep 180: 21
kubectl logs deploy CUSTOM_PATH_DIR: 7
FLAG ready.deploy=routeguide \: 7
FLAG ready.service=routeguide \: 7
FLAG grpc.host=routeguide.default:50051 \: 8
FLAG grpc.protoURL=URL \: 8
FLAG assess.SLOs.upper.grpc CUSTOM_PATH_DIR \: 11
kubectl create deploy hello FLAG=docker.io CUSTOM_PATH_DIR FLAG=50051: 8
kubectl expose deploy hello FLAG=50051: 8
FLAG grpc.host="hello.default:50051" \: 8
FLAG grpc.call="helloworld.Greeter.SayHello" \: 8
FLAG grpc.protoURL="URL \: 7
sudo . CUSTOM_PATH_FILE 17: 12
ctest FLAG -C ${{env.BUILD_TYPE}}: 9
cd feeds CUSTOM_PATH_DIR: 6
terraform fmt -check: 14
make docker-pull: 21
make api-codegen: 15
cd .github: 18
rm -f images_tags_werf.json: 6
USES: werf/actions/build: 8
echo "Tests image name: 'ENV_VAR'" | tr '[:lower:]' '[:upper:]': 6
echo "⚓️ 📥 [$(date -u)] Pull 'tests' image...": 6
docker pull ENV_VAR: 58
echo "⚓️ 🏎 [$(date -u)] Run tests...": 6
export WERF_DIR=ENV_VAR CUSTOM_PATH_DIR: 6
type werf && source $(werf ci-env github FLAG FLAG): 6
mkdir -p ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 10
rsync -a FLAG='ru' FLAG='en' FLAG='compare' ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 12
rsync -a ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 24
composer static:analyze: 6
USES: jonelantha/gatsby-s3-action: 8
sudo apt-get install -y gcc-aarch64-linux-gnu: 27
rm -rf gh-pages CUSTOM_PATH_DIR: 9
go generate -v -x: 12
. CUSTOM_PATH_FILE lint: 10
pip install -r test-requirements.txt: 62
pip install coveralls: 96
python -m pip install FLAG tox: 62
cd test CUSTOM_PATH_DIR && make: 10
mvn FLAG FLAG clean install -Pqulice: 7
make env.conda: 10
source ~ CUSTOM_PATH_FILE: 38
conda activate "${{ github.workspace }}" CUSTOM_PATH_DIR: 10
module load clinica.all: 8
poetry run pytest FLAG \: 10
FLAG_directory= CUSTOM_PATH_DIR \: 10
FLAG_data_directory= CUSTOM_PATH_DIR \: 10
FLAG=. CUSTOM_PATH_FILE \: 17
pnpm exec playwright install FLAG: 9
pnpm test:ci: 23
USES: tvdias/github-tagger: 20
sleep 15s: 11
mvn clean test: 12
USES: srvaroa/labeler: 17
lscpu: 66
cp .. CUSTOM_PATH_DIR .: 26
USES: tim-actions/get-pr-commits: 31
USES: tim-actions/dco: 24
npm uninstall -g yarn: 6
USES: foundry-rs/foundry-toolchain: 55
forge FLAG: 7
cd pkg: 20
USES: garygrossgarten/github-action-scp: 37
cd target CUSTOM_PATH_DIR: 60
touch .nojekyll: 39
git commit -m 'deploy': 10
pip install -r requirements.txt -r requirements-test.txt: 6
USES: AbsaOSS/k3d-action: 36
kubectl apply -f . CUSTOM_PATH_FILE -n ${{ env.UMH }}: 6
kubectl wait FLAG=condition=complete job CUSTOM_PATH_DIR -n ${{ env.UMH }} FLAG=2m: 6
kubectl logs job CUSTOM_PATH_DIR -n ${{ env.UMH }} || true: 6
. CUSTOM_PATH_DIR buildPlugin: 38
USES: ChrisCarini/intellij-platform-plugin-verifier-action: 13
echo "The verifier log file [${{steps.verify.outputs.verification-output-log-filename}}] contents : " ;: 10
cat ${{steps.verify.outputs.verification-output-log-filename}}: 11
chmod +x CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 10
yarn run test:coverage: 11
USES: hashicorp/actions-go-build: 14
git config FLAG FLAG safe.directory $(pwd): 70
 CUSTOM_PATH_FILE: 25
USES: thehanimo/pr-title-checker: 28
USES: protocol/multiple-go-modules: 24
dotnet build unturned CUSTOM_PATH_FILE FLAG Release FLAG: 7
USES: bruceadams/get-release: 95
sudo apt-get install zip: 9
npm install && npm run build:prod: 7
make vet: 62
USES: stripe/openapi/actions/stripe-mock: 6
USES: stripe/openapi/actions/notify-release: 7
yarn FLAG . CUSTOM_PATH_DIR install: 9
USES: thedoctor0/zip-release: 53
USES: ArminJo/arduino-test-compile: 24
scripts CUSTOM_PATH_FILE "ENV_VAR": 13
echo ::set-output name=VERSION::ENV_VAR#refs CUSTOM_PATH_DIR: 45
USES: cardinalby/export-env-action: 49
pip install -U pip wheel setuptools: 7
wget URL -O CUSTOM_PATH_DIR: 12
npm install && npm run build: 39
#mkdir artifacts CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
mv artifacts CUSTOM_PATH_DIR artifacts CUSTOM_PATH_DIR: 19
git config FLAG user.email "github": 18
brew install docker: 15
colima start: 16
ISO=$(find . -name "elemental-*.iso" -print): 6
USES: ./.github/actions/setup-sentry: 39
make test-python-ci: 6
pip install -U build: 13
mkdir qsv-${{ needs.analyze-tags.outputs.previous-tag }}: 8
rm target CUSTOM_PATH_DIR matrix.job.target }} CUSTOM_PATH_FILE : 9
USES: Vankka/pr-target-branch-action: 8
git fetch FLAG FLAG FLAG=no: 12
git reset: 13
python -m pip install scons: 19
cp CUSTOM_PATH_FILE supermariowar/: 7
git clone URL FLAG=1: 16
curl -L URL | tar xzf -: 22
USES: diddlesnaps/snapcraft-multiarch-action: 11
USES: diddlesnaps/snapcraft-review-tools-action: 6
poetry env use "${{ matrix.python-version }}": 7
poetry run coverage lcov: 6
echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~ CUSTOM_PATH_DIR: 15
make -j`nproc`: 31
TSAN_OPTIONS="suppressions=.. CUSTOM_PATH_FILE" . CUSTOM_PATH_DIR: 8
USES: chaitanyapotti/cloudfront-update-distribution: 6
USES: ./.github/actions/setup-python/: 9
sudo python3 -m pip install FLAG pip: 16
python setup.py test: 52
USES: JRubics/poetry-publish: 31
vendor CUSTOM_PATH_DIR analyse FLAG: 17
touch src CUSTOM_PATH_FILE: 6
yarn build:type FLAG=".turbo" FLAG=. CUSTOM_PATH_DIR: 7
yarn build FLAG=".turbo" FLAG=. CUSTOM_PATH_DIR: 7
yarn lint FLAG=".turbo" FLAG=. CUSTOM_PATH_DIR: 7
yarn test:test-type FLAG=".turbo" FLAG=. CUSTOM_PATH_DIR: 7
USES: ./.github/actions/rustup: 10
forge test -vvv: 8
cd site: 23
npm install postcss-cli: 6
npm install autoprefixer: 6
npm audit fix: 9
hugo FLAG: 18
git config FLAG user.name ${{ secrets.GIT_USERNAME }}: 10
rustup override set stable: 30
sudo apt update && sudo apt install libudev-dev: 12
yarn install FLAG FLAG 300000: 23
echo -n "ENV_VAR64" | base64 FLAG -o ENV_VAR: 35
sudo add-apt-repository ppa:ubuntu-toolchain-r CUSTOM_PATH_DIR: 43
Invoke-WebRequest URL -OutFile dotnet-install.ps1: 7
URL >> ENV_VAR: 10
cd bsp CUSTOM_PATH_DIR: 21
xmake -y: 6
mv build CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 9
sudo pip3 install paho_mqtt gitpython requests: 12
chown -R ENV_VAR:ENV_VAR .: 6
USES: getsentry/action-github-app-token: 46
pre-commit install FLAG: 19
pre-commit run FLAG FLAG: 43
pip install -r .. CUSTOM_PATH_FILE: 9
sudo apt-get install llvm: 11
USES: AppImageCrafters/build-appimage: 7
. CUSTOM_PATH_DIR &: 53
python examples CUSTOM_PATH_FILE: 50
sudo sh -c 'echo "deb URL $(lsb_release -cs)-pgdg main" > CUSTOM_PATH_FILE': 13
wget FLAG -O - URL | sudo apt-key add -: 21
find . CUSTOM_PATH_DIR -maxdepth 1 -type f -delete \: 6
&& rm -fr . CUSTOM_PATH_FILE} CUSTOM_PATH_DIR \: 6
&& rm -f  . CUSTOM_PATH_FILE: 6
corepack prepare yarn FLAG: 27
USES: wow-actions/auto-comment: 24
docker build . FLAG Dockerfile FLAG image: 11
docker tag image ENV_VAR:ENV_VAR: 15
echo "branch_name=$branch_name" >> ENV_VAR: 16
git config FLAG user.email "dev": 13
URL github.repository }} CUSTOM_PATH_DIR \: 6
USES: ./.github/actions/install-iceoryx-deps-and-clang: 7
USES: Ana06/get-changed-files: 39
sudo installer -pkg . CUSTOM_PATH_FILE -target /: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv build-essential: 6
USES: nearform/github-action-check-linked-issues: 9
bash tests CUSTOM_PATH_FILE run-tests: 13
conda create -q -n conda-env python=${{ matrix.python-version }}: 6
git config FLAG user.email "someone": 7
git config FLAG user.name "Someone": 11
conda activate conda-env: 37
python -c 'import ploomber': 16
python -c 'import ploomber.tasks': 16
python -c 'import ploomber.products': 16
python -c 'import ploomber.clients': 16
echo "install.packages('IRkernel', repos='URL IRkernel::installspec()" | Rscript -: 8
pip install FLAG tests CUSTOM_PATH_DIR: 19
export PY_IGNORE_IMPORTMISMATCH=1: 7
pytest src CUSTOM_PATH_DIR FLAG FLAG src CUSTOM_PATH_DIR: 7
unset PY_IGNORE_IMPORTMISMATCH: 7
echo "::add-path::ENV_VAR CUSTOM_PATH_DIR: 23
USES: w9jds/firebase-action: 38
USES: allenevans/set-env: 24
echo "::add-mask::ENV_VAR": 33
echo "VERSION=$version" >> ENV_VAR: 45
mkdir "${{ github.workspace }} CUSTOM_PATH_DIR: 6
git config FLAG user.email "github-action": 15
gem update FLAG FLAG FLAG: 6
npm run test-coverage: 22
npm install -g pkg: 8
curl -Ls URL | bash -s - app setup: 6
git config user.name 'github-actions[bot]': 61
git config user.email 'github-actions[bot]': 51
git fetch origin ${{ github.base_ref }} FLAG 1 && \: 7
git diff remotes CUSTOM_PATH_DIR github.base_ref }} FLAG | grep CHANGELOG.md: 6
USES: tsickert/discord-webhook: 21
docker login -u publisher -p ${{ secrets.GITHUB_TOKEN }} ghcr.io: 6
cat <<EOD > ~ CUSTOM_PATH_DIR: 6
machine review.gerrithub.io: 6
login cueckoo: 6
password ${{ secrets.CUECKOO_GERRITHUB_PASSWORD }}: 6
EOD: 15
mkdir tmpgit: 6
cd tmpgit: 6
git config user.name cueckoo: 7
git config user.email cueckoo: 7
git config http.URL "AUTHORIZATION: basic $(echo -n cueckoo:${{ secrets.CUECKOO_GITHUB_PAT }} | base64)": 7
mvn FLAG package: 19
npm run build-prod: 23
scripts CUSTOM_PATH_FILE scripts CUSTOM_PATH_FILE \: 14
echo "DOCKER_TAG=latest" >> ENV_VAR: 8
python setup.py egg_info: 7
echo "TODO": 6
npx projen upgrade-dependencies: 6
npx projen build && echo "::set-output name=conclusion::success" || echo "::set-output name=conclusion::failure": 18
cp -r builder dist: 29
cd dist CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 24
cd dist CUSTOM_PATH_FILE: 24
sudo apt-get install valgrind: 13
cd .github CUSTOM_PATH_DIR: 142
echo "Name:      ${{ steps.buildx.outputs.name }}": 55
echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}": 55
echo "Status:    ${{ steps.buildx.outputs.status }}": 55
echo "Flags:     ${{ steps.buildx.outputs.flags }}": 55
echo "Platforms: ${{ steps.buildx.outputs.platforms }}": 55
pytest tests CUSTOM_PATH_FILE: 141
python -m pip install -r dev-requirements.txt: 20
python -m pytest FLAG: 10
curl -sSL "URL | python: 6
poetry run pip install -U pip: 12
poetry run flake8 .: 14
poetry run pip check: 10
poetry run safety check FLAG: 6
curl -L URL | sudo apt-key add -: 6
echo "name=ENV_VAR" >> ENV_VAR: 17
USES: ./../action/.github/actions/check-codescanning-config: 12
gcloud auth configure-docker FLAG: 34
docker tag ENV_VAR ENV_VAR: 18
docker push ENV_VAR: 71
USES: github/accessibility-alt-text-bot: 6
nproc: 6
cppcheck FLAG: 9
python3 -m pip install dist CUSTOM_PATH_FILE: 15
python3 tests CUSTOM_PATH_FILE: 18
cd www/: 6
git checkout .: 29
yarn docker build  CUSTOM_PATH_DIR -t ENV_VAR CUSTOM_PATH_DIR: 13
docker tag ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 34
yarn docker build  CUSTOM_PATH_DIR -t standardnotes CUSTOM_PATH_DIR github.sha }}: 12
docker push standardnotes CUSTOM_PATH_DIR github.sha }}: 12
docker tag standardnotes CUSTOM_PATH_DIR github.sha }} standardnotes CUSTOM_PATH_DIR: 7
docker push standardnotes CUSTOM_PATH_DIR: 13
USES: aws-actions/amazon-ecs-render-task-definition: 75
USES: aws-actions/amazon-ecs-deploy-task-definition: 72
USES: newrelic/deployment-marker-action: 31
conda install pip: 19
conda update pip: 12
cd sql: 35
cd sql CUSTOM_PATH_DIR: 6
export SKIP_PANDAS=1: 6
pip3 install -r docs CUSTOM_PATH_FILE: 9
echo "RELEASE_VERSION=ENV_VAR:10}" >> ENV_VAR: 15
mike deploy FLAG FLAG ENV_VAR latest: 6
pip install -e '.[dev]': 18
git config FLAG user.name github-actions: 75
echo GF_KEY=${{ secrets.GF_KEY }} >> .env: 7
composer run-test: 6
chmod 755 . CUSTOM_PATH_DIR: 37
python -m pip install FLAG pip tox tox-gh-actions: 6
chrome FLAG: 21
dart test -r expanded -j 1 FLAG random: 7
USES: kiegroup/kie-ci/.ci/actions/long-paths: 18
USES: kiegroup/kie-ci/.ci/actions/surefire-report: 17
composer config minimum-stability ${{ matrix.stability }}: 6
cd %GITHUB_WORKSPACE%: 25
call BuildPythonForWindows.bat FLAG: 11
cd thirdparty CUSTOM_PATH_DIR: 10
sudo apt-get update : 27
USES: authzed/actions/setup-go: 15
USES: chainguard-dev/actions/nodiff: 6
echo ref: ${{github.ref}} event: ${{github.event_name}}: 15
dotnet tool install FLAG minver-cli FLAG 4.3.0: 11
version=$(minver FLAG v): 16
echo "MINVERVERSIONOVERRIDE=$version" >> ENV_VAR: 15
dotnet build src CUSTOM_PATH_FILE FLAG Release FLAG: 33
dotnet test src CUSTOM_PATH_FILE FLAG ENV_VAR CUSTOM_PATH_FILE: 13
dotnet pack FLAG FLAG Release src CUSTOM_PATH_FILE FLAG .: 29
dotnet nuget push *.nupkg FLAG URL FLAG ${{secrets.PUBLISH_TO_NUGET_ORG}} FLAG: 28
wget URL -O CUSTOM_PATH_DIR && chmod +x CUSTOM_PATH_DIR: 12
echo "::set-output name=branch::ENV_VAR": 6
git checkout -b "ENV_VAR": 37
nix develop '.#ci' -c true: 8
nix develop '.#ci' -c .github CUSTOM_PATH_FILE: 14
USES: jwgmeligmeyling/spotbugs-github-action: 7
git pull FLAG: 54
git add . CUSTOM_PATH_FILE: 45
git config user.name "github-actions[bot]": 83
git config user.email "github-actions[bot]": 24
mkdir -p docs CUSTOM_PATH_DIR: 28
sudo apt install -y musl-tools: 14
sudo apt install -y gcc-aarch64-linux-gnu: 9
sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf: 21
USES: ./amplify-js/.github/actions/node-and-build: 12
sudo -n apt update: 6
sudo -n apt-get install -y git: 6
mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}: 12
mkdir -p "build CUSTOM_PATH_DIR: 10
cp "cmake CUSTOM_PATH_FILE" "build CUSTOM_PATH_DIR: 10
composer require goalgorilla CUSTOM_PATH_DIR: 6
docker-compose -f docker-compose-ci.yml up -d: 7
helm dependency update src CUSTOM_PATH_DIR: 18
. CUSTOM_PATH_FILE ENV_VAR: 101
wget URL -P CUSTOM_PATH_DIR: 12
mv CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 44
rm ~ CUSTOM_PATH_FILE: 6
ENV=$(cat metadata.json | jq -r '.name'): 7
eval "$(bbl print-env FLAG . CUSTOM_PATH_FILE)": 6
export CF_INT_PASSWORD="$(credhub get -n CUSTOM_PATH_DIR | bosh interpolate FLAG CUSTOM_PATH_DIR -)": 6
export CF_INT_OIDC_USERNAME="admin-oidc": 6
export CF_INT_OIDC_PASSWORD=$(credhub get -n CUSTOM_PATH_DIR | bosh interpolate FLAG CUSTOM_PATH_DIR -): 6
export CF_INT_API="URL: 6
export CF_DIAL_TIMEOUT=15: 6
export CF_USERNAME=admin: 6
export FLAKE_ATTEMPTS=2: 6
export NODES=16: 6
export GOPATH=ENV_VAR CUSTOM_PATH_DIR: 37
make out CUSTOM_PATH_DIR: 13
export PATH="$(pwd) CUSTOM_PATH_DIR: 8
export CF_PASSWORD=ENV_VAR: 6
cf api ENV_VAR FLAG: 6
cf auth: 6
make integration-tests-full-ci: 6
curl -X POST \: 23
USES: chekalsky/phpcs-action: 9
pip install -U pip setuptools: 35
pip uninstall -y charset-normalizer: 18
python -m pip install -U pip wheel setuptools build twine: 19
tree dist: 9
make -C test CUSTOM_PATH_DIR: 10
python3 -m pip install -r requirements-dev.txt: 10
composer phpstan: 53
composer config extra.symfony.require "${{ matrix.symfony-version }}": 8
vendor CUSTOM_PATH_DIR FLAG build CUSTOM_PATH_FILE: 21
pip install -r requirements.txt -r requirements-dev.txt: 33
echo "NODE_VERSION=$(cat .nvmrc)" >> ENV_VAR: 7
cd build; ctest FLAG: 6
echo "Just to make the GitHub merge button green": 10
sudo apt-add-repository "deb [arch=amd64] URL $(lsb_release -cs) main": 12
USES: azohra/shell-linter: 22
. CUSTOM_PATH_FILE CUSTOM_PATH_DIR try:one ${{ matrix.try-scenario }}: 22
python3 -m venv CUSTOM_PATH_DIR: 6
mingw32-make -j2: 6
cd release: 58
USES: DuckSoft/create-7z-action: 15
USES: ./.github/actions/paths-filter: 13
make kind-up: 7
echo "loading docker images...": 9
make push-images: 7
mamba install FLAG requirements CUSTOM_PATH_FILE -y: 9
sudo apt-get install rsync: 16
USES: easingthemes/ssh-deploy: 102
git commit -m "COMMIT_MSG" || exit 0: 28
python -u tools CUSTOM_PATH_FILE: 14
USES: azure/aks-set-context: 12
USES: Azure/k8s-deploy: 63
sleep 30s: 31
USES: Azure/load-testing: 12
USES: google/clusterfuzzlite/actions/run_fuzzers: 32
git config FLAG user.email github-actions: 44
echo "GOOGLE_OAUTH_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}" >> ENV_VAR: 9
echo "GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}" >> ENV_VAR: 9
echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> ENV_VAR: 9
yarn setup: 118
git tag ENV_VAR: 27
echo 'distributionUrl=https\: CUSTOM_PATH_FILE' >  gradle CUSTOM_PATH_FILE: 11
USES: lazy-actions/slatify: 22
touch CUSTOM_PATH_DIR: 19
sudo bash f8x: 8
composer install FLAG -o: 8
pip install tox wheel flake8: 23
sudo mkdir -p CUSTOM_PATH_DIR -m a+rw: 21
pip wheel -w CUSTOM_PATH_DIR .: 21
mix dialyzer FLAG: 48
mix dialyzer: 45
cmake FLAG build FLAG ${{env.BUILD_TYPE}}: 10
sudo add-apt-repository ppa:strukturag CUSTOM_PATH_DIR: 14
echo "PKG_CONFIG_PATH= CUSTOM_PATH_DIR >> ENV_VAR: 12
echo "LDFLAGS=-L CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "C_INCLUDE_PATH= CUSTOM_PATH_DIR >> ENV_VAR: 10
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG ${{env.BUILD_TYPE}} FLAG 4: 7
CTEST_OUTPUT_ON_FAILURE=1 ctest -C ${{env.BUILD_TYPE}}: 9
dotnet workload FLAG: 16
git lfs version: 17
USES: ./.github/actions/install-node-modules: 6
make distclean: 32
make -C tools CUSTOM_PATH_DIR && make -C tools CUSTOM_PATH_DIR: 17
USES: pypa/gh-action-pip-audit: 10
pyinstaller . CUSTOM_PATH_FILE: 16
mkdir OlivOS-Win: 7
flutter build ios FLAG: 15
python . CUSTOM_PATH_FILE requirements CUSTOM_PATH_FILE: 12
pip install pytest-timeout: 25
python requirements CUSTOM_PATH_FILE: 8
bash .actions CUSTOM_PATH_FILE: 9
cd build CUSTOM_PATH_DIR ; dir; . CUSTOM_PATH_DIR: 10
npm run prebuild: 10
meson setup builddir: 8
USES: BirthdayResearch/oss-governance-bot: 6
USES: sliteteam/github-action-git-crypt-unlock: 12
USES: ./.github/actions/setup-google-cloud: 12
kustomize edit add annotation kubernetes.io CUSTOM_PATH_DIR Actions deploying ENV_VAR at $(date)": 8
sudo ln -sf CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 96
echo "GO_VERSION=$(go mod edit -json | jq -r .Go)" >> ENV_VAR: 10
sudo apt-get update; sudo apt-get install FLAG libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev: 10
sudo apt-get update; sudo apt-get install FLAG libasound2-dev libudev-dev: 29
USES: Legion2/swagger-ui-action: 8
make dep: 20
USES: derekprior/add-autoresponse: 8
npm run coveralls: 7
composer install -n FLAG: 38
go test -v -cover . CUSTOM_PATH_DIR: 10
yarn run deploy: 7
cd backend: 33
make test-coverage: 48
echo sender=${{github.event.sender.login}}: 8
echo formula=${{github.event.inputs.formula}}: 7
echo issue=${{github.event.inputs.issue}}: 8
echo upload=${{github.event.inputs.upload}}: 8
mkdir bottles: 8
cd bottles: 15
cat bottles CUSTOM_PATH_FILE: 11
rm bottles CUSTOM_PATH_FILE: 11
rm -rvf bottles CUSTOM_PATH_DIR: 20
count=$(ls *.json | wc -l | xargs echo -n): 8
echo "$count bottles": 8
rm -rvf bottles: 6
USES: Homebrew/actions/post-comment: 29
sudo apt-get install lua5.1: 12
make check-scripts: 10
mono FLAG: 16
chmod a+x . CUSTOM_PATH_FILE: 18
bundle exec rails assets:precompile: 9
USES: treosh/lighthouse-ci-action: 36
echo "$(git status FLAG)" >> ENV_VAR: 29
chmod +x ci CUSTOM_PATH_FILE: 13
USES: humbletim/setup-vulkan-sdk: 38
echo '' >> ENV_VAR: 21
helm lint: 9
scripts CUSTOM_PATH_FILE "ENV_VAR" "ENV_VAR": 10
cp config CUSTOM_PATH_FILE config CUSTOM_PATH_FILE: 71
bundle exec rake db:setup: 11
echo "repo_name=${{ fromJson(steps.request.outputs.data).head.repo.full_name }}" >> ENV_VAR: 7
echo "repo_clone_url=${{ fromJson(steps.request.outputs.data).head.repo.clone_url }}" >> ENV_VAR: 7
echo "repo_ssh_url=${{ fromJson(steps.request.outputs.data).head.repo.ssh_url }}" >> ENV_VAR: 7
sudo su: 8
sudo apt-get install -y libgpgme-dev libbtrfs-dev libdevmapper-dev: 9
GOPATH=`go env GOPATH`: 8
cmake -DCMAKE_BUILD_TYPE=Release ..: 33
pip install mkdocs-material mkdocs-redirects: 7
pip install -U -r requirements-dev.txt: 13
brew install gnu-tar: 22
sudo safaridriver FLAG: 14
cargo build FLAG ${{ matrix.target }} FLAG: 26
wasm-pack test FLAG FLAG -- FLAG: 6
mkdir Build: 8
brew install p7zip: 19
USES: Simek/yarn-lock-changes: 9
tests CUSTOM_PATH_DIR: 18
sudo apt install pandoc: 31
git config FLAG user.email 'release': 6
node common CUSTOM_PATH_FILE install: 54
node common CUSTOM_PATH_FILE build: 28
git config FLAG user.email "ci": 57
python3 setup.py develop: 14
yarn production-build: 14
. CUSTOM_PATH_FILE ${{ secrets.DEPLOY_SERVER }} ${{ secrets.DEPLOY_USER }} ${{ secrets.GH_TOKEN }}: 6
USES: rojopolis/spellcheck-github-actions: 27
make test-e2e: 45
cd backend CUSTOM_PATH_DIR: 6
USES: einaregilsson/beanstalk-deploy: 14
gh pr checkout ENV_VAR: 13
pip3 install . CUSTOM_PATH_DIR: 24
sudo rm -rf build || true: 58
sudo rm -rf bin || true: 58
sudo rm CUSTOM_PATH_DIR || true: 57
sudo rm -Rf CUSTOM_PATH_DIR || true: 172
sudo rm -Rf root oem efi || true: 51
sudo cp -rfv .github CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 95
echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} FLAG quay.io: 84
export DOCKER_INSTALL=true: 154
sudo -E make deps_ci: 121
sudo -E make validate: 63
mkdir build || true: 63
pushd . CUSTOM_PATH_DIR: 139
go build -o build build.go: 62
sudo -E . CUSTOM_PATH_DIR: 105
ls -liah ENV_VAR CUSTOM_PATH_DIR: 107
sudo chmod -R 777 ENV_VAR CUSTOM_PATH_DIR: 64
sudo git config FLAG FLAG safe.directory ${{ github.workspace }}: 62
git config FLAG FLAG safe.directory ${{ github.workspace }}: 65
sudo -E make create-repo: 65
source .github CUSTOM_PATH_FILE: 300
PACKAGE_VERSION=$(cos_package_version): 40
export COS_VERSION="ENV_VAR CUSTOM_PATH_DIR: 42
sudo -E make add_local_repo: 40
sudo -E make publish-repo: 41
USES: jgehrcke/github-repo-stats: 7
. CUSTOM_PATH_FILE 2.10.0: 6
cd build && ctest -V: 18
USES: chainguard-dev/actions/setup-gitsign: 10
USES: cargo-bins/release-pr: 12
USES: brandedoutcast/publish-nuget: 23
USES: ./.github/actions/load_docker: 9
. CUSTOM_PATH_FILE test: 29
echo ::group::PYDEPS: 16
python3 .github CUSTOM_PATH_FILE: 79
dotnet clean FLAG Release && dotnet nuget locals all FLAG: 14
dotnet tool install FLAG dotnet-sonarscanner: 30
USES: reviewdog/action-suggester: 46
brew install mercurial: 6
docker push FLAG ${{ env.REGISTRY_IMAGE_NAME }}: 6
yarn && yarn build: 63
gh -R matter-labs CUSTOM_PATH_DIR release view "ENV_VAR" FLAG tagName,body FLAG '## {{.tagName}} {{"\n"}}{{.body}}' > . CUSTOM_PATH_DIR: 9
jq FLAG FLAG text "$(cat . CUSTOM_PATH_DIR '{"text": $text}' > mattermost.json: 9
USES: pdm-project/setup-pdm: 52
rustup component add clippy rustfmt: 16
rustup FLAG: 18
cargo clippy FLAG: 78
cargo test FLAG FLAG ${{ matrix.target }}: 20
cargo clippy FLAG FLAG FLAG: 25
git diff FLAG FLAG FLAG: 7
sudo apt-get install ripgrep: 8
USES: sigstore/gh-action-sigstore-python: 19
sudo chmod 755 CUSTOM_PATH_DIR: 9
#wget URL: 6
pip install -r dist CUSTOM_PATH_FILE: 6
git fetch FLAG=1 URL refs CUSTOM_PATH_DIR: 6
diff expected actual: 171
cd android: 37
cd External CUSTOM_PATH_DIR: 9
rm -f ~ CUSTOM_PATH_DIR: 17
yarn link-cli ~ CUSTOM_PATH_DIR: 11
agoric install: 11
mv .gmt CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 6
touch ~ CUSTOM_PATH_FILE ~ CUSTOM_PATH_FILE: 6
ls -lhR ~ CUSTOM_PATH_DIR: 6
make typecheck: 21
cd src/: 20
pip install wheel twine: 13
USES: ./.github/actions/purge-runner-disk: 6
npm install -g lerna: 12
npm install  CUSTOM_PATH_DIR: 86
USES: akhilmhdh/contributors-readme-action: 40
. CUSTOM_PATH_FILE || exit 1: 8
packaging CUSTOM_PATH_FILE: 9
cmake -E make_directory ${{ github.workspace }} CUSTOM_PATH_DIR: 19
echo "Hash=$hash" >> ENV_VAR: 7
openssl version -a: 11
echo '::endgroup::': 75
pg_isready: 15
touch '${{ env.TinySQLitePath }}': 6
sqlite3 FLAG: 9
filename=$(basename "ENV_VAR64"): 6
echo "Filename=$filename" >> ENV_VAR: 6
filepath="${{ runner.temp }} CUSTOM_PATH_DIR: 6
echo "Filepath=$filepath" >> ENV_VAR: 6
hash=$(wget "ENV_VAR" -O- FLAG FLAG): 6
echo '::group::Extract archive': 6
echo '::group::Print version': 10
echo "VCPKG_ROOT=ENV_VAR" >> ENV_VAR: 11
echo 'VCPKG_DEFAULT_TRIPLET=x64-linux-dynamic' >> ENV_VAR: 6
echo 'VCPKG_MAX_CONCURRENCY=2' >> ENV_VAR: 8
export LD_LIBRARY_PATH=.. CUSTOM_PATH_DIR: 13
. CUSTOM_PATH_DIR migrate:status FLAG=tinyorm_tom_mysql FLAG: 6
. CUSTOM_PATH_DIR migrate:status FLAG=tinyorm_tom_postgres FLAG: 6
. CUSTOM_PATH_DIR migrate:status FLAG=tinyorm_tom_sqlite FLAG: 6
composer req pimcore CUSTOM_PATH_DIR matrix.pimcore }} FLAG FLAG FLAG: 14
bin CUSTOM_PATH_DIR lint:container: 6
cargo tarpaulin FLAG Xml: 7
VERSION=$(grep -oP '^version = "\K[0-9]+\.[0-9]+\.[0-9]+' Cargo.toml): 9
git checkout stable: 7
curl -sSL URL | sudo tar -C CUSTOM_PATH_DIR FLAG -xzv mustache: 8
sudo apt-get install -y python*-wheel python*-yaml: 27
python3 -m pip install FLAG FLAG FLAG '${{ matrix.ansible-version }}': 27
~ CUSTOM_PATH_DIR collection build FLAG CUSTOM_PATH_DIR FLAG: 26
~ CUSTOM_PATH_DIR collection install -vvv FLAG CUSTOM_PATH_FILE: 26
make test-docker: 7
echo "${{ github.event.head_commit.message }}": 21
export TRAINER_TELEMETRY=0: 12
sudo apt-get install -y git make gcc: 8
make system-deps: 15
sed -i 's CUSTOM_PATH_FILE\ CUSTOM_PATH_DIR TTS CUSTOM_PATH_FILE: 12
python3 -m pip install .[all]: 15
python3 setup.py egg_info: 15
. CUSTOM_PATH_DIR src tests: 11
. CUSTOM_PATH_DIR FLAG=vendor FLAG=tests CUSTOM_PATH_FILE -s .: 7
. CUSTOM_PATH_DIR analyze -c tests CUSTOM_PATH_FILE: 6
php vendor CUSTOM_PATH_DIR -v: 15
cd "${env:PYTHON_SOURCE_PATH}": 9
sphinx-build FLAG: 8
USES: crazy-max/ghaction-virustotal: 17
USES: ergebnis/.github/actions/composer/determine-cache-directory: 32
USES: ergebnis/.github/actions/composer/install: 32
mkdir -p .build CUSTOM_PATH_DIR: 35
USES: ergebnis/.github/actions/phive/install: 7
sudo apt-get install -y nuget mono-devel mono-xbuild: 7
npm i puppeteer-core: 15
USES: VaultVulp/gp-docker-action: 7
USES: thomwiggers/cancel-workflow-action: 49
python3 -m pip install -U -r requirements.txt: 74
pip3 install -U -r requirements.txt && \: 73
python -m pip install -U -r requirements.txt: 155
sudo apt-get install -y webkit2gtk-4.0 libayatana-appindicator3-dev: 7
git config user.email "hello": 6
apk add bash git: 7
git config FLAG advice.detachedHead false: 13
git commit -m "COMMIT_MSG" || echo "No changes to commit": 24
USES: onyxmueller/build-tag-number: 10
curl -sL URL | sudo bash: 9
echo "deb URL stable main" | sudo tee CUSTOM_PATH_FILE: 21
echo "name=$(echo ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 10
echo "name=$(echo ENV_VAR#refs CUSTOM_PATH_DIR | tr ' CUSTOM_PATH_DIR '_')" >> ENV_VAR: 10
echo "short=$(echo ENV_VAR | cut -c1-8)" >> ENV_VAR: 11
echo "basename=$(echo ENV_VAR_${{ steps.normalized_current_branch.outputs.name }}_${{ steps.commit_sha.outputs.short }})" >> ENV_VAR: 10
cd benchmarks: 23
cargo bench FLAG ENV_VAR -- FLAG ${{ steps.file.outputs.basename }}: 15
critcmp FLAG ${{ steps.file.outputs.basename }} > ${{ steps.file.outputs.basename }}.json: 16
USES: BetaHuhn/do-spaces-action: 25
telegraf FLAG URL FLAG FLAG: 8
echo "${{ steps.file.outputs.basename }}.json has just been pushed.": 15
echo 'How to compare this benchmark with another one?': 15
echo '  - Check the available files with: . CUSTOM_PATH_FILE': 15
echo "  - Run the following command: . CUSTOM_PATH_FILE <file-to-compare-with> ${{ steps.file.outputs.basename }}.json": 15
echo "ID: ${{ inputs.instance_id }}": 6
echo "AMI: ${{ inputs.instance_image_id }}": 27
echo "Type: ${{ inputs.instance_type }}": 27
echo "Request ID: ${{ inputs.request_id }}": 27
echo "Fork repo: ${{ inputs.fork_repo }}": 6
echo "Fork git sha: ${{ inputs.fork_git_sha }}": 6
echo "HOME= CUSTOM_PATH_DIR >> "ENV_VAR": 33
make test_examples: 7
echo "::set-output name=dir::$(composer config cache-dir)": 15
python -m pip install -e ".[dev]": 7
tox -e publish: 6
pip3 install FLAG setuptools: 32
pip3 install awscli: 18
printf "%s\n" ${{ secrets.AWS_ACCESS_KEY }} ${{ secrets.AWS_SECRET_KEY }} ${{ secrets.AWS_REGION }} "json" | aws configure: 9
echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" FLAG: 23
USES: githubocto/flat: 7
locale: 66
echo "PRERE=ON" >> "ENV_VAR": 7
echo "PRERE=OFF" >> "ENV_VAR": 7
echo "BENCH_DATE=$(date FLAG=seconds)" >> "ENV_VAR": 12
echo "CUDA_PATH=ENV_VAR" >> "ENV_VAR": 6
echo "LD_LIBRARY_PATH=ENV_VAR CUSTOM_PATH_DIR >> "ENV_VAR": 6
cd compiler: 19
COMMIT_DATE="$(git FLAG show -s FLAG=%cd FLAG=iso8601-strict ${{ github.sha }})": 11
COMMIT_HASH="$(git describe FLAG FLAG)": 11
FLAG ENV_VAR \: 22
FLAG ${{ github.ref_name }} \: 12
SIGNATURE="$(slab CUSTOM_PATH_FILE ${{ env.RESULTS_FILENAME }} '${{ secrets.JOB_SECRET }}')": 12
echo "Sending results to Slab...": 12
curl -v -k \: 18
-H "X-Slab-Repository: ${{ github.repository }}" \: 18
-H "X-Hub-Signature-256: sha256=ENV_VAR" \: 18
-d @${{ env.RESULTS_FILENAME }} \: 12
${{ secrets.SLAB_URL }}: 18
make static-check: 7
twine upload FLAG dist CUSTOM_PATH_DIR: 53
npm publish FLAG ENV_VAR FLAG public: 7
USES: imjohnbo/issue-bot: 25
go build -mod=readonly -o .. CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 15
echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> CUSTOM_PATH_DIR: 13
echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> CUSTOM_PATH_DIR: 13
USES: ./.github/actions/build-and-publish-image: 13
cp android-ndk-r22b CUSTOM_PATH_FILE android-ndk-r25b CUSTOM_PATH_DIR: 8
ln -s ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 38
echo "PKG_CONFIG_ALLOW_CROSS=1" >> ENV_VAR: 13
cd webui CUSTOM_PATH_DIR: 7
cd target CUSTOM_PATH_DIR matrix.target }} CUSTOM_PATH_DIR: 49
USES: heinrichreimer/github-changelog-generator-action: 34
bundle config unset deployment: 9
USES: actionsx/prettier: 14
make -C ci/ deps: 6
sudo bash scripts CUSTOM_PATH_FILE: 90
python -m tox -e coverage: 7
sudo apt-get install expect: 6
sudo docker build -f . CUSTOM_PATH_DIR .: 39
echo "PY_COLORS=1" >> ENV_VAR: 29
echo "ANSIBLE_FORCE_COLOR=1" >> ENV_VAR: 24
cd ansible_collections CUSTOM_PATH_DIR: 7
USES: zcong1993/setup-timezone: 27
-Dmaven.test.skip \: 7
-Dmaven.javadoc.skip \: 10
curl -LO "URL -L -s URL: 11
kind version: 36
go get -t -v . CUSTOM_PATH_DIR: 10
npm run prepare-release: 7
USES: ./.github/actions/vm_setup: 10
mvn compile: 7
mvn test: 63
USES: fluxcd/pkg/actions/kustomize: 20
make cmd CUSTOM_PATH_FILE: 7
python -m pip install coveralls: 14
cmake  ..: 6
lhci autorun: 11
df -h /: 75
doctl registry login FLAG 3600: 16
docker push everco CUSTOM_PATH_DIR: 15
docker push registry.digitalocean.com CUSTOM_PATH_DIR: 21
npx lerna bootstrap: 26
helm repo add neondatabase URL: 7
aws FLAG ${{ matrix.target_region }} eks update-kubeconfig FLAG  ${{ matrix.target_cluster }}: 7
DOCKER_TAG=${{ inputs.dockerTag }}: 6
npm install eslint: 20
pylint tests: 6
pip install tox coveralls: 12
make install-python-ci-dependencies: 13
make lint-python: 7
make lint-go: 8
USES: erclu/check-crlf: 9
yarn check: 16
poetry check: 24
git add ENV_VAR: 12
echo "diffgram_version=${{ github.ref_name }}" >> ENV_VAR: 7
echo "diffgram_version=${{ steps.comment-branch.outputs.head_ref }}" >> ENV_VAR: 6
docker tag diffgram CUSTOM_PATH_DIR diffgram CUSTOM_PATH_DIR env.diffgram_version }}: 10
set -o nounset: 17
poetry run coveralls: 12
brew update > CUSTOM_PATH_DIR || true: 6
brew tap Homebrew CUSTOM_PATH_DIR: 6
brew bundle FLAG: 8
ct lint FLAG .github CUSTOM_PATH_FILE: 8
USES: yokawasa/action-setup-kube-tools: 11
call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64: 16
git config user.email "${{ github.actor }} <${{ github.actor }}>": 6
git stash: 48
chmod a+x . CUSTOM_PATH_DIR: 26
echo "ENV_VAR" | base64 -d > . CUSTOM_PATH_FILE: 9
export SETUPTOOLS_USE_DISTUTILS=stdlib: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv tensorflow: 6
tar -zxf ${{ github.workspace }} CUSTOM_PATH_FILE -C ${{ github.workspace}} CUSTOM_PATH_DIR: 46
find ${{ github.workspace }} -name "pulumi-*-${{ env.PROVIDER }}" -print -exec chmod +x {} \;: 61
echo ::set-output name=run-url::URL: 18
make provider: 19
tar -zcf ${{ github.workspace }} CUSTOM_PATH_FILE -C ${{ github.workspace }} CUSTOM_PATH_DIR pulumi-resource-${{ env.PROVIDER }}: 8
dotnet nuget add source ${{ github.workspace }} CUSTOM_PATH_DIR: 28
tar -zxf ${{ github.workspace }} CUSTOM_PATH_DIR matrix.language }}.tar.gz -C ${{ github.workspace }} CUSTOM_PATH_DIR matrix.language }}: 19
echo "${{ github.workspace }} CUSTOM_PATH_DIR >> ENV_VAR: 76
make install_${{ matrix.language}}_sdk: 24
cd examples && go test -v -json -count=1 -cover -timeout 2h -tags=${{ matrix.language }} -parallel 4 . 2>&1 | tee CUSTOM_PATH_FILE | gotestfmt: 18
USES: humbletim/install-vulkan-sdk: 12
USES: egor-tensin/setup-cygwin: 20
USES: deadsnakes/action: 25
cargo install mdbook-mermaid: 7
touch target CUSTOM_PATH_FILE: 8
git commit -m "COMMIT_MSG" FLAG: 36
pip install -r src CUSTOM_PATH_FILE: 11
python3 src CUSTOM_PATH_FILE: 9
mkdocs gh-deploy FLAG FLAG FLAG: 11
sudo service mysql start: 24
USES: ./.github/actions/release: 11
nix flake check FLAG: 15
pip install -U twine: 24
. CUSTOM_PATH_FILE1 -d: 30
venv CUSTOM_PATH_DIR combine FLAG=.coveragerc: 30
python -m pip install -r requirements-test.txt: 18
python -m pip install pylint: 21
pip install "${{ matrix.django }}": 11
bundle update FLAG: 9
yarn;: 18
cd native-package: 6
mkdir android CUSTOM_PATH_DIR: 18
USES: wzieba/Firebase-Distribution-Github-Action: 23
mkdir public: 15
USES: dart-code-checker/dart-code-metrics-action: 10
dart pub upgrade: 652
sudo chown -R ${{ secrets.CI_ADMIN }} "${{ github.workspace }}": 28
USES: ./.github/workflows/composite_action/hw: 20
docker cp ${{ env.CONTAINER_NAME }}: CUSTOM_PATH_FILE .: 6
docker stop ${{ env.CONTAINER_NAME }}: 21
tar xf npm-7.5.4.tgz: 43
cd package: 63
node lib CUSTOM_PATH_FILE install FLAG FLAG -g ..\npm-7.5.4.tgz: 43
rmdir CUSTOM_PATH_DIR CUSTOM_PATH_DIR package: 43
echo "updated=true" >> "ENV_VAR": 126
npm i FLAG FLAG FLAG: 42
poetry run tox: 7
pip install bandit black codespell flake8 isort mypy pytest pyupgrade safety: 6
black FLAG . || true: 21
isort FLAG FLAG black .: 8
mypy FLAG . || true: 6
pytest .: 18
shopt -s globstar && pyupgrade FLAG ** CUSTOM_PATH_FILE || true: 18
pip install setuptools wheel: 64
make man: 11
USES: JoshuaTheMiller/conditional-build-matrix: 11
npm run cover: 16
flit install FLAG: 11
pip install .. CUSTOM_PATH_DIR: 23
USES: trstringer/manual-approval: 7
docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}: 21
rustup toolchain install stable FLAG llvm-tools-preview: 12
cargo llvm-cov FLAG FLAG FLAG FLAG lcov.info: 23
make test-race: 20
git checkout -b ENV_VAR: 57
USES: FerretDB/github-actions/setup-go: 23
go generate -x: 22
choco FLAG: 57
git config FLAG user.email "ci-sage": 14
git config FLAG user.name "ci-sage workflow": 11
C:\\tools\\cygwin\\bin\\dash -l -c 'cd $(cygpath -u "ENV_VAR") && .github CUSTOM_PATH_FILE CUSTOM_PATH_FILE && tar FLAG FLAG= CUSTOM_PATH_FILE FLAG CUSTOM_PATH_DIR "${{ env.SAGE_LOCAL }}"': 28
C:\\tools\\cygwin\\bin\\bash -l -x -c 'cat CUSTOM_PATH_DIR: 32
find "artifacts CUSTOM_PATH_DIR -type f -name "*.log" -exec sh -c 'if tail -20 "{}" 2> CUSTOM_PATH_DIR | grep "^Error" > CUSTOM_PATH_DIR then echo :":"error file={}:":" ==== LOG FILE {} CONTAINS AN ERROR ====; cat {} ; fi' \;: 55
. CUSTOM_PATH_FILE -c: 15
. CUSTOM_PATH_FILE -t: 19
USES: dbhi/qus/action: 9
make static: 8
sudo apt -y install awscli: 6
echo "TAG=${{ github.event.inputs.tag }}" >> ENV_VAR: 10
aws FLAG URL s3 mb s3: CUSTOM_PATH_DIR: 8
. CUSTOM_PATH_DIR "ENV_VAR" . CUSTOM_PATH_DIR: 97
USES: leancodepl/mobile-tools/.github/actions/pub-release: 8
python -m pip install nox: 50
nox -s docs: 12
nox -s mypy: 9
sudo apt-get install -y curl pandoc unzip: 6
sudo chown -R ENV_VAR CUSTOM_PATH_DIR: 24
curl FLAG URL FLAG CUSTOM_PATH_FILE: 7
git config user.name github-actions[bot]: 39
git config user.email 41898282+github-actions[bot]: 33
echo "ENV_VAR" | gpg FLAG FLAG: 13
USES: jakejarvis/wait-action: 164
cp test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE: 14
USES: networktocode/gh-action-setup-poetry-environment: 61
poetry run invoke black: 6
poetry run invoke flake8: 6
echo RELEASE_VERSION=ENV_VAR:10} >> ENV_VAR: 10
poetry version ENV_VAR: 19
pip install FLAG pip setuptools: 30
dbt deps: 11
echo ${{ steps.get_version.outputs.VERSION }}: 10
cd build && ninja: 21
cd build && ctest FLAG: 24
sudo apt-get install gcc-multilib: 31
rustup target add wasm32-unknown-emscripten: 18
pip install -r doc-requirements.txt: 6
USES: reggionick/s3-deploy: 6
msbuild CUSTOM_PATH_DIR CUSTOM_PATH_FILE_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}: 10
make e2e: 43
echo "RELEASE_VERSION=ENV_VAR:1}" >> ENV_VAR: 15
python -m pip install FLAG twine: 12
python -m pip install FLAG pytest: 11
${{ matrix.actions.run }}: 17
make mypy: 39
make unit-test: 52
make integration-test: 35
mv -f .gitmodules_github .gitmodules && git submodule sync && git submodule update FLAG: 6
python -m build FLAG FLAG dist/ .: 15
npm run lint:css: 18
mv build CUSTOM_PATH_FILE build CUSTOM_PATH_FILE: 29
mvn -B clean install -DskipTests FLAG pom.xml: 7
npm run test:unit: 96
cd full-moon: 6
git config FLAG user.name Docs deploy: 15
git config FLAG user.email docs: 22
sudo npm install -g markdownlint-cli: 13
pip install smokeshow: 6
USES: the-guild-org/shared-config/setup: 79
USES: the-guild-org/shared-config/website-cf: 16
openssl version: 24
echo ${{ matrix.os }}: 7
ls -l ENV_VAR: 6
pip install -U numpy: 8
pip install -U -r requirements.txt: 21
ls build CUSTOM_PATH_DIR: 12
lintPaths+=("ENV_VAR CUSTOM_PATH_DIR: 8
do: 18
done: 62
pytest test_chemistry_madness.py: 7
echo "done": 18
ls -l ENV_VAR CUSTOM_PATH_DIR: 8
USES: beemojs/conventional-pr-action: 9
cibuildwheel FLAG wheelhouse: 18
python -m pip install FLAG pip setuptools tox: 34
python -c "import sys; print(f'Python {sys.version}')": 9
python -c "import pip; print(f'pip {pip.__version__}')": 9
python -c "import setuptools; print(f'setuptools {setuptools.__version__}')": 9
python -c "import tox; print(f'tox {tox.__version__}')": 9
go install golang.org CUSTOM_PATH_DIR && go install github.com CUSTOM_PATH_DIR: 14
if [[ -n $(gofmt -l .) ]]; then echo "please run gofmt"; exit 1; fi: 7
git update-index FLAG go.mod: 7
git update-index FLAG go.sum: 7
USES: gotesttools/gotestfmt-action: 10
echo "SCCACHE_GHA_ENABLED=false" >> ENV_VAR: 13
echo "RUSTC_WRAPPER=" >> ENV_VAR: 13
echo "dir=$(pwd) CUSTOM_PATH_DIR >> ENV_VAR: 9
nix develop -c make -j deps-ci: 11
sudo . CUSTOM_PATH_FILE FLAG: 14
[[ -n "ENV_VAR" ]] && sudo rm -rf "ENV_VAR": 9
sudo rm -rf CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 11
sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true: 11
df -Th: 22
echo "警告⚠": 21
echo "若分配的服务器性能不足，务必及时取消，重新运行！": 7
echo "已知编译成功CPU型号：8370C,8171M": 7
echo "已知性能不足CPU型号：8272CL": 7
echo -e "FLAG FLAG信息FLAG\n": 7
echo "CPU物理数量:$(cat CUSTOM_PATH_DIR grep "physical id"| sort| uniq| wc -l)": 7
echo -e "CPU核心及版本信息：$(cat CUSTOM_PATH_DIR | grep name | cut -f2 -d: | uniq -c) \n": 7
echo "FLAG内存信息FLAG": 21
echo "已安装内存详细信息：": 21
sudo lshw -short -C memory | grep GiB: 7
echo -e "\n": 29
echo "FLAG硬盘信息FLAG": 21
echo -e  "硬盘数量：$(ls CUSTOM_PATH_DIR | grep -v [1-9] | wc -l) \n": 7
echo "硬盘详情：": 7
echo "DATE1=$(date "+%Y-%m-%d")" >> ENV_VAR: 9
echo "status=success" >> ENV_VAR: 57
cd openwrt/: 10
tar -zcvf AllPackages.tar.gz openwrt CUSTOM_PATH_DIR: 8
mv AllPackages.tar.gz openwrt CUSTOM_PATH_DIR: 8
tar -zcvf Packages.tar.gz packages: 8
rm -rf packages config.buildinfo feeds.buildinfo sha256sums version.buildinfo *.manifest Packages.tar.gz: 8
echo "status=success" >>ENV_VAR: 12
USES: yc-actions/yc-github-runner: 34
export CCACHE_BASEDIR="$(realpath ..)": 7
export CCACHE_REMOTE_ONLY=true: 7
export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}": 7
pip3 install -r . CUSTOM_PATH_FILE: 25
USES: appleboy/telegram-action: 94
sudo chmod 777 -R .: 7
pipenv sync: 14
cd go CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 13
echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} FLAG: 33
IMAGE_PREFIX=${{ secrets.DOCKER_USERNAME }}: 15
brew tap wix CUSTOM_PATH_DIR: 11
brew install applesimutils: 11
COOLPROP_VERSION=$(python dev CUSTOM_PATH_FILE FLAG): 6
echo COOLPROP_VERSION=ENV_VAR >> ENV_VAR: 6
USES: tachiyomiorg/issue-moderator-action: 10
npm i FLAG: 87
USES: ./.github/actions/setup-conda: 11
USES: ./.github/actions/build_pandas: 13
USES: ./.github/actions/run-tests: 68
. ~ CUSTOM_PATH_DIR: 26
apk update: 17
USES: sualeh/prepare-maven-build: 11
USES: sualeh/install-graphviz: 8
. CUSTOM_PATH_DIR FLAG build: 25
USES: ./.github/actions/deps: 16
USES: ./.github/actions/hugepages: 7
cargo +nightly fmt FLAG: 13
pytest -v FLAG FLAG=yes: 6
tree ~ CUSTOM_PATH_DIR: 15
ldd ~ CUSTOM_PATH_DIR: 6
size ~ CUSTOM_PATH_DIR: 6
~ CUSTOM_PATH_DIR -h: 6
make test-packages: 6
pip3 install coverage: 7
rustup update FLAG stable && rustup default stable: 24
xmake g -c: 8
echo "VERSION=$(cat version.txt)" >> ENV_VAR: 18
dotnet test FLAG FLAG normal FLAG Release FLAG: 6
dotnet pack FLAG FLAG ". CUSTOM_PATH_DIR FLAG minimal FLAG Release FLAG -p:PackageVersion='${{ env.VERSION }}': 6
echo "version=$(cat GOVERSION)" >> "ENV_VAR": 19
USES: magnetikonline/action-golang-cache: 74
rm -rf appimage: 10
rm -rf assets_raw: 14
rm -rf flatpak: 10
rm -rf installers: 12
rm -rf integration_test: 13
rm -rf ios: 11
rm -rf linux: 11
rm -rf macos: 11
rm -rf metadata: 13
rm -rf snap: 10
rm -rf submodules: 11
rm -rf test: 25
rm -rf windows: 12
USES: ilharp/sign-android-release: 12
sleep 1m: 19
USES: hashicorp/actions-slack-status: 7
choco install -y llvm: 8
echo "BRANCH=ENV_VAR:-ENV_VAR#refs CUSTOM_PATH_DIR >ENV_VAR: 6
mkdir -p ENV_VAR CUSTOM_PATH_FILE: 8
pushd ENV_VAR CUSTOM_PATH_DIR: 45
hdiutil detach CUSTOM_PATH_DIR: 26
pip3 install -r requirements.txt FLAG: 12
wget URL : 18
. CUSTOM_PATH_DIR FLAG=configs CUSTOM_PATH_FILE: 11
scripts CUSTOM_PATH_DIR: 113
echo "tag=${tag}" >> ENV_VAR: 17
cmake . -DCMAKE_BUILD_TYPE=ENV_VAR: 8
make check-headers: 7
git diff FLAG .: 11
make deploy: 41
cat rps*lat.csv: 6
yarn config set registry URL: 14
npm set registry URL: 9
sudo apt-get install ffmpeg: 11
USES: ./.github/actions/warm-up-repo: 19
kubectl apply -f . CUSTOM_PATH_FILE: 48
curl -sfL URL | sudo sh -s -- -b CUSTOM_PATH_DIR: 6
gover: 9
if [ -f requirements CUSTOM_PATH_FILE ]; then pip install -r requirements CUSTOM_PATH_FILE; fi: 7
python -m unittest: 47
sudo apt-get install -y graphviz: 20
mkdir -p build CUSTOM_PATH_DIR && mv subprojects CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 8
python -m ensurepip: 7
echo "dir=ENV_VAR" >> ENV_VAR: 9
brew bundle: 27
git config FLAG user.email 'hello': 11
git checkout -- .: 12
git clean -xfd: 9
composer phpstan -- FLAG: 10
USES: ./.github/actions/free-disk-space: 9
cd transformers: 21
unset TORCH_CUDA_ARCH_LIST # only jit compile for current arch: 20
pip3 install gil: 27
gil update: 27
echo ~ CUSTOM_PATH_DIR >> ENV_VAR: 8
echo "REPO_OWNER=ENV_VAR,,}" >>ENV_VAR: 11
bundle exec rake spec || echo "action_state=failed" >> ENV_VAR: 6
pip3 install -U pip: 15
mkdir -p ~ CUSTOM_PATH_DIR Profiles: 27
git config FLAG FLAG safe.directory ENV_VAR || true: 21
npx envinfo: 33
cmake FLAG build FLAG RelWithDebInfo: 6
echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append: 8
echo "${{ github.workspace }}\devtools\windows" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append: 8
scoop install git: 8
scoop bucket add extras: 18
scoop install llvm yasm: 8
USES: SvanBoxel/gitlab-mirror-and-ci-action: 10
python -m pip install FLAG -r requirements.txt: 16
gem install rake: 29
rake "cluster:generate:art[]": 19
rake "cluster:automation:configure_aws_kube_profile[${app_env}, ENV_VAR, ENV_VAR, ${aws_region}, ${aws_role}, ${aws_cluster_name}]": 21
source . CUSTOM_PATH_DIR: 56
echo "Clean up all temporary files that were generated": 19
sudo chmod a+x premake5: 9
yarn flow: 11
yarn lint:report: 7
yarn jest: 22
dotnet build . CUSTOM_PATH_FILE FLAG Release: 56
dotnet test . CUSTOM_PATH_FILE: 51
pnpm unit: 10
cd components CUSTOM_PATH_DIR: 145
USES: filiptronicek/get-last-job-status: 7
USES: harshanarayana/custom-actions: 13
dnf -y install docker: 14
tox -e ${{ matrix.tox_env }}: 23
USES: mansona/npm-lockfile-version: 6
poetry env use "3.10": 7
go get . CUSTOM_PATH_DIR: 18
make binary: 23
IP=`hostname -I | awk '{print $1}'`: 9
make -j$(nproc) || make -j2 || make -j2 V=s: 25
USES: browserstack/github-actions/setup-env: 36
USES: browserstack/github-actions/setup-local: 64
sudo apt-get -y upgrade: 13
inputs_retries="${{ inputs.retries }}": 6
gh workflow run rerun.yml -f run_id=${{ github.run_id }} -f attempts=${{ github.run_attempt }} -f retries=${inputs_retries:-5}: 6
python -m pip install FLAG coverage[toml]: 17
python -m coverage combine: 49
mvn -B clean verify: 10
pip install yq: 6
brew install graphicsmagick imagemagick: 9
sw_vers: 24
xpm install FLAG darwin-arm64 FLAG ${{ github.event.inputs.xpm_install_loglevel }} ${{ github.event.inputs.xpm_install_options }}: 6
xpm run build FLAG darwin-arm64: 6
cargo install critcmp: 13
echo "\`\`\`"  >> output: 6
echo "\`\`\`" >> output: 6
cat output: 11
comment="${comment CUSTOM_PATH_DIR: 12
cmake FLAG build FLAG package: 14
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG ${{matrix.build_type}}: 10
cargo clippy FLAG FLAG FLAG -- -D warnings: 30
Get-PSDrive: 13
cargo test -- FLAG=1: 8
cargo llvm-cov FLAG FLAG FLAG lcov.info: 9
pip install -e . CUSTOM_PATH_DIR: 63
pip wheel FLAG -w dist . CUSTOM_PATH_DIR: 13
cargo generate-lockfile -Z minimal-versions: 17
cargo docs-rs: 16
cargo miri test: 23
docker login -u "${{ secrets.QUAY_USERNAME }}" -p "${{ secrets.QUAY_PASSWORD }}" quay.io: 10
USES: Co-qn/google-chat-notification: 21
if test -f tests CUSTOM_PATH_FILE; then PYTHONPATH=. python3 . CUSTOM_PATH_FILE FLAG -c config CUSTOM_PATH_FILE; fi: 10
python3 . CUSTOM_PATH_FILE sdist: 10
python3 . CUSTOM_PATH_FILE bdist: 10
python3 . CUSTOM_PATH_FILE build: 10
python3 . CUSTOM_PATH_FILE install: 10
apt-get update -q: 59
apt-get install -y libterm-readline-gnu-perl locales software-properties-common: 25
locale-gen en_US.UTF-8: 26
ln -f -s CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 25
add-apt-repository -y ppa:gift CUSTOM_PATH_DIR: 25
USES: seanmiddleditch/gha-setup-vsdevenv: 27
scoop install llvm FLAG: 9
cd bin-build: 34
USES: turleypol/actions-status-discord: 18
bundle exec fastlane alpha: 8
curl -Ls "URL | bash: 6
USES: docker://decathlon/release-notes-generator-action:2.0.1: 10
echo "This job is used to prevent the workflow to fail when all other jobs are skipped.": 28
cosign sign ${{ env.REGISTRY }} CUSTOM_PATH_DIR env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}: 9
USES: ./.github/workflows/go-setup: 11
cargo login ${{ secrets.CRATE_API }}: 6
yarn run tsc: 12
USES: harmon758/postgresql-action: 23
go test -v: 21
bin CUSTOM_PATH_FILE FLAG FLAG: 6
USES: julianwachholz/flake8-action: 12
pytest tests/: 45
nuget restore: 34
echo "ENV_VAR" > ENV_VAR: 22
cosign sign -key ENV_VAR horuszup CUSTOM_PATH_DIR github.event.inputs.version }}: 12
cosign sign -key ENV_VAR horuszup CUSTOM_PATH_DIR: 14
az bicep build -f ${{ env.BICEP_FILE_PATH }}: 22
zip -r ${{ env.API_PACKAGE_NAME }} . CUSTOM_PATH_DIR: 14
echo "::set-output name=name::${{ env.RESOURCE_GROUP_NAME }}-${{ env.GITHUB_REPOSITORY_OWNER_PART }}": 44
az group create -l ${{ env.RESOURCE_GROUP_LOCATION }} -n ${{ steps.createResourceGroupName.outputs.name }}: 44
USES: azure/arm-deploy: 50
USES: Azure/functions-action: 30
pip install -r tools CUSTOM_PATH_FILE: 8
python -m build FLAG .: 15
echo "BRANCH_NAME=$(echo ENV_VAR#refs CUSTOM_PATH_DIR | tr / -)" >> ENV_VAR: 21
echo "BRANCH_NAME=$(echo ENV_VAR | tr / -)" >> ENV_VAR: 8
USES: ./.github/actions/setup-rust: 119
USES: ./.github/actions/install-linux-dependencies: 12
cargo install cargo-bundle: 9
cargo bundle FLAG: 6
USES: ./.github/actions/install-nodejs: 7
echo "JAVA_HOME=ENV_VAR8_X64" >> ENV_VAR: 8
mkdir reports: 10
. CUSTOM_PATH_DIR -h: 38
. CUSTOM_PATH_FILE android . CUSTOM_PATH_FILE: 14
melos bootstrap FLAG="ENV_VAR": 29
. CUSTOM_PATH_FILE ios . CUSTOM_PATH_FILE: 12
USES: futureware-tech/simulator-action: 31
. CUSTOM_PATH_FILE macos . CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_FILE linux . CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_FILE windows . CUSTOM_PATH_FILE: 6
melos.bat bootstrap FLAG="ENV_VAR": 6
. CUSTOM_PATH_FILE web . CUSTOM_PATH_FILE: 7
python3 -m pip install -e .: 23
python3 setup.py build: 16
python3 -m pip install setuptools wheel twine: 10
auditwheel repair dist CUSTOM_PATH_FILE: 13
rm -f dist CUSTOM_PATH_FILE: 10
python -m pip install "unpacked_sdist CUSTOM_PATH_DIR: 10
python -c "import alteryx_open_src_update_checker": 7
python test_runner.py: 12
printf -- "FLAG\n:rubygems_api_key: ENV_VAR\n" > ENV_VAR CUSTOM_PATH_DIR: 36
cmake FLAG . FLAG package: 11
python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)": 20
coverage xml -i: 25
coverage report -i: 12
composer run cs:check: 6
Installers CUSTOM_PATH_FILE ${{ steps.set_ver.outputs.VER }}: 19
echo "ENV_VAR" > CUSTOM_PATH_FILE: 22
. CUSTOM_PATH_DIR FLAG test: 10
USES: bufbuild/buf-setup-action: 105
USES: bufbuild/buf-breaking-action: 26
USES: reviewdog/action-eslint: 32
export PATH=$(go env GOPATH) CUSTOM_PATH_DIR: 10
USES: danielmundi/upload-packagecloud: 8
xmake run demo: 20
xmake f -m debug: 7
xmake -r: 17
sudo apt-get install nasm: 12
vcpkg update: 14
sudo git clone URL: 8
cmake FLAG . FLAG=${{matrix.build_type}}: 9
cmake FLAG ./ FLAG=${{matrix.build_type}}: 6
echo "ENV_VAR" > ${{ github.workspace }} CUSTOM_PATH_DIR: 26
python3 -m pip install .: 28
python3 -m pip install numpy: 8
echo "runner_label=${{ matrix.arch[1] }}" >> ENV_VAR: 6
echo "FEX_ROOTFS_MOUNT= CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "FEX_ROOTFS_PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "FEX_ROOTFS=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "ROOTFS=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
git submodule update FLAG FLAG 1: 8
rm -Rf ${{runner.workspace}} CUSTOM_PATH_DIR: 6
cmake FLAG . FLAG ENV_VAR FLAG install: 8
mv ${{runner.workspace}} CUSTOM_PATH_FILE ${{runner.workspace}} CUSTOM_PATH_FILE || true: 27
echo "runner_name=$(hostname)" >> ENV_VAR: 6
USES: tspascoal/get-user-teams-membership: 29
echo "version=$(cat . CUSTOM_PATH_DIR >> ENV_VAR: 14
cd vcpkg: 28
. CUSTOM_PATH_DIR integrate install: 11
git diff FLAG FLAG FLAG > .repo.patch || echo "patch_created=true" >> ENV_VAR: 21
flutter pub run build_runner build FLAG: 36
USES: mdecoleman/pr-branch-name: 12
yarn FLAG frontend install: 6
USES: ./.github/actions/setup-redis-cluster: 14
mkdir -p database: 24
USES: wntrblm/nox: 27
USES: ./.github/actions/install: 107
yarn prepack: 10
yum -y update: 21
yum -y install centos-release-scl-rh epel-release: 9
curl -L URL -o ENV_VAR CUSTOM_PATH_FILE: 8
ln -sf CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 17
USES: al-cheb/configure-pagefile-action: 65
yarn bundle: 16
rm -rf release: 7
mkdir -p release: 11
git config FLAG user.email "user": 7
. CUSTOM_PATH_FILE prepare: 16
rm -Rf . CUSTOM_PATH_FILE: 97
ls -R release: 14
rm ". CUSTOM_PATH_FILE": 29
TAG_VERSION=ENV_VAR:1}: 19
aws s3 cp . CUSTOM_PATH_DIR "${{ env.S3_BUCKET }} CUSTOM_PATH_DIR FLAG: 33
USES: ./init: 7
git tag -d ${{ env.RELEASE_VERSION }} || echo "No such a tag exists before": 7
git tag ${{ env.RELEASE_VERSION }} HEAD: 7
pip install ".[test]": 11
. CUSTOM_PATH_DIR lintDebug: 9
echo "ENV_VAR" | docker login -u "ENV_VAR" FLAG: 51
curl -sSL URL | python -: 34
terraform fmt -check -diff -recursive -no-color: 6
terraform init -input=false: 14
USES: ipfs/download-ipfs-distribution-action: 7
USES: ipfs/start-ipfs-daemon-action: 6
echo ${{ github.ref }}: 26
cd Common && npm install: 49
cd Model && npm install: 47
mkdir BuildTools && wget -O BuildTools CUSTOM_PATH_FILE URL: 8
test -f ~ CUSTOM_PATH_FILE && echo "sucess=true" >> ENV_VAR || echo "sucess=false" >> ENV_VAR: 20
pip install dist CUSTOM_PATH_DIR: 27
tmux -V: 10
sleep 2m: 9
flake8 . FLAG FLAG FLAG=10 FLAG=88 FLAG FLAG: 9
isort FLAG FLAG black . || true: 15
mkdir FLAG FLAG .mypy_cache: 15
mypy FLAG FLAG FLAG . || true: 11
find ./ -mount -maxdepth 1 -exec rm -rf {} \;: 14
exit 1;: 8
. CUSTOM_PATH_DIR FLAG FLAG build: 12
git config FLAG user.email 'ENV_VAR': 22
echo "${{ runner.tool_cache }} CUSTOM_PATH_DIR >> ENV_VAR: 10
USES: falti/dotenv-action: 53
USES: managedkaos/print-env: 16
USES: hyoo-ru/mam_build: 22
go build -o bin CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 9
go build -o "bin CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 17
ginkgo e2e CUSTOM_PATH_DIR: 12
mkdir C: CUSTOM_PATH_DIR: 14
echo "Creating folders...": 6
cd C: CUSTOM_PATH_DIR: 29
mkdir chatgpt: 6
mkdir ffmpeg: 13
Invoke-WebRequest -URI URL -OutFile C: CUSTOM_PATH_FILE: 26
cp -r D:\a\chatgpt-mirai-qq-bot\chatgpt-mirai-qq-bot\* C:\generated_files\chatgpt\: 6
echo "Downloading ffmpeg ...": 6
7z x C: CUSTOM_PATH_FILE -r -oC: CUSTOM_PATH_DIR: 20
echo "Downloading Python3.11 ...": 6
Invoke-WebRequest URL -OutFile C: CUSTOM_PATH_FILE: 6
echo "Downloading get-pip.py ...": 6
echo "import site" >> C: CUSTOM_PATH_DIR: 6
echo "Moving files...": 6
mv D:\a\chatgpt-mirai-qq-bot\chatgpt-mirai-qq-bot\.github\quickstarts\windows\ C: CUSTOM_PATH_DIR: 6
echo "Replacing...": 6
cp C: CUSTOM_PATH_FILE C: CUSTOM_PATH_DIR: 6
7z x C: CUSTOM_PATH_FILE -oC: CUSTOM_PATH_DIR: 6
Copy-Item C:\tmp_files\awesome-chatgpt-qq-presets-master\*  -Destination C:\generated_files\chatgpt\presets\ -Recurse: 6
Invoke-WebRequest -URI URL -O C: CUSTOM_PATH_DIR: 6
echo "Downloading vc_redist.exe...": 6
Invoke-WebRequest -URI URL -O "C:\generated_files\【语音功能依赖】vc_redist.x64.exe": 6
echo "Setting up wkhtmltox": 6
7z x C: CUSTOM_PATH_DIR -oC: CUSTOM_PATH_DIR: 6
cp C: CUSTOM_PATH_FILE C:\generated_files\chatgpt\: 6
echo "Downloading packages...": 6
..\python3.11\python.exe C: CUSTOM_PATH_FILE: 6
..\python3.11\python.exe -m pip install -r requirements.txt: 6
echo "Packing..." : 6
echo ENV_VAR | base64 FLAG > certificate.p12: 18
security default-keychain -s build.keychain: 28
security import certificate.p12 -k build.keychain -P ENV_VAR -T CUSTOM_PATH_DIR: 12
mv . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 125
git fetch origin gh-pages: 32
content="${content CUSTOM_PATH_DIR: 60
npm run test:lint: 15
USES: aws-actions/aws-secretsmanager-get-secrets: 18
git add dist: 6
sfdx plugins:install salesforcedx: 15
echo ${{ secrets.DEVHUB_PREREL_SFDX_URL}} > . CUSTOM_PATH_FILE: 16
sfdx force:lightning:lint force-app CUSTOM_PATH_DIR FLAG: 7
popd > CUSTOM_PATH_DIR: 14
git fetch FLAG=1 FLAG: 9
actionlint: 8
hostname: 20
df: 7
whoami: 41
export cwd=`pwd`: 18
. .scripts CUSTOM_PATH_FILE: 12
.scripts CUSTOM_PATH_FILE: 19
USES: ./.github/actions/cache: 39
cd docs && make html: 28
USES: xu-cheng/latex-action: 6
poetry install FLAG dev: 31
value=`cat release_url CUSTOM_PATH_FILE`: 10
echo ::set-output name=upload_url::$value: 9
yarn ci:build: 11
git config FLAG user.name 'Apify Release Bot': 8
git config FLAG user.email 'noreply': 16
npm install yarn -g: 23
USES: piroor/close-expired-issues-based-on-label: 11
sudo chown -R ENV_VAR:ENV_VAR .: 17
sudo apt update && sudo apt install -y httpie: 10
docker build -f docker CUSTOM_PATH_FILE_version}} CUSTOM_PATH_DIR -t navitia CUSTOM_PATH_DIR .: 15
docker run -v `pwd`: CUSTOM_PATH_DIR  navitia CUSTOM_PATH_DIR: 9
tar FLAG: 6
make build_package: 9
yarn link: 26
npm publish FLAG beta: 17
cd . CUSTOM_PATH_DIR && go test . CUSTOM_PATH_DIR -v -race: 32
python -m pip install .[test]: 44
python -m pip install pytest-github-actions-annotate-failures: 9
USES: python-semantic-release/upload-to-gh-release: 6
flutter packages pub run build_runner build FLAG: 13
cmake FLAG . FLAG ${{env.BUILD_TYPE}}: 10
. CUSTOM_PATH_DIR -V: 11
curl -s URL | bash: 23
gradle FLAG: 6
ci CUSTOM_PATH_DIR: 37
USES: ankane/setup-mysql: 18
USES: machine-learning-apps/pr-comment: 6
USES: JulienKode/team-labeler-action: 6
USES: ./.github/actions/build-setup: 97
USES: ./.github/actions/slack-file: 12
cp . CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 18
USES: diem/actions/create-issue: 7
USES: ./.github/actions/build-teardown: 41
USES: skjnldsv/check-actor-permission: 13
echo "APP_VERSION=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 10
USES: skjnldsv/xpath-action: 10
cd ${{ env.APP_NAME }}: 41
sudo dpkg -i krankerl_0.14.0_amd64.deb: 13
krankerl package: 13
make appstore: 9
NCVERSION=${{ fromJSON(steps.appinfo.outputs.result).nextcloud.min-version }}: 9
unzip latest-ENV_VAR.zip: 9
cd ${{ env.APP_NAME }} CUSTOM_PATH_DIR: 18
tar -xvf ${{ env.APP_NAME }}.tar.gz: 9
echo "${{ secrets.APP_PRIVATE_KEY }}" > ${{ env.APP_NAME }}.key: 9
wget FLAG "URL env.APP_NAME }} CUSTOM_PATH_DIR env.APP_NAME }}.crt": 9
php nextcloud CUSTOM_PATH_DIR integrity:sign-app FLAG=.. CUSTOM_PATH_DIR env.APP_NAME }}.key FLAG=.. CUSTOM_PATH_DIR env.APP_NAME }}.crt FLAG=.. CUSTOM_PATH_DIR env.APP_NAME }} CUSTOM_PATH_DIR env.APP_NAME }}: 9
tar -zcvf ${{ env.APP_NAME }}.tar.gz ${{ env.APP_NAME }}: 9
USES: nextcloud-releases/nextcloud-appstore-push-action: 9
echo "version=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 28
USES: gautamkrishnar/blog-post-workflow: 8
pnpm run dist: 6
git config user.email '41898282+github-actions[bot]': 14
rustup toolchain install stable FLAG minimal FLAG: 28
sudo apt-get install -y xvfb: 13
pip install mpi4py: 9
npm run test:cov: 15
USES: security-code-scan/security-code-scan-add-action: 6
USES: security-code-scan/security-code-scan-results-action: 6
echo "-- install build dependencies --": 8
echo "-- get appimage-builder --": 8
sudo wget -q URL -O CUSTOM_PATH_DIR: 25
qmake.exe Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols: 17
mkdir ..\windows-build: 23
Get-ChildItem -Recurse -Include *.exe,*.dll | % { Copy-Item ENV_VAR.FullName -force -destination ..\windows-build }: 18
windeployqt.exe FLAG ..\windows-build FLAG ..\windows-build FLAG ..\windows-build\seamly2d.exe: 18
windeployqt.exe FLAG FLAG ..\windows-build FLAG ..\windows-build FLAG ..\windows-build\seamlyme.exe: 18
copy .\dist\seamly2d-installer.nsi ..\windows-build\: 18
copy .\dist\win\VC_redist.x86.exe ..\windows-build\: 17
copy .\dist\win\VC_redist.x64.exe ..\windows-build\: 17
copy 'c:\Program Files\OpenSSL\libcrypto-1_1-x64.dll' ..\windows-build\: 17
copy 'c:\Program Files\OpenSSL\libssl-1_1-x64.dll' ..\windows-build\: 17
copy 'c:\Program Files\OpenSSL\bin\capi.dll' ..\windows-build\: 17
copy 'c:\Program Files\OpenSSL\bin\dasync.dll' ..\windows-build\: 17
New-Item '..\windows-build\translations' -ItemType Directory -Force | Out-Null: 17
Copy-Item 'share\translations\*.qm' '..\windows-build\translations' -Force -Recurse: 17
cd ..\windows-build\: 34
& 'C:\Program Files (x86)\NSIS\makensis.exe' seamly2d-installer.nsi: 23
C:\"Program Files"\7-Zip\7z.exe a Seamly2D-windows.zip Seamly2D-installer.exe: 9
USES: ./hack/actions/e2e: 13
. CUSTOM_PATH_DIR compileJava: 17
pip install pytest-github-actions-annotate-failures: 12
pnpm run test:coverage: 10
rustup target add thumbv6m-none-eabi: 17
git fetch FLAG FLAG FLAG -f: 55
conda config FLAG always_yes True: 17
conda install -c pyviz "pyctdev>=0.5": 16
doit ecosystem_setup: 18
conda activate test-environment: 123
sleep 3: 75
bokeh sampledata: 10
cp ENV_VAR ENV_VAR: 6
doxygen Doxyfile: 17
git config FLAG user.name "QMK Bot": 7
git config FLAG user.email "hello": 12
git merge origin CUSTOM_PATH_DIR: 32
USES: Songmu/tagpr: 7
yarn FLAG . CUSTOM_PATH_DIR build: 15
zip -r .. CUSTOM_PATH_FILE .: 23
sudo umount CUSTOM_PATH_DIR: 13
USES: K-Phoen/semver-release-action: 6
pnpm run typecheck: 19
USES: py-actions/py-dependency-install: 50
sudo apt install libenchant-2-dev: 8
make doc-spelling: 7
pip install -U twine wheel: 10
echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache: 11
echo "Predeploy step": 7
echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login FLAG: 8
USES: aio-libs/create-release: 19
USES: ./setup-pandoc: 6
USES: ./setup-r: 11
USES: ./setup-r-dependencies: 8
. CUSTOM_PATH_DIR -error .: 6
python -m twine check FLAG dist CUSTOM_PATH_DIR: 9
python sgkit-copy CUSTOM_PATH_FILE: 7
echo "version=$(. CUSTOM_PATH_DIR org.apache.maven.plugins:maven-help-plugin:3.3.0:evaluate -DforceStdout -Dexpression=project.version -q)" >> ENV_VAR: 10
. CUSTOM_PATH_DIR -B -q -ff -DskipTests -ntp source:jar deploy: 12
go mod tidy && git diff FLAG FLAG: 6
source continuous_integration CUSTOM_PATH_FILE: 25
set -vxeuo pipefail: 11
composer require phpunit CUSTOM_PATH_DIR FLAG FLAG FLAG: 6
php src CUSTOM_PATH_FILE: 6
tar xvf .. CUSTOM_PATH_FILE root CUSTOM_PATH_DIR: 9
(test -f root CUSTOM_PATH_FILE256sum && echo ::set-output name=EXISTS::true) || echo ::set-output name=EXISTS::false: 7
yarn build-docs: 9
yarn build:docs: 26
IMAGE_TAG=${{ inputs.image-tag }}: 11
bash . CUSTOM_PATH_FILE FLAG $(pwd) CUSTOM_PATH_DIR FLAG .. CUSTOM_PATH_DIR FLAG .. CUSTOM_PATH_DIR FLAG ENV_VAR: 15
docker push ytsaurus CUSTOM_PATH_DIR: 31
docker tag ytsaurus CUSTOM_PATH_DIR ytsaurus CUSTOM_PATH_DIR: 10
IMAGE_TAG=${{ inputs.image-tag }}-relwithdebinfo: 9
mv .. CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 12
mv .. CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR || true: 7
npm install codecov -g: 9
npm run install:all: 8
yarn lerna bootstrap: 11
npm config set ' CUSTOM_PATH_FILE CUSTOM_PATH_DIR ENV_VAR: 8
npm config set :registry URL: 9
git checkout HEAD -- package.json: 6
mkdir -p CUSTOM_PATH_FILE: 15
yarn FLAG packages CUSTOM_PATH_DIR install: 7
sh scripts CUSTOM_PATH_DIR runner.os }} CUSTOM_PATH_FILE: 17
INSTANCE_NAME="id-ENV_VAR-ENV_VAR": 20
sudo timedatectl set-timezone 'Asia CUSTOM_PATH_DIR: 7
USES: ravsamhq/notify-slack-action: 90
USES: Xotl/cool-github-releases: 10
ls -R .: 88
USES: ./build/centos-stream-8/pkg-builder: 8
python -m pip install -r docs CUSTOM_PATH_FILE: 47
sudo npm install -g markdown-link-check: 13
npm run validate: 19
poetry run pip install FLAG pip: 9
echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> ENV_VAR: 10
git fetch FLAG -f || true: 11
changelog="${changelog CUSTOM_PATH_DIR: 24
changelog="${changelog CUSTOM_PATH_DIR : 6
USES: kittaakos/upload-artifact-as-is: 22
composer test-coverage: 6
pnpm run test:unit: 6
cd repo: 13
npm install -g cspell: 14
echo "::set-output name=PACKAGE_VERSION::ENV_VAR": 7
USES: ./.github/actions/install-with-retries: 18
cp .github CUSTOM_PATH_FILE .changeset: 6
vendor CUSTOM_PATH_DIR process src FLAG: 10
USES: unsplash/comment-on-pr: 23
git push origin ${{ github.ref_name }}: 8
cd FrameworkBenchmarks: 8
HUSKY=0 npm ci: 24
git config FLAG core.quotePath false: 7
echo "PACKAGE_VERSION=ENV_VAR" >> ENV_VAR: 23
composer config minimum-stability stable: 9
pip install fire: 7
python -m dev vendor-robocorp-ls-core: 10
python -u .. CUSTOM_PATH_FILE -rfE -otests_output -vv .: 6
pip install -U build twine: 6
USES: camptocamp/initialise-gopass-summon-action: 12
python3 -m venv ~ CUSTOM_PATH_DIR: 8
USES: ./.github/actions/setup-zui: 8
USES: ./.github/actions/build-zui: 6
make integration: 29
USES: ./.github/actions/upload-coverage: 19
pip install coverage[toml]: 8
npm run build:types: 21
if [ -n "$(git status types FLAG)" ]; then echo "Missing types. Update types by running 'npm run build:types'"; exit 1; else echo "All types are valid"; fi: 6
sudo apt-get install -y libsndfile-dev libgomp1: 15
curl URL | bash: 64
sudo tar xzvfC cilium-linux-amd64.tar.gz CUSTOM_PATH_DIR: 31
rm cilium-linux-amd64.tar.gz: 7
USES: ankane/setup-postgres: 18
git update-index FLAG: 9
git diff-index FLAG HEAD --: 14
yarn test-ci: 14
npm run public-api:check: 10
USES: pozil/auto-assign-issue: 42
USES: ./../action/.github/actions/setup-swift: 9
npm run test:node: 53
USES: bluefireteam/melos-action: 57
melos run analyze: 11
npm run test:headless: 6
qmake Seamly2D.pro -r CONFIG+=no_ccache CONFIG+=noDebugSymbols: 14
echo "PRERE=yes" >> ENV_VAR: 6
echo "PRERE=no" >> ENV_VAR: 6
sudo apt install zlib1g-dev libpcre3-dev gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}: 7
go fmt . CUSTOM_PATH_DIR && git status && [[ -z `git status -s` ]]: 6
if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi: 7
yarn lint:ci: 26
sudo chown root:root /: 6
sudo snap install snapcraft FLAG: 31
npm i pnpm -g: 23
pnpm config set store-dir ~ CUSTOM_PATH_DIR: 6
pnpm config set store-dir ~ CUSTOM_PATH_DIR              : 8
docker-compose FLAG: 18
USES: k1LoW/octocov-action: 6
touch dist CUSTOM_PATH_DIR: 18
USES: jimschubert/query-tag-action: 34
poetry run black FLAG .: 17
poetry run pytest FLAG=./ FLAG=xml: 9
npm run lint:js:report: 8
USES: ataylorme/eslint-annotate-action: 34
composer FLAG validate FLAG: 6
vendor CUSTOM_PATH_DIR -q FLAG=checkstyle FLAG ignore_errors_on_exit 1 FLAG ignore_warnings_on_exit 1 | cs2pr FLAG: 6
phpstan analyse: 8
make modules: 7
USES: r7kamura/rubocop-problem-matchers-action: 30
If ($lastExitCode -ne "0") { throw "Previous command returned $lastExitCode" }: 6
cat DIRECTORY.md: 8
git add DIRECTORY.md: 12
git push FLAG origin HEAD:ENV_VAR || true: 15
dotnet restore src: 16
npm install -g node-gyp: 39
export CUDNN_DIR= CUSTOM_PATH_DIR: 7
export CUDA_DIR= CUSTOM_PATH_DIR: 7
export FF_HOME=$(pwd): 26
pushd ~ CUSTOM_PATH_DIR: 11
chromedriver FLAG: 8
sudo curl -L -o CUSTOM_PATH_DIR URL: 17
cd assets: 16
USES: sushichop/action-repository-permission: 8
cd config CUSTOM_PATH_DIR: 9
npm i FLAG FLAG FLAG FLAG: 9
mvn -B install FLAG pom.xml: 7
cd samples CUSTOM_PATH_DIR mvn -B package FLAG pom.xml: 16
rm setup.py: 9
make install-deps: 18
USES: ./.github/actions/pgx-init: 9
brew install FLAG python python: 6
brew reinstall gcc: 7
Get-CIMInstance -Class Win32_Processor | Select-Object -Property Name: 7
which ccache: 9
ccache -p: 23
cp C: CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 7
USES: WyriHaximus/github-action-create-milestone: 16
echo "TYPE=GH Issue" >> ENV_VAR: 8
if [[ "${{ contains(github.event.issue.labels.*.name, 'size CUSTOM_PATH_DIR }}" == "true" ]]; then LABELS+="\"size CUSTOM_PATH_DIR "; fi: 12
if [[ ${#LABELS} != 1 ]]; then LABELS=ENV_VAR::-2}"]"; else LABELS+="]"; fi: 11
echo "LABELS=ENV_VAR" >> ENV_VAR: 10
git config user.email ${{ secrets.GIT_EMAIL }}: 6
git config user.name ${{ secrets.GIT_NAME }}: 6
npm version FLAG=false ${{ github.event.inputs.version }}: 7
echo "tags=ENV_VAR" >> ENV_VAR: 15
go install -ldflags="-s -w" github.com CUSTOM_PATH_DIR: 10
composer run-script lint: 11
npm run types: 11
docker network create acme: 108
sudo chmod 777 examples CUSTOM_PATH_FILE: 54
docker exec -i acme-sh acme.sh FLAG URL FLAG 'acme-sh' FLAG -d acme-sh.acme FLAG FLAG FLAG 3 FLAG FLAG: 18
mkdir lego: 49
docker run -i -v ENV_VAR CUSTOM_PATH_FILE/ FLAG FLAG lego FLAG acme goacme CUSTOM_PATH_DIR -s URL -a FLAG "lego" -d lego.acme FLAG run: 43
sudo openssl verify -CAfile examples CUSTOM_PATH_FILE -untrusted examples CUSTOM_PATH_FILE lego CUSTOM_PATH_FILE: 41
echo TAG_NAME=$(cat acme_srv CUSTOM_PATH_FILE | grep -i __version__ | head -n 1 | sed 's CUSTOM_PATH_DIR = CUSTOM_PATH_DIR | sed s CUSTOM_PATH_DIR >> ENV_VAR: 31
echo "Latest tag is ${{ env.TAG_NAME }}": 31
sudo sed -i "s CUSTOM_PATH_DIR env.TAG_NAME }} CUSTOM_PATH_DIR examples CUSTOM_PATH_FILE: 28
cat examples CUSTOM_PATH_FILE: 29
echo "path is ${{ steps.rpm.outputs.rpm_dir_path }}": 27
sudo chmod -R 777 data: 31
sudo cp ${{ steps.rpm.outputs.rpm_dir_path }}noarch CUSTOM_PATH_DIR env.TAG_NAME }}-1.0.noarch.rpm data: 23
sudo cp examples CUSTOM_PATH_FILE data: 31
sudo cp test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE data CUSTOM_PATH_DIR: 23
sudo cp .github CUSTOM_PATH_FILE data CUSTOM_PATH_FILE: 47
cat examples CUSTOM_PATH_DIR | docker build -t almalinux-systemd -f - . FLAG: 28
docker run -d -id FLAG FLAG acme FLAG=acme-srv -v "$(pwd) CUSTOM_PATH_DIR almalinux-systemd: 20
docker exec acme-srv sh CUSTOM_PATH_FILE: 29
openssl verify -CAfile data CUSTOM_PATH_FILE -untrusted data CUSTOM_PATH_FILE acme-sh CUSTOM_PATH_FILE: 26
docker exec acme-srv tar cvfz CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 33
sudo cp -rp data/ ${{ github.workspace }} CUSTOM_PATH_DIR: 32
sudo cp -rp acme-sh/ ${{ github.workspace }} CUSTOM_PATH_DIR: 54
docker exec acme-srv cat CUSTOM_PATH_DIR > ${{ github.workspace }} CUSTOM_PATH_FILE: 28
sudo tar -C ${{ github.workspace }} CUSTOM_PATH_DIR -cvzf ${{ github.workspace }} CUSTOM_PATH_FILE data acme-srv.log acme-sh: 20
ninja test: 14
curl -o- -L URL | bash: 27
git config FLAG user.name "instructure-ui-ci" && git config FLAG user.email "instructure-ui-ci": 8
mkdir packages CUSTOM_PATH_DIR: 11
ls -n CUSTOM_PATH_DIR | grep Xcode*: 12
sudo xcode-select -s CUSTOM_PATH_DIR matrix.xcode }}.app: 13
brew install qt: 13
USES: kanga333/comment-hider: 9
cd ENV_VAR CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE: 18
 CUSTOM_PATH_DIR scripts CUSTOM_PATH_FILE: 11
USES: Akryum/release-tag: 7
chmod +x docker-compose: 13
USES: ./.github/actions/artifacts-restore: 10
USES: ./.github/actions/require-empty-diff: 9
bundle exec rails db:setup: 11
USES: errata-ai/vale-action: 42
USES: getsentry/action-visual-snapshot: 10
USES: ./.github/actions/setup-pip: 11
make run-acceptance: 6
USES: fossas/fossa-action: 50
python3 -m pip install meson ninja: 9
meson compile -C "${{github.workspace}} CUSTOM_PATH_DIR FLAG: 16
meson test -C "${{github.workspace}} CUSTOM_PATH_DIR FLAG: 15
${{ github.workspace }} CUSTOM_PATH_FILE: 52
sudo apt-get install -y libpq-dev postgresql: 6
echo "host    all             all             127.0.0.1 CUSTOM_PATH_DIR            md5" > sudo tee -a CUSTOM_PATH_FILE: 6
sudo service postgresql restart && sleep 3: 12
sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';": 6
mkdir -p target CUSTOM_PATH_DIR: 41
USES: ./head/.github/actions/setup_env: 14
export LC_ALL="C.UTF-8": 51
. CUSTOM_PATH_FILE -n -g -p ENV_VAR CUSTOM_PATH_DIR 2>&1: 12
if [ "$(ps -ef | grep 'mo-service' | grep -v "grep" | wc -l)" -gt 0 ]; then curl URL -o ${{ github.workspace }} CUSTOM_PATH_FILE; else echo 'current mo-service has already crashed'; exit 1; fi: 12
if [ "$(ps -ef | grep 'mo-service' | grep -v "grep" | wc -l)" -gt 0 ]; then pkill -9 mo-service; else echo 'current mo-service has already crashed'; exit 1; fi: 8
mv ${{ github.workspace }} CUSTOM_PATH_FILE ${{ github.workspace }} CUSTOM_PATH_DIR: 27
USES: chf007/action-wechat-work: 10
USES: 10up/action-wordpress-plugin-build-zip: 8
USES: JamesSingleton/is-organization-member: 10
git clone URL ENV_VAR CUSTOM_PATH_DIR: 14
go get -v -t . CUSTOM_PATH_DIR: 9
go test . CUSTOM_PATH_DIR -race: 8
USES: github/webpack-bundlesize-compare-action: 6
python -m pip install FLAG .: 39
USES: Legion2/download-release-action: 6
cd AppDir: 11
yarn -s test:ci: 13
TAG=${{ github.ref_name }}: 7
ruby -v: 34
echo ENV_VAR > mod_init: 6
echo ENV_VAR > path: 6
if [ ! -z ENV_VAR ]; then echo ENV_VAR > moduleshome; fi: 6
. CUSTOM_PATH_DIR assembleDebug FLAG=plain: 9
curl FLAG '=https' FLAG.2 -sSf URL | sudo bash -s -- FLAG CUSTOM_PATH_DIR: 20
pip install -r requirements-docs.txt: 19
sudo pip3 install meson: 23
dotnet workload install maui FLAG: 10
sudo xcode-select -s " CUSTOM_PATH_FILE": 18
docker login ${{ secrets.OSS_REGISTRY_URL }} -u ${{ secrets.OSS_DOCKER_USERNAME }} -p "${{ secrets.OSS_REGISTRY_TOKEN }}" : 8
echo "BRANCH_NAME=${{ github.head_ref }}" >> ENV_VAR: 6
USES: erezrokah/pr-labeler-action: 8
USES: carvel-dev/setup-action: 19
cd client: 31
git config FLAG user.email "mail": 6
rm -rf docs: 20
git checkout -b gh-pages: 12
git push origin gh-pages -f: 9
chmod +x run.sh: 7
sudo apt install libbpf-dev clang llvm libelf-dev libpcap-dev gcc-multilib build-essential: 7
sudo . CUSTOM_PATH_DIR -t 1: 6
dotnet pack FLAG Release: 32
nuget push .\bin\Release\*.nupkg -SkipDuplicate -Source URL: 11
USES: dbelyaev/action-checkstyle: 10
echo "timestamp=$(date +"%s")" >> ENV_VAR: 6
USES: warchant/setup-sonar-scanner: 6
just lint: 11
cmake FLAG . FLAG ${{matrix.build_type}} FLAG $threads: 10
echo "version=$pkgVersion" >> ENV_VAR: 6
USES: juliangruber/find-pull-request-action: 9
USES: juliangruber/merge-pull-request-action: 16
python -m pip install poetry pip: 12
poetry install -n: 18
npm install -g pyright: 18
rm -rf mypy_boto3_output CUSTOM_PATH_DIR: 9
. CUSTOM_PATH_FILE master: 7
wget ENV_VAR: 29
ZIP_NAME=ENV_VAR##* CUSTOM_PATH_DIR: 10
DIR_NAME=ENV_VAR%.*}: 10
unzip ENV_VAR: 20
cp ENV_VAR CUSTOM_PATH_FILE python CUSTOM_PATH_DIR: 6
go get -u golang.org CUSTOM_PATH_DIR: 45
lintrunner init: 6
exit $exit_code: 6
npm run tslint: 12
sudo apt install libdbus-1-dev libolm-dev: 9
ls matrix_commander: 9
matrix-commander FLAG password FLAG "ENV_VAR" FLAG "ENV_VAR" FLAG "ENV_VAR" FLAG "ci" FLAG "ENV_VAR" -m "matrix-commander posted from CI (ENV_VAR / ENV_VAR)": 7
matrix-commander -m "matrix-commander CI log out" FLAG me: 7
echo "::add-matcher::ENV_VAR CUSTOM_PATH_FILE": 12
sudo apt-get -y install podman: 7
docker system prune -a -f: 18
python -m pip install ".[test]": 11
python . CUSTOM_PATH_FILE FLAG: 16
export BUILD_REASON=Schedule: 35
USES: fleskesvor/create-release: 9
USES: firebase/firebase-admin-node/.github/actions/send-tweet: 6
rustup target add aarch64-apple-ios: 15
cargo +nightly fmt FLAG -- FLAG: 39
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:iron-desktop: 6
ls dist/: 31
cd tmp: 23
make generate -B: 328
docker run FLAG -p 80:80 FLAG shop -d dockware CUSTOM_PATH_DIR: 320
docker logs shop: 326
cd tests CUSTOM_PATH_DIR && make install -B: 326
USES: ./source/.github/actions/generic-ci: 6
USES: okteto/login: 6
USES: thomaseizinger/keep-a-changelog-new-release: 15
git push origin HEAD:main: 24
git push origin FLAG: 36
npm run test-node: 10
cd Build: 32
USES: Trim21/setup-poetry: 13
USES: Trim21/install-poetry-project: 9
doctl registry login: 7
npm run build-lib: 6
git config FLAG user.email "ciro.spaciari": 7
git config FLAG user.name "Ciro Spaciari": 7
git push "URL secrets.BUILDTOKEN }} CUSTOM_PATH_FILE": 7
make -C "ENV_VAR" check: 6
USES: erlef/setup-elixir: 39
aws s3 sync FLAG . CUSTOM_PATH_DIR s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 8
echo "::set-output name=branch_name::ENV_VAR#refs CUSTOM_PATH_DIR: 8
USES: ./.github/actions/setup-js-env: 13
pip uninstall brainpy -y: 12
flake8 brainpy/ FLAG FLAG=E9,F63,F7,F82 FLAG FLAG: 8
flake8 brainpy/ FLAG FLAG FLAG=10 FLAG=127 FLAG: 8
pytest brainpy/: 6
USES: YOCKOW/Action-setup-swift: 11
sudo apt-get install ENV_VAR: 8
cd SwiftGtk: 26
swift package clean: 10
rm -rf .build CUSTOM_PATH_DIR: 8
USES: reviewdog/action-rubocop: 10
npm pack FLAG: 13
$env:CHROMEDRIVER_FILEPATH=(Join-Path $env:CHROMEWEBDRIVER chromedriver.exe): 6
cd benches: 12
npm run build:deploy: 6
USES: reviewdog/action-staticcheck: 14
npm ci FLAG=optional: 18
USES: ScribeMD/rootless-docker: 9
podman info: 10
echo "DOCKER_HOST=unix: CUSTOM_PATH_FILE" >> ENV_VAR: 7
node packages CUSTOM_PATH_FILE: 21
. CUSTOM_PATH_DIR publish -Pstaging: 13
LABELS="[": 7
if [[ "${{ contains(github.event.issue.labels.*.name, 'type CUSTOM_PATH_DIR }}" == "true" ]]; then LABELS+="\"type CUSTOM_PATH_DIR "; fi: 13
USES: google/wireit: 57
echo "::set-output name=short_sha::$(git rev-parse FLAG HEAD)": 11
USES: fifsky/ssh-action: 12
USES: AsasInnab/regex-action: 8
USES: javalent/workflows/actions/discord-embed: 6
go test -cover . CUSTOM_PATH_DIR: 12
USES: actions/github: 16
make flake8: 22
USES: mujo-code/puppeteer-headful: 7
USES: aevea/action-kaniko: 14
sudo apt install jq -y: 14
sudo add-apt-repository ppa:beineri CUSTOM_PATH_DIR -y: 8
yarn jest FLAG: 14
echo "==========": 8
USES: Azure/login: 70
echo "::set-output name=tag::ENV_VAR#refs CUSTOM_PATH_DIR: 16
src CUSTOM_PATH_FILE: 170
cd src && npm test: 11
## Update secerts: 13
sed -i "s#openReplayContainerRegistry.*#openReplayContainerRegistry: \"${{ secrets.OSS_REGISTRY_URL }}\"#g" vars.yaml: 13
sed -i "s CUSTOM_PATH_DIR \"changeMePassword\" CUSTOM_PATH_DIR \"${{ secrets.OSS_PG_PASSWORD }}\" CUSTOM_PATH_DIR vars.yaml: 7
sed -i "s CUSTOM_PATH_DIR \"changeMeMinioAccessKey\" CUSTOM_PATH_DIR \"${{ secrets.OSS_MINIO_ACCESS_KEY }}\" CUSTOM_PATH_DIR vars.yaml: 6
sed -i "s CUSTOM_PATH_DIR \"changeMeMinioPassword\" CUSTOM_PATH_DIR \"${{ secrets.OSS_MINIO_SECRET_KEY }}\" CUSTOM_PATH_DIR vars.yaml: 6
sed -i "s CUSTOM_PATH_DIR \"SetARandomStringHere\" CUSTOM_PATH_DIR \"${{ secrets.OSS_JWT_SECRET }}\" CUSTOM_PATH_DIR vars.yaml: 6
sed -i "s CUSTOM_PATH_DIR \"\" CUSTOM_PATH_DIR \"${{ secrets.OSS_DOMAIN_NAME }}\" CUSTOM_PATH_DIR vars.yaml: 6
sed -i " CUSTOM_PATH_DIR    tag: ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 11
mv openreplay CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 11
rm -rf  openreplay CUSTOM_PATH_DIR: 11
mv CUSTOM_PATH_DIR openreplay CUSTOM_PATH_DIR: 11
echo "::set-output name=mod-cache::$(go env GOMODCACHE)": 7
curl -LO URL -s URL: 45
sudo mv . CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 58
cat CUSTOM_PATH_DIR || true: 6
cat builddir CUSTOM_PATH_FILE || true: 7
cmake -B ${{github.workspace}} CUSTOM_PATH_DIR: 7
git version: 11
chmod a+x builder: 9
echo "dir=$(corepack yarn config get cacheFolder)" >> ENV_VAR: 12
USES: shalzz/zola-deploy-action: 16
yarn FLAG FLAG 1000000: 44
sudo apt install lcov: 14
bin CUSTOM_PATH_DIR db:setup: 9
echo "yarn-cache-dir=$(yarn cache dir)" >> ENV_VAR: 9
docker-compose -f . CUSTOM_PATH_FILE build -m 8g: 14
git lfs fetch FLAG: 8
git config user.name "GitHub Action": 9
git config user.email "action": 14
USES: swiftwasm/swiftwasm-action: 10
mamba env update -f ci CUSTOM_PATH_FILE: 8
pushd docs: 21
bundle exec ruby scripts CUSTOM_PATH_FILE: 7
gem install bundler:2.2.9: 7
bundle exec rake static:dump: 6
git push && git push FLAG: 11
USES: pullreminders/slack-action: 13
pip install black==22.3.0: 13
flake8 FLAG: 34
sudo apt-get install libgpgme-dev libldap2-dev libsasl2-dev swig: 6
sudo systemctl start docker: 14
doctl registry login FLAG 600: 14
docker tag m3o CUSTOM_PATH_DIR registry.digitalocean.com CUSTOM_PATH_DIR: 6
docker build -t ENV_VAR .: 8
docker tag "ENV_VAR" "ENV_VAR CUSTOM_PATH_DIR: 8
if [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; fi: 6
echo NPM_VERSION=$(node -e "console.log(require('. CUSTOM_PATH_FILE);")-ENV_VAR-$(date +"%m-%d-%Y")-ENV_VAR >> ENV_VAR: 7
make install DESTDIR=ENV_VAR CUSTOM_PATH_DIR: 13
USES: Azure/get-keyvault-secrets: 16
USES: aws-actions/closed-issue-message: 24
USES: wow-actions/contributors-list: 7
dotnet restore src CUSTOM_PATH_FILE}}: 31
dotnet build src CUSTOM_PATH_FILE}} FLAG Release FLAG -p:Deterministic=true: 56
dotnet test test CUSTOM_PATH_FILE: 55
dotnet pack src CUSTOM_PATH_FILE}} FLAG Release: 9
nuget push ** CUSTOM_PATH_FILE -Source URL -ApiKey ${{ secrets.NUGET_TOKEN }} -SymbolApiKey ${{ secrets.NUGET_TOKEN }}: 55
gh release create ${{ github.ref_name }} FLAG ${{ github.ref_name }} FLAG FLAG "See [CHANGELOG](URL github.ref_name }} CUSTOM_PATH_FILE) for details." FLAG: 58
git checkout -b $branch: 8
git push origin $branch: 6
jlpm playwright install chromium: 9
USES: ifaxity/wait-on-action: 17
yarn workspace website build: 9
yarn workspace website algolia-sync: 10
git diff website CUSTOM_PATH_FILE: 11
OUTPUT=$(git diff website CUSTOM_PATH_FILE): 9
OUTPUT="ENV_VAR CUSTOM_PATH_DIR: 79
echo "::set-output name=result::ENV_VAR": 45
echo "JAVA_HOME=${{ steps.setup-java-11.outputs.path }}" >> ENV_VAR: 13
.github CUSTOM_PATH_FILE >> gradle.properties: 11
cat gradle.properties: 29
. CUSTOM_PATH_DIR \: 26
echo "Param file path is: ${{ env.ParamFilePath }}": 6
USES: Azure/cli: 29
wget URL env.kubeloginversion }} CUSTOM_PATH_FILE: 6
unzip kubelogin-linux-amd64.zip: 6
sudo mv bin CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 16
kubelogin convert-kubeconfig -l azurecli: 6
USES: ./.github/actions/skip-ci: 7
. CUSTOM_PATH_DIR -B clean install -Prelease,docker -Dmaven.javadoc.skip=true -Dmaven.test.skip=true: 10
. CUSTOM_PATH_DIR -B clean install -DskipTests -f . CUSTOM_PATH_FILE: 8
cd . CUSTOM_PATH_DIR docker-compose logs -t FLAG="all" && cd .. CUSTOM_PATH_DIR cd .. CUSTOM_PATH_DIR: 6
. CUSTOM_PATH_DIR test -f . CUSTOM_PATH_FILE: 6
USES: docker://archlinux:latest: 10
python3.8 -m venv ${{env.venv_dir}}: 13
. ${{env.venv_dir}} CUSTOM_PATH_DIR: 23
pip install wheel==0.38.4: 13
python -m pip install setuptools setuptools-scm wheel twine check-manifest: 9
python -m pip wheel . -w dist FLAG: 6
yarn test:emulator: 6
cd functions: 12
export DISPLAY=:90: 7
Xvfb -ac :90 -screen 0 1280x1024x24 > CUSTOM_PATH_DIR 2>&1 &: 6
unzip preview-spec.zip: 11
echo 'EVENT_JSON<<EOF' >> ENV_VAR: 11
cat event.json >> ENV_VAR: 11
echo "PR_NUMBER=${{ fromJSON(env.EVENT_JSON).number }}" >> ENV_VAR: 11
echo "PR number: ${{ env.PR_NUMBER }}": 11
echo "Compose file hash: ${{ env.COMPOSE_FILE_HASH }}": 8
cat event.json: 11
echo "$(go env GOPATH) CUSTOM_PATH_DIR >> ENV_VAR: 106
make cli: 20
mkdir Release: 9
cd Release: 19
. CUSTOM_PATH_DIR apiCheck: 16
yarn install FLAG 1: 20
bundle exec fastlane test: 15
cat > . CUSTOM_PATH_FILE <<EOF: 6
cat go.mod: 10
yarn workspace query-node-root build: 6
yarn install FLAG FLAG 120000: 11
deno task test: 26
deno fmt FLAG: 28
set -o errexit: 20
python -m pip install -U pip setuptools wheel: 52
python -m pip install -U build: 15
python -m pip install -e .[all]: 14
USES: uibcdf/action-build-and-upload-conda-packages: 7
npm run development: 17
make lint-ui: 7
make test-ui: 8
echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ENV_VAR FLAG: 10
poetry build FLAG wheel: 11
apt-get update -qq: 25
USES: ./.github/actions/version: 14
USES: ./.github/actions/build_ruby: 9
USES: ./.github/actions/build_node: 9
python -m pip install pytest-cov: 12
brew install llvm ninja nasm: 7
pip3 install -r utils CUSTOM_PATH_FILE: 15
unzip latest: 24
mv gn CUSTOM_PATH_DIR: 13
rm -rf out: 25
export LLVM_BIN_PATH="$(brew FLAG llvm) CUSTOM_PATH_DIR: 10
USES: vmactions/netbsd-vm: 17
npm install -g gulp: 13
brew install gsl: 8
chmod +x install.sh: 20
cp -r Release open-ephys: 6
cp .. CUSTOM_PATH_DIR open-ephys: 6
user_info="X-JFrog-Art-Api:$artifactoryApiKey": 6
curl -H $user_info -T $zipfile "URL: 6
curl -H $user_info -T $installer "URL: 6
echo "${{ github.event.pull_request.head.sha }}" >SOURCE_VERSION: 8
echo "BAZEL_VERSION=$(cat .bazelversion)" >> ENV_VAR: 7
echo "Digests:": 7
curl -L URL env.BOM_VERSION }} CUSTOM_PATH_DIR -o bom: 7
python scripts CUSTOM_PATH_FILE FLAG pypi: 16
pip install dist CUSTOM_PATH_DIR env.PACKAGE_NAME }}-*.whl FLAG: 16
shasum -a 256 ENV_VAR > ENV_VAR.sha256: 12
pip install dist CUSTOM_PATH_DIR env.PACKAGE_NAME }}-*universal2.whl FLAG: 7
python -m pip install dist CUSTOM_PATH_DIR env.PACKAGE_NAME }}-*.whl FLAG: 7
earthly FLAG: 10
rustc FLAG: 76
echo "OK": 8
tar -xf musl-1.2.1.tar.gz && cd musl-1.2.1: 11
make && sudo make install: 31
GO111MODULE="on" go get sigs.k8s.io CUSTOM_PATH_DIR: 50
curl -LO URL && sudo install kubectl CUSTOM_PATH_DIR: 24
USES: canastro/copy-file-action: 11
pip install -r dev_tools CUSTOM_PATH_FILE: 18
yarn build:ci: 19
USES: dswistowski/surge-sh-action: 13
cd CUSTOM_PATH_DIR  # to not be in Git clone folder: 10
docker-compose up -d postgres: 20
sudo apt-get install libpcap-dev: 23
make test-cli: 17
USES: whoan/docker-build-with-cache-action: 24
echo ENV_VAR > checksum.txt: 7
curl -sSLo ENV_VAR CUSTOM_PATH_FILE ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} : 13
echo "ENV_VAR CUSTOM_PATH_DIR env.SONAR_SCANNER_VERSION }}-linux CUSTOM_PATH_DIR >> ENV_VAR: 30
curl -sSLo ENV_VAR CUSTOM_PATH_FILE ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}: 26
sonar-scanner FLAG sonar.host.url="${{ env.SONAR_SERVER_URL }}" FLAG sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}": 19
USES: mkroening/rust-toolchain-toml: 14
sudo apt-get install qemu-system-x86: 8
USES: pyTooling/Actions/releaser: 23
pip install -U tox: 22
yarn test:cov: 17
yarn style: 12
git clone FLAG=1 URL CUSTOM_PATH_DIR: 9
USES: einaregilsson/build-number: 17
docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}: 25
git tag: 14
python3 tools CUSTOM_PATH_FILE: 40
echo "ENV_VAR" | tr -d '\r' > UnityLicenseFile.ulf: 6
curl -LJO URL: 21
export PATH=ENV_VAR:cmake-ENV_VAR-linux-x86_64 CUSTOM_PATH_DIR: 6
echo "**** Configuring Ascent": 7
cmake -S src -B build -C ascent-config.cmake -DCMAKE_INSTALL_PREFIX=install: 6
echo "**** Building Ascent": 8
echo "**** Installing Ascent": 8
USES: ./.github/actions/artifacts: 16
dotnet restore .: 7
sudo apt update FLAG: 17
EXT_VERSION=`node . CUSTOM_PATH_FILE`: 15
git clone FLAG ENV_VAR FLAG 1 URL native CUSTOM_PATH_DIR: 17
chmod +x mvnw: 32
. CUSTOM_PATH_DIR clean verify: 16
printf "ENV_VAR" | base64 FLAG > ~ CUSTOM_PATH_FILE: 8
mvn -f src CUSTOM_PATH_FILE assembly:single -nsu -N: 8
find ~ CUSTOM_PATH_DIR -name "*SNAPSHOT*" -type d | xargs rm -rf {}: 24
USES: docker://speechly/cli:latest: 30
${{ matrix.make }}: 8
USES: ikalnytskyi/action-setup-postgres: 8
USES: potatoqualitee/mssqlsuite: 11
rm tests CUSTOM_PATH_FILE: 15
USES: nolar/setup-k3d-k3s: 21
npm install -g yarn lerna: 8
git add packages CUSTOM_PATH_FILE: 12
wget -O - URL apt-key add -: 6
sudo add-apt-repository -y ppa:ubuntu-toolchain-r CUSTOM_PATH_DIR: 45
sudo update-alternatives FLAG CUSTOM_PATH_DIR gcc CUSTOM_PATH_DIR 10: 6
sudo update-alternatives FLAG CUSTOM_PATH_DIR g++ CUSTOM_PATH_DIR 10: 6
cargo login ${{ env.CRATES_TOKEN }}: 7
df FLAG: 62
docker rmi $(docker image ls FLAG FLAG): 19
rm FLAG FLAG "ENV_VAR": 16
python3 -m pip install k2==1.23.4.dev20230319+cpu.torch${{ matrix.torch }} -f URL: 6
cd $(mktemp -d): 8
cd sdk: 11
USES: ZedThree/clang-tidy-review: 12
. ci CUSTOM_PATH_FILE: 38
wget -q URL FLAG "token=ENV_VAR&project=ENV_VAR" -O cov-analysis-linux64.tar.gz: 6
dnf distro-sync -y: 7
dnf install -y rpmdevtools rpm-sign 'dnf-command(builddep)': 7
dnf builddep -y pkg CUSTOM_PATH_FILE: 7
echo "ENV_VAR" | base64 -d > fedora CUSTOM_PATH_FILE: 7
cp keys CUSTOM_PATH_FILE fedora CUSTOM_PATH_FILE: 7
echo "ENV_VAR" | base64 -d | gpg FLAG FLAG FLAG FLAG: 9
rpm FLAG *.rpm FLAG "_gpg_name ENV_VAR": 7
dnf install -y git findutils: 7
sudo apt install jq -qq: 6
#Get the virtualenv set up: 12
. CUSTOM_PATH_DIR maintenance:install FLAG FLAG=sqlite FLAG=nextcloud FLAG=127.0.0.1 FLAG=ENV_VAR FLAG=root FLAG=rootpassword FLAG admin FLAG admin: 9
cd Tests CUSTOM_PATH_DIR: 17
mvn test -B FLAG pom.xml: 7
git checkout -b ${{ steps.branch.outputs.name }}: 7
git push FLAG origin ${{ steps.branch.outputs.name }}: 6
sudo apt install flatpak: 6
sudo flatpak remote-add FLAG flathub URL: 19
USES: GuillaumeFalourd/clone-github-repo-action: 18
. CUSTOM_PATH_FILE make: 6
curl -X POST URL: 10
export PKG_CONFIG_PATH=~ CUSTOM_PATH_DIR: 6
node test CUSTOM_PATH_FILE: 35
cd build && ctest: 14
pip install FLAG poetry: 10
npm ci FLAG=error: 9
npm run build:tokens: 8
sudo chmod +x CUSTOM_PATH_FILE: 13
USES: AndreMiras/coveralls-python-action: 101
echo "github.ref = ${{ github.ref }}": 6
echo "github.workspace = ${{ github.workspace }}": 11
echo "job.status = ${{ job.status }}": 7
npm run typedoc: 16
echo "SHA=$(git rev-parse FLAG "ENV_VAR")" >> ENV_VAR: 7
echo "DATE=$(date "+%Y-%m-%d")" >> ENV_VAR: 7
set -x -e: 29
git log -1: 17
USES: push-based/user-flow-gh-action: 10
USES: relative-ci/agent-action: 9
echo -n "ENV_VAR" | base64 FLAG FLAG ENV_VAR: 6
security import ENV_VAR -P "ENV_VAR" -A -t cert -f pkcs12 -k ENV_VAR: 20
flutter build macos FLAG: 21
security delete-keychain ENV_VAR CUSTOM_PATH_FILE-db: 27
chmod +x appimagetool-x86_64.AppImage: 8
cp windows CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 13
mv build CUSTOM_PATH_DIR build CUSTOM_PATH_DIR: 30
USES: ./.github/actions/setup-toolchain: 19
cmake -B ENV_VAR CUSTOM_PATH_DIR -DCMAKE_BUILD_TYPE=Release -S ENV_VAR CUSTOM_PATH_DIR: 7
cmake FLAG ENV_VAR CUSTOM_PATH_DIR FLAG Release FLAG 4: 16
npx gulp scripts: 19
npx gulp dashboards CUSTOM_PATH_DIR: 9
rm .. CUSTOM_PATH_FILE: 35
USES: depot/setup-action: 40
USES: depot/build-push-action: 42
docker build . FLAG deployment CUSTOM_PATH_DIR FLAG unitedmanufacturinghub CUSTOM_PATH_DIR: 16
docker push unitedmanufacturinghub CUSTOM_PATH_DIR: 16
which pip: 30
task build: 24
USES: ./.github/actions/service-tests: 8
cmake FLAG ${{ github.workspace }} CUSTOM_PATH_DIR FLAG ${{ env.BUILD_TYPE }}: 8
python -m venv .venv: 48
maturin develop: 19
USES: mtfoley/pr-compliance-action: 6
USES: pulumi/actions: 86
yarn constraints: 6
git describe: 18
poetry config experimental.new-installer false: 7
. CUSTOM_PATH_DIR "ENV_VAR" "ENV_VAR" "ENV_VAR": 9
.ci CUSTOM_PATH_DIR "ENV_VAR" . CUSTOM_PATH_DIR: 6
. CUSTOM_PATH_DIR . CUSTOM_PATH_DIR "ENV_VAR": 8
. CUSTOM_PATH_DIR "ENV_VAR" "ENV_VAR:-main}" "ENV_VAR:-main}" "ENV_VAR" . CUSTOM_PATH_DIR: 8
apt update -y: 23
pip install -r source CUSTOM_PATH_FILE: 17
USES: reviewdog/action-yamllint: 17
USES: JetBrains/qodana-action: 97
time . CUSTOM_PATH_DIR: 10
yarn ci-cleaninstall: 10
yarn run test:unit: 9
dotnet test src CUSTOM_PATH_FILE -v minimal CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE CUSTOM_PATH_FILE}} CUSTOM_PATH_DIR: 6
USES: ./.github/actions/e2e_test: 13
USES: ./.github/actions/constellation_destroy: 14
cargo fmt FLAG FLAG: 87
pnpm dev:prepare: 17
sudo chmod 666 system CUSTOM_PATH_FILE: 10
sudo chmod 777 system CUSTOM_PATH_DIR: 10
sudo chmod -R 777 system CUSTOM_PATH_DIR: 32
sudo chmod -R 777 tests CUSTOM_PATH_DIR: 31
sudo chmod -R 777 images: 10
sudo chmod -R 777 themes CUSTOM_PATH_DIR: 10
mysql -u root -proot -e 'CREATE DATABASE `ee-test`;': 10
mysql -u root -proot -e 'SET GLOBAL sql_mode="ONLY_FULL_GROUP_BY,STRICT_ALL_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION";': 10
pipenv install: 31
mv Elastix-source CUSTOM_PATH_DIR uploads: 8
echo "${{ toJson(github.event.inputs) }}": 7
apt-get -y update: 20
USES: ./.github/actions/oc-keycloak-login: 8
pip install pip FLAG: 66
echo "today=$( CUSTOM_PATH_DIR -u '+%Y%m%d')" >> ENV_VAR: 18
. CUSTOM_PATH_FILE "$(pwd)" "$(pwd) CUSTOM_PATH_DIR "ENV_VAR CUSTOM_PATH_DIR: 12
. CUSTOM_PATH_FILE "$(pwd) CUSTOM_PATH_DIR: 9
. CUSTOM_PATH_FILE "$(pwd)" "$(pwd) CUSTOM_PATH_DIR: 15
env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 . CUSTOM_PATH_FILE "$(pwd)" "$(pwd) CUSTOM_PATH_DIR "ENV_VAR CUSTOM_PATH_DIR: 7
commit="${commit CUSTOM_PATH_DIR: 6
make go CUSTOM_PATH_DIR: 12
USES: ./.github/actions/build-image: 8
bin CUSTOM_PATH_DIR FLAG FLAG: 6
git checkout tags CUSTOM_PATH_DIR: 20
pushd .. CUSTOM_PATH_DIR: 10
USES: meisnate12/discord-notifications: 13
sphinx-build -a -E -j auto FLAG -b doctest . CUSTOM_PATH_DIR: 26
find . -path '*assignments*' -name '*.py' -exec python -m doctest '{}' \;: 12
jvm_timezone=$(random_timezone): 19
echo "JVM timezone is set to $jvm_timezone": 19
az version: 10
az bicep install: 6
yarn install FLAG 1000000 FLAG: 42
yarn cpx "docs CUSTOM_PATH_DIR dist CUSTOM_PATH_DIR: 65
pnpm coverage: 13
sudo apt-get install libncurses5-dev -y: 12
sudo pip install requests: 6
sudo tar xjf gcc-arm-none-eabi-6-2017-q2-update-linux.tar.bz2 -C CUSTOM_PATH_DIR: 6
export RTT_EXEC_PATH= CUSTOM_PATH_DIR: 13
export RTT_ROOT=~ CUSTOM_PATH_DIR: 6
echo | scons FLAG: 7
scons -j2: 10
USES: JesseTG/rm: 28
USES: EnricoMi/publish-unit-test-result-action/composite: 34
sed -i -e " CUSTOM_PATH_DIR .dappnode_profile: 14
docker-compose up: 11
wget -O - URL | bash: 19
repo init -u URL -b master -m h5.xml FLAG=URL  FLAG: 13
cp .. CUSTOM_PATH_FILE .repo CUSTOM_PATH_FILE: 15
repo sync -c  FLAG: 17
cp .. CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 14
pip install jupyter: 11
USES: jirutka/setup-alpine: 21
make install-dev: 21
sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu: 10
sudo cp CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 8
echo "127.0.0.1 test_site" | sudo tee -a CUSTOM_PATH_DIR: 9
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG boost: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG ninja: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG cmake: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG double-conversion: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG fmt: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG gflags: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG glog: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG googletest: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG libevent: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG snappy: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG zstd: 21
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG folly: 19
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG autoconf: 19
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG automake: 19
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG libtool: 19
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG libsodium: 19
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG fizz: 17
python3 build CUSTOM_PATH_FILE FLAG build FLAG boost: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG ninja: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG cmake: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG double-conversion: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG fmt: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG gflags: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG glog: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG googletest: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG libevent: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG snappy: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG zstd: 18
python3 build CUSTOM_PATH_FILE FLAG build FLAG folly: 16
python3 build CUSTOM_PATH_FILE FLAG build FLAG autoconf: 16
python3 build CUSTOM_PATH_FILE FLAG build FLAG automake: 16
python3 build CUSTOM_PATH_FILE FLAG build FLAG libtool: 16
python3 build CUSTOM_PATH_FILE FLAG build FLAG libsodium: 16
python3 build CUSTOM_PATH_FILE FLAG build FLAG fizz: 14
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG openssl: 10
python3 build CUSTOM_PATH_FILE FLAG build FLAG openssl: 9
${{ matrix.build }}: 8
echo "cache_id=$(date FLAG '+%V')" >> ENV_VAR: 14
USES: laminas/automatic-releases: 82
. CUSTOM_PATH_DIR before-build: 51
cp . CUSTOM_PATH_FILE release CUSTOM_PATH_DIR: 8
npm install -g typescript: 10
brew install Aliases CUSTOM_PATH_DIR Aliases CUSTOM_PATH_DIR FLAG: 55
$(brew FLAG) CUSTOM_PATH_DIR FLAG FLAG='(print (+ 2 2))': 69
USES: peaceiris/actions-label-commenter: 26
. CUSTOM_PATH_DIR analyse FLAG=2G: 6
php artisan test: 16
make ENV_VAR: 23
curl -sSfL URL | sh -s -- -b $(go env GOPATH) CUSTOM_PATH_DIR ENV_VAR: 9
testmode=${{matrix.testmode}}: 10
python3 e2e-test.py: 10
.github CUSTOM_PATH_FILE ${testmode}: 6
npm run test FLAG=packages CUSTOM_PATH_DIR: 9
npm run build FLAG=packages CUSTOM_PATH_DIR: 13
sudo DEBIAN_FRONTEND=noninteractive apt-get install ENV_VAR: 8
python3 -m pip install build: 10
&& mkdir -p upstream && cp build CUSTOM_PATH_DIR env.SPKG }} CUSTOM_PATH_FILE upstream CUSTOM_PATH_DIR env.SPKG }}-git.tar.gz \: 6
&& if [ -n "${{ env.REMOVE_PATCHES }}" ]; then echo "(cd .. CUSTOM_PATH_DIR env.SPKG }} CUSTOM_PATH_DIR && rm -f ${{ env.REMOVE_PATCHES }}; :)" >> upstream CUSTOM_PATH_FILE; fi \: 6
&& ls -l upstream/: 6
USES: megalinter/megalinter: 6
npm run lint:check: 35
npm run prettier:check: 49
pod lib lint: 13
USES: jungwinter/split: 7
make helm-lint: 6
make helm-test: 7
python -m pip install FLAG FLAG setuptools wheel: 17
sudo apt update && sudo apt install -y libaec-dev zlib1g-dev automake autoconf libcurl4-openssl-dev libjpeg-dev wget curl bzip2 m4 flex bison cmake libzip-dev openmpi-bin libopenmpi-dev: 6
ls ENV_VAR && ls ENV_VAR CUSTOM_PATH_DIR && ls ENV_VAR CUSTOM_PATH_DIR matrix.compiler }}-${{ matrix.hdf5 }}-${{ matrix.netcdf }}-${{ matrix.cgns }} && ls ENV_VAR CUSTOM_PATH_DIR matrix.compiler }}-${{ matrix.hdf5 }}-${{ matrix.netcdf }}-${{ matrix.cgns }} CUSTOM_PATH_DIR: 7
sudo apt-get install -y wget gnupg: 6
rustup target add x86_64-apple-ios: 14
brew install xcbeautify: 17
sudo apt-get install -y libbtrfs-dev: 10
sudo apt-get install -y doxygen: 24
ref="${ref CUSTOM_PATH_DIR: 9
apt-get update;: 7
cp target CUSTOM_PATH_DIR target CUSTOM_PATH_DIR: 7
go test -coverprofile=. CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 6
USES: rickstaa/action-black: 10
sudo apt install gcc-11 g++-11: 8
USES: SonarSource/sonarcloud-github-c-cpp: 25
python -m pip install FLAG pip virtualenv: 24
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG Release FLAG install FLAG 8: 7
kind create cluster FLAG components CUSTOM_PATH_FILE: 20
kind load docker-image "ENV_VAR:ENV_VAR": 11
tox -e black: 6
USES: VirtoCommerce/vc-github-actions/get-image-version: 11
dotnet pack FLAG Release FLAG: 7
sudo apt-get install libgl1-mesa-dev: 15
OPENMSX_VERSION=`python3 build CUSTOM_PATH_FILE`: 9
echo ::set-output name=OPENMSX_VERSION::ENV_VAR: 9
yarn config set ignore-engines true: 7
yarn config set yarn-offline-mirror ~ CUSTOM_PATH_DIR: 8
yarn config set network-timeout 300000: 10
yarn test:node: 23
export PYTHONPATH="ENV_VAR CUSTOM_PATH_DIR: 6
python3 setup.py build_ext FLAG: 6
cargo test FLAG FLAG x86_64-unknown-linux-gnu: 7
echo "C:\Program Files\NASM" >> ENV_VAR: 6
FLAG . CUSTOM_PATH_FILE \: 10
USES: jupyterhub/action-k8s-await-workloads: 7
yarn build:dev: 11
yarn test:integration: 30
cd plugins CUSTOM_PATH_DIR: 20
tsc: 24
USES: mohuishou/utools/.github/action: 8
echo "Listing top largest packages": 22
pkgs=$(dpkg-query -Wf 'ENV_VARnstalled-Size}\tENV_VARackage}\tENV_VARtatus}\n' | awk 'ENV_VAR == "installed"{print $1 "\t" $2}' | sort -nr): 22
head -n 30 <<< "${pkgs}": 22
sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true: 11
sudo apt-get remove FLAG android-sdk-platform-tools || true: 11
sudo apt-get purge FLAG android-sdk-platform-tools || true: 11
sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true: 11
sudo apt-get remove -y '^mono-.*' || true: 11
sudo apt-get remove -y '^ghc-.*' || true: 11
sudo apt-get remove -y '.*jdk.*|.*jre.*' || true: 11
sudo apt-get remove -y 'php.*' || true: 82
sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true: 11
sudo apt-get remove -y '^google-.*' || true: 11
sudo apt-get remove -y azure-cli || true: 11
sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true: 11
sudo apt-get remove -y '^gfortran-.*' || true: 11
sudo rm -rfv build || true: 11
sudo iptables -I INPUT -s 169.254.169.254 -j DROP: 15
sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP: 15
mkdir sarif: 10
apt-get update -yy -o Acquire::Retries=3: 8
cp risedev-components.ci.env risedev-components.user.env: 7
wget ENV_VAR -O - | tar xz && mv ENV_VAR ENV_VAR CUSTOM_PATH_DIR: 7
curl -fL ENV_VAR -o ~ CUSTOM_PATH_FILE: 7
unzip ~ CUSTOM_PATH_FILE -d ~: 7
mv "ENV_VAR CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 7
~ CUSTOM_PATH_DIR pre-start-playground: 7
~ CUSTOM_PATH_DIR link-all-in-one-binaries: 7
~ CUSTOM_PATH_DIR ci-start ci-3cn-1fe: 12
sqllogictest -p 4566 '. CUSTOM_PATH_FILE': 19
~ CUSTOM_PATH_DIR ci-kill: 12
~ CUSTOM_PATH_DIR logs: 7
buf lint: 6
USES: ./.github/actions/setup-gradle: 19
make markdownlint: 7
"ENV_VAR" FLAG: 17
mvn install: 40
USES: ./.github/actions/dangerous-git-checkout: 13
USES: ./.github/actions/cache-build: 7
bazel build CUSTOM_PATH_DIR: 33
bazel test CUSTOM_PATH_DIR: 20
export GOPATH=ENV_VAR: 10
npm install FLAG ${{ matrix.npm-i }}: 7
echo "node@$(node -v)": 7
echo "npm@$(npm -v)": 7
npm -s ls ||:: 7
(npm -s ls FLAG=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print $2 "=" $3 }' >> "ENV_VAR": 6
sudo apt-get -y install lcov: 7
twine check wheelhouse CUSTOM_PATH_FILE: 6
npm run test FLAG: 45
cd 3-Authorization-II CUSTOM_PATH_DIR: 8
cd 5-AccessControl CUSTOM_PATH_DIR: 8
cd 6-AdvancedScenarios CUSTOM_PATH_DIR: 8
make logs: 11
USES: WebFreak001/deploy-nightly: 53
USES: jsdaniell/create-json: 35
. CUSTOM_PATH_DIR build FLAG FLAG: 32
pip3 install maturin: 6
USES: aliyun/acr-login: 6
make unit: 18
wget -qO- "URL | tar xvfz -: 667
USES: azure/setup-kubectl: 126
echo "::set-output name=version::$(cat . CUSTOM_PATH_DIR: 24
melos bootstrap FLAG: 8
USES: wow-actions/auto-assign: 6
USES: korthout/backport-action: 14
export ENV DEBIAN_FRONTEND=noninteractive: 11
meson compile -C _build: 16
cp . CUSTOM_PATH_FILE before_data.js: 18
git checkout -: 25
rustup toolchain update nightly && rustup default nightly: 8
cd examples CUSTOM_PATH_DIR && go test -bench 'BenchmarkFib' | tee output.txt: 8
mvn clean verify: 25
USES: ./terraform-plan: 74
USES: ./terraform-apply: 78
sudo apt-get install -y expect: 12
sudo apt-get install libxcb-composite0-dev: 8
cargo install FLAG .: 14
. CUSTOM_PATH_FILE checksum.txt: 16
echo "key=$(date +'%W')" >> ENV_VAR: 8
echo "XMAKE_GLOBALDIR=${{ runner.workspace }} CUSTOM_PATH_DIR >> ENV_VAR: 9
xmake repo FLAG: 13
echo "hash=$(xmake l utils.ci.packageskey)" >> ENV_VAR: 6
USES: darrenjennings/algolia-docsearch-action: 9
mvn FLAG FLAG verify: 36
export ANDROID_NDK=ENV_VAR CUSTOM_PATH_DIR: 8
. CUSTOM_PATH_DIR :pytorch-native:assemble: 6
USES: s4u/setup-maven-action: 19
cd hera-all CUSTOM_PATH_DIR mvn -U clean package FLAG -Dmaven.test.skip=true; cd .. CUSTOM_PATH_DIR: 9
cargo clippy FLAG FLAG -- -Dclippy::all -Dclippy::pedantic: 6
cargo fuzz check: 8
cargo outdated FLAG fuzz CUSTOM_PATH_FILE FLAG 1: 7
USES: openfheorg/openfhe-development/.github/actions/default_builder: 22
BUILD_OPTS=$(echo "${{ matrix.build_opts }}" | sed 's/ CUSTOM_PATH_DIR: 6
echo "build_opts=ENV_VAR" >> "ENV_VAR": 6
RUNNER_OS=$(echo "${{ matrix.os }}" | sed 's/ CUSTOM_PATH_DIR: 7
echo "runner_os=ENV_VAR" >> "ENV_VAR": 7
tar -C ~ CUSTOM_PATH_DIR -czvf ~ CUSTOM_PATH_FILE .: 7
ls -lhrt "ENV_VAR CUSTOM_PATH_DIR || true: 24
rm -rf "ENV_VAR CUSTOM_PATH_DIR: 22
. CUSTOM_PATH_DIR assemble FLAG FLAG FLAG FLAG "ENV_VAR": 6
__tests__ CUSTOM_PATH_FILE1 ${{ runner.os }}: 29
bash run.sh: 11
pushd "ENV_VAR": 14
pushd benchmark: 15
pip install -e .[test] : 7
pip install -r package CUSTOM_PATH_FILE: 7
make shellcheck: 25
mdbook build docs: 22
USES: jetli/trunk-action: 19
cat ${{ matrix.chain }}-srtool-digest.json: 11
USES: pytorch/test-infra/.github/actions/setup-ssh: 7
baseurl=URL: 16
enabled=1: 7
gpgcheck=1: 16
gpgkey=URL: 7
USES: pytorch/test-infra/.github/actions/teardown-linux: 7
yarn format:ci: 9
docker-compose up -d FLAG: 33
make cluster-up: 8
USES: ./.github/actions/godot-deps: 8
python -m pip install scons==4.4.0: 9
sh misc CUSTOM_PATH_FILE: 6
USES: ./.github/actions/godot-cache: 9
USES: ./.github/actions/godot-build: 10
brew install goreleaser: 6
USES: isbang/setup-awscli: 9
choco install sqlite: 9
security create-keychain -p "ENV_VAR" "ENV_VAR": 13
security set-keychain-settings -lut 21600 "ENV_VAR": 7
security unlock-keychain -p "ENV_VAR" "ENV_VAR": 13
rustup target add x86_64-apple-darwin: 26
USES: CycloneDX/gh-gomod-generate-sbom: 8
poetry export -f requirements.txt FLAG requirements.txt: 8
wget URL -O CUSTOM_PATH_FILE: 39
brew install boost-python3 FLAG: 6
docker save -o CUSTOM_PATH_FILE ENV_VAR: 8
curl -fsSLO "URL: 7
kubectl version FLAG FLAG: 6
cd "$(mktemp -d)": 6
make helm: 7
sudo install . CUSTOM_PATH_DIR CUSTOM_PATH_DIR && rm kind: 6
kind version | grep -q ENV_VAR: 8
docker load -i CUSTOM_PATH_FILE: 23
docker inspect ENV_VAR: 7
chmod a+x bin CUSTOM_PATH_DIR: 6
npm run test:browser: 31
pip install -r requirements.txt || true: 15
pytest . || true: 17
npm install FLAG .. CUSTOM_PATH_DIR: 8
npm run legacy-test: 6
echo "date=$(date +'%Y-%m-%d' FLAG)" >> ENV_VAR: 11
. CUSTOM_PATH_DIR compile dependency:go-offline: 13
tar -zxf ${{ github.workspace}} CUSTOM_PATH_FILE -C ${{github.workspace}} CUSTOM_PATH_DIR: 30
pip install awscli FLAG: 13
make install_nodejs_sdk: 13
aws configure set default.aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}: 13
aws configure set default.aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}: 13
aws configure set aws_access_key_id ${{ secrets.ALT_AWS_ACCESS_KEY_ID }} FLAG ${{ secrets.ALT_AWS_PROFILE }}: 13
aws configure set aws_secret_access_key ${{ secrets.ALT_AWS_SECRET_ACCESS_KEY }} FLAG ${{ secrets.ALT_AWS_PROFILE }}: 13
yarn install && yarn link  CUSTOM_PATH_DIR: 13
USES: autofix-ci/action: 16
USES: mstachniuk/ci-skip: 15
make -f scripts CUSTOM_PATH_DIR php || make -f scripts CUSTOM_PATH_DIR clean php: 14
make -f scripts CUSTOM_PATH_DIR ext PECL=msgpack: 14
make -f scripts CUSTOM_PATH_DIR test: 14
. CUSTOM_PATH_DIR test -B -D"license.skip=true": 6
echo "Review decision is: ENV_VAR": 6
docker tag "ENV_VAR:ENV_VAR" "ENV_VAR:ENV_VAR": 8
echo "updater uploaded with tag \`ENV_VAR\`" >> ENV_VAR: 7
echo "\`\`\`" >> ENV_VAR: 43
rm -f go.sum: 13
git config user.name GitHub: 8
git config user.email noreply: 42
echo ::set-env name=OBS_GIT_BRANCH::$(git rev-parse FLAG HEAD): 6
echo ::set-env name=OBS_GIT_HASH::$(git rev-parse FLAG HEAD): 6
echo ::set-env name=OBS_GIT_TAG::$(git describe FLAG FLAG=0): 6
git checkout ${{ env.OBS_GIT_TAG }}: 14
echo ::set-env name=GIT_BRANCH::${{ github.event.pull_request.head.ref }}: 6
echo ::set-env name=GIT_HASH::$(git rev-parse FLAG HEAD): 8
echo ::set-env name=GIT_TAG::$(git describe FLAG FLAG=0): 8
curl -kLO URL env.QT_VERSION }}.7z -f FLAG 5 -C -: 6
curl -kLO URL env.WINDOWS_DEPS_VERSION }}.zip -f FLAG 5 -C -: 6
mkdir .\build32: 7
cd .\build32: 9
mkdir .\build64: 6
cd .\build64: 8
mkdir package: 22
make -j4 libobs obs-frontend-api: 6
sudo cp . CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 19
install_name_tool -change CUSTOM_PATH_FILE CUSTOM_PATH_DIR _path CUSTOM_PATH_FILE CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 6
yarn lint:check: 28
USES: ./.github/workflows/composite-actions/prep-go-runner: 6
pushd build CUSTOM_PATH_DIR: 11
cp build CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 6
msbuild projects CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 10
python3 setup.py sdist bdist_wheel: 46
pytest FLAG=yes: 7
ls . CUSTOM_PATH_DIR && chmod -R +x . CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE: 10
chmod -R +x . CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE: 14
. CUSTOM_PATH_DIR FLAG FLAG FLAG downloadDependencies FLAG FLAG: 11
nix-build: 19
while ! psql postgres: CUSTOM_PATH_DIR -b -q -c "SELECT iasql_engine_health()"; do sleep 1 && echo -n .; done;: 8
USES: nobrayner/discord-webhook: 21
make test-workspace: 10
make test-node: 11
make build-ci: 23
node_modules CUSTOM_PATH_DIR exam FLAG=ENV_VAR FLAG=${{ matrix.partition }} FLAG dist FLAG -r xunit: 18
make test-coverage-ci: 10
npx codecov: 20
mkdir -p test CUSTOM_PATH_DIR: 131
echo "MAKEFLAGS=-j$(nproc)" >> ENV_VAR: 13
bundle update: 66
bundle exec r10k puppetfile install: 14
tox -e py3: 6
sed -i~ "s CUSTOM_PATH_FILE CUSTOM_PATH_DIR package.json: 10
pr_num=`cat ENV_VAR | jq -r ".number"`: 6
USES: ashley-taylor/read-json-property-action: 13
cd release CUSTOM_PATH_DIR: 16
if [ ${#CURRENT_GODOT_VERSION} -eq 1 ]; then CURRENT_GODOT_VERSION="ENV_VAR.0"; fi: 7
echo "CURRENT_GODOT_VERSION=ENV_VAR" >> ENV_VAR: 7
yarn build ${{ inputs.package_path }}: 10
steps CUSTOM_PATH_FILE: 10
npm run build:dev: 19
cd third_party CUSTOM_PATH_DIR: 21
git log: 10
conda run -n build_binary python -m pip install -r requirements.txt: 7
conda run -n build_binary python -c "import torch.distributed": 6
echo "torch.distributed succeeded": 6
conan search: 12
cd book && mdbook build: 7
curl "URL -o "awscliv2.zip": 19
unzip awscliv2.zip: 25
aws ecr-public get-login-password FLAG us-east-1 | docker login FLAG AWS FLAG public.ecr.aws CUSTOM_PATH_DIR: 17
docker push public.ecr.aws CUSTOM_PATH_DIR: 10
helm lint charts CUSTOM_PATH_DIR: 22
USES: fiam/arm-none-eabi-gcc: 20
mvn package FLAG pom.xml: 14
USES: taiki-e/cache-cargo-install-action: 19
if [ -e yarn.lock ]; then: 54
elif [ -e package-lock.json ]; then: 53
USES: hpi-swa/setup-smalltalkCI: 15
sh .ci CUSTOM_PATH_FILE: 8
echo "composer_cache_dir=$(composer config cache-files-dir)" >> ENV_VAR: 8
git config FLAG user.email "iasql-bot": 7
git config FLAG user.name "iasql-bot": 7
USES: ./.github/actions/nix_installer_and_cache: 7
USES: ./.github/actions/nix_upload_store: 8
sudo chown -R ENV_VAR:ENV_VAR ENV_VAR: 31
make "ENV_VAR-tarball": 8
build_dir=$(readlink -f build): 8
sudo cp -r "${build_dir}" "kata-build": 7
. CUSTOM_PATH_FILE \: 27
node github-actions CUSTOM_PATH_FILE: 6
USES: azure/powershell: 20
USES: ZedThree/clang-tidy-review/upload: 6
npm run lint:fix: 15
make && make install: 15
yarn docs: 65
cd packages CUSTOM_PATH_DIR && npm install: 19
cd packages CUSTOM_PATH_DIR && npm test: 17
corepack yarn install FLAG: 7
ninja -C _build install: 6
dotnet workload install wasm-tools: 29
dotnet build . CUSTOM_PATH_DIR FLAG Release: 8
USES: charmixer/auto-changelog-action: 11
git config FLAG user.name "Robbot": 12
git config FLAG user.email "robbot2019": 12
ls ENV_VAR CUSTOM_PATH_DIR: 24
cp ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 10
cp ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR: 13
git_hash=$(git rev-parse FLAG "ENV_VAR"): 15
yalc publish: 7
USES: stefanzweifel/changelog-updater-action: 45
USES: ./.github/actions/storage-download: 49
ln -s ENV_VAR CUSTOM_PATH_FILE bin CUSTOM_PATH_DIR: 80
echo "local-bin=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 25
export PATH=${{steps.setup.outputs.local-bin}}:ENV_VAR: 31
mkdir ${{env.report-dir}}: 29
out_dir="ENV_VAR CUSTOM_PATH_FILE-dir}}": 16
echo "test-reports-dir=$out_dir" >> ENV_VAR: 6
mkdir -p dist CUSTOM_PATH_DIR: 33
USES: docker://plugins/s3: 8
make run-vendor: 12
echo $(clang FLAG): 8
colcon build: 14
git FLAG log -n 10 FLAG FLAG='%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) <%an>%Creset' FLAG: 6
. CUSTOM_PATH_DIR publish -Psnapshot: 11
cargo check FLAG FLAG FLAG FLAG: 12
rustup toolchain install nightly FLAG rustfmt: 8
source activate docs: 7
pip install black==20.8b1: 6
wasm-pack test FLAG FLAG: 23
git config user.email "github": 10
USES: taiki-e/setup-cross-toolchain-action: 14
make install-tools: 78
echo "ENV_VAR" > . CUSTOM_PATH_FILE: 26
msbuild slnf CUSTOM_PATH_FILE -p:Configuration=SL -clp:ErrorsOnly -restore: 6
pnpm audit: 10
cargo deny check: 16
USES: mvasigh/dispatch-action: 20
cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg FLAG FLAG: 6
USES: ./.github/actions/get-bootjdk: 6
go clean -modcache: 8
pip install URL: 43
USES: AppImageCrafters/build-appimage-action: 11
gh auth status: 13
git config FLAG http.URL: 7
git push origin ${{ github.event.inputs.version }}: 8
cmake FLAG . FLAG Release FLAG: 17
curl -sSfL URL | sh -s v1.25.0: 14
. CUSTOM_PATH_DIR run -v FLAG=5m -c .golangci.yml . CUSTOM_PATH_DIR: 15
go test -v . CUSTOM_PATH_DIR -timeout=5m -parallel=1 -failfast -short: 14
go build -o ". CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 13
USES: ./.github/actions/pr_changed_files: 6
python -m tox -e lint: 7
twine upload -u __token__ -p ${{ secrets.PYPI_API_TOKEN }} dist CUSTOM_PATH_DIR: 7
curl URL | python: 10
chmod +x .github CUSTOM_PATH_FILE: 56
find buildSrc -name "*.kt" -type f | sort | xargs shasum  > gradle-checksums.txt: 10
cat gradle-checksums.txt: 12
. CUSTOM_PATH_DIR lint: 43
rm -f package-lock.json: 7
export DISPLAY=:99.0: 22
aws s3 sync . CUSTOM_PATH_DIR s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR FLAG: 8
pip install pytest pytest-cov: 49
USES: karancode/yamllint-github-action: 13
echo "\`\`\`" >> ${{runner.workspace }} CUSTOM_PATH_FILE: 8
curl -R -O URL: 7
USES: ./.github/actions/build-and-test: 24
composer update -W: 9
cmake -DCMAKE_INSTALL_PREFIX= CUSTOM_PATH_DIR -DCMAKE_INSTALL_LIBDIR=lib .. CUSTOM_PATH_DIR: 16
USES: bluwy/substitute-string-action: 7
go test -race -covermode atomic -coverprofile=profile.cov . CUSTOM_PATH_DIR: 11
brew install cmake ninja ccache: 8
echo "date=$( CUSTOM_PATH_DIR -u "+%Y-%m-%d-%H;%M;%S")" >> ENV_VAR: 19
cp .env.ci .env: 16
yarn depcheck: 11
qmake FLAG: 9
go mod download && go mod tidy: 6
.\bootstrap-vcpkg.bat: 13
python pythonFiles CUSTOM_PATH_FILE: 8
npm run test:functional: 8
rm -f ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE: 6
echo ${{ secrets.INGRESS_API_CERT }} | base64 FLAG > ENV_VAR CUSTOM_PATH_FILE: 6
echo ${{ secrets.INGRESS_API_CERT_KEY }} | base64 FLAG > ENV_VAR CUSTOM_PATH_FILE: 6
echo ${{ secrets.INGRESS_WEBAPP_CERT }} | base64 FLAG > ENV_VAR CUSTOM_PATH_FILE: 6
echo ${{ secrets.INGRESS_WEBAPP_CERT_KEY }} | base64 FLAG > ENV_VAR CUSTOM_PATH_FILE: 6
echo "ENV_VAR" | base64 FLAG > ENV_VAR CUSTOM_PATH_FILE: 8
kubectl FLAG ever rollout restart deployment CUSTOM_PATH_DIR: 6
sudo docker run -d FLAG redis -v redis-data: CUSTOM_PATH_DIR  \: 18
-p 6379:6379  redis redis-server FLAG yes: 18
yarn workspace  CUSTOM_PATH_DIR run build:lib: 9
python FLAG FLAG: 6
cd nanopb CUSTOM_PATH_DIR: 12
sudo apt-get install -y git build-essential: 8
mix compile FLAG FLAG: 25
mix credo: 26
make -C nucliadb/ install-dev: 15
BRANCH=ENV_VAR:-ENV_VAR#refs CUSTOM_PATH_DIR: 6
HASH=`git rev-parse FLAG HEAD`: 17
BRANCH=ENV_VAR##* CUSTOM_PATH_DIR: 23
echo "short_sha=ENV_VAR" >> ENV_VAR: 15
docker login -u oauth2accesstoken -p "$(gcloud auth application-default print-access-token)" URL: 13
sed -i.bak "s#IMAGE_TO_REPLACE#ENV_VAR:${{ steps.env-vars.outputs.short_sha }}#" . CUSTOM_PATH_FILE: 6
sed -i.bak "s#CONTAINER_REGISTRY_TO_REPLACE#ENV_VAR#" . CUSTOM_PATH_FILE: 6
VERSION=`cat VERSION`: 10
VERSION_SHA=ENV_VAR+${{ steps.env-vars.outputs.short_sha }}: 6
sed -i.bak "s#99999.99999.99999#ENV_VAR#" . CUSTOM_PATH_FILE: 7
echo "version_number=ENV_VAR" >> ENV_VAR: 9
helm package charts CUSTOM_PATH_DIR: 12
USES: emmyoop/changie_bot: 8
mvn -B verify: 25
USES: VirtoCommerce/vc-github-actions/setup-vcbuild: 8
USES: zaproxy/action-baseline: 7
docker push piranhacloud CUSTOM_PATH_DIR: 6
echo "{ \"latest\": \"${{github.ref_name}}\" }" > . CUSTOM_PATH_FILE: 8
mkdir output && \: 6
npx wp-env run cli "wp core version": 6
npx mochawesome-merge . CUSTOM_PATH_FILE -o tests CUSTOM_PATH_FILE: 8
npx mochawesome-json-to-md -p . CUSTOM_PATH_FILE -o . CUSTOM_PATH_FILE: 8
npx mochawesome-report-generator tests CUSTOM_PATH_FILE -o tests CUSTOM_PATH_DIR: 8
cat . CUSTOM_PATH_FILE >> ENV_VAR: 12
sudo apt-get install -y ffmpeg: 12
pip install tensorflow: 14
USES: mbrobbel/rustfmt-check: 10
yarn && yarn lint: 25
echo "${{ secrets.GPG_FILE }}" > sec.gpg.asc: 11
gpg -d FLAG "${{ secrets.GPG_FILE_PSWD }}" FLAG sec.gpg.asc > sec.gpg: 11
fastlane deployNexus: 7
sudo apt-get update && sudo apt-get install sed -y: 6
poetry install FLAG docs -vv: 15
git submodule update -i: 9
util CUSTOM_PATH_FILE before_script: 6
util CUSTOM_PATH_FILE script: 7
. CUSTOM_PATH_DIR build snapshot: 8
cd monorepo: 10
<?php: 6
sudo cp -i CUSTOM_PATH_FILE "ENV_VAR CUSTOM_PATH_DIR: 13
sudo chown "$(whoami)" "ENV_VAR CUSTOM_PATH_DIR: 13
kubectl get svc: 85
kubectl get pod -A: 15
sudo cat CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 14
USES: niden/actions-memcached: 27
go test -race -coverprofile=coverage.out -covermode=atomic: 12
docker image pull rafaeldtinoco CUSTOM_PATH_DIR: 26
USES: alirezanet/publish-nuget: 20
$pgService = Get-Service -Name postgresql*: 13
Set-Service -InputObject $pgService -Status running -StartupType automatic: 13
Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru: 13
conda install pywin32: 6
conda install -y pygraphviz -c conda-forge: 8
USES: shogo82148/actions-setup-redis: 24
composer update --${{ matrix.stability }} FLAG FLAG FLAG: 11
vendor CUSTOM_PATH_DIR FLAG FLAG=coverage.clover: 9
curl -i FLAG -X POST -H "Accept: application CUSTOM_PATH_FILE3+json" -H "Authorization: token ENV_VAR" URL github.repository }} CUSTOM_PATH_DIR -d '{"name":"build","head_sha":"github-actions CUSTOM_PATH_DIR needs.upgrade.outputs.conclusion }}","output":{"title":"Created via the upgrade workflow.","summary":"Action run URL: URL github.repository }} CUSTOM_PATH_DIR github.run_id }}"}}': 7
USES: ./.github/actions/yarn-nm-install: 34
-d  \: 6
USES: realm/ci-actions/mdb-realm/deploy: 13
python manage.py check: 10
python manage.py makemigrations FLAG FLAG: 6
sudo apt update && sudo apt install build-essential: 7
USES: Gamesight/slack-workflow-status: 35
rm Dockerfile: 6
mv . CUSTOM_PATH_DIR ./: 11
export LD_LIBRARY_PATH= CUSTOM_PATH_DIR: 34
python -m pip install setuptools: 9
twine check dist CUSTOM_PATH_FILE: 13
make test-cover: 16
USES: bus1/cabuild/action/msdevshell: 13
. CUSTOM_PATH_FILE -disableMetrics: 6
git commit -m "COMMIT_MSG" -a  || echo "nothing to commit": 15
remote="URL: 17
branch="ENV_VAR:11}": 14
git push "${remote}" ${branch} || echo "nothing to push": 15
USES: ./.github/actions/set-up-go: 12
cat build CUSTOM_PATH_FILE || true: 17
-v "ENV_VAR CUSTOM_PATH_DIR \: 12
USES: openzim/docker-publish-action: 11
echo "UPLOAD_BIN_DIR=ENV_VAR" >> ENV_VAR: 6
echo "UPLOAD_CONFIG=ENV_VAR" >> ENV_VAR: 7
echo "UPLOAD_FIRMWARE=ENV_VAR" >> ENV_VAR: 6
echo "UPLOAD_RELEASE=ENV_VAR" >> ENV_VAR: 6
echo "SERVERCHAN_SCKEY=ENV_VAR" >> ENV_VAR: 6
echo "REGULAR_UPDATE=ENV_VAR" >> ENV_VAR: 6
echo "BY_INFORMATION=ENV_VAR" >> ENV_VAR: 6
echo "CangKu=ENV_VARpidz##* CUSTOM_PATH_DIR >> ENV_VAR: 6
sudo rm -rf CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 23
git clone -b "ENV_VAR" FLAG "ENV_VAR" openwrt: 12
echo "date=$(date "+%Y%m%d%H%M%S")" >> ENV_VAR: 6
cd master: 12
cp .github CUSTOM_PATH_FILE ~ CUSTOM_PATH_FILE: 27
yarn docker build  CUSTOM_PATH_DIR -t standardnotes CUSTOM_PATH_DIR: 6
USES: enriikke/gatsby-gh-pages-action: 8
echo "LD_LIBRARY_PATH= CUSTOM_PATH_DIR >> ENV_VAR: 7
OPENBLAS_NUM_THREADS=2 qemu-loongarch64-static . CUSTOM_PATH_DIR: 8
OPENBLAS_NUM_THREADS=2 qemu-loongarch64-static . CUSTOM_PATH_DIR < . CUSTOM_PATH_DIR: 8
OPENBLAS_NUM_THREADS=1 OMP_NUM_THREADS=1 qemu-loongarch64-static . CUSTOM_PATH_DIR < . CUSTOM_PATH_FILE: 8
OPENBLAS_NUM_THREADS=2 qemu-loongarch64-static . CUSTOM_PATH_DIR < . CUSTOM_PATH_FILE: 8
docker build FLAG test -t test-container .: 8
touch coverage.txt: 8
test-container: 8
echo "::set-output name=value::$(git rev-parse FLAG HEAD)": 7
sudo apt-get install -y libxkbfile-dev pkg-config libsecret-1-dev libxss1 dbus xvfb libgtk-3-0 libgbm1: 7
sudo CUSTOM_PATH_DIR :99 -screen 0 1024x768x24 > CUSTOM_PATH_DIR 2>&1 &: 6
npm run build-plugin: 9
mix ecto.create && mix ecto.migrate: 7
go get golang.org CUSTOM_PATH_DIR: 32
cargo nextest run FLAG FLAG: 10
rustup target add wasm32-wasi: 24
bundle exec rake cucumber: 9
make test-short: 6
USES: mlycore/action-kaniko: 7
node common CUSTOM_PATH_FILE rebuild FLAG: 9
ls -l . CUSTOM_PATH_DIR: 35
twine upload FLAG . CUSTOM_PATH_FILE: 8
pip install -U -r requirements CUSTOM_PATH_FILE: 7
rm -rf build: 99
BUILDKITD_IMAGE=docker.io CUSTOM_PATH_DIR TAG=ENV_VAR-ubuntu-latest-docker . CUSTOM_PATH_DIR upgrade: 8
mkdir -p $(dirname ". CUSTOM_PATH_DIR: 8
mv ENV_VAR CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 11
. CUSTOM_PATH_DIR config global.buildkit_additional_config "'[registry.\"docker.io\"]: 8
pnpm test:coverage: 9
. CUSTOM_PATH_DIR CFLAGS='-O0 -g -Wall -Wextra': 7
USES: retypeapp/action-build: 7
USES: retypeapp/action-github-pages: 6
pnpm run check: 12
sudo apt-get -yq FLAG FLAG install snapcraft: 14
USES: crazy-max/ghaction-upx: 13
detekt FLAG ${{ github.workspace }} FLAG sarif:${{ github.workspace }} CUSTOM_PATH_FILE: 18
echo "RELEASE_UPLOAD_URL=$release_upload_url" >> ENV_VAR: 7
echo "RELEASE_VERSION=$release_version" >> ENV_VAR: 9
python -m pip install wheel setuptools: 8
USES: ./.github/actions/setup_environment: 28
npm install -g npm@${{ steps.setup.outputs.npm-version }} || true: 7
USES: dessant/support-requests: 52
sudo -E apt-get -qq install $(curl -fsSL git.io CUSTOM_PATH_DIR tree: 11
echo "OPENWRTROOT=ENV_VAR" >> ENV_VAR: 15
echo "::set-output name=OPENWRTROOT::$(echo ENV_VAR)": 15
git clone FLAG=1 URL customfeeds CUSTOM_PATH_DIR: 8
[ -e files ] && mv files ENV_VAR CUSTOM_PATH_DIR: 38
[ -e ENV_VAR ] && mv ENV_VAR ENV_VAR CUSTOM_PATH_DIR: 52
cat config CUSTOM_PATH_FILE >> ENV_VAR CUSTOM_PATH_DIR: 26
.. CUSTOM_PATH_FILE armv8: 8
make tools CUSTOM_PATH_DIR -j$(nproc) || make tools CUSTOM_PATH_DIR -j1 V=s: 36
make toolchain CUSTOM_PATH_DIR -j$(nproc) || make toolchain CUSTOM_PATH_DIR -j1 V=s: 28
make target CUSTOM_PATH_DIR -j$(nproc) || make target CUSTOM_PATH_DIR -j1 V=s IGNORE_ERRORS=1: 24
make buildinfo: 13
make package CUSTOM_PATH_DIR -j$(nproc) IGNORE_ERRORS=1 || make package CUSTOM_PATH_DIR -j1 V=s IGNORE_ERRORS=1: 37
make package CUSTOM_PATH_DIR: 37
PLATFORM=$(basename `pwd`): 19
echo "PLATFORM=ENV_VAR" >> ENV_VAR: 15
echo "::set-output name=PLATFORM::$(echo ENV_VAR)": 15
TARGET=$(basename `pwd`): 19
echo "TARGET=ENV_VAR" >> ENV_VAR: 20
echo "::set-output name=TARGET::$(echo ENV_VAR)": 15
cd *: 19
SUBTARGET=$(basename `pwd`): 19
echo "SUBTARGET=ENV_VAR" >> ENV_VAR: 15
echo "::set-output name=SUBTARGET::$(echo ENV_VAR)": 15
echo "::set-output name=FIRMWARE::$(echo ENV_VAR)": 6
echo "::set-output name=COMPILE_STATUS::success": 14
echo "OPENWRTROOT=$(echo '${{needs.Build.outputs.OPENWRTROOT}}')" >> ENV_VAR: 14
echo "PLATFORM=$(echo '${{needs.Build.outputs.PLATFORM}}')" >> ENV_VAR: 14
echo "TARGET=$(echo '${{needs.Build.outputs.TARGET}}')" >> ENV_VAR: 14
echo "SUBTARGET=$(echo '${{needs.Build.outputs.SUBTARGET}}')" >> ENV_VAR: 14
echo "FIRMWARE=$(echo '${{needs.Build.outputs.FIRMWARE}}')" >> ENV_VAR: 6
echo "GENERATE_STATUS=$(echo '${{needs.Build.outputs.GENERATE_STATUS}}')" >> ENV_VAR: 14
mkdir -p server CUSTOM_PATH_DIR: 21
cp -r ENV_VAR CUSTOM_PATH_DIR server CUSTOM_PATH_DIR: 38
mv server packages-server: 14
zip -qrm packages-server.zip packages-server: 14
mv packages-server.zip ENV_VAR CUSTOM_PATH_DIR: 14
${{ secrets.RCLONE_CONFIG }}: 6
rclone copy bin ENV_VAR:$(date +"%Y-%m-%d") CUSTOM_PATH_DIR FLAG .. CUSTOM_PATH_FILE: 6
rclone copy bin CUSTOM_PATH_DIR ENV_VAR:$(date +"%Y-%m-%d") CUSTOM_PATH_DIR FLAG "packages CUSTOM_PATH_DIR: 6
echo "::warning file=Firmware-GoogleDrive::Download Link: URL: 6
echo "::set-output name=ORGANIZE_STATUS::success": 14
echo "::warning file=Firmware-Wetransfer.com::$(cat wetransfer.log | grep https)": 6
bundle exec bin CUSTOM_PATH_DIR: 13
oranda build: 7
USES: xt0rted/markdownlint-problem-matcher: 8
linPEAS CUSTOM_PATH_FILE: 7
echo "::set-output name=tag::$tag": 23
cd frontend && npm install: 6
python -m pip install FLAG coveralls: 7
python -m coveralls FLAG=github: 7
mkdir -p workspace: 8
echo "==============================": 6
npm run build-dist: 14
USES: quick-lint/sftp-upload: 16
USES: frenck/action-addon-information: 9
USES: kaliber5/action-get-release: 6
. ENV_VAR; print_system_info; print_ec2_info: 10
. ENV_VAR; print_gpu_info: 23
. ENV_VAR; setup_miniconda ENV_VAR CUSTOM_PATH_DIR: 24
. ENV_VAR; create_conda_environment ENV_VAR ${{ matrix.python-version }}: 24
. ENV_VAR; install_build_tools ENV_VAR: 15
. ENV_VAR; cd fbgemm_gpu CUSTOM_PATH_DIR run_fbgemm_gpu_tests ENV_VAR cpu: 6
USES: pytorch/test-infra/.github/actions/setup-nvidia: 6
. ENV_VAR; install_cuda ENV_VAR ${{ matrix.cuda-version }}: 9
. ENV_VAR; print_system_info: 16
USES: postgresml/gh-actions-cargo: 21
brew install python: 17
npm install plist: 6
poetry install -E all: 10
python -m pip install -e ".[test]": 6
python -m pip install -e . FLAG: 22
USES: wangchucheng/git-repo-sync: 11
${{ matrix.cmd }}: 26
sudo apt-get install -y mingw-w64: 12
g++ -v: 27
git submodule update FLAG FLAG 1 fuzz CUSTOM_PATH_DIR: 34
CC=clang . CUSTOM_PATH_DIR FLAG=Configured FLAG ${{ matrix.opt }}: 6
make -s -j4: 74
. CUSTOM_PATH_FILE version -c: 16
make test HARNESS_JOBS=ENV_VAR:-4}: 48
bundle install FLAG vendor CUSTOM_PATH_DIR: 7
git fetch FLAG FLAG -f: 8
just install: 6
python -m pip install pyinstaller: 8
make benchmark: 10
ctest -j $(getconf _NPROCESSORS_ONLN) FLAG: 6
curl -L -O -k URL: 10
USES: ./.github/workflows/yarn: 8
USES: ./.github/workflows/build: 8
docker load -i ENV_VAR: 14
docker images -a ENV_VAR: 14
docker buildx du FLAG: 9
USES: mad9000/actions-find-and-replace-string: 22
.\get_dlc.bat: 13
cd output: 21
USES: myci-actions/add-deb-repo: 23
curl -O -L URL: 14
sleep 2: 86
echo "core.%p" | sudo tee CUSTOM_PATH_DIR: 13
npm run make: 16
make security: 7
npm ci FLAG=x64 FLAG=linuxmusl FLAG .npm FLAG FLAG: 10
npx prisma generate: 7
docker build -t ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.tag }} .: 6
zstd -dc artifacts CUSTOM_PATH_FILE | docker load: 16
mkdir logs: 18
docker tag ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.tag }} ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.tag }}: 6
docker tag ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.tag }} ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.minorversion }}: 12
docker push -a ENV_VAR CUSTOM_PATH_DIR: 17
echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key: 21
cosign sign FLAG FLAG cosign.key $(docker inspect FLAG='{{index .RepoDigests 0}}' ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.tag }} ): 12
PACKAGE_VERSION=$(jq -r '.version' services CUSTOM_PATH_FILE): 8
echo "The version was ${{ steps.get_version.outputs.version }}": 10
python3 -m pip install -U pip: 36
python3 -m flake8: 6
brew install ENV_VAR: 8
USES: ./whitesource-actions/snyk-pr: 6
pytest tests CUSTOM_PATH_DIR: 146
USES: ./.github/actions/build_info: 15
USES: ./.github/actions/make_init: 16
make develop: 33
saveRDS(remotes::dev_package_deps("R-package", dependencies = TRUE), ".github CUSTOM_PATH_FILE", version = 2): 9
remotes::install_deps("R-package", dependencies = TRUE): 9
install.packages("pkgdown", type = "binary"): 6
R CMD INSTALL R-package: 10
pip install scikit-learn: 24
pip install pandas: 15
ls *: 10
sudo apt-get install python3: 6
install.packages("covr"): 6
echo 'UNITTEST_TIMEOUT=FLAG=120' >> ENV_VAR: 6
USES: ./.github/actions/pull-caches: 6
pip install "Pillow<9.0": 7
USES: lots0logs/gh-action-get-changed-files: 15
yarn check:eslint: 11
yarn check:prettier: 12
make build-ui: 11
USES: anchore/sbom-action: 36
lerna bootstrap: 10
echo "LOG_LEVEL=${{ github.event.inputs.logLevel || env.LOG_LEVEL }}" >> "ENV_VAR": 9
docker-compose -f .github CUSTOM_PATH_FILE run FLAG web make magento: 7
docker-compose -f .github CUSTOM_PATH_FILE up -d web: 7
docker exec magento2-container make fs: 13
docker exec magento2-container make sys-check: 7
docker exec -u www-data magento2-container make plugin: 7
docker exec -u www-data magento2-container make production: 6
docker-compose -f .github CUSTOM_PATH_FILE run FLAG playwright CUSTOM_PATH_FILE: 6
USES: JJ/github-pr-contains-action: 6
dotnet tool install -g FLAG 6.5.0 Swashbuckle.AspNetCore.Cli: 9
New-Item -Path .\.sonar\scanner -ItemType Directory: 37
dotnet tool update dotnet-sonarscanner FLAG .\.sonar\scanner: 36
.\.sonar\scanner\dotnet-sonarscanner begin CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE="${{ secrets.SONAR_TOKEN }}" CUSTOM_PATH_FILE="URL: 18
USES: jwalton/gh-find-current-pr: 30
echo 'Copying back to Kavita wwwroot': 9
rsync -a dist/ .. CUSTOM_PATH_DIR: 9
cd ../ || exit: 9
version='${{steps.get-version.outputs.assembly-version}}': 7
echo "${{steps.get-version.outputs.assembly-version}}": 8
test -e . CUSTOM_PATH_FILE && echo "exists=true" >> ENV_VAR || echo "exists=false" >> ENV_VAR: 10
npm run export: 14
USES: liskin/gh-problem-matcher-wrap: 28
. CUSTOM_PATH_FILE ENV_VAR ENV_VAR: 17
git config FLAG user.email "GraphTooling": 7
git config FLAG user.name "Microsoft Graph DevX Tooling": 7
curl -fsSL URL | bash -s 2.14.1: 17
docker load -i CUSTOM_PATH_DIR: 15
echo "supervisorctl tail -f stellar-core" | docker exec -i stellar sh &: 12
echo "supervisorctl tail -f horizon" | docker exec -i stellar sh &: 13
git fetch FLAG || true: 7
kill %1: 13
ldd . CUSTOM_PATH_DIR: 9
docker pull ubuntu:22.04: 6
sudo snap install yq: 34
cd ${{ env.RESC_FRONTEND_DIR }}: 8
cat tests CUSTOM_PATH_FILE: 28
echo ::set-output name=timestamp::$(date -u +"%Y-%m-%dT%H:%M:%SZ"): 8
USES: ./.github/actions/download-qt: 7
qbs setup-toolchains FLAG: 23
qbs config defaultProfile qt: 11
qbs config FLAG: 13
pip3 FLAG: 7
poetry run flake8: 24
git diff FLAG FLAG || git commit -m "COMMIT_MSG": 20
mvn -T 8 clean test -Dprops.file=testconfig CUSTOM_PATH_FILE: 6
dotnet tool install -g dotnet-format: 28
sudo chown -R runner CUSTOM_PATH_DIR: 8
echo ENV_VAR CUSTOM_PATH_DIR: 8
cmake FLAG build -j2: 21
cd install CUSTOM_PATH_DIR: 14
USES: ./.github/actions/python/setup: 34
go mod download -x: 19
docker pull kindlingproject CUSTOM_PATH_DIR: 6
docker tag kindlingproject CUSTOM_PATH_DIR kindlingproject CUSTOM_PATH_DIR: 6
docker push kindlingproject CUSTOM_PATH_DIR: 6
docker tag kindlingproject CUSTOM_PATH_DIR kindlingproject CUSTOM_PATH_DIR env.RELEASE }}: 6
docker push kindlingproject CUSTOM_PATH_DIR env.RELEASE }}: 6
curl -sS URL | php -- FLAG= CUSTOM_PATH_DIR FLAG=composer: 7
dot -V: 6
git config FLAG user.email "github-actions": 39
sudo apt-get install -y jq: 60
echo "::set-output name=url::ENV_VAR": 6
source multibuild CUSTOM_PATH_FILE: 10
yarn playwright test: 6
cargo clippy -- -Dwarnings: 14
sudo nvidia-smi -pm 1: 6
sudo nvidia-smi -ac 1215,1410: 6
CONDA_ENV=ENV_VAR . "ENV_VAR": 8
. "ENV_VAR": 14
cp -r . CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 7
conda deactivate && conda deactivate: 6
conda remove -n "ENV_VAR" FLAG: 6
make dev-env: 10
sudo sed -i ' CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 9
echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "ENV_VAR": 26
mkdir -p test CUSTOM_PATH_DIR matrix.branch }}: 17
go install -v -mod=mod github.com CUSTOM_PATH_DIR: 25
sudo pip3 install j2cli: 36
sudo pip3 install "j2cli[yaml]": 36
sudo PATH=~ CUSTOM_PATH_DIR make kind-init-${{ matrix.ip-family }}: 8
sudo cp -r CUSTOM_PATH_FILE/ ~ CUSTOM_PATH_DIR: 36
sudo chown -R $(id -un). ~ CUSTOM_PATH_DIR: 36
version=$(grep -E '^VERSION="v([0-9]+\.){2}[0-9]+"$' dist CUSTOM_PATH_FILE | head -n1 | awk -F= '{print $2}' | tr -d '"'): 18
docker pull kubeovn CUSTOM_PATH_DIR: 30
sh dist CUSTOM_PATH_FILE: 8
sudo PATH=~ CUSTOM_PATH_DIR make kind-init: 17
wget URL -O ENV_VAR CUSTOM_PATH_FILE: 9
echo "FLAG": 247
USES: sinshutu/upload-to-discord: 7
python -m pip install FLAG pip setuptools build: 6
git config user.email "${{ secrets.GH_EMAIL }}": 7
git remote add gh-token "URL secrets.GH_TOKEN }} CUSTOM_PATH_FILE": 6
git fetch gh-token && git fetch gh-token gh-pages:gh-pages: 6
python -m mkdocs gh-deploy -v FLAG FLAG gh-token: 6
git push gh-token gh-pages: 6
go run github.com CUSTOM_PATH_DIR: 7
USES: ScaCap/action-surefire-report: 11
USES: xt0rted/slash-command-action: 21
pip install wheel twine setuptools codecov: 6
coverage run tests.py: 10
yarn build-site: 7
cp -r packages CUSTOM_PATH_DIR site: 7
npm i -g vsce: 10
npm run build:dist: 7
pnpm format: 15
USES: Apple-Actions/download-provisioning-profiles: 9
curl -sL URL | bash: 38
USES: haya14busa/action-workflow_run-status: 29
USES: potiuk/get-workflow-origin: 29
kubectl apply -f . CUSTOM_PATH_DIR: 27
npm i  CUSTOM_PATH_DIR: 20
pip install -r requirements-build.txt: 7
mv tmp CUSTOM_PATH_DIR arelle CUSTOM_PATH_DIR: 9
rm -rf tmp: 17
make prod: 7
echo '${{ secrets.api_key }}' > ~ CUSTOM_PATH_DIR secrets.api_key_id }}.p8: 10
mkdir temp: 14
cd temp: 11
rm -rf temp: 6
du -hcs CUSTOM_PATH_DIR : 71
sudo apt-get remove -y '^dotnet-.*' || true: 71
sudo apt-get remove -y '^llvm-.*' || true: 71
sudo apt-get remove -y '^mongodb-.*' || true: 71
sudo apt-get remove -y '^mysql-.*' || true: 71
sudo apt-get remove -y '^temurin-.*' || true: 71
sudo apt-get remove -y azure-cli google-cloud-sdk microsoft-edge-stable google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri || true: 71
sudo rm -rf CUSTOM_PATH_DIR # removes haskell: 71
sudo rm -rf "ENV_VAR" # removes all pre-cached tools (node, go, python, ruby) to free around 6Gb: 71
yarn deploy: 50
${{ toJson(github) }}: 21
USES: giantswarm/install-binary-action: 15
git config FLAG user.name "taylorbot": 8
minikube start: 11
sudo apt-get install -y gcc-10 g++-10: 8
export ENCRYPTED=0 WEBRTC=0: 12
make runjunitsrv: 8
export ENCRYPTED=1 WEBRTC=0: 8
Server CUSTOM_PATH_DIR -d -c Server CUSTOM_PATH_FILE: 9
cp -f Library CUSTOM_PATH_FILE_template Server CUSTOM_PATH_FILE: 13
cp Library CUSTOM_PATH_FILE Server/: 22
Server CUSTOM_PATH_DIR -d -wd Server/: 9
killall tt5prosrv: 13
make runjunitpro: 8
make dox: 8
git fetch origin FLAG: 8
USES: crazy-max/ghaction-container-scan: 6
ENV_VARrrorActionPreference = "Stop": 17
echo "PULUMI_GO_DEP_ROOT=$(dirname $(pwd))" >> ENV_VAR: 9
chmod a+x ENV_VAR CUSTOM_PATH_DIR: 11
find ENV_VAR CUSTOM_PATH_DIR: 8
echo $(which dotnet): 6
echo $(dotnet FLAG): 6
echo "PULUMI_LOCAL_NUGET=ENV_VAR": 6
rm . CUSTOM_PATH_FILE || true: 6
mkdir -p test-results: 14
npm run test:types: 27
USES: browniebroke/pre-commit-autoupdate-action: 11
php occ app:check-code ${{ env.APP_NAME }}: 7
cd build; . CUSTOM_PATH_DIR: 6
mkdir upload: 24
sudo apt install zip: 10
ls ./: 16
cp -R . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR env.CEMU_FOLDER_NAME }}: 8
rm -r . CUSTOM_PATH_DIR env.CEMU_FOLDER_NAME }}: 8
wget -O ghr.tar.gz URL: 15
USES: chainguard-dev/actions/goimports: 6
~ CUSTOM_PATH_DIR: 20
yarn jest FLAG FLAG tests CUSTOM_PATH_DIR: 6
yarn playwright install-deps chromium: 6
yarn playwright install chromium: 8
.scripts CUSTOM_PATH_FILE 4000 250: 7
dotnet build src CUSTOM_PATH_FILE FLAG Release: 59
dotnet pack src CUSTOM_PATH_FILE FLAG Release: 32
git config user.email "hydrogen": 8
git config user.name "Hydrogen Bot": 8
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.NPM_TOKEN }}" >> ~ CUSTOM_PATH_DIR: 11
cmake FLAG build FLAG Release FLAG install: 23
mkdir packages: 10
cd ${{ env.PATH_TEMPLATE }}: 28
sleep 60s: 58
isort . FLAG FLAG: 24
cd rclex: 13
mix deps.compile: 57
yarn start: 7
dotnet publish projects CUSTOM_PATH_FILE FLAG linux FLAG x64 -c Release -p:PublishProfile=DefaultContainer -p:ContainerImageName=${{ secrets.DOCKER_USERNAME }} CUSTOM_PATH_FILE: 12
docker push ${{ secrets.DOCKER_USERNAME }} CUSTOM_PATH_FILE FLAG: 15
sudo apt-get install libegl1: 6
sudo apt-get install libxkbcommon-x11-0: 7
USES: enthought/setup-edm-action: 8
edm install -y wheel click coverage: 7
dotnet tool install FLAG DotNetCompress FLAG 2.0.0 FLAG: 6
cp ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE: 17
DotNetCompress -d ENV_VAR -p "*.dll" "*.js" "*.wasm" FLAG gz FLAG 4: 6
bun run test: 10
docker build -t ENV_VAR CUSTOM_PATH_DIR .: 14
mypy . CUSTOM_PATH_DIR: 8
&& cd ENV_VAR \: 9
USES: manusa/actions-setup-openshift: 8
USES: pre-commit-ci/lite-action: 15
.github CUSTOM_PATH_FILE amici: 6
tox -e doc: 7
<meta charset="utf-8">: 6
USES: Jerome1337/gofmt-action: 18
mypy FLAG FLAG . || true: 6
pytest FLAG . || true: 15
cd OctoBot: 11
sed -i "s CUSTOM_PATH_DIR metadata.yaml: 6
codespell: 26
yarn global add  CUSTOM_PATH_DIR: 33
aws configure set aws_access_key_id ENV_VAR && \: 14
aws configure set aws_secret_access_key ENV_VAR && \: 14
aws configure set aws_session_token ENV_VAR && \: 14
aws configure set default.region ENV_VAR: 15
yarn pull: 8
USES: aws-amplify/amplify-ui/.github/actions/log-metric: 20
wget -nc URL -P target CUSTOM_PATH_DIR: 6
rm -rf target CUSTOM_PATH_DIR: 20
cargo install FLAG duckscript_cli: 7
rustup component add llvm-tools-preview: 31
echo "🐧 This job is now running on a ${{ runner.os }}-${{ runner.arch }} server hosted by GitHub!": 11
make build -j8: 10
unzip -q CUSTOM_PATH_FILE -d CUSTOM_PATH_DIR: 6
rm CUSTOM_PATH_FILE: 49
mkdir -p out: 16
cmd CUSTOM_PATH_DIR: 20
export PATH=ENV_VAR: CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 13
USES: Workday/canvas-kit-actions/install: 11
git config FLAG pull.rebase false: 15
node utils CUSTOM_PATH_FILE: 8
yarn build-storybook FLAG: 6
cd Emitron: 10
bundle exec fastlane -v: 10
gh extension install actions CUSTOM_PATH_DIR: 11
vendor CUSTOM_PATH_DIR fix FLAG=.php_cs FLAG FLAG=udiff FLAG FLAG: 8
vendor CUSTOM_PATH_DIR FLAG=test CUSTOM_PATH_FILE: 13
USES: ./.github/actions/nodejs: 7
USES: ./.github/actions/bump-version: 8
USES: leleliu008/github-actions-vagrant: 6
composer require FLAG christophwurst CUSTOM_PATH_DIR matrix.ocp-version }}: 9
make secure: 9
USES: mr-smithers-excellent/docker-build-push: 37
go test .: 16
go build -race .: 6
make kind-install: 6
go mod tidy -compat=1.17: 6
git config user.email "bot": 15
USES: micronaut-projects/github-actions/export-gradle-properties: 10
USES: micronaut-projects/github-actions/release-notes: 6
export GOPATH=$(go env GOPATH) CUSTOM_PATH_DIR: 8
ls . CUSTOM_PATH_DIR && find . CUSTOM_PATH_DIR -type f -name "*.sh" -exec chmod +x "{}" \; && . CUSTOM_PATH_FILE: 10
find . CUSTOM_PATH_DIR -type f -name "*.sh" -exec chmod +x "{}" \; && . CUSTOM_PATH_FILE: 19
. CUSTOM_PATH_FILE ${{ matrix.category }}: 6
USES: ros-tooling/action-ros-lint: 17
USES: ./.github/actions/docker: 20
USES: Azure/docker-login: 34
USES: alstr/todo-to-issue-action: 21
USES: cclauss/GitHub-Action-for-pylint: 7
USES: abbbi/github-actions-tune: 7
sudo python3 setup.py install: 11
echo "::set-output name=directory::$(composer config cache-dir)": 39
USES: mirromutth/mysql-action: 66
mv tests CUSTOM_PATH_FILE tests CUSTOM_PATH_FILE: 7
npm outdated: 9
ENV_FILE=web CUSTOM_PATH_FILE source web CUSTOM_PATH_FILE: 7
git clone FLAG FLAG FLAG 1 -b master URL secrets.GH_BOT_ACCESS_TOKEN }} CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 6
USES: ./.github/actions/website-sync: 26
. CUSTOM_PATH_DIR verify -P '!setup-test-cluster' -Drabbitmqctl.bin=DOCKER:rabbitmq \: 7
-Dtest-client-cert.password= -Dtest-tls-certs.dir=rabbitmq-configuration CUSTOM_PATH_DIR \: 7
brew install clang-format: 15
. CUSTOM_PATH_DIR account ${{secrets.QINIU_AK}} ${{secrets.QINIU_SK}} ${{secrets.QINIU_ACCOUNT_NAME}}: 8
npm install FLAG=python2.7: 8
npm run electron:build: 25
echo "VERSION=$(cat VERSION)" >> ENV_VAR: 11
sudo apt-get install wget: 13
source .github CUSTOM_PATH_FILE && c4_cfg_test shared64: 29
source .github CUSTOM_PATH_FILE && c4_build_test shared64: 27
source .github CUSTOM_PATH_FILE && c4_run_test shared64: 27
source .github CUSTOM_PATH_FILE && c4_package shared64: 25
source .github CUSTOM_PATH_FILE && c4_cfg_test static64: 28
source .github CUSTOM_PATH_FILE && c4_build_test static64: 28
source .github CUSTOM_PATH_FILE && c4_run_test static64: 27
source .github CUSTOM_PATH_FILE && c4_package static64: 25
source .github CUSTOM_PATH_FILE && c4_cfg_test static32: 31
source .github CUSTOM_PATH_FILE && c4_build_test static32: 31
source .github CUSTOM_PATH_FILE && c4_run_test static32: 30
source .github CUSTOM_PATH_FILE && c4_package static32: 25
source .github CUSTOM_PATH_FILE && c4_cfg_test shared32: 27
source .github CUSTOM_PATH_FILE && c4_build_test shared32: 27
source .github CUSTOM_PATH_FILE && c4_run_test shared32: 27
source .github CUSTOM_PATH_FILE && c4_package shared32: 25
npx commitlint FLAG ${{ github.event.pull_request.base.sha }} FLAG ${{ github.event.pull_request.head.sha }} FLAG: 7
python src CUSTOM_PATH_FILE: 13
sudo apt remove libllvm12 libllvm13: 7
libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-distutils: 12
git clone FLAG 1 FLAG v0.24.0 URL: 12
mkdir bcc CUSTOM_PATH_DIR cd bcc CUSTOM_PATH_DIR: 14
cmake -DPYTHON_CMD=python3 .. # build python3 binding: 13
pushd src CUSTOM_PATH_DIR: 20
USES: ./plugin/.github/actions/build-plugin: 11
USES: ./plugin/.github/actions/package-plugin: 15
## SETUP ENVIRONMENT SCRIPT: 8
python3 -m pip freeze: 8
echo "DATE=$(date +'%Y%m%d')" >> ENV_VAR: 7
rm -rf . CUSTOM_PATH_DIR && cp -rf . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 12
USES: cpp-linter/cpp-linter-action: 9
pip install -e . FLAG: 31
python -m pytest -v tests CUSTOM_PATH_DIR: 7
tests CUSTOM_PATH_FILE build: 15
export PATH="ENV_VAR:ENV_VAR": 12
gradle clean build: 7
export PYTHONPATH=ENV_VAR CUSTOM_PATH_DIR: 14
cp config CUSTOM_PATH_FILE .config: 10
make clean && make test-sim-internal-flash-with-update: 9
make clean && make test-sim-external-flash-with-enc-update: 12
make -C tools CUSTOM_PATH_DIR: 8
make quality: 14
sudo apt-get install libfuzzy-dev graphviz libgraphviz-dev tesseract-ocr unrar xfonts-base xfonts-75dpi: 6
cd libemu: 6
autoreconf -v -i: 6
pip3 install tox tox-gh-actions: 7
sudo cp -R thug CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 9
USES: getong/elasticsearch-action: 10
pip install virtualenv: 69
virtualenv test_python -q: 27
source test_python CUSTOM_PATH_DIR: 51
make installdeps: 16
make installdeps-test: 22
make ${{matrix.command}}: 11
pip install FLAG -r dev_requirements CUSTOM_PATH_FILE: 8
tox -- -vv: 8
sudo tar xf ccache-4.8.2-linux-x86_64.tar.xz -C CUSTOM_PATH_DIR FLAG=1 FLAG ccache-4.8.2-linux-x86_64 CUSTOM_PATH_DIR: 6
rm -f ccache-*-linux-x86_64.tar.xz: 6
USES: hazelcast/github-jira-tool-action: 7
bash test CUSTOM_PATH_FILE: 29
echo "CXX=ENV_VAR" >> ENV_VAR: 14
USES: ./.github/actions/build_core_dependencies: 6
LANDO_VERSION=$(node -pe 'JSON.parse(process.argv[1]).version' "$(cat package.json)"): 6
scripts CUSTOM_PATH_FILE ${{ matrix.flavor }} "ENV_VAR": 6
python -m pip install -e .[docs]: 7
yarn test:iam: 6
yarn test:identity: 6
yarn lint:iam: 6
yarn lint:identity: 6
docker build -t ENV_VAR CUSTOM_PATH_DIR -f iam CUSTOM_PATH_DIR .: 6
pulumi stack select -c gitcoin CUSTOM_PATH_DIR: 16
pulumi config -s gitcoin CUSTOM_PATH_DIR set aws:region us-east-1 FLAG: 11
pip install FLAG pip poetry: 7
node . CUSTOM_PATH_FILE ${{matrix.graphql_version}}: 7
.\ci\scripts\cpp_build.ps1 $pwd $pwd\build: 6
.\ci\scripts\python_build.ps1 $pwd $pwd\build: 6
bundle exec rake FLAG: 6
dotnet tool install FLAG dotnet-reportgenerator-globaltool: 19
dotnet test test CUSTOM_PATH_FILE FLAG:"XPlat Code Coverage" FLAG trx FLAG ENV_VAR CUSTOM_PATH_DIR: 13
reportgenerator -reports:ENV_VAR CUSTOM_PATH_FILE -targetdir:ENV_VAR CUSTOM_PATH_DIR -reporttypes:"SonarQube": 13
git config FLAG user.name "github-actions": 43
echo "[+] KernelSU setup": 6
ln -sf ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 8
DRIVER_MAKEFILE=ENV_VAR CUSTOM_PATH_DIR: 7
grep -q "kernelsu" ENV_VAR || echo "obj-y += kernelsu CUSTOM_PATH_DIR >> ENV_VAR: 7
dart format FLAG lib test: 11
echo PATH=" CUSTOM_PATH_DIR >> ENV_VAR: 15
echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login FLAG "${{ secrets.DOCKER_USERNAME }}" FLAG: 6
unzip CUSTOM_PATH_FILE -d . CUSTOM_PATH_DIR: 20
yarn run pack: 9
sudo apt install gcc-avr avr-libc: 7
cd ${{ matrix.example }}: 9
sudo apt install gcc-arm-none-eabi: 7
git submodule update FLAG tools: 33
git submodule update FLAG libs CUSTOM_PATH_DIR: 82
. CUSTOM_PATH_DIR headers: 57
cd examples CUSTOM_PATH_DIR matrix.example }}: 12
PR_URL="${{ github.event.comment.issue_url }}": 33
echo "::set-output name=PR_NR::ENV_VAR##* CUSTOM_PATH_DIR: 33
echo "::set-output name=SHA::$(git rev-parse HEAD)": 33
rm -rf Assets CUSTOM_PATH_DIR: 7
USES: rlespinasse/git-commit-data-action: 18
git describe FLAG: 11
sudo apt-get install -y software-properties-common: 26
mvn -U -T 1C -P 'skipTests,all': 22
chmod 600 ENV_VAR CUSTOM_PATH_DIR: 9
npm i -g github:apache CUSTOM_PATH_DIR: 10
. CUSTOM_PATH_DIR assembleDebug FLAG: 15
. CUSTOM_PATH_DIR checkstyleMain: 11
sed -i 's|section-text-widget.html|URL target CUSTOM_PATH_FILE: 6
wget URL -O . CUSTOM_PATH_FILE: 17
wget "URL: 89
tar -xf cache CUSTOM_PATH_FILE FLAG=1: 10
mkdir -p upload CUSTOM_PATH_DIR: 7
devtools CUSTOM_PATH_FILE: 30
cat failed-tests.log: 25
. CUSTOM_PATH_DIR verifyPlugin: 10
PROPERTIES="$(. CUSTOM_PATH_DIR properties FLAG=plain -q)": 28
IDE_VERSIONS="$(echo "ENV_VAR" | grep "^pluginVerifierIdeVersions:" | base64)": 9
VERSION="$(echo "ENV_VAR" | grep "^version:" | cut -f2- -d ' ')": 20
ARTIFACT="ENV_VAR-ENV_VAR.zip": 8
echo "::set-output name=ideVersions::ENV_VAR": 8
echo "::set-output name=pluginVerifierHomeDir::~ CUSTOM_PATH_DIR: 10
echo "::set-output name=artifact::ENV_VAR": 6
. CUSTOM_PATH_DIR runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}: 11
sudo xcode-select FLAG CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 30
echo ' CUSTOM_PATH_DIR >> ENV_VAR: 16
docker login -u "ENV_VAR" -p "ENV_VAR": 19
useradd rnpuser: 15
yum -y -q install sudo: 11
echo -e "rnpuser\tALL=(ALL)\tNOPASSWD:\tALL" > CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 11
echo -e "rnpuser\tsoft\tnproc\tunlimited\n" > CUSTOM_PATH_FILE: 11
sudo apt-get -y install libssl-dev: 8
cmake FLAG ${{ github.workspace }} CUSTOM_PATH_DIR: 11
md C:\projects: 10
$client = new-object System.Net.WebClient: 15
$client.DownloadFile("URL: 15
7z x C:\projects\vcpkg-export-hpx-dependencies.7z -y -oC:\projects\vcpkg: 10
FLAG ALL_BUILD \: 9
pnpm run bundle: 6
echo "GIT_BRANCH=ENV_VAR" >> ENV_VAR: 20
chmod +x . CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 8
. CUSTOM_PATH_FILE CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR ENV_VAR##* CUSTOM_PATH_DIR: 8
echo "release_tag=$release_tag" >> ENV_VAR      : 32
brew install wget: 14
sudo apt-get install libgbm1: 8
USES: aquaproj/aqua-installer: 25
USES: ./setup: 11
dotnet workload restore: 11
bash -ex ci CUSTOM_PATH_FILE: 6
ls -alFR: 10
chmod +x pyuploadtool-x86_64.AppImage: 6
npm install FLAG=dev: 30
npm install npm -g: 8
touch apps CUSTOM_PATH_FILE: 7
export ANDROID_NDK_ROOT=ENV_VAR CUSTOM_PATH_DIR: 23
flake8 . FLAG: 9
conda FLAG: 41
delimiter="$(openssl rand -hex 8)": 7
echo "$delimiter" >> ENV_VAR: 6
echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} FLAG: 10
python build.py: 11
docker push apache CUSTOM_PATH_DIR: 9
docker rmi apache CUSTOM_PATH_DIR: 9
eval $(minikube -p minikube docker-env): 43
${{runner.workspace}} CUSTOM_PATH_DIR: 11
USES: ./.github/workflows/composite_action/sim: 30
docker exec ${{ github.job }} bash -c "cd CUSTOM_PATH_DIR && rm -rf . CUSTOM_PATH_DIR: 37
docker exec ${{ github.job }} bash -c "cd CUSTOM_PATH_DIR && SGX_MODE=SIM . CUSTOM_PATH_FILE": 17
docker exec ${{ github.job }} bash -c "cd CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE": 18
sleep ${{ env.nap_time }};: 15
docker exec ${{ github.job }} bash -c "cd CUSTOM_PATH_DIR . CUSTOM_PATH_FILE": 11
docker exec ${{ github.job }} bash -c "cd CUSTOM_PATH_DIR SGX_MODE=SIM . CUSTOM_PATH_FILE": 9
USES: ./.github/workflows/composite_action/prebuild: 12
govulncheck . CUSTOM_PATH_DIR: 41
pip install -r requirements-optional.txt: 6
echo "JAVA_HOME=ENV_VAR" >> ENV_VAR: 9
cd core && . CUSTOM_PATH_FILE: 12
cd android && . CUSTOM_PATH_FILE: 8
tox -vv FLAG: 6
echo OK: 41
composer create-project nette CUSTOM_PATH_DIR temp CUSTOM_PATH_DIR ^3 FLAG: 30
php temp CUSTOM_PATH_DIR check: 13
dotnet pack -c Release: 6
USES: pguyot/arm-runner-action: 39
USES: ./.github/actions/verify-token: 6
USES: pheel/path-watcher-action: 59
echo "date=$(date +'%Y-%m')" >> ENV_VAR: 14
conda install pytest: 19
conda update conda: 9
activate base: 6
python -m venv ~ CUSTOM_PATH_DIR: 9
USES: ./.github/actions/setup-libcgroup: 9
pushd tests CUSTOM_PATH_DIR: 8
USES: ./.github/actions/code-coverage: 7
export PYTHONPATH=ENV_VAR:$(pwd): 6
mvn spotless:check animal-sniffer:check test verify: 7
mvn -B package: 30
sudo apt-get install ccache: 17
ccache FLAG FLAG: 12
cmake FLAG build FLAG test: 6
docker pull pandare CUSTOM_PATH_DIR: 7
bash tests CUSTOM_PATH_FILE: 40
make docker-build && make docker-push: 7
sudo xcode-select -switch CUSTOM_PATH_DIR .xcode-version).app: 15
USES: hyperledger/indy-shared-gha/.github/actions/workflow-setup: 8
npm run build -w packages CUSTOM_PATH_DIR: 20
npm install -g . CUSTOM_PATH_FILE: 9
npm run prod_test: 6
USES: SyliusLabs/BuildTestAppAction: 6
vendor CUSTOM_PATH_DIR FLAG FLAG FLAG -vvv -f progress FLAG="&&~" || vendor CUSTOM_PATH_DIR FLAG FLAG -vvv -f progress FLAG="&&~" FLAG: 9
sudo apt update : 6
xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())": 6
pip install .[doc]: 8
cd doc CUSTOM_PATH_DIR: 26
cp .. CUSTOM_PATH_FILE .. CUSTOM_PATH_DIR: 9
USES: skitionek/notify-microsoft-teams: 7
USES: jayqi/failed-build-issue-action: 9
USES: shufo/auto-assign-reviewer-by-files: 9
python -m pip install numpy==${{ matrix.numpy-version }}: 6
cp tests CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 14
cp tests CUSTOM_PATH_FILE CUSTOM_PATH_DIR && cd CUSTOM_PATH_DIR: 11
python -m compatibility_test: 16
mkdir gh-pages: 6
. CUSTOM_PATH_DIR assembleRelease FLAG: 16
yarn install FLAG FLAG 1000000: 12
yarn build-report: 8
npm install js-yaml: 13
source .. CUSTOM_PATH_FILE: 42
USES: ./.github/actions/golang: 25
USES: ./.github/actions/packages: 9
USES: ./.github/actions/cleanup-files: 7
USES: ./.github/actions/save-logs: 16
yarn run build:types: 6
sudo apt-get install curl: 10
sudo kill -9 `sudo lsof -t -i:8084`: 9
sudo lsof -i -P -n | grep LISTEN: 9
COMPOSE_PROFILES=all \: 12
EDITION=local-ce:test \: 21
python3 -m pip install FLAG -r requirements.txt: 6
cd sample: 13
sudo pip install -r requirements.txt: 6
npm run upload: 9
curl -L URL -o CUSTOM_PATH_DIR: 6
mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V: 9
tests CUSTOM_PATH_FILE primaryds: 10
docker network connect example primaryds FLAG primaryds.example.com: 9
tests CUSTOM_PATH_FILE primary: 25
docker network connect example primary FLAG primary.example.com: 12
tests CUSTOM_PATH_FILE secondaryds: 10
docker network connect example secondaryds FLAG secondaryds.example.com: 9
tests CUSTOM_PATH_FILE secondary: 25
docker network connect example secondary FLAG secondary.example.com: 12
tests CUSTOM_PATH_FILE tertiaryds: 7
docker network connect example tertiaryds FLAG tertiaryds.example.com: 6
tests CUSTOM_PATH_FILE tertiary: 12
docker network connect example tertiary FLAG tertiary.example.com: 6
docker exec primary pki-healthcheck FLAG: 8
docker exec secondary pki-healthcheck FLAG: 8
tests CUSTOM_PATH_FILE FLAG= CUSTOM_PATH_DIR primaryds: 8
tests CUSTOM_PATH_FILE FLAG= CUSTOM_PATH_DIR secondaryds: 8
docker exec tertiary pkidestroy -i pki-tomcat -s CA -v: 6
docker exec secondary pkidestroy -i pki-tomcat -s CA -v: 12
docker exec primary pkidestroy -i pki-tomcat -s CA -v: 11
npm install FLAG  CUSTOM_PATH_DIR: 22
echo "x64" > x64-a; echo "Win32" > x86-a; $msplatform = $(cat "${{matrix.platform}}-a"): 7
$gen = "Visual Studio 17 2022": 7
$config = "Release": 7
cd ..; cd ..: 8
cmake .. -A $msplatform -G $gen -DLIBUSB_LIBRARIES="$libusb_lib" -DLIBUSB_INCLUDE_DIR="$libusb_inc" -DTHREADS_PTHREADS_WIN32_LIBRARY="$pthread_lib" -DTHREADS_PTHREADS_INCLUDE_DIR="$pthread_inc": 8
echo "AIS-catcher": 8
cmake .. -A $msplatform -G $gen -DPOTHOSSDR_INCLUDE_DIR=${{github.workspace}}\include -DPOTHOSSDR_LIBRARY_DIR=${{github.workspace}}\lib -DPOTHOSSDR_BINARY_DIR=${{github.workspace}}\release: 8
msbuild CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR AIS-catcher.sln: 8
cp LICENSE output\Licenses\AIS-catcher: 8
cp build\*.dll output; cp build\Release\*.exe output; cp README.md output;: 6
Invoke-WebRequest -Uri "URL -OutFile ${{runner.workspace}} CUSTOM_PATH_FILE: 10
npm install -g prettier: 11
echo "Currently Pulumi $(pulumi version) is installed": 33
curl -o aws-iam-authenticator URL: 21
sudo mv aws-iam-authenticator CUSTOM_PATH_DIR: 20
helm init -c: 20
idf.py build: 49
USES: ./.github/actions/set-tag: 7
TAGS="ENV_VAR:ENV_VAR": 9
python -m cibuildwheel FLAG dist: 38
twine upload FLAG -u __token__ dist CUSTOM_PATH_DIR: 10
git config FLAG user.name "$(git FLAG log FLAG=format:'%an' -n 1)": 16
git config FLAG user.email "$(git FLAG log FLAG=format:'%ae' -n 1)": 16
git add pnpm-lock.yaml: 7
USES: ./.github/actions/setup-e2e: 14
tar zxf sources.tar.gz: 6
echo "nuttx_sha=`git -C sources CUSTOM_PATH_DIR rev-parse HEAD`" >> ENV_VAR: 6
swift test FLAG FLAG: 11
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv protobuf:apt: 6
npm install -g aws-cdk: 13
USES: 13rac1/block-fixup-merge-action: 13
PATH=" CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 25
rustup target add i686-unknown-linux-gnu: 11
git checkout ${{ github.event.pull_request.head.sha }}: 11
bundle exec rspec spec: 19
git commit -am "${{ steps.apply.outputs.message }}": 10
tools CUSTOM_PATH_FILE ${{ matrix.arch }} ENV_VAR: 6
cd ..    : 10
python diy CUSTOM_PATH_FILE FLAG "${{ secrets.ALIYUN_TOKEN }}" FLAG "OpenWrt CUSTOM_PATH_DIR FLAG "ARM_Out CUSTOM_PATH_DIR +%Y%m%d).zip"                               : 7
composer require "sylius CUSTOM_PATH_DIR matrix.sylius }}" FLAG FLAG FLAG: 6
brew install libpcap: 12
sudo apt install libpcap-dev: 9
USES: jpetrucciani/mypy-check: 10
USES: jpetrucciani/black-check: 8
composer run-script phpstan: 6
USES: olafurpg/setup-scala: 14
USES: Shopify/shopify-cla-action: 10
USES: CyberAndrii/setup-steamcmd: 8
gem install awesome_bot: 14
shellcheck FLAG: 23
. CUSTOM_PATH_FILE -i: 16
. CUSTOM_PATH_FILE -r: 8
make push: 20
USES: unifreq/openwrt_packit: 10
brew install opencc: 8
brew install speex: 8
brew install libiconv: 9
brew install lzo bzip2: 8
brew install libogg: 8
brew install zstd lzip: 8
brew install hunspell: 10
brew install  xz lzo : 8
brew install pkg-config: 51
brew install xapian: 6
brew install libzim: 6
find CUSTOM_PATH_DIR -name libicudata.72.dylib : 6
ls -al GoldenDict.app CUSTOM_PATH_DIR: 8
otool -L GoldenDict.app CUSTOM_PATH_FILE: 6
python setup.py build_ext FLAG: 50
python -c "import os;list(map(print,os.environ.items()))": 8
pytest FLAG=ylearn FLAG=30: 8
echo "CPATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 7
echo "LIBRARY_PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
brew update > CUSTOM_PATH_DIR: 6
set -euxo pipefail: 129
bash <(curl -fsSL URL: 8
xmake FLAG: 17
xmake -a: 10
mkdir -p build && cd build: 37
sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \: 7
echo "date=$(date +'%Y.%m.%d-%H%M')" >> ENV_VAR: 8
echo "date2=$(date +'%m CUSTOM_PATH_DIR %Y')" >> ENV_VAR: 8
echo "date3=$(date +'%m.%d')" >> ENV_VAR: 12
echo "DOCKERTAG=${{ secrets.DOCKER_ID }} CUSTOM_PATH_DIR >> ENV_VAR: 11
VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ CUSTOM_PATH_DIR || true: 11
sed -i '$a src-git smpackage URL feeds.conf.default: 9
ln -sf CUSTOM_PATH_DIR openwrt CUSTOM_PATH_DIR: 6
cp -f feeds CUSTOM_PATH_FILE CUSTOM_PATH_DIR package CUSTOM_PATH_DIR: 21
sed -i "s CUSTOM_PATH_DIR %V, %C CUSTOM_PATH_DIR $(date +'%m.%d') by kenzo CUSTOM_PATH_DIR package CUSTOM_PATH_DIR: 9
sed -i 's CUSTOM_PATH_DIR feeds CUSTOM_PATH_DIR: 6
cp -f feeds CUSTOM_PATH_FILE .config && make defconfig: 9
echo -e "$(($(nproc)+1)) thread compile": 11
mv -f openwrt CUSTOM_PATH_DIR . CUSTOM_PATH_DIR 2> CUSTOM_PATH_DIR || true: 11
cp openwrt CUSTOM_PATH_DIR  . CUSTOM_PATH_FILE: 11
cp openwrt CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 11
echo "v${{ env.date2 }}" > version.txt: 9
md5=$((md5sum *squashfs-sysupgrade* || md5sum *squashfs-combined-efi*) | awk '{print $1}') 2> CUSTOM_PATH_DIR: 11
echo $md5 >> version.txt: 22
rename -v "s CUSTOM_PATH_DIR env.VERSION }}-openwrt CUSTOM_PATH_DIR * || true: 9
rename -v "s CUSTOM_PATH_DIR *gz || true: 6
rm -rf sha256sums: 11
echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> ENV_VAR: 14
echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> ENV_VAR: 14
echo -e "墙内外加速下载 🎈:\n" >> release.txt: 11
echo -e "[kenzo] (URL secrets.REMOTE_HOST }} CUSTOM_PATH_FILE}})\n" >> release.txt: 9
echo "goversion=$(cat .go-version)" >> "ENV_VAR": 16
USES: ArtiomTr/jest-coverage-report-action: 14
dartdoc: 6
pip install click: 9
npm install -g fleetctl: 7
git diff FLAG HEAD: 12
cd compilers CUSTOM_PATH_DIR: 17
npm link . CUSTOM_PATH_DIR: 12
npm link kubeflow: 11
npm run test:prod: 13
kustomize build overlays CUSTOM_PATH_DIR | kubectl apply -f -: 10
dotnet restore unturned CUSTOM_PATH_FILE: 6
dotnet nuget push unturned CUSTOM_PATH_FILE FLAG ${{ secrets.NUGET_DEPLOY_KEY }} FLAG URL: 6
USES: ./.github/workflows/slack-notify: 11
sudo ninja -C build install: 21
. CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR FLAG: 10
python -m pip install FLAG FLAG pip: 48
python -m pip install FLAG build twine: 25
USES: rez0n/actions-github-release: 10
cargo build FLAG ${{ matrix.target }} FLAG FLAG: 35
echo "UUID_WORKER=$(uuidgen)" >> ENV_VAR: 7
cat docker-compose.rendered.yml: 13
cat << EOF > event.json: 12
${{ toJSON(github.event) }}: 8
USES: asottile/workflows/.github/actions/fast-checkout: 7
poetry run poe lint: 10
poetry run poe test: 6
echo "true" > expected: 12
make checks: 8
USES: prometheus/promci: 10
make -j$(getconf _NPROCESSORS_ONLN): 6
job_name=${{ matrix.name }}: 9
job_name_capital=${job_name^^}: 10
job_name_underscored=${job_name_capital CUSTOM_PATH_DIR: 10
echo "${job_name_underscored}_DIGEST := \"${{ steps.docker_build_release.outputs.digest }}\"" > image-digest CUSTOM_PATH_FILE: 10
echo "### ${{ matrix.name }}" > image-digest CUSTOM_PATH_DIR matrix.name }}.txt: 9
echo "" >> image-digest CUSTOM_PATH_DIR matrix.name }}.txt: 30
echo "\`quay.io CUSTOM_PATH_DIR github.repository_owner }} CUSTOM_PATH_DIR matrix.name }}:${{ steps.tag.outputs.tag }}@${{ steps.docker_build_release.outputs.digest }}\`" >> image-digest CUSTOM_PATH_DIR matrix.name }}.txt: 7
echo "## Docker Manifests" > .. CUSTOM_PATH_FILE: 6
echo "" >> .. CUSTOM_PATH_FILE: 12
find -type f -not -name "makefile-digest.txt" | sort | xargs -d '\n' cat >> .. CUSTOM_PATH_FILE: 6
echo "# File generated by .github CUSTOM_PATH_FILE; DO NOT EDIT." > .. CUSTOM_PATH_FILE: 6
echo "# SPDX-License-Identifier: Apache-2.0" >> .. CUSTOM_PATH_FILE: 6
npm run test:typescript: 12
brew install-bundler-gems: 19
USES: LaPeste/test-reporter: 19
exec bash "scripts CUSTOM_PATH_FILE": 24
sudo journalctl -l FLAG today: 8
KITCHEN_LOCAL_YAML=kitchen.dokken.yml CUSTOM_PATH_DIR exec ${{ matrix.suite }}-${{ matrix.os }} -c "journalctl -l": 8
USES: get-woke/woke-action: 8
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.NPM_TOKEN }}" >> .npmrc: 13
echo ${{ steps.buildx.outputs.name }}: 12
mkdir dist CUSTOM_PATH_DIR: 42
cp -R . CUSTOM_PATH_DIR dist CUSTOM_PATH_DIR: 10
export INSTALL_PREFIX=$(pwd) CUSTOM_PATH_DIR: 10
mkdir temp CUSTOM_PATH_DIR: 14
cd temp CUSTOM_PATH_DIR: 30
ninja install: 40
USES: Gottox/irc-message-action: 48
USES: SAP/project-piper-action: 9
mkdir -p build-wasm: 6
cd build-wasm: 6
emcmake cmake -DCOMPILE_WASM=on ..: 6
emmake make -j2: 6
bash .. CUSTOM_PATH_FILE: 24
smalltalkci -s ${{ matrix.smalltalk }}: 9
cd archive: 10
Copy-Item . CUSTOM_PATH_FILE -Destination . CUSTOM_PATH_DIR: 7
sudo apt update && sudo apt install -y valgrind: 6
cd core CUSTOM_PATH_DIR: 13
mvn -B clean package: 8
wget -O NDK -q URL: 15
sudo apt install unzip -y: 16
unzip -q NDK: 15
export ANDROID_NDK=~ CUSTOM_PATH_DIR: 13
ls ~ CUSTOM_PATH_DIR: 15
cd unity CUSTOM_PATH_DIR: 30
chmod 777 make_android.sh: 7
sudo xcode-select -switch " CUSTOM_PATH_FILE": 29
cd unity\native_src: 15
.\make_win64.bat: 9
.\make_win32.bat: 7
dotnet pack FLAG . CUSTOM_PATH_FILE -c ENV_VAR -o . CUSTOM_PATH_DIR: 60
USES: ./.github/.release/actions/actions/checks/release: 9
USES: ./.github/.release/actions/actions/services/github-release: 9
USES: ./.github/.release/actions/actions/test-reports/upload: 6
USES: abhilash1in/aws-secrets-manager-action: 11
bundle exec fastlane deploy: 8
. CUSTOM_PATH_DIR build -x test: 21
USES: reviewdog/action-cpplint: 11
sudo apt-get install -y -qq pkg-config libssl-dev libxcb1-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev: 6
USES: apache/pulsar-test-infra/diff-only: 23
.ci CUSTOM_PATH_FILE .ci CUSTOM_PATH_FILE: 10
USES: ./.github/actions/supercollider: 7
cd dist/: 14
make black-check: 9
USES: ./.github/actions/setup-deps: 42
task test: 15
pytest -v -s: 16
composer validate FLAG FLAG FLAG: 8
cmake FLAG build FLAG ${{ matrix.build_type }}: 10
flutter pub global activate melos: 24
cd frontends CUSTOM_PATH_DIR: 23
pip install -v . CUSTOM_PATH_DIR: 7
. .github CUSTOM_PATH_FILE ${{ github.event.repository.full_name }}: 8
echo CHANGELOG=$(echo -e "ENV_VAR") >> ENV_VAR: 8
echo VERSION="$(git rev-parse FLAG HEAD)-$(date FLAG +'%Y%m%d%H%M')" >> ENV_VAR: 7
. CUSTOM_PATH_DIR clean build FLAG: 12
USES: cpina/github-action-push-to-another-repository: 60
dotnet test test CUSTOM_PATH_FILE FLAG FLAG normal -p:ParallelizeTestCollections=false: 8
USES: protocolbuffers/protobuf-ci/checkout: 40
USES: protocolbuffers/protobuf-ci/bazel: 8
USES: protocolbuffers/protobuf-ci/docker: 15
vendor CUSTOM_PATH_DIR fix FLAG FLAG FLAG: 17
scripts CUSTOM_PATH_FILE "ninja -C . CUSTOM_PATH_DIR: 8
pip3 install . CUSTOM_PATH_FILE: 6
USES: golang/govulncheck-action: 23
curl -fsSL URL | gpg FLAG | sudo tee CUSTOM_PATH_FILE > CUSTOM_PATH_DIR: 6
ctest -C ${{env.BUILD_TYPE}} FLAG: 13
echo mysql-apt-config mysql-apt-config CUSTOM_PATH_DIR select bionic | sudo debconf-set-selections: 15
echo mysql-apt-config mysql-apt-config CUSTOM_PATH_DIR select mysql-5.7 | sudo debconf-set-selections: 15
sudo DEBIAN_FRONTEND="noninteractive" apt-get install -y mysql-client=5.7* mysql-community-server=5.7* mysql-server=5.7* libncurses5: 15
git clean -fxd: 6
sudo apt-get update && sudo apt-get install libudev-dev libusb-1.0-0-dev: 9
python -m pip install setuptools wheel twine: 15
USES: SMillerDev/nextcloud-actions/setup-nextcloud: 13
USES: SMillerDev/nextcloud-actions/setup-nextcloud-app: 11
echo '```' >> "ENV_VAR": 10
npm ci FLAG=false: 22
xcodebuild -scheme McBopomofo -configuration Debug test: 9
yarn build-all: 7
pip install "${{matrix.numpy}}": 6
sudo apt install -y graphviz: 21
pip install packaging: 11
pytest ENV_VAR: 21
sudo apt-get install git: 7
USES: actions-cool/issues-similarity-analysis: 11
curl ${{ github.event.issue.pull_request.url }} > pr.json: 43
echo "base=$(jq -r '.base.sha' pr.json)" >> ENV_VAR: 35
echo "head=$(jq -r '.head.sha' pr.json)" >> ENV_VAR: 35
USES: Sibz/github-status-action: 240
work_dir=".github CUSTOM_PATH_DIR: 16
destination_directory=" CUSTOM_PATH_DIR: 16
mkdir -p "${destination_directory}": 16
gcloud components install gke-gcloud-auth-plugin: 37
cilium install ${{ steps.vars.outputs.cilium_install_defaults }}: 34
cilium clustermesh enable ${{ steps.vars.outputs.clustermesh_enable_defaults }}: 8
cilium clustermesh status FLAG: 8
cilium clustermesh vm status: 17
mkdir -p cilium-junits: 32
cilium connectivity test ${{ steps.vars.outputs.connectivity_test_defaults }} \: 21
FLAG "cilium-junits CUSTOM_PATH_DIR env.job_name }} (${{ join(matrix.*, ', ') }}).xml" \: 12
FLAG github_job_step="Run connectivity test (${{ join(matrix.*, ', ') }})": 20
kubectl get cew FLAG -o wide: 9
kubectl get cep FLAG -o wide: 9
cilium clustermesh status: 11
cilium sysdump FLAG cilium-sysdump-final-${{ join(matrix.*, '-') }}: 16
cp .github CUSTOM_PATH_FILE config CUSTOM_PATH_FILE: 6
sudo apt install -y make lsb-release qemu-user-static zip: 50
echo "::set-output name=date::$(date +%F | sed 's CUSTOM_PATH_DIR: 50
USES: jamescurtin/isort-action: 11
yarn build:js: 14
USES: ./../action/autobuild: 7
echo ZKSYNC_HOME=$(pwd) >> ENV_VAR: 11
docker-compose -f docker-compose-runner.yml down: 12
ci_run zk: 9
ci_run zk run verify-keys unpack: 6
echo ":registry=URL > .npmrc: 7
echo "registry=URL >> .npmrc: 17
yarn run publish: 15
rm -r ~ CUSTOM_PATH_DIR: 10
cd mkdocs: 10
export LC_ALL=C: 19
go vet .: 19
golint -set_exit_status=1 .: 10
USES: tim-actions/commit-message-checker-with-regex: 21
cargo ci-check: 7
cargo install cargo-cache FLAG 0.6.2 FLAG FLAG ci-autoclean: 17
sudo apt install ninja-build: 16
mvn spotless:check: 9
taplo fmt FLAG: 10
cargo xtask build-ebpf FLAG . CUSTOM_PATH_DIR: 6
USES: ./.github/actions/test-integration-run-one: 8
sudo apt install -y pandoc: 11
echo ::set-output name=NVMRC::$(cat .nvmrc): 46
make release CUSTOM_PATH_DIR: 10
bash -x scripts CUSTOM_PATH_FILE: 10
node . CUSTOM_PATH_DIR: 15
ALLUXIO_DOCKER_NO_TTY=true \: 19
ALLUXIO_DOCKER_GIT_CLEAN=true \: 19
ALLUXIO_DOCKER_MVN_RUNTOEND=true \: 13
. CUSTOM_PATH_DIR -static -shared -config d,r build: 6
make requirements: 7
flutter build apk FLAG FLAG: 25
bats tests CUSTOM_PATH_FILE: 10
USES: SwiftDocOrg/github-wiki-publish-action: 13
cmake FLAG build FLAG Release FLAG 4: 8
python -Im pip install FLAG coverage[toml]: 9
python -Im coverage combine: 11
python -Im coverage html FLAG FLAG: 12
python -Im coverage report | sed 's CUSTOM_PATH_DIR    CUSTOM_PATH_DIR >> ENV_VAR: 6
bundle exec fastlane pod_lint: 8
make latexpdf: 13
eval `ssh-agent -s`: 8
git push -f origin master: 7
if [[ -e . CUSTOM_PATH_FILE ]]; then xz -d -k < . CUSTOM_PATH_FILE | docker load ; fi: 11
docker save itkwasm CUSTOM_PATH_DIR | xz -e9 -T0 > . CUSTOM_PATH_FILE: 9
USES: ibnesayeed/setup-ipfs: 12
USES: Azure/arm-deploy: 12
npx semantic-release FLAG FLAG: 6
echo "ENV_VAR CUSTOM_PATH_DIR        >> ENV_VAR: 7
sudo apt update || true: 9
. CUSTOM_PATH_FILE && . CUSTOM_PATH_DIR: 10
conda config FLAG channels defaults: 15
doit env_capture: 15
doit test_unit: 8
doit test_examples: 8
python -m pip install FLAG wheel setuptools: 6
CI='' pnpm build:web: 6
echo REACT_APP_API_URL="URL >> .env: 7
echo REACT_APP_WS_URL="URL >> .env: 7
echo REACT_APP_SENTRY_DSN="URL >> .env: 7
npm run envsetup: 7
sh build CUSTOM_PATH_FILE: 6
USES: bufbuild/buf-lint-action: 38
USES: bufbuild/buf-push-action: 24
bundle install FLAG gemfiles CUSTOM_PATH_FILE FLAG 4 FLAG 3: 6
poetry run ruff .: 13
twine upload FLAG URL dist CUSTOM_PATH_DIR: 10
go run . CUSTOM_PATH_FILE FLAG=clean: 11
npm update FLAG: 27
sh . CUSTOM_PATH_DIR: 18
bash . CUSTOM_PATH_DIR: 12
cargo install FLAG cargo-audit: 8
bash shell CUSTOM_PATH_FILE: 9
cp .. CUSTOM_PATH_FILE ./: 22
FLAG URL \: 14
npx cdk synth: 14
npx jest: 17
sudo apt-get install libsndfile1-dev: 8
touch docs CUSTOM_PATH_DIR: 13
echo ::set-output name=version::ENV_VAR CUSTOM_PATH_DIR: 15
docker run FLAG -v ENV_VAR:ENV_VAR -w ENV_VAR busybox rm -rf *: 6
USES: Oneflow-Inc/get-oneflow: 10
docker exec -e ONEFLOW_TEST_DIR=ENV_VAR CUSTOM_PATH_DIR ${{ env.TEST_CONTAINER_NAME }} bash ci CUSTOM_PATH_FILE: 6
docker ps || true: 12
USES: aws-actions/aws-cloudformation-github-deploy: 10
go tool cover -func=coverage.out -o=coverage.out: 7
sudo apt-get install -y mesa-common-dev libglu1-mesa-dev libglew-dev libeigen3-dev libgmp-dev: 6
echo  ::set-output name=date::"$(cat ML_VERSION)": 19
snapcraft: 6
npm i && npm run setup:skip-build: 17
docker pull registry:2: 7
USES: ./.github/actions/set-up-prebuilt-werf-test-binary: 7
USES: ./.github/actions/set-up-git-config: 7
task -p deps:install:ginkgo: 8
pip install -r "requirements CUSTOM_PATH_FILE": 7
npm i -g lerna: 7
npm run build-docs: 11
USES: asyncapi/.github/.github/actions/slackify-markdown: 14
USES: apache/skywalking-infra-e2e: 6
. CUSTOM_PATH_FILE FLAG=fatal: 12
mkdir -p mkdir -p build CUSTOM_PATH_DIR: 7
vendor CUSTOM_PATH_DIR FLAG_clover=build CUSTOM_PATH_FILE -v: 10
docker buildx build FLAG linux CUSTOM_PATH_DIR -t cesign CUSTOM_PATH_DIR -f Dockerfile FLAG ./: 10
cd downloaders CUSTOM_PATH_DIR: 9
USES: i3h/download-release-asset: 7
ls -la wheelhouse/: 7
USES: timheuer/base64-to-file: 98
echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android CUSTOM_PATH_FILE: 15
chmod +x AppDir CUSTOM_PATH_DIR: 7
USES: ./.github/actions: 21
. CUSTOM_PATH_FILE "emscripten" "${{runner.workspace}}" ${{ matrix.config }}: 6
echo ENV_VAR | base64 FLAG > . CUSTOM_PATH_FILE: 15
gpg FLAG FLAG ENV_VAR CUSTOM_PATH_FILE FLAG . CUSTOM_PATH_FILE: 10
sed -i -e "s,signing.keyId=,signing.keyId=ENV_VAR,g" gradle.properties: 7
sed -i -e "s,signing.password=,signing.password=ENV_VAR,g" gradle.properties: 7
sed -i -e "s,signing.secretKeyRingFile=,signing.secretKeyRingFile=ENV_VAR CUSTOM_PATH_FILE,g" gradle.properties: 7
npm install -g markdown-link-check: 18
USES: tyankatsu0105/read-package-version-actions: 17
npm cache clear FLAG: 11
yarn add ajv-formats: 9
. CUSTOM_PATH_DIR account 5eua7TZfgnNb81gmVUBcw4x7PpQuy-v9v1iFyD1R zCwoByIkA9AnlK0qO0DGveH7dKDXLG3CRqZ2mlTW dbm_qiniu: 6
pip install nox: 63
USES: a7ul/tar-action: 154
pip install FLAG FLAG eager -e .: 23
bootstrap-vcpkg.bat: 6
pip install -U pytest: 10
sed -n 's CUSTOM_PATH_DIR output > actual: 33
docker exec pki pkidestroy -i pki-tomcat -s KRA -v: 10
esptool.py FLAG ${{ matrix.idf_target }} merge_bin FLAG 4MB -o flash_image.bin _args: 6
sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*: 14
sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons: 12
wget -qO - URL | sed 's CUSTOM_PATH_DIR | CUSTOM_PATH_DIR: 12
cd ENV_VAR CUSTOM_PATH_DIR && docker build . FLAG sdrpp_build: 11
docker cp build: CUSTOM_PATH_FILE ./: 11
sudo apt-get install -y libarchive-tools: 6
echo "Version=$( echo ENV_VAR | cut -d\/ -f 3 | sed 's CUSTOM_PATH_DIR | sed 's CUSTOM_PATH_DIR >> ENV_VAR: 6
dbt FLAG: 17
echo "date=$(date +'%Y-%m-%dT%H_%M_%S')" >> ENV_VAR: 10
ls -lh dist/: 44
python -m pip install FLAG wheel: 35
find . CUSTOM_PATH_FILE -maxdepth 1 -type f | xargs python -m pip install FLAG FLAG=dist/: 10
composer phpunit: 11
cmake FLAG . FLAG all: 7
rm -rvf ~ CUSTOM_PATH_DIR: 6
tar -zxf . CUSTOM_PATH_DIR github.sha }} CUSTOM_PATH_FILE: 31
pushd python CUSTOM_PATH_DIR: 14
pushd coordinator CUSTOM_PATH_DIR: 23
USES: micalevisk/last-issue-action: 14
sudo apt install gcc-aarch64-linux-gnu: 9
make net: 10
ENV_VAR -v: 16
make help: 14
export CXXFLAGS="-Werror -D_GLIBCXX_DEBUG": 6
.. CUSTOM_PATH_FILE $benchref: 45
export CXXFLAGS="-O1 -fno-inline": 7
.. CUSTOM_PATH_FILE FLAG: 8
USES: actionsdesk/lfs-warning: 7
echo "DATA_FULL_DOMAIN=URL >> ENV_VAR: 6
flutter format FLAG .: 25
USES: ./.github/workflows/actions: 17
npm install  CUSTOM_PATH_DIR FLAG=global: 28
nodeInstallPath=$(npm config get prefix): 27
echo "$nodeInstallPath CUSTOM_PATH_DIR >> ENV_VAR: 27
sf FLAG: 27
sf org login sfdx-url -f . CUSTOM_PATH_FILE -a devhub -d: 27
sf org create scratch -f config CUSTOM_PATH_FILE -a scratch-org -d -y 1: 18
sf project deploy start: 16
sf data tree import -p . CUSTOM_PATH_FILE: 18
sf apex test run -c -r human -d . CUSTOM_PATH_DIR -w 20: 15
sf org delete scratch -p -o scratch-org: 27
USES: shrink/actions-docker-extract: 133
tox -e py${{ matrix.python-version }}-${{ matrix.cloud-provider }}: 6
echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append: 10
echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH: 6
git clone URL FLAG gh-pages FLAG gh-pages: 39
cp -r docs CUSTOM_PATH_DIR gh-pages/: 29
go run .: 12
USES: wei/git-sync: 21
echo "IS_RELEASE=true" >> ENV_VAR: 8
echo "IS_RELEASE=true" >> $env:GITHUB_OUTPUT: 8
corepack prepare pnpm FLAG: 13
os=${{ matrix.os }}: 7
sphinx-build -b dirhtml -v docs _build: 20
mv _build CUSTOM_PATH_FILE _build CUSTOM_PATH_FILE: 20
python docs CUSTOM_PATH_FILE _build CUSTOM_PATH_FILE: 20
rm -r _build CUSTOM_PATH_DIR: 21
gem update bundler: 6
bundle install FLAG 3 FLAG 3: 18
USES: ./.github/actions/collect-reports: 13
USES: ./.github/actions/codecov: 6
echo "ENV_VAR" | gpg FLAG FLAG FLAG: 10
npm run ci:test: 21
npm run ci:lint: 8
export HOMEBREW_NO_INSTALL_CLEANUP=1: 12
brew install elixir: 7
set -xeuo pipefail: 12
echo "commit=$(git rev-parse HEAD)" >> ENV_VAR: 8
USES: awact/cloudfront-action: 7
mkdir -p "artifacts CUSTOM_PATH_DIR cp -r .tox CUSTOM_PATH_DIR "artifacts CUSTOM_PATH_DIR: 12
.github CUSTOM_PATH_FILE "artifacts CUSTOM_PATH_DIR: 21
utils CUSTOM_PATH_FILE: 18
${{ matrix.script_run }}: 12
git diff FLAG Cargo.lock: 6
make check-crates: 6
make check-licenses: 10
cd generator: 7
USES: trmcnvn/chrome-addon: 13
USES: mnao305/chrome-extension-upload: 11
git clone FLAG=2 URL drmemory: 6
cd drmemory && git submodule update FLAG FLAG FLAG 250 && cd ..: 6
git clone FLAG 1 -b snapshot CUSTOM_PATH_DIR URL vendor CUSTOM_PATH_DIR: 7
git clone FLAG 1 URL vendor CUSTOM_PATH_DIR: 10
USES: php-actions/phpstan: 13
pip3 install -r .github CUSTOM_PATH_FILE: 13
sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd curl git wget eatmydata: 20
sudo apt-get install percona-xtrabackup-24: 8
git submodule update FLAG FLAG FLAG FLAG=1: 8
#pip install -r requirements.txt: 11
pip install tox==3.26: 7
echo 'export MARQO_API_TESTS_ROOT="${{ github.workspace }}"' >> conf: 7
export MQ_API_TEST_BRANCH=$(echo "ENV_VAR" | cut -d' CUSTOM_PATH_DIR -f3-): 6
CUSTOM_TEST_IMG="${{ github.event.inputs.image_to_test }}": 6
export MQ_API_TEST_IMG=ENV_VAR:-"marqo_docker_0"}: 6
curl -sSL URL | sh: 23
cmake .. -DCMAKE_BUILD_TYPE=Debug: 10
python3 -m isort FLAG FLAG .: 8
python3 -m black FLAG FLAG .: 9
python3 -m flake8 .: 14
for f in * ; do python3 -m pip install $f || true; done: 8
python3 -m pip install . CUSTOM_PATH_FILE: 16
git clone -b master FLAG FLAG=1 URL ENV_VAR: 16
USES: dblock/create-a-github-issue: 6
python -m pip install FLAG setuptools pip wheel: 24
sudo apt-get install clang-format: 15
USES: rectalogic/notify-irc: 68
USES: snyk/actions/node: 31
USES: pixta-dev/repository-mirroring-action: 43
chmod +x CUSTOM_PATH_FILE: 7
make VERBOSE=1 -j2: 7
brew install openmpi: 9
. CUSTOM_PATH_DIR -c phpunit.xml: 8
echo Detected changes: "${{ steps.changes.outputs.src }}": 11
echo NVMRC=`cat .nvmrc` >> ENV_VAR: 15
npm run lint:report: 6
aws eks FLAG ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig FLAG ${{ secrets.AWS_EKS_CLUSTER }}: 6
dotnet test FLAG FLAG normal src CUSTOM_PATH_FILE: 11
USES: sonarsource/sonarqube-scan-action: 35
rm -r .github: 7
ls -lR: 32
git commit -am "Enabling shorter import paths [automatic]": 6
USES: GitHubSecurityLab/actions-permissions/monitor: 19
virtualenv FLAG=python3 .venv: 6
docker tag ENV_VAR ENV_VAR:latest: 27
USES: ./.github/actions/tool-setup: 30
cargo +${{ matrix.rust }} fmt FLAG -- FLAG: 10
USES: DiligentGraphics/github-action/checkout: 22
venv\Scripts\activate.ps1: 7
docker-compose up FLAG -d: 7
version=$(cat VERSION): 19
cd quickjs-build: 24
echo "#! CUSTOM_PATH_DIR > CUSTOM_PATH_DIR: 12
echo "\"mingw32-make\" \"\$@\"" >> CUSTOM_PATH_DIR: 12
cd quickjs-build\win: 24
LIB.EXE CUSTOM_PATH_FILE ..\build\libquickjs.dll.a build\Release\v8qjs.lib: 12
mkdir -p qjs CUSTOM_PATH_DIR: 12
cp quickjs-build CUSTOM_PATH_FILE qjs CUSTOM_PATH_DIR: 24
cp CUSTOM_PATH_FILE qjs CUSTOM_PATH_DIR: 24
USES: crazy-max/ghaction-xgo: 9
echo "DATE=$(date +'%Y-%m-%d')" >> ENV_VAR: 9
nohup adb logcat > logcat.log &: 10
echo ::add-matcher::.github CUSTOM_PATH_FILE: 6
bundle exec rspec spec CUSTOM_PATH_FILE: 8
dnf install -y 'dnf-command(config-manager)': 25
dnf config-manager FLAG powertools: 8
yum install -y git: 30
yum install -y curl: 30
yum install -y openssh-server: 27
for f in wezterm-*.rpm ; do sha256sum $f > $f.sha256 ; done: 22
bash ci CUSTOM_PATH_FILE gh release upload FLAG nightly wezterm-*.rpm *.sha256: 11
echo "CURRENT_VERSION=ENV_VAR" >> ENV_VAR: 19
npx projen release: 8
mv dist .repo: 82
mv .repo CUSTOM_PATH_DIR dist: 84
errout=$(mktemp); gh release create $(cat dist CUSTOM_PATH_FILE) -R ENV_VAR -F dist CUSTOM_PATH_FILE -t $(cat dist CUSTOM_PATH_FILE) FLAG ENV_VAR 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi: 14
cd .repo && npx projen package:js: 20
npx -p publib publib-npm: 12
git clone FLAG 1 URL CUSTOM_PATH_DIR: 20
repo=$(python3 -m scripts.changed.repo): 12
git clone FLAG 1 "URL CUSTOM_PATH_DIR: 12
echo "Actor: ${{ github.actor }}": 10
echo "SHA: ${{ github.sha }}": 10
echo "Images: ENV_VAR": 10
.. CUSTOM_PATH_FILE waitready: 10
.. CUSTOM_PATH_FILE prepare: 10
.. CUSTOM_PATH_FILE test: 10
cd ${{ github.workspace }} CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 22
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.KIEGROUP_NPM_TOKEN }}" > ~ CUSTOM_PATH_DIR: 7
yarn config set network-timeout 1000000: 11
pip install matplotlib: 14
git config user.name "Github Actions": 6
sudo apt-get update -qy && sudo apt-get dist-upgrade -qy && sudo apt-get install -qy \: 6
libmemcached-dev libz-dev libfreetype6-dev libtiff-dev \: 6
libjpeg-dev libopenjp2-7-dev libwebp-dev zlib1g-dev libpq-dev: 6
pip3 install -U setuptools: 14
pipenv install FLAG FLAG FLAG: 21
docker tag concordia:latest ENV_VAR CUSTOM_PATH_DIR: 6
docker tag concordia CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 12
aws ecs update-service FLAG ${{ env.AWS_REGION }} FLAG FLAG ENV_VAR FLAG ENV_VAR: 6
git config user.email gh-actions-ENV_VAR: 13
USES: ./.github/actions/tune-runner-vm: 96
USES: apache/pulsar-test-infra/paths-filter: 56
echo "::set-output name=docs_only::${{ fromJSON(steps.changes.outputs.all_count) == fromJSON(steps.changes.outputs.docs_count) && fromJSON(steps.changes.outputs.docs_count) > 0 }}": 35
venv CUSTOM_PATH_DIR -m pip install -r requirements-dev.txt: 6
USES: devmasx/merge-branch: 47
dotnet test FLAG Release: 25
ctest -j FLAG: 7
echo "${{ secrets.ID_RSA }}" > ~ CUSTOM_PATH_DIR: 6
check CUSTOM_PATH_DIR: 18
chown -R root CUSTOM_PATH_DIR: 26
echo "yarn=$(yarn cache dir)" >> ENV_VAR: 9
echo "go= CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> ENV_VAR: 7
cd test && yarn: 6
USES: KomputeProject/action-cmake-build: 6
cp build CUSTOM_PATH_DIR build CUSTOM_PATH_DIR: 23
docker ps -a   : 15
USES: SvanBoxel/delete-merged-branch: 11
echo "SOURCE_DATE_EPOCH=$(git log -1 FLAG=%ct)" >> ENV_VAR: 11
USES: reproducible-containers/buildkit-cache-dance: 7
tag="ENV_VAR##* CUSTOM_PATH_DIR: 8
sudo apt-get install -y . CUSTOM_PATH_FILE: 15
make tfgen: 12
make build_sdks: 7
cp . CUSTOM_PATH_FILE} . CUSTOM_PATH_DIR: 7
cd . CUSTOM_PATH_DIR && zip -r .. CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 7
echo "go-mod=$(go env GOMODCACHE)" >> ENV_VAR: 23
echo Preparing version: 7
echo $(date +"%y.%m.%d") > VERSION: 7
VERSION=$(cat VERSION): 19
echo SHOTCUT_VERSION=\"ENV_VAR\" >> build-shotcut.conf: 7
cd packaging CUSTOM_PATH_DIR: 10
mv out CUSTOM_PATH_FILE out CUSTOM_PATH_FILE: 7
sg lxd -c 'snapcraft FLAG': 6
echo "##[set-output name=NVMRC;]$(cat .nvmrc)": 30
sudo apt-get install -y rpm: 6
pip install -e dev CUSTOM_PATH_DIR: 35
git submodule update FLAG FLAG 1 description CUSTOM_PATH_DIR: 15
echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} FLAG: 9
. CUSTOM_PATH_FILE FLAG FLAG ${{ github.repository_owner }} astrobee_base astrobee test_astrobee push_astrobee_base: 6
docker push ghcr.io CUSTOM_PATH_DIR github.repository_owner }} CUSTOM_PATH_DIR: 6
python . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 12
git config FLAG core.autocrlf true: 21
cd build && make -j2: 14
. CUSTOM_PATH_FILE && git diff FLAG: 11
printf -- "FLAG\n:github: ENV_VAR\n" > ENV_VAR CUSTOM_PATH_DIR: 9
gem push FLAG github FLAG URL *.gem: 12
echo "::set-output name=version::$(jq -r .version package.json)": 8
yarn publish:npm: 6
git add . : 7
sudo sed -i "s CUSTOM_PATH_DIR False CUSTOM_PATH_DIR True CUSTOM_PATH_DIR examples CUSTOM_PATH_FILE: 7
sudo apt-get install -y curl socat: 9
curl -f URL: 21
docker run -d -id FLAG FLAG acme -p 22280:80 FLAG=acme-srv -v "$(pwd) CUSTOM_PATH_DIR almalinux-systemd: 8
git add . && git commit -m "COMMIT_MSG": 14
curl -L \: 10
-H "Accept: application CUSTOM_PATH_FILE+json" \: 26
-H "X-GitHub-Api-Version: 2022-11-28" \: 13
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv python: 6
gh pr checkout ${{ github.event.pull_request.number }}: 10
git config FLAG credential.helper store: 14
pip install FLAG FLAG pip: 27
echo "::set-output name=dir::$(poetry config cache-dir)": 8
cd pjlib CUSTOM_PATH_DIR && cp config_site_test.h config_site.h: 12
cd pjsip-apps CUSTOM_PATH_DIR && make: 22
sudo CUSTOM_PATH_DIR FLAG off: 22
CFLAGS="-g -I CUSTOM_PATH_DIR -I CUSTOM_PATH_DIR LDFLAGS="-L CUSTOM_PATH_DIR -L CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 8
make pjnath-test: 8
make pjsip-test: 8
CFLAGS="-I CUSTOM_PATH_DIR -I CUSTOM_PATH_DIR -fPIC" LDFLAGS="-L CUSTOM_PATH_DIR -L CUSTOM_PATH_DIR CXXFLAGS="-fPIC" . CUSTOM_PATH_DIR: 6
cd pjlib CUSTOM_PATH_DIR && cp config_site_test.h config_site.h && echo "#define PJMEDIA_HAS_VIDEO 1" >> config_site.h: 12
npm run prettier-check: 30
node . CUSTOM_PATH_FILE FLAG: 14
python -m pip install URL: 22
echo "Run unit tests without code coverage for ${{ matrix.python_version }} and ${{ matrix.libraries }}": 8
dotnet pack src CUSTOM_PATH_FILE}} FLAG Release FLAG: 47
npx cypress install: 12
USES: ./.github/workflows/actions/amplitude: 7
dotnet pack src CUSTOM_PATH_FILE FLAG . FLAG Release: 41
twine upload dist CUSTOM_PATH_DIR FLAG: 8
python -m pip install FLAG pip setuptools wheel coverage;: 6
sed -i'' -e 's CUSTOM_PATH_FILE\ CUSTOM_PATH_DIR .gitmodules: 12
echo "CYPRESS_CACHE_FOLDER=ENV_VAR\.cache\Cypress"  >> $env:GITHUB_ENV: 6
echo "EXPIRES_WEEK_MARK=$(date +%U)" >> ENV_VAR: 6
echo "EXPIRES_WEEK_MARK=$(date +%U)" >> $env:GITHUB_OUTPUT: 6
pnpm bootstrap: 7
USES: maxim-lobanov/setup-cocoapods: 6
poetry config repositories.testpypi URL: 14
dist CUSTOM_PATH_FILE FLAG: 8
poetry run pytest tests CUSTOM_PATH_DIR: 11
rm -rf CUSTOM_PATH_FILE: 7
buf format FLAG FLAG: 6
python -m pip freeze FLAG: 11
python -m tox FLAG auto FLAG: 8
gem install mdl: 9
rm -rf dist CUSTOM_PATH_DIR: 23
VERSION=ENV_VAR#v}: 13
python3 -m pip install setuptools wheel: 10
python -m pip install FLAG pipx: 6
cp ENV_VAR CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 9
USES: denoland/deployctl: 17
utils CUSTOM_PATH_FILE FLAG: 10
. CUSTOM_PATH_FILE tests: 6
USES: jimschubert/labeler-action: 12
coverage run -m pytest: 47
NEW_VERSION=$(echo "ENV_VAR" | cut -d " CUSTOM_PATH_DIR -f3): 8
echo "Hello World": 18
make phpstan: 21
make phpstan-result-cache: 9
pytest . CUSTOM_PATH_DIR: 17
libjson-glib-dev shared-mime-info desktop-file-utils libpolkit-agent-1-dev libpolkit-gobject-1-dev \: 6
echo "GitHub Ref: ${{ github.ref }}": 8
bscripts CUSTOM_PATH_FILE: 7
$pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}"): 8
[IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte): 10
echo "C: CUSTOM_PATH_DIR >> $env:GITHUB_PATH: 9
mv C: CUSTOM_PATH_DIR C: CUSTOM_PATH_DIR: 6
USES: dokku/github-action: 31
echo "SDKROOT=$(xcrun -sdk macosx FLAG)" >> ENV_VAR: 9
echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx FLAG)" >> ENV_VAR: 9
echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> ENV_VAR: 9
USES: boa-dev/criterion-compare-action: 13
ruff .: 23
black . FLAG: 40
bundle exec danger: 16
USES: ./.github/actions/ruby-cache: 16
USES: ./.github/actions/xcode-cache: 9
brew install chargepoint CUSTOM_PATH_DIR: 6
pip install virtualenv==${{ env.VIRTUALENV_VERSION }}: 13
cd clouds CUSTOM_PATH_DIR: 31
make remove: 9
molecule test: 6
chmod +x target CUSTOM_PATH_DIR: 24
sudo apt-get install -y FLAG musl-tools: 6
USES: ./.github/actions/set-version: 8
echo "The SOURCE_NAME is ${{ steps.vars.outputs.source-name }}": 9
echo "The SOURCE_BRANCH is ${{ steps.vars.outputs.source-branch }}": 9
echo "The SOURCE_TAG is ${{ steps.vars.outputs.source-tag }}": 9
USES: lando/prepare-release-action: 10
node -pe 'JSON.parse(process.argv[1]).version' "$(cat package.json)": 10
aws s3 sync releases s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 12
aws s3 sync releases s3: CUSTOM_PATH_FILE: 12
git show-ref: 10
npm run configure: 14
echo URL >> urls.txt: 19
cat urls.txt: 13
helm repo add chaos-mesh URL: 8
helm search repo chaos-mesh: 8
kubectl create ns chaos-testing: 8
kubectl get po -n chaos-testing: 19
helm repo add milvus URL: 8
kubectl get pods -n chaos-testing: 22
sleep 20s: 47
nc -vz 127.0.0.1 19530: 23
sed -i "s CUSTOM_PATH_DIR =.* CUSTOM_PATH_DIR = \'chaos_objects\ CUSTOM_PATH_DIR constants.py: 6
cat constants.py: 8
#in this step, verify whether pod has been killed by pod's age: 11
php build CUSTOM_PATH_FILE: 9
sed -i 's CUSTOM_PATH_FILE CUSTOM_PATH_DIR src CUSTOM_PATH_FILE: 6
USES: microsoft/variable-substitution: 31
dotnet build src CUSTOM_PATH_FILE -t:BeforeBuildTasks FLAG: 14
sudo sysctl -w net.link.generic.system.hwcksum_tx=0: 10
sudo sysctl -w net.link.generic.system.hwcksum_rx=0: 10
sudo ethtool -K eth0 tx off rx off: 22
Disable-NetAdapterChecksumOffload -Name * -TcpIPv4 -UdpIPv4 -TcpIPv6 -UdpIPv6: 8
curl FLAG 4 FLAG -fsSL FLAG -o lib CUSTOM_PATH_FILE URL: 6
go get -v github.com CUSTOM_PATH_DIR: 16
ENV_VAR CUSTOM_PATH_DIR FLAG FLAG test CUSTOM_PATH_DIR: 12
ENV_VAR CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG ENV_VAR CUSTOM_PATH_DIR: 10
ENV_VAR CUSTOM_PATH_FILE FLAG FLAG test CUSTOM_PATH_DIR: 12
ENV_VAR CUSTOM_PATH_FILE FLAG FLAG FLAG FLAG ENV_VAR CUSTOM_PATH_DIR: 10
aws configure FLAG s3-upload <<-EOF > CUSTOM_PATH_DIR 2>&1: 6
us-west-2: 8
text: 6
null: 9
echo "workspace=ENV_VAR" >> ENV_VAR: 20
echo flutter.sdk=${{ env.FLUTTER_PATH }} > local.properties: 7
echo sdk.dir=${{ env.ANDROID_SDK_PATH }} >> local.properties: 7
echo flutter.buildMode=release >> local.properties: 7
echo storeFile=${{ secrets.ANDROID_KEYSTORE_PATH }} > key.properties: 9
echo keyAlias=${{ secrets.ANDROID_KEY_ALIAS }} >> key.properties: 9
echo keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }} >> key.properties: 9
echo storePassword=${{ secrets.ANDROID_KEY_STORE_PASSWORD }} >> key.properties: 9
 CUSTOM_PATH_DIR build_android production:true: 7
rm -f key.properties: 7
USES: ./.github/actions/setup-secrets: 14
npm run postlint FLAG: 9
vercel pull FLAG FLAG=preview FLAG=${{ secrets.VERCEL_TOKEN }}: 13
vercel build FLAG=${{ secrets.VERCEL_TOKEN }}: 13
vercel deploy FLAG FLAG=${{ secrets.VERCEL_TOKEN }}: 8
sonar-scanner FLAG sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}": 17
cp app CUSTOM_PATH_FILE app CUSTOM_PATH_FILE: 22
python setup.py install_egg_info: 12
Invoke-WebRequest -Uri "URL -OutFile VulkanSDK.exe: 10
.\VulkanSDK.exe FLAG C:\VulkanSDK  FLAG FLAG FLAG install: 6
echo "VULKAN_SDK=C:\VulkanSDK" >> $env:GITHUB_ENV: 7
.\vcpkg\bootstrap-vcpkg.bat: 6
cmake FLAG build FLAG dist: 7
echo "VULKAN_SDK= CUSTOM_PATH_DIR >> ENV_VAR: 6
sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev: 6
dart . CUSTOM_PATH_FILE: 12
pushd dist: 6
cat checksums.txt: 16
${{ matrix.settings.setup }}: 33
yarn install FLAG FLAG FLAG URL FLAG 300000: 27
${{ matrix.settings.build }}: 34
USES: Khan/actions: 39
flutter build web FLAG: 16
pip install -U pip setuptools wheel: 36
sudo apt-get install -y pandoc: 44
 CUSTOM_PATH_DIR build_ios: 8
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:noetic-desktop: 6
sudo apt-get install ninja-build doxygen graphviz: 15
sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev: 14
sudo apt install gcc-12 g++-12 gfortran-12: 13
echo "CC=gcc-12" >> ENV_VAR: 11
echo "CXX=g++-12" >> ENV_VAR: 11
echo "FC=gfortran-12" >> ENV_VAR: 10
echo "SHORT_SHA=ENV_VAR::7}" >> ENV_VAR: 10
yarn || yarn FLAG 1: 13
USES: docker://amazon/aws-cli:latest: 9
npm run test:ember: 15
node_modules CUSTOM_PATH_DIR try:one ${{ matrix.ember-try-scenario }} FLAG: 8
USES: arista-netdevops-community/action-molecule-avd: 15
start_meta_engine ${{matrix.meta}}: 11
meta_url=$(get_meta_url ${{matrix.meta}}): 26
create_database $meta_url: 10
echo "MESSAGE=$(git log FLAG -1 FLAG=format:%s%b)" >> ENV_VAR: 13
npm install FLAG=global npm: 17
ENV=development NODE_MODULES_DIR=. CUSTOM_PATH_DIR make info clean dependencies bot: 12
npm run test:migration: 6
TESTS= npm test: 9
yarn storybook:build: 16
cp CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 21
USES: jfversluis/dotnet-format: 9
USES: steebchen/kubectl: 35
chmod +x packer: 6
cp -R ami CUSTOM_PATH_DIR .: 6
pip install -r evalml CUSTOM_PATH_FILE: 10
USES: c-py/action-dotenv-to-setenv: 13
USES: char0n/swagger-editor-validate: 10
make setup CUSTOM_PATH_DIR: 9
bison FLAG: 9
sudo dpkg -i cuda-keyring_1.0-1_all.deb: 9
vendor CUSTOM_PATH_DIR FLAG -c phpunit.xml.legacy: 8
cp "$(which composer)" composer.phar && . CUSTOM_PATH_FILE self-update FLAG.2: 6
USES: docker://hhvm/hhvm:3.30-lts-latest: 13
USES: python-semantic-release/python-semantic-release: 8
make DESTDIR=ENV_VAR CUSTOM_PATH_DIR install: 8
echo "::remove-matcher owner=tsc::": 14
echo "::remove-matcher owner=eslint-compact::": 15
echo "::remove-matcher owner=eslint-stylish::": 15
echo "C:\msys64\mingw32\bin" >> ENV_VAR: 6
pip3 install pyinstaller: 10
mkdir -p tmp CUSTOM_PATH_DIR: 16
cd ${{runner.workspace}}: 6
cmake FLAG . FLAG ${{matrix.build_type}}: 31
python -c 'import os; print(os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON", "").strip())' > ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}: 14
swift build -c debug: 7
swift build -c release: 18
cd artifacts CUSTOM_PATH_DIR: 6
USES: ./.github/actions/setup-python-poetry: 12
USES: csexton/release-asset-action: 17
python -m pip install pathlib: 28
curl FLAG '=https' FLAG.2 -sSf URL > rustup-init.sh: 6
sh rustup-init.sh -y FLAG none: 6
python run-tests.py FLAG: 6
terraform validate: 10
echo "ENV_VAR" | docker login FLAG "ENV_VAR" FLAG: 23
docker pull pierky CUSTOM_PATH_DIR: 11
brew install getsentry CUSTOM_PATH_DIR: 6
pnpm install FLAG.platform=linux FLAG.architecture=x64: 7
USES: syphar/restore-pip-download-cache: 23
sudo apt-get install libxml2-dev libxmlsec1-dev libxmlsec1-openssl: 11
USES: RubbaBoy/BYOB: 16
mkdir -p build && pushd build: 6
apt-get clean: 22
free: 13
python -m pip install FLAG -r requirements CUSTOM_PATH_FILE: 10
python3 -m pip list: 25
conda activate $env:TEMP_ENV: 6
just youki-release: 6
sudo apt -qq update: 11
make CROSS_PREFIX=$(pwd) CUSTOM_PATH_DIR ENABLE_STATIC=1 -j: 20
wasm-pack build FLAG web: 7
make -j2 docker generator runner tests: 7
. CUSTOM_PATH_FILE networks CUSTOM_PATH_DIR matrix.group }}-*.toml: 14
docfx docfx.json: 11
apt-get upgrade -y: 16
yum -y install git: 17
exec su rnpuser -c ci CUSTOM_PATH_FILE: 31
chown -R rnpuser:rnpuser ENV_VAR: 23
cpack -G RPM: 7
npm run verify:android: 6
touch ENV_VAR CUSTOM_PATH_FILE: 10
yarn check-types: 18
if [ -f requirements.txt ]; then pip install -r requirements.txt FLAG URL fi: 10
pip install git+URL sentencepiece six sacremoses: 7
python test CUSTOM_PATH_FILE FLAG ${{ matrix.replicate }} -s ${{ matrix.schedule }} FLAG ${{ matrix.checkpoint }}: 11
sudo rm -rf CUSTOM_PATH_DIR || true: 7
echo "PRERELEASE=false" >> ENV_VAR: 8
USES: seqan/actions/setup-toolchain: 7
FILE="seqan3 CUSTOM_PATH_FILE": 12
python3 seqan3 CUSTOM_PATH_FILE seqan3-build CUSTOM_PATH_FILE >> ENV_VAR: 6
URL="ENV_VAR CUSTOM_PATH_DIR: 7
sed -i "s@{{ build }}@${{ matrix.build }}@" ENV_VAR: 6
sed -i "s@{{ compiler }}@${{ matrix.compiler }}@" ENV_VAR: 6
sed -i "s@{{ url }}@ENV_VAR@" ENV_VAR: 6
echo "body<<EOF" >> ENV_VAR: 20
cat ENV_VAR >> ENV_VAR: 9
USES: ./.github/actions/setup_extension: 7
USES: ./.github/actions/save_logs_and_results: 6
NAME="$(echo "ENV_VAR" | grep "^pluginName:" | cut -f2- -d ' ')": 11
CHANGELOG="$(. CUSTOM_PATH_DIR getChangelog FLAG FLAG FLAG=plain -q)": 14
echo "::set-output name=name::ENV_VAR": 12
echo "::set-output name=changelog::ENV_VAR": 10
cd api CUSTOM_PATH_DIR: 11
echo ("LIEF_SAMPLES_DIR=" + $env:RUNNER_TEMP + " CUSTOM_PATH_DIR >> $env:GITHUB_ENV: 7
python tests CUSTOM_PATH_FILE %LIEF_SAMPLES_DIR%: 7
choco install ninja cmake: 8
dotnet build . CUSTOM_PATH_DIR: 12
USES: calamares/actions/generic-checkout: 8
sudo apt-get install musl-tools: 22
docker push quay.io CUSTOM_PATH_DIR: 34
sleep 360s: 9
sf package install -p ${{ steps.createPackageVersion.outputs.packageVersionId }} -w 10 -o scratch-org -r: 9
pip install mkdocs mkdocs-material: 9
cd wiki: 25
cd ${{ github.workspace }} CUSTOM_PATH_FILE: 12
USES: astriaorg/buildjet-rust-cache: 8
eval $(ssh-agent -s): 7
chmod 644 ~ CUSTOM_PATH_DIR: 6
if [ -f . CUSTOM_PATH_FILE ]; then pip install -r . CUSTOM_PATH_FILE; fi: 6
sleep 5s: 20
make push-all: 7
kubectl logs -n default -c user-container -l serving.knative.dev CUSTOM_PATH_DIR: 9
. CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 37
.github CUSTOM_PATH_FILE ENV_VAR: 19
meson build: 11
sudo ldconfig -v: 6
pytest FLAG=./: 6
make -C docs: 6
sudo apt-get install language-pack-de tzdata: 6
python -m pip install FLAG setuptools wheel twine: 10
composer config minimum-stability dev: 37
composer config prefer-stable true: 10
yarn website:build: 6
vendor CUSTOM_PATH_DIR FLAG FLAG -v fix: 10
mix credo FLAG: 38
USES: mongodb-labs/drivers-evergreen-tools: 11
yarn install FLAG FLAG URL FLAG 300000: 13
coverage run FLAG spiceypy -m pytest FLAG spiceypy: 6
twine upload FLAG FLAG dist CUSTOM_PATH_DIR: 16
USES: porter-dev/porter-update-action: 14
python -m pip install -r requirements.txt -r requirements-dev.txt: 7
pip install torch-scatter -f URL: 16
rm -rf CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 21
mvn -B verify FLAG pom.xml: 15
USES: streetsidesoftware/cspell-action: 39
docker push ENV_VAR FLAG: 6
cd kube CUSTOM_PATH_DIR: 11
sed -i -e "s CUSTOM_PATH_DIR care-fe.yaml: 6
kubectl apply -f care-fe.yaml: 6
xcodebuild -showBuildSettings: 7
xcodebuild -scheme ${scheme} -showdestinations: 6
ditto -c -k FLAG to-be-signed CUSTOM_PATH_FILE Planet.zip: 8
php app CUSTOM_PATH_FILE: 9
IS_DIRTY=1: 14
echo ::set-output name=is_dirty::ENV_VAR: 14
yarn link guides-base: 6
ln -s .. CUSTOM_PATH_DIR styled-components: 6
netlify deploy FLAG=public FLAG: 6
git pull origin main: 23
git push origin HEAD: 16
poetry build -vvv: 6
curl -LsSf URL | tar xzf - -C ~ CUSTOM_PATH_DIR: 9
pip install -e .[lint]: 7
ENV_PREFIX=$(tr -C -d "0-9" <<< "${{ matrix.python-version }}"): 10
TOXENV=$(tox FLAG | grep "^pyENV_VAR" | tr '\n' ',') python -m tox: 6
echo VERSION=$(cat share CUSTOM_PATH_FILE  |grep 'const VERSION' | awk '{print $4}' | sed "s CUSTOM_PATH_DIR  >> ENV_VAR: 7
make artifacts-macos: 6
echo "go-build=$(go env GOCACHE)" >> ENV_VAR: 17
gcc FLAG || true: 14
rustup -V: 16
rustup toolchain list: 15
rustup default: 14
rustc -V: 25
npm run build-dev: 19
npm run build-min: 6
echo "${{secrets.SIGNING_SECRET_KEY_RING_FILE}}" > ~ CUSTOM_PATH_FILE64: 6
base64 -d ~ CUSTOM_PATH_FILE64 > ~ CUSTOM_PATH_FILE: 13
python manage.py makemigrations: 9
python manage.py migrate: 20
brew install doxygen: 11
git clone FLAG 1 URL .. CUSTOM_PATH_DIR: 8
pip install -e . -v: 34
jupyter labextension develop . FLAG: 6
python -m jupyterlab.browser_check: 14
npm run build-server: 9
git submodule update FLAG FLAG FLAG 1: 25
mvn FLAG deploy: 11
. CUSTOM_PATH_FILE OutputCurrentVersionToGitHub: 6
USES: hacs/integration/action: 19
make test-e2e ARCH=amd64: 7
echo "ENV_VAR: CUSTOM_PATH_DIR >> ENV_VAR: 6
zypper install -y util-linux: 6
zypper install -y git: 6
zypper install -y curl: 6
zypper install -y openssh-server: 6
echo "COS_VERSION=$(cos_version)" >> ENV_VAR: 78
sudo -E make raw_disk: 13
sudo -E make azure_disk: 13
sudo -E make gce_disk: 13
sudo rm -rf . CUSTOM_PATH_FILE grub_efi.cfg root .luet.yaml oem efi || true: 6
brew install yq cdrtools: 12
export YQ= CUSTOM_PATH_DIR: 42
sudo -E make raw_disk_test_deploy: 12
USER_ID=$(id -u): 12
GROUP_ID=$(id -g): 12
sudo chown ENV_VAR:ENV_VAR serial_port1.log: 12
sudo chmod 777 serial_port1.log: 12
echo "PY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> ENV_VAR: 13
USES: minchao/setup-go-swagger: 6
pip install FLAG setuptools wheel: 20
rustup toolchain add nightly FLAG: 6
cargo hack check FLAG FLAG: 16
cargo minimal-versions build FLAG FLAG FLAG: 7
rustup toolchain add nightly FLAG FLAG miri && rustup default nightly: 6
cargo miri test FLAG FLAG: 10
poetry config repositories.test-pypi URL: 8
echo "Starting emulator": 11
cmake FLAG . FLAG: 32
ENV_VAR CUSTOM_PATH_DIR devices: 23
USES: ./.github/actions/download-node-modules-and-artifacts: 9
USES: ./.github/actions/e2e: 21
python3 -m pip install .[test]: 8
sudo apt install . CUSTOM_PATH_FILE: 30
cd build && make test: 9
echo "$(yarn global bin)" >> ENV_VAR: 6
rm composer.lock: 17
mkdir -p local-repositories petbuild-sources petbuild-cache petbuild-output: 7
ln -s `pwd` CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 7
[ -f local-repositories CUSTOM_PATH_DIR ] || (curl URL | gcc -x c -o .. CUSTOM_PATH_DIR -): 7
sudo install -m 755 local-repositories CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 13
sudo install -D -m 644 woof-code CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 7
echo "dash dash CUSTOM_PATH_DIR boolean false" | sudo debconf-set-selections: 7
sudo DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash: 7
sudo ln -s bash CUSTOM_PATH_DIR: 7
sudo mv output .. CUSTOM_PATH_DIR: 7
[ -f local-repositories CUSTOM_PATH_DIR ] || (curl -L URL | tar -xjf- && cd cdrtools-3.02 && make -j`nproc` && mv mkisofs CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 6
sudo chown -R root:root petbuild-output: 6
sudo mv petbuild-{sources,cache,output} .. CUSTOM_PATH_DIR: 7
sudo mv -f woof-output-* CUSTOM_PATH_DIR ENV_VAR/: 6
python ts_scripts CUSTOM_PATH_FILE FLAG=dev: 6
ENV_VAR CUSTOM_PATH_FILE FLAG: 11
echo "date=$( CUSTOM_PATH_DIR -u "+%Y%m%d")" >> ENV_VAR: 12
echo "hashes=$hashes" >> ENV_VAR: 6
tar xvf secrets.tar: 15
rm secrets.tar: 16
mv aws_config ENV_VAR CUSTOM_PATH_DIR: 12
mv aws_credentials ENV_VAR CUSTOM_PATH_DIR: 12
mv aws_credentials_with_assuming_iam_role ENV_VAR CUSTOM_PATH_DIR: 14
chmod -R a+rw ENV_VAR CUSTOM_PATH_DIR: 15
mv config.cc.travis ENV_VAR CUSTOM_PATH_DIR: 12
source secrets.properties > CUSTOM_PATH_DIR 2>&1: 12
echo "ENV_VAR" | docker login -u vdesabou FLAG: 12
sudo apt-get -qq purge build-essential ghc*: 11
bash scripts CUSTOM_PATH_FILE "${{ matrix.test_list }}" "${{ matrix.tag }}": 7
python main.py: 12
python3 -m pip install PyYAML: 11
cd linPEAS: 11
python3 -m builder.linpeas_builder: 11
git add linPEAS CUSTOM_PATH_FILE: 6
git config FLAG user.email "": 27
git config FLAG user.name "CI-linpeas-ubuntu": 6
git commit -m "COMMIT_MSG" -a FLAG: 24
mkdir docs CUSTOM_PATH_DIR: 16
touch build CUSTOM_PATH_DIR: 10
USES: shallwefootball/s3-upload-action: 32
dotnet workload install macos: 7
dotnet build . CUSTOM_PATH_FILE -c Release: 16
mv ENV_VAR CUSTOM_PATH_FILE ~ CUSTOM_PATH_FILE: 8
ls -l ~ CUSTOM_PATH_DIR: 10
USES: mig4/setup-bats: 25
unzip ~ CUSTOM_PATH_FILE -d ~ CUSTOM_PATH_DIR: 12
chmod +x ENV_VAR CUSTOM_PATH_FILE: 38
gcloud components install beta: 7
poetry run black . FLAG: 22
docker login ghcr.io -u ENV_VAR -p ENV_VAR: 6
docker push "ghcr.io CUSTOM_PATH_DIR: 12
python3 ci CUSTOM_PATH_FILE -e "ci CUSTOM_PATH_DIR -e "bin CUSTOM_PATH_DIR -r .: 8
import os: 13
export PATH=~ CUSTOM_PATH_DIR: 33
echo "::set-output name=date::$( CUSTOM_PATH_DIR -u "+%Y%m%d")": 15
USES: ./.github/actions/setup-helm: 37
kind load image-archive CUSTOM_PATH_FILE: 100
helm install -n kube-system atomix-controller . CUSTOM_PATH_DIR FLAG image.pullPolicy=Never FLAG init.image.pullPolicy=Never FLAG: 18
echo "kubectl get pods FLAG": 12
kubectl get pods FLAG: 24
echo "kubectl get storageprofiles FLAG": 12
kubectl get storageprofiles FLAG: 12
echo "kubectl get datastores FLAG": 12
kubectl get datastores FLAG: 12
python -m poetry run bash scripts CUSTOM_PATH_FILE: 7
USES: little-core-labs/get-git-tag: 24
cat . CUSTOM_PATH_DIR: 30
USES: ./action: 12
hub pr checkout ${{ github.event.issue.number }}: 39
cd ui-tests: 9
pip install .[lint]: 8
USES: jenkey2011/vuepress-deploy: 15
yarn blank-state: 7
pip install pytest pillow httpx: 13
mvn -v: 13
echo "127.0.0.1       message-broker" | sudo tee -a CUSTOM_PATH_DIR: 20
mvn -B ENV_VAR -Pdocker -DskipTests clean install: 20
autoreconf -fvi: 12
python -m build FLAG FLAG dist/: 11
. CUSTOM_PATH_DIR ktlint: 10
sudo chown -R ENV_VAR:ENV_VAR ENV_VAR CUSTOM_PATH_DIR: 16
tar -czvf ${{ github.workspace }} CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 13
du -h ${{ github.workspace }} CUSTOM_PATH_DIR: 13
sudo df -h: 26
brew update || true: 14
python -m pytest -v src CUSTOM_PATH_FILE: 8
cp src CUSTOM_PATH_FILE src CUSTOM_PATH_FILE: 23
FILENAME=`ls *.zip`: 10
unzip "ENV_VAR" -d content: 10
echo "filename=ENV_VAR:0:-4}" >> ENV_VAR: 8
rm -fr ~ CUSTOM_PATH_DIR: 14
bash -c 'source CUSTOM_PATH_FILE; \: 8
mkdir docs: 12
cp -r .. CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 12
Set-Content -Path certificate CUSTOM_PATH_FILE -Value $env:WINDOWS_CERTIFICATE: 6
certutil -decode certificate CUSTOM_PATH_FILE certificate CUSTOM_PATH_FILE: 6
Remove-Item -path certificate -include tempCert.txt: 6
Import-PfxCertificate -FilePath certificate CUSTOM_PATH_FILE -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText): 6
cd .. && yarn FLAG 100000: 10
yarn FLAG 100000: 10
make install-pre-commit: 6
sed -i 's CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 18
docker-compose down: 59
pip install -e ".[encoders-text-tfhub]": 11
mkdir ${{ env.CCACHE_DIR }}: 8
sudo mount FLAG ${{ env.CCACHE_DIR }} CUSTOM_PATH_DIR: 8
du -sh ${{ env.BASEDIR }} CUSTOM_PATH_DIR: 42
sudo find ${{ env.BASEDIR }} CUSTOM_PATH_DIR -wholename '* CUSTOM_PATH_DIR -delete: 21
sudo rm -rf ${{ env.BASEDIR }} CUSTOM_PATH_DIR: 20
sudo apt install -y git: 14
esac: 36
dotnet tool install -g dotnet-reportgenerator-globaltool: 8
USES: faucetsdn/action-packagecloud-upload-debian-packages: 6
docker login FLAG ${{ secrets.DOCKER_USERNAME }} FLAG ${{ secrets.DOCKER_TOKEN }}: 8
USES: ./smithy-rs/.github/actions/docker-build: 12
echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append: 7
cargo install cargo-release: 9
USES: ./.github/actions/install-qt-support: 9
cd kafka-ui-infra CUSTOM_PATH_DIR: 7
git add .. CUSTOM_PATH_DIR: 6
USES: ./.github/actions/upload-size-reports: 16
sudo CUSTOM_PATH_DIR ENV_VAR -screen 0 1280x1024x24 &: 6
docker exec pki dnf install -y softhsm: 8
docker exec pki ls -laR CUSTOM_PATH_DIR: 6
docker exec pki runuser -u pkiuser -- softhsm2-util FLAG FLAG HSM: 8
TAG=ENV_VAR#refs CUSTOM_PATH_DIR: 17
cmake FLAG . CUSTOM_PATH_DIR FLAG Release: 6
export NODE_OPTIONS=FLAG: 19
bash script CUSTOM_PATH_FILE: 11
qbs FLAG: 11
sudo . CUSTOM_PATH_FILE FLAG ENV_VAR qtcreator | tee -a ENV_VAR: 7
cargo clippy FLAG FLAG FLAG FLAG -- -D warnings: 16
rustup target list FLAG: 23
cargo install FLAG URL FLAG: 6
git fetch origin "+ENV_VAR:ENV_VAR": 13
USES: usthe/issues-translate-action: 15
mkdir coverity-tools: 7
cp CUSTOM_PATH_FILE .: 19
go mod edit -replace=github.com CUSTOM_PATH_DIR: 12
black FLAG src: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv cmake:pip: 6
echo "release_tag=$release_tag" >> ENV_VAR        : 13
mkdir coverage: 30
coverage combine coverage: 6
USES: ory/ci/checkout: 13
USES: ory/ci/newsletter: 6
USES: holoviz-dev/holoviz_tasks/install: 12
cat CUSTOM_PATH_FILE | base64: 10
echo "ndk.dir=ENV_VAR CUSTOM_PATH_DIR > local.properties: 11
echo "y" | CUSTOM_PATH_DIR "build-tools;34.0.0-rc3": 6
USES: yutailang0119/action-android-lint: 7
echo ENV_VAR > app CUSTOM_PATH_FILE: 11
USES: ./.github/workflows/bootstrap: 15
kubectl FLAG do-sfo2-k8s-gauzy rollout restart deployment CUSTOM_PATH_DIR: 6
USES: desiderati/github-action-pushover: 6
set -ex -o pipefail: 8
echo "BUILD_DATE=ENV_VAR" >> ENV_VAR: 13
sudo apt install -y python3-pip: 10
cd nanopb: 6
pio package pack: 7
sudo apt-get install -y libcurl4-openssl-dev: 16
cargo doc FLAG FLAG FLAG FLAG: 30
docker run FLAG FLAG tonistiigi CUSTOM_PATH_DIR FLAG arm64: 7
bundle exec pod install: 11
USES: NullVoxPopuli/action-setup-pnpm: 10
. CUSTOM_PATH_DIR ${{ matrix.target }}: 7
bundle exec rake ${{ matrix.task }}: 10
sha256sum build CUSTOM_PATH_FILE: 7
npm install -g cubejs-cli: 6
cubejs deploy: 6
USES: ./.github/actions/build-go: 13
mkdir build && cd build && cmake ..: 20
echo ${{ secrets.DOCKER_PASSWORD }} | $(which docker) login FLAG FLAG ${{ env.DOCKER_USERNAME }}: 7
cd modules CUSTOM_PATH_DIR: 14
sudo apt-get install -y shellcheck: 14
USES: ./.github/actions/verify-rust: 7
curl -L URL -s`-`uname -m` > docker-compose: 8
sudo mv docker-compose CUSTOM_PATH_DIR: 9
bash dot.env: 15
mvn versions:set -DnewVersion=ENV_VAR: 9
echo ": 46
dbUser=root: 8
dbPassword=Benerator123!: 12
dbCatalog=benerator: 8
idStrategy=increment: 12
idParam=1010" > src CUSTOM_PATH_FILE: 9
echo SHELL= CUSTOM_PATH_DIR >> ENV_VAR: 11
echo BENERATOR_HOME=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 11
echo PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 11
chmod -R 777 ENV_VAR CUSTOM_PATH_DIR: 12
benerator FLAG: 11
benerator ENV_VAR CUSTOM_PATH_FILE: 30
tar -xzf target CUSTOM_PATH_FILE": 6
cat ENV_VAR CUSTOM_PATH_FILE: 38
bun install: 25
PYTHON_VERSION=$(grep -m 1 -oP '(?<=CPython==)([^"]+)' pants.toml): 11
echo "PANTS_CONFIG_FILES=pants.ci.toml" >> ENV_VAR: 9
echo "PROJECT_PYTHON_VERSION=ENV_VAR" >> ENV_VAR: 11
USES: maxnowack/local-cache: 7
export LANG=C.UTF-8: 6
sleep 4: 14
python3 -m twine upload dist CUSTOM_PATH_DIR: 15
cargo test FLAG -- FLAG: 15
docker exec $( echo "${{ matrix.docker_os }}" | sed 's CUSTOM_PATH_DIR | sed 's CUSTOM_PATH_DIR ) bash CUSTOM_PATH_FILE: 6
${{ inputs.command }}: 6
cp build CUSTOM_PATH_FILE build CUSTOM_PATH_FILE: 13
composer global require php-coveralls CUSTOM_PATH_DIR: 29
php-coveralls FLAG_clover=build CUSTOM_PATH_FILE -v: 18
USES: godaddy-wordpress/setup-wp-cli: 10
npm install -g mocha: 11
yarn format: 39
curl -sL URL | python - -y: 16
dotnet build FLAG src CUSTOM_PATH_FILE: 6
cmake FLAG build CUSTOM_PATH_DIR: 22
sudo apt-get install -y clang-${{ matrix.version }}: 6
cmake FLAG build CUSTOM_PATH_DIR FLAG Release: 11
USES: marceloprado/has-changed-path: 37
sudo apt-get install -y libudev-dev: 21
bash . CUSTOM_PATH_FILE win: 6
content=`cat . CUSTOM_PATH_FILE | tr '\n' ' '`: 9
echo "::set-output name=json::$content": 13
sudo apt-get install gdb: 8
pip install docker: 6
export PTH_VERSION=${{ needs.setup.outputs.pth_version }}: 15
export HVD_VERSION=${{ needs.setup.outputs.hvd_version }}: 6
dart pub global activate -spath packages CUSTOM_PATH_DIR: 8
aft bootstrap FLAG FLAG=${{ inputs.package-name }} FLAG: 7
rm -rf . CUSTOM_PATH_DIR || true: 31
next_release_ref=$(. CUSTOM_PATH_FILE ${{github.base_ref}} ${{github.ref}}): 6
echo $next_release_ref: 6
echo "next_release_ref=${next_release_ref}" >> ENV_VAR: 6
git config FLAG user.name "Repository manager": 8
mkdir build_dir: 6
if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi: 13
echo 'org.gradle.caching=true' >> gradle.properties: 7
npm install pnpm -g: 14
USES: ipfs/aegir/actions/cache-node-modules: 65
cat Cargo.toml: 7
cargo fetch: 48
mkdir -p priv CUSTOM_PATH_DIR: 28
yarn unit: 10
NEW_VERSION=$(node -p "require('. CUSTOM_PATH_FILE"): 6
docker pull FLAG docker.elastic.co CUSTOM_PATH_DIR env.ELASTICSEARCH_VERSION }}: 6
docker pull FLAG appropriate CUSTOM_PATH_DIR: 6
make test-api: 6
diff -u <(echo -n) <(gofmt -d .): 8
tox -e integration: 8
pod lib lint FLAG: 14
poetry run mypy .: 23
t=$(python3 -c 'import random, sys; sys.stdout.write(str(random.randint(1, 15)))'); echo "Sleeping $t seconds"; sleep "$t": 13
USES: ./.github/actions/setup-relenv: 18
USES: ./.github/actions/build-onedir-deps: 6
USES: xarray-contrib/issue-from-pytest-log: 11
mkdir ENV_VAR && cd ENV_VAR: 6
USES: rhaschke/cache: 9
eval "$( CUSTOM_PATH_DIR: 6
bundle lock: 9
mkdir -p artifact: 8
make core: 6
eval "$(pyenv init -)": 11
eval "$(pyenv virtualenv-init -)": 7
export PATH="ENV_VAR CUSTOM_PATH_DIR .python-version) CUSTOM_PATH_DIR: 16
brew install gnu-sed: 13
if test -d .env CUSTOM_PATH_DIR then source .env CUSTOM_PATH_DIR else source .env CUSTOM_PATH_DIR fi: 8
echo "::set-output name=key::$( CUSTOM_PATH_DIR -u "+%Y%U")": 8
docker-compose -f docker CUSTOM_PATH_FILE -f docker CUSTOM_PATH_FILE run build: 6
docker-compose -f docker CUSTOM_PATH_FILE -f docker CUSTOM_PATH_FILE run deploy: 6
. CUSTOM_PATH_DIR detekt: 28
yarn workspace  CUSTOM_PATH_DIR install: 6
yarn common-build: 9
version=$(node -p "require('. CUSTOM_PATH_FILE"): 10
cd test-files: 7
export PKG_CONFIG_PATH=" CUSTOM_PATH_DIR: 22
echo "Job triggered by a ${{ github.event_name }} event on branch is ${{ github.ref }} in repository is ${{ github.repository }}, runner on ${{ runner.os }}": 16
python3 setup.py develop FLAG: 15
echo "🥑 This job's status is ${{ job.status }}.": 17
python -V FLAG: 6
avocado FLAG: 9
. CUSTOM_PATH_DIR after-build: 9
python setup.py develop FLAG: 10
unzip -d CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 9
python setup.py bdist_wheel sdist: 11
USES: iotaledger/actions-gh-pages: 11
meson setup build: 23
npm install prettier: 16
export PATH=ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 21
curl -L URL | sh: 9
yarn build:storybook: 18
cd installer CUSTOM_PATH_DIR: 6
vendor CUSTOM_PATH_DIR FLAG vendor CUSTOM_PATH_FILE tests CUSTOM_PATH_DIR: 7
npm publish FLAG dev: 7
npm publish FLAG latest: 9
doit env_create ENV_VAR FLAG=ENV_VAR: 8
doit pip_on_conda: 8
npx projen build: 15
git diff FLAG FLAG FLAG > .repo.patch || echo "self_mutation_happened=true" >> ENV_VAR: 10
echo "::error::Files were changed during build (see build log). If this was triggered from a fork, you will need to update your branch.": 13
cat .repo.patch: 13
cd dist && getfacl -R . > permissions-backup.acl: 18
cd dist && setfacl FLAG=permissions-backup.acl: 83
cd .repo && yarn install FLAG FLAG: 71
cd .repo && npx projen package:java: 14
cd .repo && npx projen package:python: 15
cd .repo && npx projen package:dotnet: 12
mkdir -p vendor CUSTOM_PATH_DIR: 6
vendor CUSTOM_PATH_DIR FLAG_clover=clover.xml -v: 7
yum update -y: 12
sudo apt-get install -y cmake: 11
export GOBIN=ENV_VAR CUSTOM_PATH_DIR: 8
gomobile init: 11
chmod +x yq: 6
coverage run FLAG=src FLAG=src CUSTOM_PATH_FILE -m pytest -s FLAG=** CUSTOM_PATH_DIR: 7
USES: dotansimha/changesets-action: 7
USES: newrelic/infrastructure-publish-action: 8
git fetch origin ${{ github.base_ref }}: 15
curl -sL URL | sudo bash -s -- -b CUSTOM_PATH_DIR: 8
python -m pip install FLAG pip setuptools wheel build: 9
cargo +nightly fmt -- FLAG: 8
sudo npm install -g jshint: 8
mv disk.raw cOS-Vanilla-RAW-green-${{ env.COS_VERSION }}-x86_64.raw: 8
mv disk.raw.tar.gz cOS-Vanilla-GCE-green-${{ env.COS_VERSION }}-x86_64.tar.gz: 8
USES: ./.github/actions/install-node-and-dependencies: 9
bundle exec rails test: 18
sudo apt FLAG install git: 7
. CUSTOM_PATH_FILE -b: 10
cargo install FLAG cargo-deny: 7
tar -xf source.tar.gz FLAG=1: 9
echo "::group::Run CPack": 7
echo "::group::Cleanup": 7
rm -f bundles CUSTOM_PATH_FILE256: 7
git diff HEAD FLAG FLAG: 6
make cross: 16
pipx run nox -s prepare -- FLAG FLAG FLAG: 9
python -m pip install -v .: 17
pipx run nox -s diagnostics -- FLAG: 6
python -m pytest -vv -rs awkward-cpp CUSTOM_PATH_DIR: 18
python -m pytest -vv -rs tests: 6
python -m build -w . CUSTOM_PATH_DIR: 6
pip install build twine: 42
npm run build:prd: 7
${{ matrix.setup }}: 11
cargo install cargo-workspaces: 7
USES: technote-space/toc-generator: 24
make -j $(nproc) -C . CUSTOM_PATH_DIR: 7
pip install .[dev,autotuning]: 7
cd . CUSTOM_PATH_FILE: 32
dotnet pack FLAG Release -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg: 12
USES: ClementTsang/cargo-action: 12
sudo pip3 install meson ninja PyYAML: 6
USES: gr2m/create-or-update-pull-request-action: 40
poetry run black FLAG FLAG .: 10
export DISPLAY=:0: 17
killall Xvfb: 6
mvn FLAG clean install -PrunIT: 6
USES: ./.github/actions/cache-deps: 22
pnpm install FLAG={.}...: 6
pnpm run test:e2e: 15
USES: FeatureLabs/gh-action-pypi-upload: 7
mkdir -p packaging CUSTOM_PATH_DIR: 8
cp -rp packaging CUSTOM_PATH_FILE packaging CUSTOM_PATH_DIR env.NETWORK }}-${{ env.NODE }}-config_${{ env.GIT_TAG }}-${{ env.ARCH }} CUSTOM_PATH_DIR: 37
cp -rp packaging CUSTOM_PATH_DIR packaging CUSTOM_PATH_DIR env.NETWORK }}-${{ env.NODE }}-config_${{ env.GIT_TAG }}-${{ env.ARCH }} CUSTOM_PATH_DIR: 46
cp -rp packaging CUSTOM_PATH_FILE64 packaging CUSTOM_PATH_DIR env.NETWORK }}-${{ env.NODE }}-config_${{ env.GIT_TAG }}-${{ env.ARCH }} CUSTOM_PATH_DIR: 20
dpkg-deb FLAG FLAG packaging CUSTOM_PATH_DIR env.NETWORK }}-${{ env.NODE }}-config_${{ env.GIT_TAG }}-${{ env.ARCH }}: 16
cp -rp packaging CUSTOM_PATH_DIR packaging CUSTOM_PATH_DIR env.NETWORK }}-${{ env.NODE }}-config_${{ env.GIT_TAG }}-${{ env.ARCH }}: 11
pip install awscli: 21
php ci CUSTOM_PATH_FILE: 13
sudo apt-get install libgtk-3-dev: 17
echo Copying Managed Libs...: 6
echo.: 33
echo Copying documentation files...: 6
USES: GeekyEggo/delete-artifact: 7
mkdir builddebug &&: 8
cd builddebug &&: 8
cd .. &&: 10
echo -e '#include <simdjson.h>\nint main(int argc,char**argv) {simdjson::dom::parser parser;simdjson::dom::element tweets = parser.load(argv[1]); }' > tmp.cpp && c++ -Idestination CUSTOM_PATH_DIR -Ldestination CUSTOM_PATH_DIR -std=c++17 -Wl,-rpath,destination CUSTOM_PATH_DIR -o linkandrun tmp.cpp -lsimdjson && . CUSTOM_PATH_DIR jsonexamples CUSTOM_PATH_FILE &&: 9
cp ecosystem.config.sample.js ecosystem.config.js: 7
cp .env.sample .env: 12
export NODE_OPTIONS=FLAG_old_space_size=4096: 8
export DOCKER_BUILDKIT=1: 14
echo "::set-output name=image::ENV_VAR CUSTOM_PATH_DIR: 12
python3 build CUSTOM_PATH_FILE fetch FLAG ninja: 18
python3 build CUSTOM_PATH_FILE fetch FLAG cmake: 18
python3 build CUSTOM_PATH_FILE fetch FLAG zlib: 16
python3 build CUSTOM_PATH_FILE fetch FLAG zstd: 18
python3 build CUSTOM_PATH_FILE fetch FLAG fmt: 18
python3 build CUSTOM_PATH_FILE fetch FLAG boost: 18
python3 build CUSTOM_PATH_FILE fetch FLAG double-conversion: 18
python3 build CUSTOM_PATH_FILE fetch FLAG gflags: 18
python3 build CUSTOM_PATH_FILE fetch FLAG glog: 18
python3 build CUSTOM_PATH_FILE fetch FLAG googletest: 18
python3 build CUSTOM_PATH_FILE fetch FLAG libevent: 18
python3 build CUSTOM_PATH_FILE fetch FLAG lz4: 18
python3 build CUSTOM_PATH_FILE fetch FLAG snappy: 18
python3 build CUSTOM_PATH_FILE fetch FLAG autoconf: 18
python3 build CUSTOM_PATH_FILE fetch FLAG automake: 18
python3 build CUSTOM_PATH_FILE fetch FLAG libtool: 18
python3 build CUSTOM_PATH_FILE fetch FLAG libsodium: 18
python3 build CUSTOM_PATH_FILE fetch FLAG xz: 16
python3 build CUSTOM_PATH_FILE fetch FLAG folly: 16
python3 build CUSTOM_PATH_FILE fetch FLAG fizz: 14
python3 build CUSTOM_PATH_FILE build FLAG ninja: 18
python3 build CUSTOM_PATH_FILE build FLAG cmake: 18
python3 build CUSTOM_PATH_FILE build FLAG zlib: 16
python3 build CUSTOM_PATH_FILE build FLAG zstd: 18
python3 build CUSTOM_PATH_FILE build FLAG fmt: 18
python3 build CUSTOM_PATH_FILE build FLAG boost: 18
python3 build CUSTOM_PATH_FILE build FLAG double-conversion: 18
python3 build CUSTOM_PATH_FILE build FLAG gflags: 18
python3 build CUSTOM_PATH_FILE build FLAG glog: 18
python3 build CUSTOM_PATH_FILE build FLAG googletest: 18
python3 build CUSTOM_PATH_FILE build FLAG libevent: 18
python3 build CUSTOM_PATH_FILE build FLAG lz4: 18
python3 build CUSTOM_PATH_FILE build FLAG snappy: 18
python3 build CUSTOM_PATH_FILE build FLAG autoconf: 18
python3 build CUSTOM_PATH_FILE build FLAG automake: 18
python3 build CUSTOM_PATH_FILE build FLAG libtool: 18
python3 build CUSTOM_PATH_FILE build FLAG libsodium: 18
python3 build CUSTOM_PATH_FILE build FLAG xz: 16
python3 build CUSTOM_PATH_FILE build FLAG folly: 16
python3 build CUSTOM_PATH_FILE build FLAG fizz: 14
-u ${{ secrets.ACCESS_TOKEN }} \: 14
ulimit -n 4096: 7
USES: imjasonh/setup-crane: 28
apt update -y && apt upgrade -y: 8
USES: docker-library/bashbrew: 9
echo "strategy=$strategy" >> "ENV_VAR": 9
jq . <<<"$strategy" # sanity check / debugging aid: 9
${{ matrix.runs.prepare }}: 10
${{ matrix.runs.pull }}: 10
${{ matrix.runs.build }}: 13
${{ matrix.runs.history }}: 10
${{ matrix.runs.test }}: 10
${{ matrix.runs.images }}: 10
yarn cover: 6
USES: Actions-R-Us/actions-tagger: 15
make -j install: 10
python -m tox -e ${{ matrix.tox }}: 10
python -m tox -e ${{ matrix.tox }} -- FLAG=xml: 7
echo "ENV_VAR" > "ENV_VAR": 11
USES: elastic/elastic-github-actions/elasticsearch: 26
( set -x; which rover ): 14
echo "$(rover FLAG)": 14
( set -x; which docker-compose ): 14
echo "$(docker-compose FLAG)": 14
make supergraph: 10
cat supergraph.graphql: 9
sleep 8: 7
npm config set legacy-peer-deps true: 9
npm install -D  CUSTOM_PATH_DIR: 14
sudo -E apt-get -qq install build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml -y: 11
 CUSTOM_PATH_DIR -rf ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 10
python3 setup.py -c config-wlan-ap.yml: 8
git clone URL -b main CUSTOM_PATH_DIR: 12
 CUSTOM_PATH_DIR -R . CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 8
echo "::set-output name=release_tag::AX1800-$(date +"%Y.%m.%d-%H.%M")": 8
USES: pulumi/setup-pulumi: 6
cat ~ CUSTOM_PATH_DIR: 28
cmake FLAG . -j$(nproc): 12
curl -LJO "URL: 9
python3 -m pip install git+URL: 23
USES: linkerd/dev/actions/setup-tools: 11
sleep 120s: 14
curl -s "URL matrix.ndk-version }}.zip" -o ndk.zip: 9
unzip -q -o ndk.zip -d .ndk: 9
echo "ANDROID_NDK_ROOT=ENV_VAR CUSTOM_PATH_DIR .ndk)" >> ENV_VAR: 9
cat build.log: 35
[[ -f . CUSTOM_PATH_FILE ]] && tail -50 . CUSTOM_PATH_FILE: 34
USES: butlerlogic/action-autotag: 19
USES: cardinalby/git-get-release-action: 19
yarn docs build: 11
echo '${{ toJSON(steps.changed-files.outputs) }}': 10
python -m pip install git+URL: 88
echo "registry=URL > .npmrc: 9
if [ -n "ENV_VAR" ];                              \: 6
then echo "VERSION=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR;  \: 6
else echo "VERSION=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR;       \: 6
fi;                                                        \: 6
echo "${{ steps.release.outputs.upload_url }}" > artifacts CUSTOM_PATH_DIR: 8
echo "CARGO=cross" >> ENV_VAR: 20
echo "TARGET_FLAGS=FLAG ${{ matrix.target }}" >> ENV_VAR: 17
echo "TARGET_DIR=. CUSTOM_PATH_DIR matrix.target }}" >> ENV_VAR: 17
echo "cargo command is: ${{ env.CARGO }}": 19
echo "target flag is: ${{ env.TARGET_FLAGS }}": 21
echo "target dir is: ${{ env.TARGET_DIR }}": 16
release_upload_url="$(cat artifacts CUSTOM_PATH_DIR: 7
echo "release upload url: ENV_VAR": 8
release_version="$(cat artifacts CUSTOM_PATH_DIR: 7
echo "release version: ENV_VAR": 8
${{ env.CARGO }} build FLAG FLAG ${{ env.TARGET_FLAGS }}: 10
echo "::set-output name=today::$(date +'%Y-%m-%d')": 10
sudo apt-get install -y libssl-dev: 12
ulimit -c unlimited -S: 14
choco install nasm: 15
USES: Shopify/upload-to-release: 22
cargo install bonnie rust-script: 7
pip install -U URL: 9
pio pkg install FLAG FLAG symlink: CUSTOM_PATH_DIR: 6
go get .: 7
sudo dpkg FLAG armhf: 14
export PKG_CONFIG_PATH= CUSTOM_PATH_DIR: 22
go build -v: 15
choco install wget FLAG: 12
dotnet build src CUSTOM_PATH_FILE FLAG release: 6
dotnet build src CUSTOM_PATH_FILE: 14
dotnet test src CUSTOM_PATH_FILE: 21
USES: hugo19941994/delete-draft-releases: 9
cargo install cargo-wix: 10
echo "version=ENV_VAR:11}" >> ENV_VAR: 7
sudo mkdir -p ENV_VAR: 12
sudo chown -R ENV_VAR ENV_VAR: 10
printf "::set-output name=%s::%s\n" tag-name "ENV_VAR#refs CUSTOM_PATH_DIR: 8
cd flutter: 12
flutter analyze .: 20
timeout 10s poetry run pip FLAG || rm -rf .venv: 24
python -m pip install FLAG FLAG "pip>=21.1": 6
make setup-ci: 13
tar -xzf protoc-gen-doc_1.5.1_linux_amd64.tar.gz: 10
chmod +x protoc-gen-doc: 10
cp protoc-gen-doc CUSTOM_PATH_DIR: 10
make check-docs: 19
pre-commit run FLAG FLAG=always FLAG: 14
sudo gem install cocoapods: 8
mv ~ CUSTOM_PATH_FILE .: 29
sed -i -e "s CUSTOM_PATH_DIR Go Version: .*$ CUSTOM_PATH_DIR Go Version: ENV_VAR CUSTOM_PATH_DIR .github CUSTOM_PATH_FILE: 6
sed -i -e "s CUSTOM_PATH_DIR NGT Version: .*$ CUSTOM_PATH_DIR NGT Version: ENV_VAR CUSTOM_PATH_DIR .github CUSTOM_PATH_FILE: 7
sed -i -e "s CUSTOM_PATH_DIR Kubernetes Version: .*$ CUSTOM_PATH_DIR Kubernetes Version: ENV_VAR CUSTOM_PATH_DIR .github CUSTOM_PATH_FILE: 6
git remote set-url origin "URL: 20
git push -u origin ENV_VAR: 14
curl FLAG FLAG FLAG \: 14
-H "Accept: application CUSTOM_PATH_DIR \: 17
-H "Content-Type:application CUSTOM_PATH_DIR \: 19
-H "Authorization: token ENV_VAR" \: 14
cmake FLAG . -j3: 8
USES: superbrothers/close-pull-request: 33
sudo apt-get install shellcheck: 17
echo "version=${version}" >> ENV_VAR: 31
pip install FLAG tox tox-gh-actions: 10
flutter build web FLAG canvaskit: 7
export TAG=ENV_VAR: 7
npm run format:check FLAG: 7
npm run semantic-release: 28
killall node: 12
sudo xcode-select FLAG CUSTOM_PATH_FILE: 23
. CUSTOM_PATH_DIR FLAG FLAG -Prelease.useLastTag=true candidate: 10
. CUSTOM_PATH_DIR FLAG -Prelease.useLastTag=true final: 7
npm run lint -- FLAG: 10
mkdir assets: 8
. CUSTOM_PATH_DIR "ENV_VAR": 7
melos bootstrap FLAG="supabase_flutter": 14
dart format lib test -l 80 FLAG: 19
make faustpp -j $(nproc): 8
make features: 22
echo "::set-output name=sha8::$(echo ${{ github.sha }} | cut -c1-8)": 9
make tarball: 6
pip install nox>=2022: 38
doit ecosystem=pip package_upload -u ENV_VAR -p ENV_VAR -r ENV_VAR: 7
lsb_release -a &&  ldd FLAG && gcc FLAG && g++ FLAG: 7
autoreconf && . CUSTOM_PATH_FILE && . CUSTOM_PATH_DIR && make -j8: 12
sudo apt-get update && sudo apt-get install -y zlib1g-dev libhdf5-dev: 7
pnpm check: 12
rustup toolchain install nightly-2023-03-03: 9
rustup default nightly-2023-03-03: 9
python -m pip install oldest-supported-numpy: 9
python -m pip install FLAG numpy: 8
wget -O ENV_VAR CUSTOM_PATH_DIR URL: 11
sudo ln -s ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 8
USES: zofrex/mirror-branch: 8
bash tools CUSTOM_PATH_FILE: 79
${{ matrix.ls || 'ls -lh' }} dist/: 7
PIP_VER=$(python3 -c "import pip; print(pip.__version__)"): 6
echo "Using pip version: ENV_VAR": 6
echo "PIP_CACHE_DIR=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
python3 -m pip install -r ENV_VAR CUSTOM_PATH_FILE: 33
ENV_VAR CUSTOM_PATH_FILE -i ENV_VAR -b ENV_VAR CUSTOM_PATH_DIR: 6
source ${{ env.INSTALL_DIR }} CUSTOM_PATH_FILE: 10
echo "Available storage:": 32
echo "module.exports = {extends: [' CUSTOM_PATH_DIR > commitlint.config.js: 7
cd tests/: 16
mkdir m4; autoreconf FLAG: 6
pip3 install dist CUSTOM_PATH_FILE: 7
xvfb-run -a npm test: 20
USES: wow-actions/potential-duplicates: 12
nix-env -if URL: 10
devenv up &: 9
lsb_release -a: 29
USES: gozala/typescript-error-reporter-action: 9
cd demo CUSTOM_PATH_DIR: 8
cargo install cargo-cache FLAG FLAG ci-autoclean cargo-cache: 11
brew install cairo pango gdk-pixbuf libffi: 7
pip install -e .[tf] FLAG: 17
pip install -e .[torch] FLAG: 15
jq FLAG 'all(.result == "success")' <<< '${{ toJson(needs) }}': 13
USES: ethomson/send-tweet-action: 23
USES: ./.github/actions/yarn-install-and-verify: 15
cargo dist plan FLAG=${{ github.ref_name }} FLAG=json > dist-manifest.json: 6
echo "dist plan ran successfully": 6
ANNOUNCEMENT_TITLE=$(jq FLAG ".announcement_title" dist-manifest.json): 6
IS_PRERELEASE=$(jq FLAG ".announcement_is_prerelease" dist-manifest.json): 6
jq FLAG ".announcement_github_body" dist-manifest.json > new_dist_announcement.md: 6
HAS_RELEASES=$(jq FLAG ".releases != null" dist-manifest.json): 6
jq FLAG ".artifacts[]?.path | select( . != null )" dist-manifest.json > uploads.txt: 7
cd docs && npm ci: 6
USES: ophub/flippy-openwrt-actions: 8
dotnet test CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
git rev-list FLAG HEAD |xargs printf "CI%05d" |xargs dotnet pack -c Debug -o out FLAG FLAG: 7
make licenses: 7
USES: roots/issue-closer-action: 6
tools CUSTOM_PATH_DIR: 61
tools CUSTOM_PATH_DIR FLAG: 6
USES: testspace-com/setup-testspace: 22
pip install -q -r requirements.txt: 7
USES: cmb69/setup-php-sdk: 8
echo "image=ENV_VAR" >> ENV_VAR: 6
echo ${{ github.event.after }}: 7
USES: ishworkh/docker-image-artifact-upload: 26
npm install yeoman CUSTOM_PATH_DIR: 8
git config user.name opentelemetrybot: 11
git config user.email 107717825+opentelemetrybot: 11
node -e "console.log('cwd', process.cwd())": 8
USES: whatnick/wait-action: 41
docker volume prune -f: 16
leo run: 9
cp -av . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 6
npm install node-fetch: 10
cargo build FLAG ${{ env.features }}: 6
security unlock-keychain -p "ENV_VAR" build.keychain: 7
. CUSTOM_PATH_FILE ${{ matrix.os }}: 20
sudo apt-get install -y libfuse2: 13
chmod +x linuxdeploy-x86_64.AppImage: 12
pip install .[full]: 19
python -m nltk.downloader omw-1.4: 6
curl -i URL: 6
echo "VERSION=$(vendor CUSTOM_PATH_DIR FLAG | grep FLAG FLAG=1 FLAG '\b[0-9]+\.[0-9]+')" >> ENV_VAR: 7
vendor CUSTOM_PATH_FILE: 13
sudo apt-get install -qq ccache: 7
echo "PATH= CUSTOM_PATH_DIR >> ENV_VAR: 30
USES: ./.github/actions/default: 9
sudo apt-get install libprotobuf-dev protobuf-compiler libopencv-dev: 11
CURRENT_GODOT_VERSION=${{matrix.GODOT_VERSIONS}}: 6
tar xf build.tar.gz: 8
sudo apt-get install firefox: 6
USES: fjogeleit/yaml-update-action: 6
USES: CertainLach/create-matrix-action: 14
cat .docker CUSTOM_PATH_DIR matrix.network }}.yml: 10
mvn -V test jacoco:report FLAG pom.xml FLAG: 7
sudo chown -R $(whoami) . CUSTOM_PATH_DIR: 12
sudo apt-get update && sudo apt install -y curl gnupg git libappindicator3-1 ca-certificates binutils icnsutils graphicsmagick: 12
sudo npm install -g npm: 28
sudo npm install FLAG -g node-gyp: 24
npm install FLAG -g node-gyp: 12
USES: espressif/esp-idf-ci-action: 18
USES: garronej/github_actions_toolkit: 15
git push origin latest: 9
git config FLAG user.email "ts_ci": 7
git config FLAG user.name "ts_ci": 7
VERSION="ENV_VAR#refs CUSTOM_PATH_DIR: 8
URL="URL: 7
mvn -V FLAG pom.xml FLAG: 6
npm version ${{ inputs.version }}: 12
npx lerna run test: 10
wget URL -O cloud_sql_proxy \: 16
&& chmod +x cloud_sql_proxy: 16
export LD_LIBRARY_PATH="ENV_VAR CUSTOM_PATH_DIR: 15
USES: ./.github/actions/clean-runner: 16
USES: mfem/github-actions/build-mfem: 6
make info: 13
USES: trufflesecurity/trufflehog: 14
USES: josephbmanley/butler-publish-itchio-action: 10
docker system prune FLAG FLAG: 13
USES: frabert/replace-string-action: 33
gpg FLAG FLAG D121AF2DFA8E140688BD968930C9B913FD42EF13 > CI.asc: 6
python3 -m pip install FLAG FLAG=ci CUSTOM_PATH_FILE: 7
cd . CUSTOM_PATH_DIR && pnpm run test: 7
echo '${{ secrets.RUNNER_PASSWORD }}' | sudo -S chown -R ENV_VAR:ENV_VAR ENV_VAR: 6
echo "HOME= CUSTOM_PATH_DIR >> ENV_VAR: 19
sudo apt-get install -y nodejs: 19
USES: tlambert03/setup-qt-libs: 17
USES: aganders3/headless-gui: 14
mkdir -p .. CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 10
. CUSTOM_PATH_FILE -s `pwd` CUSTOM_PATH_DIR -r `pwd` CUSTOM_PATH_DIR -b `pwd` CUSTOM_PATH_DIR: 6
ci CUSTOM_PATH_FILE stable ${{ matrix.target }}: 13
tar -czvf ${{ env.BIN }}.tar.gz FLAG=target CUSTOM_PATH_DIR matrix.target }} CUSTOM_PATH_DIR ${{ env.BIN }}: 14
USES: XAMPPRocky/create-release: 19
ci CUSTOM_PATH_FILE CUSTOM_PATH_DIR ${{ matrix.target }} RELEASE: 7
poetry install : 6
poetry run pip uninstall -y torch: 8
poetry run pip install torch: 9
. CUSTOM_PATH_FILE ${{ matrix.pydantic-version }}: 6
sudo apt-get install FLAG ffmpeg: 6
echo "flag it as docarray for codeoverage": 7
echo "codecov_flag=docarray" >> ENV_VAR: 7
USES: mondeja/remove-labels-gh-action: 22
USES: fnkr/github-action-ghr: 29
composer update ENV_VAR: 17
vendor CUSTOM_PATH_DIR FLAG FLAG=always: 12
-- \: 10
curl -sS -X DELETE -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" URL github.repository }} CUSTOM_PATH_DIR: 6
npm run build-ci: 20
echo "node_version=$(asdf current nodejs | xargs | cut -d ' ' -f 2)" >> ENV_VAR: 6
make INSTALL_ROOT=appdir install: 6
Invoke-Expression (New-Object System.Net.WebClient).DownloadString('URL: 15
scoop install nsis: 9
pip install meson ninja: 34
meson compile -C build: 42
meson test -C build FLAG: 12
USES: udoprog/github-release: 9
USES: docker://prombench/comment-monitor:0.0.1: 6
mkdir test CUSTOM_PATH_DIR: 16
USES: fusion-engineering/setup-git-credentials: 17
git rm * -r: 11
USES: gradle-update/update-gradle-wrapper-action: 40
npm test -- FLAG && bash <(curl -s URL: 8
sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf: 9
cd crates CUSTOM_PATH_DIR: 16
pip3 install -U pip && pip3 install setuptools sparsezoo/: 20
rm -r sparsezoo/: 26
sudo apt-get install swig: 7
AutoROM -v: 6
pytest . CUSTOM_PATH_FILE: 8
libboost-filesystem-dev \: 6
python3 \: 7
VERSION=$(echo ${{ github.ref }} | sed -e "s#refs CUSTOM_PATH_DIR: 21
pip install -U virtualenv setuptools wheel tox: 9
sudo apt-get install graphviz pandoc: 24
pre-commit run FLAG FLAG FLAG=always: 15
conda activate pkg_test: 6
python -c "from pymer4.test_install import test_install; test_install()": 8
cd docs && make clean && make html: 8
bash -c '(cd vendor CUSTOM_PATH_FILE CUSTOM_PATH_DIR && MRUBY_CONFIG=.. CUSTOM_PATH_FILE make libmruby.a)': 7
. CUSTOM_PATH_FILE FLAG FLAG FLAG: 8
conan profile new default FLAG FLAG: 12
conan profile update settings.compiler.libcxx=libstdc++11 default: 39
sudo apt-get install doxygen: 31
cp -r . CUSTOM_PATH_DIR ./: 9
USES: tclindner/sentry-releases-action: 8
pip install torch FLAG URL: 13
apt-get update FLAG: 7
sudo apt-get install ant: 9
ant -noinput -buildfile build.xml test: 7
cwd=$(pwd): 18
mkdir -p . CUSTOM_PATH_DIR Example': 8
cd . CUSTOM_PATH_DIR Example' CUSTOM_PATH_DIR: 8
rm .git: 16
kubectl wait FLAG=condition=Ready nodes FLAG FLAG=300s: 11
kubectl describe node: 14
pnpm test:svelte: 7
echo "REDIS_REPO=${{github.event.inputs.redis_repo || env.DEFAULT_REDIS_REPO}}" >> ENV_VAR: 10
echo "REDIS_BRANCH=${{github.event.inputs.redis_branch || env.DEFAULT_REDIS_BRANCH}}" >> ENV_VAR: 10
echo "REDISRAFT_REPO=${{github.event.inputs.redisraft_repo || env.DEFAULT_REDISRAFT_REPO}}" >> ENV_VAR: 10
echo "REDISRAFT_BRANCH=${{github.event.inputs.redisraft_branch || env.DEFAULT_REDISRAFT_BRANCH}}" >> ENV_VAR: 10
cargo fetch FLAG: 27
pip install numba: 8
ctest: 85
choco install make: 12
go install .: 12
USES: ./.github/actions/tests/run-e2e-tests: 12
curl URL -L | tar xvz FLAG 1: 13
bundle exec rubocop FLAG: 33
USES: ./.github/actions/go-test: 12
gh project item-edit FLAG "ENV_VAR" FLAG ${{ env.PROJECT_ID }} FLAG ${{ env.VIEW_FIELD_ID }} FLAG ${{ vars.team_project_view_working_board }}: 7
dart run build_runner build FLAG: 13
USES: act10ns/slack: 78
sudo ls -R CUSTOM_PATH_FILE: 19
go test -v -race -tags=debug . CUSTOM_PATH_DIR: 32
echo ${{ inputs.tracker_hash }}: 6
docker image prune -af: 10
make docker-push: 28
docker build -t ghcr.io CUSTOM_PATH_DIR .: 25
echo "::warning::URL: 6
USES: ./.github/workflows/tmate_debug: 28
USES: ./.github/workflows/canary-test-config: 18
tests CUSTOM_PATH_FILE validate_yaml: 9
tests CUSTOM_PATH_FILE use_local_disk: 20
tests CUSTOM_PATH_FILE create_partitions_for_osds: 7
tests CUSTOM_PATH_FILE wait_for_prepare_pod: 17
toolbox=$(kubectl get pod -l app=rook-ceph-tools -n rook-ceph -o jsonpath='{.items[*].metadata.name}'): 14
tests CUSTOM_PATH_FILE check_ownerreferences: 8
USES: ./.github/workflows/collect-logs: 19
BLOCK=$(sudo lsblk FLAG|awk ' CUSTOM_PATH_DIR {print $1}'| head -1): 11
tests CUSTOM_PATH_FILE wait_for_ceph_to_be_ready osd 1: 9
tests CUSTOM_PATH_FILE create_cluster_prerequisites: 9
tests CUSTOM_PATH_FILE deploy_manifest_with_local_build deploy CUSTOM_PATH_FILE: 20
kubectl create -f tests CUSTOM_PATH_FILE: 12
cat tests CUSTOM_PATH_FILE >> tests CUSTOM_PATH_FILE: 7
kubectl -n rook-ceph get pods: 6
sudo lsblk: 11
cd deploy CUSTOM_PATH_DIR: 12
tests CUSTOM_PATH_FILE print_k8s_cluster_status: 6
cosign version: 9
wget -O ${{ runner.temp }} CUSTOM_PATH_FILE URL \: 14
&& sudo dpkg -i ${{ runner.temp }} CUSTOM_PATH_FILE: 13
[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true: 8
python3 -m pip install pdm twine pdm-mina mina-build: 10
twine upload dist CUSTOM_PATH_DIR FLAG -u __token__ -p ${{ secrets.PYPI_TOKEN }}: 10
choco install pandoc: 9
USES: ammaraskar/msvc-problem-matcher: 16
mvn FLAG install -DskipTests=true -Dgpg.skip=true -Dmaven.javadoc.skip=true: 6
make -k: 15
make install_plugins: 15
echo "${{ github.workspace }} CUSTOM_PATH_DIR >> "ENV_VAR": 26
echo "PACKAGE_VERSION=$(pulumictl get version FLAG generic)" >> "ENV_VAR": 13
echo "run-url=URL >> "ENV_VAR": 6
tar -zcf ${{ github.workspace }} CUSTOM_PATH_FILE -C ${{ github.workspace }} CUSTOM_PATH_DIR pulumi-resource-${{ env.PROVIDER }} pulumi-tfgen-${{ env.PROVIDER }}: 15
. CUSTOM_PATH_FILE all: 13
yarn workspace  CUSTOM_PATH_DIR run storybook:build FLAG: 7
echo ENV_VAR | docker login -u ENV_VAR FLAG: 16
sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB: 9
rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB: 8
export SYCL_DEVICE_FILTER=opencl.cpu: 7
echo "PIPECD_VERSION=$(git describe FLAG FLAG FLAG=7)" >> ENV_VAR: 7
curl -L -o ENV_VAR CUSTOM_PATH_FILE URL: 7
USES: Azure/container-scan: 13
dotnet build . CUSTOM_PATH_FILE FLAG Release FLAG: 7
echo CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.PERSONAL_ACCESS_TOKEN }} >> .npmrc: 7
echo "always-auth=true" >> .npmrc: 8
echo "CRYPTO_KEY=${{ secrets.CRYPTO_KEY }}" >> .env: 6
echo "MAGIC_IV=${{ secrets.MAGIC_IV }}" >> .env: 6
echo "MAGIC_SALT=${{ secrets.MAGIC_SALT }}" >> .env: 6
echo "NEW_CRYPTO_KEY=${{ secrets.NEW_CRYPTO_KEY }}" >> .env: 6
echo "API_URL=URL >> .env: 6
echo "NEW_DRIVE_URL=URL >> .env: 6
echo "DRIVE_URL=URL >> .env: 6
echo "BRIDGE_URL=URL >> .env: 6
echo "APP_SEGMENT_KEY=${{ secrets.APP_SEGMENT_KEY }}" >> .env: 6
echo "APP_SEGMENT_KEY_TEST=${{ secrets.APP_SEGMENT_KEY_TEST }}" >> .env: 6
echo "BUG_REPORTING_URL=URL >> .env: 6
echo "NOTIFICATIONS_URL=URL >> .env: 6
echo "LOCK_REFRESH_INTERVAL=20000" >> .env: 6
echo "PHOTOS_URL=URL >> .env: 6
echo "DRIVE_API_URL=URL >> .env: 6
echo "RUDDERSTACK_KEY=${{ secrets.RUDDERSTACK_KEY }}" >> .env: 6
echo "RUDDERSTACK_DATA_PLANE_URL=${{ secrets.RUDDERSTACK_DATA_PLANE_URL }}" >> .env: 6
yarn run postinstall: 8
. CUSTOM_PATH_DIR compile: 9
. CUSTOM_PATH_DIR jacoco: 6
git config FLAG FLAG safe.directory ENV_VAR CUSTOM_PATH_DIR: 18
pnpm package: 7
. CUSTOM_PATH_FILE ${{ github.ref }}: 8
go test -count=1 . CUSTOM_PATH_DIR: 6
git config FLAG user.email lorenzesch: 11
git push -f FLAG: 16
sudo apt-get install build-essential libgl1-mesa-dev: 6
cmd.exe CUSTOM_PATH_DIR "call `"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars.txt": 8
Get-Content "$env:temp\vcvars.txt" | Foreach-Object { if (ENV_VAR -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] } }: 16
git submodule update FLAG src CUSTOM_PATH_DIR: 13
cmake -DCMAKE_INSTALL_PREFIX=.. CUSTOM_PATH_DIR -DCMAKE_BUILD_TYPE=Release ..: 6
. CUSTOM_PATH_FILE dynamic pack: 7
cmake FLAG . FLAG install FLAG Release: 10
doxygen mne-cpp_doxyfile: 6
git config FLAG user.name LorenzE: 9
git commit FLAG -a -m 'Update docu' FLAG: 6
git add .nojekyll: 6
git commit FLAG -a -m 'Update docu': 10
cd wasm: 9
USES: ./.github/actions/slack: 10
ls app CUSTOM_PATH_DIR: 7
mv app CUSTOM_PATH_FILE app CUSTOM_PATH_FILE: 14
USES: wemake-services/wemake-python-styleguide: 7
USES: mpi4py/setup-mpi: 25
last_committed_tag=$(git tag -l FLAG=-v:refname | head -1): 6
git_revno=$(git rev-list $(git describe FLAG FLAG=0)..HEAD FLAG): 6
git_hash=$(git rev-parse FLAG HEAD): 6
echo "=======FLAMESHOT VERSION========": 6
echo ${last_committed_tag:1}: 6
echo "Details: ${last_committed_tag}+git${git_revno}.${git_hash}": 6
echo "================================": 12
cd "ENV_VAR CUSTOM_PATH_DIR || { >&2 echo "Cannot cd to 'ENV_VAR CUSTOM_PATH_DIR exit 11 ; }: 6
echo "======no operation for you can see link in the log console=====": 7
cp -r ENV_VAR CUSTOM_PATH_DIR ENV_VAR: 12
bash ENV_VAR CUSTOM_PATH_DIR: 6
chmod +x appimagetool: 9
echo $(sh ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE): 7
flatpak remote-add FLAG FLAG flathub URL: 7
echo "=====no operation for you can see link in the log console=====": 11
git fetch origin develop:develop: 7
git reset FLAG develop: 9
export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac): 10
export OS=$(uname | awk '{print tolower($0)}'): 10
export OPERATOR_SDK_DL_URL=URL steps.dotenv.outputs.OPERATOR_SDK_VERSION }}: 10
sudo curl -LO ENV_VAR CUSTOM_PATH_DIR: 10
sudo chmod +x operator-sdk_ENV_VAR_ENV_VAR: 7
sudo mv operator-sdk_ENV_VAR_ENV_VAR CUSTOM_PATH_DIR: 10
USES: ./.github/workflows/release_tag: 88
id: 19
echo arguments=ENV_VAR > ". CUSTOM_PATH_DIR: 32
mvn verify ENV_VAR -Dchrome.capabilities.path=ENV_VAR -Dff.capabilities.path=ENV_VAR ENV_VAR -pl ENV_VAR:ENV_VAR FLAG: 6
dotnet build ${{ github.workspace }} CUSTOM_PATH_FILE FLAG Release: 10
USES: nitz/publish-nuget: 6
USES: ./.github/actions/linux-deps: 8
USES: ./.github/actions/notify_failure: 14
USES: ./.github/actions/upload_build: 10
python3 -m pip install mkdocs: 6
python3 -m pip install mkdocs-material: 8
USES: slsa-framework/slsa-github-generator/.github/actions/rng: 6
USES: slsa-framework/slsa-github-generator/.github/actions/generate-builder: 6
USES: slsa-framework/slsa-github-generator/.github/actions/secure-builder-checkout: 18
npx ng build FLAG cloud FLAG FLAG: 9
npx nx run ngx-bootstrap:build-sass FLAG cloud: 9
USES: advanced-security/maven-dependency-submission-action: 18
USES: GuillaumeFalourd/setup-windows10-sdk-action: 13
$vsPath = (vswhere -latest -property installationPath): 13
Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll"): 13
Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.19041.0": 13
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv l4t-pytorch: 6
rustup toolchain install stable FLAG minimal: 40
USES: readmeio/rdme: 18
brew tap homebrew CUSTOM_PATH_DIR: 18
cd android-cuttlefish CUSTOM_PATH_DIR && debuild -i -us -uc -b: 6
dpkg -i android-cuttlefish CUSTOM_PATH_FILE || apt-get install -f -y: 6
cd packaging: 7
sudo ln -sf `which go` `sudo which go` || true: 6
sudo go version: 10
CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o go-dnscollector *.go: 19
sudo python3 -m pip install dnstap_pb fstrm dnspython: 13
sudo python3 -m pip install FLAG protobuf: 14
until (dig -p 5553 www.github.com  | grep NOERROR); do sleep 5.0; done: 12
sudo python3 -m unittest tests.dnsquery_dnstap${{ matrix.mode }} -v: 7
USES: streamr-dev/streamr-docker-dev-action: 8
docker kill $(docker ps -q): 11
docker rm $(docker ps -a -q): 7
dotnet restore ${{ github.workspace }} CUSTOM_PATH_FILE: 7
pyinstaller -n upload FLAG ${{ github.workspace }} CUSTOM_PATH_DIR matrix.os }} CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG FLAG "${{ env.RUNNER_TOOL_CACHE }} CUSTOM_PATH_DIR ${{ github.workspace }} CUSTOM_PATH_FILE: 6
echo "BUILD_VERSION=ENV_VAR-ENV_VAR" >> ENV_VAR: 7
conda install conda-build conda-verify FLAG: 9
. CUSTOM_PATH_FILE ${{ matrix.python-version }} ${{ matrix.torch-version }} ${{ matrix.cuda-version }}: 9
conda install anaconda-client FLAG: 13
anaconda upload FLAG FLAG main ENV_VAR CUSTOM_PATH_FILE2: 13
docker run FLAG=host appropriate CUSTOM_PATH_DIR FLAG 10 FLAG 5 FLAG URL | grep 'ok': 6
echo "IMAGE=ghcr.io CUSTOM_PATH_DIR >> ENV_VAR: 12
FLAG taskDefinition > task-definition.json: 6
sudo wget -O CUSTOM_PATH_DIR URL: 13
USES: devcontainers/ci: 13
export VERBOSE=1: 34
make install -j$(nproc): 12
yarn run test:ci: 13
make check-fmt: 28
brew install autoconf automake libtool: 16
make -C upx CUSTOM_PATH_DIR test: 8
mix deps.unlock FLAG: 30
mix deps.get FLAG test: 27
mvn clean test -DskipTests=false -P run-coveralls jacoco:report coveralls:report -DrepoToken=${{ secrets.coveralls_repo_token }}: 6
echo "${{ secrets.gpg_private_key }}" | gpg FLAG FLAG: 9
git config user.name "${{ github.event.head_commit.committer.name }}": 8
git config user.email "${{ github.event.head_commit.committer.email }}": 8
echo "GIT_TAG=ENV_VAR" >> ENV_VAR: 12
.. CUSTOM_PATH_DIR -s -g solidify_all.be: 6
[ ! -f . CUSTOM_PATH_DIR ] || mv . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 139
USES: Jason2866/copy_file_to_another_repo_action: 6
echo "::error::can not get prebuilt llvm libraries" && exit 1: 18
cmake FLAG . FLAG Release FLAG 4: 73
cmake .. ${{ matrix.make_options_run_mode }} ${{ matrix.make_options_feature }}: 6
sudo wget ${{ matrix.wabt_release }}: 9
sudo tar -xzf wabt-1.0.31-*.tar.gz: 7
sudo mv wabt-1.0.31 wabt: 7
ctest FLAG build FLAG: 15
sudo wget ${{ matrix.wasi_sdk_release }}: 7
sudo tar -xzf wasi-sdk-*.tar.gz: 6
cd samples CUSTOM_PATH_DIR: 66
. CUSTOM_PATH_DIR wasm-apps CUSTOM_PATH_FILE: 8
bash build.sh: 20
gh pr merge ENV_VAR FLAG FLAG: 6
yarn workspace  CUSTOM_PATH_DIR test: 30
pip install wheel build: 10
python -m build . -s: 6
docker push FLAG registry.cn-hangzhou.aliyuncs.com CUSTOM_PATH_DIR: 7
echo "Release ok, please see:": 8
echo "  URL: 15
iex "& {$(irm get.scoop.sh)} -RunAsAdmin": 8
value=`cat math-homework.txt`: 8
python runtests.py: 9
USES: ./.github/actions/cached-node-modules: 11
pip install twine FLAG: 7
python setup.py bdist: 7
USES: chainguard-dev/actions/setup-kind: 15
echo "{}" > serviceAccount.json: 7
echo '': 15
rosdep install -iy FLAG src CUSTOM_PATH_DIR: 9
source CUSTOM_PATH_DIR env.ROS_DISTRO }} CUSTOM_PATH_FILE: 8
colcon test: 9
sudo apt-get install build-essential imagemagick libfreetype6-dev libjpeg-dev libpng-dev pkg-config: 7
USES: numworks/setup-arm-toolchain: 10
sudo apt-get update &&: 16
pip install pip wheel FLAG: 9
apt-key adv FLAG URL: 73
apt-get update && apt-get install -y git ffmpeg libturbojpeg: 9
pip install ninja psutil: 13
coverage run FLAG FLAG mmcv -m pytest tests/: 6
pip install torch==${{matrix.torch}}+cpu torchvision==${{matrix.torchvision}}+cpu -f URL: 54
python -m pip install -U pip poetry: 8
cd quickstarts: 18
cd ${{ inputs.QUICKSTART_PATH }}: 8
cd wildfly: 6
. CUSTOM_PATH_FILE ${{ github.event.inputs.version }}: 14
echo "LLVM_PREFIX=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
git remote add origin URL: 46
brew install erlang: 6
Package: *: 6
curl URL | gpg FLAG | sudo tee CUSTOM_PATH_FILE > CUSTOM_PATH_DIR: 7
USES: tferreira/matterfy: 9
mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=.. CUSTOM_PATH_FILE -DNCNN_BUILD_TOOLS=OFF -DNCNN_BUILD_EXAMPLES=OFF -DNCNN_BUILD_TESTS=ON ..: 8
USES: k8s-at-home/renovate-helm-releases: 6
python build_scripts CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_FILE canary: 8
echo "Do nothing": 6
USES: peter-evans/rebase: 11
deno lint: 27
pnpm run test:ci: 13
USES: MishaKav/jest-coverage-comment: 6
unzip CUSTOM_PATH_FILE -d CUSTOM_PATH_DIR: 23
brew install sccache: 11
cp LICENSE build CUSTOM_PATH_DIR: 6
cp README.md build CUSTOM_PATH_FILE: 6
npm publish . CUSTOM_PATH_DIR: 13
sed -i "s CUSTOM_PATH_DIR [0-9]*) CUSTOM_PATH_DIR `echo ${{ github.event.inputs.new_version }} | sed "s CUSTOM_PATH_DIR api CUSTOM_PATH_FILE: 6
USES: docker://composer: 14
rustup update stable FLAG && rustup default stable: 13
rustup update stable && rustup default stable: 47
. CUSTOM_PATH_FILE ${{ matrix.target }}: 12
rustup update nightly && rustup default nightly: 27
rustup override set nightly: 36
python -m pip install FLAG 'pip<23' wheel: 8
python -m coverage report: 11
Install-Module 7Zip4PowerShell -Force -Verbose: 9
USES: ./.github/actions/mamba-env: 14
make -j${nproc} all syms: 16
cd .. && rm -rf build: 26
IMAGE_ID=ENV_VAR CUSTOM_PATH_DIR: 15
set -o xtrace: 16
export GO111MODULE=on: 23
branch="ENV_VAR#refs CUSTOM_PATH_DIR: 12
timestamp=`TZ="Asia CUSTOM_PATH_DIR date +"%Y%m%d%H%M%S"`: 12
export VERSION="$branch-$timestamp-solo": 12
export GOOS=linux: 19
export ARCH=all: 12
export REGISTRY=registry.us-west-1.aliyuncs.com CUSTOM_PATH_DIR: 12
cp -v . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR env.RELEASE_NAME }} CUSTOM_PATH_DIR: 6
vendor CUSTOM_PATH_DIR FLAG=checkstyle | cs2pr: 7
sdk CUSTOM_PATH_DIR: 6
make controller-gen: 8
USES: pCYSl5EDgo/cat: 15
sudo apt-get update && sudo apt-get install -y python3-ruamel.yaml: 6
cargo install clippy-sarif FLAG 0.3.4 FLAG: 7
cargo install sarif-fmt FLAG 0.3.4 FLAG: 7
cargo clippy FLAG FLAG FLAG FLAG=json -- -D warnings FLAG deprecated | clippy-sarif | tee clippy-results.sarif | sarif-fmt: 7
cargo clippy FLAG FLAG FLAG -- -D warnings FLAG deprecated: 8
USES: ./.github/actions/publish-test: 13
sudo apt-get install -y gettext: 18
yarn build:npm: 7
USES: Roang-zero1/github-create-release-action: 6
go mod tidy && git diff FLAG: 10
sudo cp setup CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 6
vendor CUSTOM_PATH_DIR FLAG FLAG=coverage.xml: 7
test $(git status FLAG | wc -l) -eq "0": 8
debug_which=$(cat debug_which): 6
echo "cmake -D cppad_debug_which=$debug_which" ..: 6
cmake -D cppad_debug_which=$debug_which ..: 6
xvfb-run FLAG npm test: 12
echo "flags=FLAG" >> ENV_VAR: 6
sudo apt-get install aspell: 6
sudo apt-get install build-essential libgtk-3-dev libgtk-3-bin: 6
echo "IDs: ${{ inputs.instance_id }}": 21
echo "${{ secrets.GHCR_PASSWORD }}" | docker login -u ${{ secrets.GHCR_LOGIN }} FLAG ghcr.io: 9
docker push "ENV_VAR:latest": 11
tox -e py37: 8
wget -O - -q URL | sh -s -- -b .: 11
USES: docker://chinthakagodawita/autoupdate-action:v1: 27
dotnet publish -c Release FLAG net6.0-windows CUSTOM_PATH_DIR CUSTOM_PATH_DIR  CUSTOM_PATH_DIR: 6
echo "'uname -s' is:": 21
echo "uname: " $(uname): 21
echo "uname -m: " $(uname -m): 21
echo "uname -r:" $(uname -r): 21
echo "uname -s: " $(uname -s): 21
echo "uname -v: " $(uname -v): 21
set -e pipefail: 38
. CUSTOM_PATH_FILE;: 7
echo ENV_VAR > pr_num.txt: 9
echo ${{github.base_ref}}: 23
echo "branch=${{github.base_ref}}" >> ENV_VAR: 33
BRANCH=${{steps.branch.outputs.branch}}: 17
git checkout ENV_VAR;: 35
git pull;: 14
BRANCH_NAME="ENV_VAR-ENV_VAR";: 17
git checkout -b merge_pr;: 17
git merge FLAG FLAG ENV_VAR || (echo "Merge conflict, please check." && exit -1);: 10
echo ${{ steps.run_ut.outputs.ECI_ID }}: 10
eci rm ${{ steps.run_ut.outputs.ECI_ID }}: 10
rm -f ${{ steps.run_ut.outputs.RES_FILE }}: 10
rm -f ${{ steps.run_ut.outputs.RES_LOG }}: 10
git config FLAG user.name "wanpengfei-git";: 8
git config FLAG user.email "wanpengfei91";: 8
cp fe CUSTOM_PATH_DIR .: 6
repo="${{ github.repository }}": 24
bucket_prefix=`echo ${repo% CUSTOM_PATH_DIR | tr '[:upper:]' '[:lower:]'` : 13
echo "bucket_prefix=${bucket_prefix}" >> ENV_VAR: 20
branch=${{ steps.branch.outputs.branch }}: 10
bucket_prefix=${{ steps.branch.outputs.bucket_prefix }}: 10
ossutil64 FLAG ~ CUSTOM_PATH_DIR rm oss: CUSTOM_PATH_DIR -rf: 6
rm -rf ${{ github.workspace }} && mkdir -p ${{ github.workspace }}: 20
bucket_prefix=`echo ${repo% CUSTOM_PATH_DIR | tr '[:upper:]' '[:lower:]'`: 10
rm -f ENV_VAR: 17
. versions: 6
echo "elixir=$elixir" >> ENV_VAR: 6
echo "otp=$otp" >> ENV_VAR: 6
npm ci FLAG assets: 8
echo ENV_VAR > pr_number.txt: 15
yarn ci-check: 6
YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install: 6
USES: ./.github/actions/set-variables: 8
USES: ./.github/actions/gradle-task: 33
sudo rm -rf ENV_VAR: 8
echo "CXX=${{ matrix.cxx }}" >> ENV_VAR: 7
npm audit FLAG=dev: 8
cargo install mdbook: 17
sudo apt-get install -y libglew-dev libglfw3-dev: 6
pip wheel . -w wheels/: 6
pip install pytest numpy: 9
pip install pymeshlab*.whl: 6
make setup-dev: 15
USES: hustcer/setup-nu: 7
make doctest: 29
USES: jetli/wasm-bindgen-action: 20
USES: maxheld83/ghpages: 24
export PATH=" CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 17
echo CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "$(brew FLAG) CUSTOM_PATH_DIR >> ENV_VAR: 14
export NVM_DIR="ENV_VAR CUSTOM_PATH_DIR: 6
chmod +x . CUSTOM_PATH_DIR && sudo mv . CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 14
make docker-export: 6
nvm use: 10
make kind-import: 7
echo "Deployment in namespace 'securecodebox-system'": 7
npm publish FLAG ENV_VAR: 13
echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee CUSTOM_PATH_FILE: 6
sudo udevadm control FLAG: 10
sudo apt-get install rpm: 6
USES: teatimeguest/setup-texlive-action: 9
echo "version is: ${{ env.RELEASE_VERSION }}": 8
cat notes-${{ env.RELEASE_VERSION }}.md: 9
sed -i -e "s CUSTOM_PATH_DIR = .* CUSTOM_PATH_DIR = \"`date +'%-Y.%-m.%-d'`\" CUSTOM_PATH_DIR Cargo.toml: 7
ruby FLAG: 41
gem FLAG: 14
yarn compile: 48
echo "VERSION=ENV_VAR" >> "ENV_VAR": 16
aws cloudfront create-invalidation FLAG ENV_VAR FLAG " CUSTOM_PATH_DIR: 8
echo "::set-env name=GOPATH::$(go env GOPATH)": 7
echo "::add-path::$(go env GOPATH) CUSTOM_PATH_DIR: 9
kill ENV_VAR: 13
pip install -r CUSTOM_PATH_FILE: 9
go test -v -race -coverprofile=coverage.txt -covermode=atomic . CUSTOM_PATH_DIR: 8
dotnet tool install FLAG dotnet-coverage: 7
go test -race -v . CUSTOM_PATH_DIR: 29
echo "MEILISEARCH_VERSION=$(curl URL | bash)" >> ENV_VAR: 10
docker run -d -p 7700:7700 getmeili CUSTOM_PATH_DIR env.MEILISEARCH_VERSION }} meilisearch FLAG=masterKey FLAG: 8
sudo systemctl stop docker: 12
REF=${{ github.ref }}: 9
echo "::set-output name=version::ENV_VAR##* CUSTOM_PATH_DIR: 9
USES: Ilshidur/action-slack: 42
python -m tox FLAG: 7
. CUSTOM_PATH_FILE ENV_VAR checksum.txt: 50
cd ENV_VAR CUSTOM_PATH_DIR && make clean && make build: 13
. CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR launch: 7
sed -i 's/  port: [0-9]*/  port: 12345 CUSTOM_PATH_DIR mo.yml: 11
cat mo.yml: 12
echo "=============================": 9
echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" FLAG: 11
scheme_list=$(xcodebuild -list -json | tr -d "\n"): 8
default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]"): 6
echo $default | cat >default: 8
echo Using default scheme: $default: 8
device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$ CUSTOM_PATH_DIR: 9
if [ $scheme = default ]; then scheme=$(cat default); fi: 11
if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi: 11
file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`: 11
xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device": 6
apk upgrade FLAG: 12
apk add nodejs zstd wget bash coreutils tar findutils: 12
sed 's CUSTOM_PATH_DIR -i CUSTOM_PATH_DIR: 12
apk add git: 14
apk add curl: 14
apk add openssh: 12
mv ~ CUSTOM_PATH_FILE $(echo ~ CUSTOM_PATH_FILE | sed -e 's CUSTOM_PATH_DIR: 8
git add package.json: 20
. CUSTOM_PATH_DIR app:assembleDebug: 6
ctest -C Debug FLAG: 20
ctest -C Release FLAG: 27
cd doxygen: 8
git clone URL FLAG: 7
USES: dfm/rtds-action: 8
USES: emibcn/badge-action: 12
USES: myrotvorets/info-from-package-json-action: 10
USES: monkeyWie/create-release: 10
USES: 10up/action-wordpress-plugin-asset-update: 25
cargo clippy FLAG -- -Dwarnings: 15
poetry run black .: 7
sudo systemctl daemon-reload: 24
brew install qt5: 7
mkdir -p ENV_VAR && cd ENV_VAR: 17
echo ENV_VAR > ENV_VAR: 7
vendor CUSTOM_PATH_DIR FLAG=build CUSTOM_PATH_FILE: 11
vendor CUSTOM_PATH_DIR FLAG=github: 6
sudo npm install -g json2yaml: 10
echo $matrix: 13
echo $matrix | jq .: 11
echo $matrix | json2yaml: 10
cat .github CUSTOM_PATH_FILE: 18
#! CUSTOM_PATH_DIR: 36
GOVERSION=$({ [ -f .go-version ] && cat .go-version; }): 10
echo "GOVERSION=ENV_VAR" >> ENV_VAR: 10
npm rebuild: 20
yarn add  CUSTOM_PATH_DIR prosemirror-commands prosemirror-keymap prosemirror-model prosemirror-schema-list prosemirror-state prosemirror-transform prosemirror-view prosemirror-dropcursor prosemirror-gapcursor prosemirror-history: 6
lithops clean -c .github CUSTOM_PATH_FILE: 6
cd runtime CUSTOM_PATH_DIR: 10
echo ${{ steps.vars.outputs.tag }}: 12
cargo test -p toml_edit FLAG: 6
cargo test -p toml FLAG: 6
echo "COMPOSE_FILE_HASH=$(md5sum docker-compose.rendered.yml | awk '{ print $1 }')" >> ENV_VAR: 8
body="${body CUSTOM_PATH_DIR : 12
echo "🎉 triggered by a ${{ github.event_name }} event.": 6
sudo apt-get install doxygen graphviz: 8
cd build-debug: 13
USES: pyrsia/rust-toolchain: 11
npm run webpack: 13
 CUSTOM_PATH_DIR :99 -screen 0 1024x768x24 > CUSTOM_PATH_DIR 2>&1 &: 27
python -m pytest modin CUSTOM_PATH_DIR: 7
python -m pytest modin CUSTOM_PATH_FILE: 78
sudo apt update && sudo apt install -y libhdf5-dev: 14
python -m pytest -n 2 modin CUSTOM_PATH_FILE FLAG=${{ matrix.execution }}: 18
mpiexec -n 1 python -m pytest modin CUSTOM_PATH_FILE: 27
python -m pytest -n 2 modin CUSTOM_PATH_FILE: 26
cp .github CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
sudo . CUSTOM_PATH_DIR format FLAG 0 redis: CUSTOM_PATH_DIR pics: 7
sudo . CUSTOM_PATH_DIR mount -d redis: CUSTOM_PATH_DIR CUSTOM_PATH_DIR FLAG &: 7
ls -lh: 33
tar -cvf build.tar FLAG node_modules ./: 12
tar -xvf build.tar && rm build.tar: 19
tar -cvf coverage.tar coverage: 7
sudo make -C bpf-loader-rs install-deps: 6
USES: eunomia-bpf/prepare-cargo-appimage: 11
cd ecli CUSTOM_PATH_DIR: 12
mkdir cli-test: 9
cd cli-test: 9
.. CUSTOM_PATH_DIR -h: 9
sudo make install-deps: 8
docker run FLAG -v `pwd`: CUSTOM_PATH_DIR -v `pwd` CUSTOM_PATH_FILE unifyai CUSTOM_PATH_DIR python3 -m pytest FLAG numpy ivy CUSTOM_PATH_FILE: 28
USES: aquiladev/ipfs-action: 7
sudo apt-get install libpcsclite-dev: 6
git push FLAG origin main: 13
. CUSTOM_PATH_DIR assembleDebug lintDebug FLAG: 26
git config user.name "Github Workflow (on behalf of ${{ github.actor }})": 14
git config user.email "users.noreply.github.com": 14
pip install -e '.[test]': 6
cmake .. -DCMAKE_BUILD_TYPE=Release: 25
cmake FLAG . -j 3: 7
sudo apt-get install -y mysql-client: 18
USES: ./.github/composite_actions/download_test_configuration: 71
cd CommonServer && npm install: 38
cmake FLAG _build: 7
USES: ./.github/actions/test-e2e: 7
echo "::set-output name=matrix::ENV_VAR": 11
ls -lh . CUSTOM_PATH_DIR: 7
dart analyze FLAG .: 122
pip3 install FLAG pip==${{ env.PIP_VERSION }}: 11
pip3 install virtualenv: 9
pytest test CUSTOM_PATH_FILE: 7
USES: aslafy-z/conventional-pr-title-action: 18
VERSION=${{ github.event.inputs.version }}: 11
git add cmd CUSTOM_PATH_FILE: 7
git push origin master FLAG: 14
echo "#include <Arduino.h>" >> src CUSTOM_PATH_FILE: 7
echo "void setup() {}" >> src CUSTOM_PATH_FILE: 7
echo "void loop() {}" >> src CUSTOM_PATH_FILE: 7
USES: wow-actions/welcome: 11
pip install invoke tox: 12
ctest FLAG 30 -C Debug -j4: 6
gh pr list FLAG "${{ github.repository }}" FLAG "machineFL" FLAG main FLAG open FLAG "status:success review:required" FLAG 1 FLAG number > dep_PRs_waiting_approval.json: 7
dep_pull_request=$(cat dep_PRs_waiting_approval.json | grep -Eo "[0-9]*"): 7
echo ::set-output name=dep_pull_request::${dep_pull_request}: 7
gh pr review FLAG "${{ github.repository }}" FLAG FLAG "auto approve" ${{ steps.find_prs.outputs.dep_pull_request }}: 7
gh pr review FLAG "${{ github.repository }}" FLAG ${{ steps.find_prs.outputs.dep_pull_request }}: 7
gh pr merge FLAG "${{ github.repository }}" FLAG FLAG FLAG ${{ steps.find_prs.outputs.dep_pull_request }}: 7
sudo apt install -y make: 8
printf '[user]\n\tname = Cockpit Project\n\temail=cockpituous\n' > ~ CUSTOM_PATH_DIR: 10
echo '${{ secrets.GITHUB_TOKEN }}' > ~ CUSTOM_PATH_DIR: 9
make bots: 11
bots CUSTOM_PATH_DIR: 6
travis CUSTOM_PATH_FILE: 20
pip install FLAG pip wheel: 37
bundle install FLAG=4 FLAG=3: 13
bundle exec erblint FLAG: 6
bundle exec rails db:create: 11
bundle exec rails db:schema:load: 8
zcat artifacts CUSTOM_PATH_FILE | docker load: 9
sudo snap install dart-sass-embedded: 6
sudo update-alternatives FLAG php CUSTOM_PATH_DIR: 9
sudo update-alternatives FLAG php-config CUSTOM_PATH_DIR: 7
DOCKER_BUILDKIT=1 docker build . CUSTOM_PATH_DIR -f . CUSTOM_PATH_DIR: 14
sudo apt install -y libunwind-dev: 11
USES: space-wizards/submodule-dependency: 13
mkdir -p ${{github.workspace}} CUSTOM_PATH_DIR: 21
sudo apt install -y '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev: 18
sudo add-apt-repository "deb URL CUSTOM_PATH_DIR: 7
cd ${{github.workspace}}: 50
cd fast CUSTOM_PATH_DIR: 8
rm -Rf ENV_VAR CUSTOM_PATH_DIR: 6
USES: ./.github/actions/seal-restore: 10
USES: camertron/github-app-installation-auth-action: 7
echo ENV_VAR#refs CUSTOM_PATH_DIR: 7
cp -rf . CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
mkdocs build FLAG: 23
USES: rust-lang/simpleinfra/github-actions/cancel-outdated-builds: 19
npm build: 11
USES: MrSquaare/ssh-setup-action: 8
USES: ./.github/workflows/actions/setup: 10
cargo build FLAG wasm32-wasi FLAG: 14
wasmedge FLAG .:. target CUSTOM_PATH_FILE example_js CUSTOM_PATH_FILE: 6
USES: ./.github/actions/configure: 8
dotnet nuget add source FLAG SamBoy "URL: 13
TEMP_PATH="$(mktemp -d)": 8
echo '::group::🐶 Installing reviewdog ... URL: 8
curl -sfL URL | sh -s -- -b "ENV_VAR" 2>&1: 8
git apply -p0 patches CUSTOM_PATH_FILE: 12
sudo apt-get install tree: 8
USES: crazy-max/ghaction-github-status: 10
cd .. CUSTOM_PATH_DIR && . CUSTOM_PATH_DIR: 11
export MAKEFLAGS=-j`nproc`: 18
cd share CUSTOM_PATH_DIR: 17
python3 -m venv .venv && . .venv CUSTOM_PATH_DIR && pip3 install -r requirements.txt: 7
USES: mschilde/auto-label-merge-conflicts: 28
rm -r . CUSTOM_PATH_DIR: 31
sudo apt-get install -y musl-tools: 31
sudo apt-get install -y gcc-multilib: 13
dotnet build FLAG FLAG Debug Samples CUSTOM_PATH_FILE: 25
dotnet build FLAG FLAG Debug Tests CUSTOM_PATH_FILE: 6
msbuild -p:RestorePackages=false -p:Configuration=Debug Samples CUSTOM_PATH_FILE: 9
USES: scientific-python/upload-nightly-action: 6
cd common: 11
echo "short_sha=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 12
gcloud container clusters get-credentials dust-kube FLAG us-central1: 11
kubectl rollout status deployment CUSTOM_PATH_DIR FLAG=10m: 13
pecl install vld-beta: 14
make release tests: 6
grep -r . FLAG='*.log' src CUSTOM_PATH_DIR: 13
sudo npm install -g pxt: 10
. CUSTOM_PATH_DIR -B -ntp versions:set -DnewVersion=${{ github.sha }}: 6
cargo build FLAG FLAG FLAG FLAG: 13
cp . CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 7
cargo +nightly udeps: 7
dotnet restore "${{ env.WORKING_DIRECTORY }}": 12
dotnet build "${{ env.WORKING_DIRECTORY }}" FLAG ${{ env.CONFIGURATION }} FLAG: 10
dotnet test "${{ env.WORKING_DIRECTORY }}" FLAG: 8
dotnet publish "${{ env.WORKING_DIRECTORY }}" FLAG ${{ env.CONFIGURATION }} FLAG FLAG "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}": 6
brew install libsodium: 6
pushd build CUSTOM_PATH_DIR && ninja tests -k 0 && popd: 6
git push "URL: 7
pre-commit run -av trailing-whitespace: 6
pre-commit run -av end-of-file-fixer: 6
pre-commit run -av check-yaml: 6
pre-commit run -av check-added-large-files: 6
mkdir tests CUSTOM_PATH_DIR: 8
USES: GetStream/push-stream-chat-docusaurus-action: 13
yarn relay: 6
dotnet test FLAG Release FLAG GitHubActions: 9
sudo add-apt-repository ppa:ethereum CUSTOM_PATH_DIR: 7
USES: ./.github/actions/keycloak-create-dataset: 7
USES: ./.github/actions/prometheus-run-queries: 6
molecule test -s default: 8
Set-Service -Name postgresql-x64-14 -StartupType Manual: 7
Start-Service postgresql-x64-14: 7
Write-Output $pgsqlService: 7
pg_isready.exe: 7
createdb.exe FLAG=$env:DB_PGSQL_USERNAME $env:DB_PGSQL_DATABASE: 7
mysqld.exe FLAG FLAG: 6
mysqld.exe FLAG MySQL: 6
Start-Service MySQL: 6
"Filename=$filename" >> $env:GITHUB_OUTPUT: 8
$filepath = Join-Path -Path ${{ runner.temp }} -ChildPath $filename: 8
"Filepath=$filepath" >> $env:GITHUB_OUTPUT: 8
"source $filepath" | mysql.exe FLAG=$env:DB_MYSQL_ROOT_USERNAME FLAG=$env:DB_MYSQL_ROOT_PASSWORD mysql: 6
Restart-Service MySQL: 6
Write-Output '::group::Get-Service': 7
$mysqlService = Get-Service MySQL: 7
Write-Output $mysqlService: 7
Write-Output '::endgroup::': 63
Write-Output '::group::Service running check': 7
$(throw "$serviceName service is not running") > $null: 7
"create database if not exists ``$env:DB_MYSQL_DATABASE`` default character set $env:DB_MYSQL_CHARSET default collate $env:DB_MYSQL_COLLATION;" | mysql.exe FLAG=$env:DB_MYSQL_ROOT_USERNAME FLAG=$env:DB_MYSQL_ROOT_PASSWORD: 6
mysql.exe FLAG: 6
postgres.exe FLAG: 6
export PATH=.. CUSTOM_PATH_DIR: 9
which java: 16
ENV_VAR CUSTOM_PATH_DIR -version: 8
USES: elastic/apm-pipeline-library/.github/actions/opentelemetry: 10
docker push quay.io CUSTOM_PATH_DIR steps.build.outputs.short_sha1 }}: 12
USES: mansagroup/nrwl-nx-action: 32
echo ENV_VAR | docker login -u ENV_VAR FLAG docker.pkg.github.com: 6
USES: felixmosh/turborepo-gh-artifacts: 6
tar -xf openmp-11.0.0.src.tar.xz: 20
cd openmp-11.0.0.src: 20
sed -i'' -e ' CUSTOM_PATH_DIR __kmp_unnamed_critical_addr CUSTOM_PATH_DIR runtime CUSTOM_PATH_FILE: 20
sed -i'' -e 's CUSTOM_PATH_DIR runtime CUSTOM_PATH_FILE: 20
sudo cp ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 14
sudo cp ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 14
wget URL -O vulkansdk-macos-1.3.236.0.dmg: 13
hdiutil attach vulkansdk-macos-1.3.236.0.dmg: 13
sudo CUSTOM_PATH_FILE CUSTOM_PATH_DIR FLAG ENV_VAR CUSTOM_PATH_DIR FLAG FLAG FLAG install: 15
sudo apt-get install -y libsdl2-dev: 7
echo "compression_level = 5" >> ~ CUSTOM_PATH_FILE: 11
mkdir ${{ runner.temp }} CUSTOM_PATH_DIR: 17
touch ~ CUSTOM_PATH_DIR: 13
USES: micronaut-projects/github-actions/graalvm/pre-build: 6
USES: micronaut-projects/github-actions/graalvm/build: 6
USES: micronaut-projects/github-actions/graalvm/post-build: 6
sudo curl -fSL "URL -o " CUSTOM_PATH_DIR: 8
sudo chmod a+x " CUSTOM_PATH_DIR: 8
xorg-dev \: 7
echo 'CACHE_PATH=~ CUSTOM_PATH_DIR >> "ENV_VAR": 8
ccache -V && ccache FLAG && ccache FLAG: 8
cd build; make -j2; ccache FLAG: 9
ccache FLAG=1.0G: 9
pip -V: 8
echo "CXX=${{ matrix.compiler }}" >> ENV_VAR: 9
cargo test FLAG FLAG FLAG ${{ matrix.target }}: 6
yarn add file:. CUSTOM_PATH_DIR: 7
npm run build:api: 8
pandoc -v: 7
sudo cmake FLAG build: 16
git clone FLAG URL CUSTOM_PATH_DIR: 8
npm install && \: 12
npm run build && \: 6
yarn clean: 18
yarn build:packages: 25
kind create cluster: 25
make e2e-cleanup: 6
make -j4 -C src: 6
sudo make -C src install: 6
make -j4 -C tools: 6
sudo make -C tools install: 6
treefrog -v: 6
npm install typescript: 9
cmake -DNO_STL=OFF -DETL_USE_TYPE_TRAITS_BUILTINS=OFF -DETL_USER_DEFINED_TYPE_TRAITS=OFF -DETL_FORCE_TEST_CPP03_IMPLEMENTATION=OFF . CUSTOM_PATH_DIR: 24
cmake -DNO_STL=ON -DETL_USE_TYPE_TRAITS_BUILTINS=OFF -DETL_USER_DEFINED_TYPE_TRAITS=OFF -DETL_FORCE_TEST_CPP03_IMPLEMENTATION=OFF . CUSTOM_PATH_DIR: 24
cmake -DNO_STL=OFF -DETL_USE_TYPE_TRAITS_BUILTINS=OFF -DETL_USER_DEFINED_TYPE_TRAITS=OFF -DETL_FORCE_TEST_CPP03_IMPLEMENTATION=ON . CUSTOM_PATH_DIR: 19
cmake -DNO_STL=ON -DETL_USE_TYPE_TRAITS_BUILTINS=OFF -DETL_USER_DEFINED_TYPE_TRAITS=OFF -DETL_FORCE_TEST_CPP03_IMPLEMENTATION=ON . CUSTOM_PATH_DIR: 19
echo "RELEASE_TAG=ENV_VAR:10}" >> ENV_VAR: 17
echo "RELEASE_NAME=ENV_VAR" >> ENV_VAR: 20
chmod a+x CUSTOM_PATH_DIR: 12
git submodule foreach 'git rev-parse HEAD > CUSTOM_PATH_DIR 2>&1 || rm -rf ENV_VAR' || true: 16
prepare-build-cache: 12
echo CI_DOCKER_RUN_EXTRA_ARGS="-v $(pwd): CUSTOM_PATH_DIR >> ENV_VAR: 8
USES: david-a-wheeler/flawfinder: 13
npm install -g markdownlint-cli: 25
git remote set-url origin URL secrets.GITHUB_TOKEN }}:x-oauth-basic CUSTOM_PATH_FILE: 8
USES: ./.github/actions/build-onedir-salt: 6
echo "::set-output name=matrix::$( echo '${{ env.MATRIX }}' | jq -M -c )": 7
echo 'Matrix': 7
echo 'FLAG': 31
echo '${{ steps.set-matrix.outputs.matrix }}': 7
cd "${{github.workspace}} CUSTOM_PATH_DIR: 35
cd "${{github.workspace}}": 8
shopt -u dotglob: 7
eval "ENV_VAR": 9
ulimit -c: 23
echo ENV_VAR > . CUSTOM_PATH_FILE: 8
USES: oprypin/find-latest-tag: 45
sed -i 's CUSTOM_PATH_DIR = false CUSTOM_PATH_DIR = true CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 8
echo "MINOR_VERSION=ENV_VAR" >> ENV_VAR: 6
-t "ghcr.io CUSTOM_PATH_DIR github.repository_owner }} CUSTOM_PATH_DIR \: 10
echo "${{ secrets.GITHUB_TOKEN }}" | docker login URL -u ${{ github.actor }} FLAG: 7
docker push "ghcr.io CUSTOM_PATH_DIR github.repository_owner }} CUSTOM_PATH_DIR: 14
docker rm -f $(docker ps -a -q): 6
USES: kolpav/purge-artifacts-action: 23
python -m pip install invoke .[test]: 6
pulumi login FLAG: 9
pulumi stack init dev: 8
. CUSTOM_PATH_FILE ${{env.APP_VERSION}}: 15
rm -rf node_modules && yarn install FLAG: 10
make test-python: 15
bundle add code-scanning-rubocop FLAG 0.3.0 FLAG: 6
python -m pip install tqdm: 6
curl -sLO "URL -o kubectl: 9
mv kubectl CUSTOM_PATH_DIR: 9
echo "DISPLAY=:99.0" >> ENV_VAR: 25
pdm build: 14
git submodule update FLAG src CUSTOM_PATH_DIR src CUSTOM_PATH_DIR src CUSTOM_PATH_DIR src CUSTOM_PATH_FILE: 7
dotnet test -c Release ENV_VAR src CUSTOM_PATH_FILE: 54
USES: dotnet/docs-tools/actions/sequester: 6
mvn clean install FLAG janusgraph-all -Pjanusgraph-cache -Dmaven.javadoc.skip=true ${{ env.BUILD_MAVEN_OPTS }}: 11
mvn verify FLAG janusgraph-all -Pjanusgraph-cache ${{ env.VERIFY_MAVEN_OPTS }}: 11
mvn clean install FLAG janusgraph-${{ matrix.module }} ${{ env.BUILD_MAVEN_OPTS }} ${{ matrix.install-args }}: 8
pip install PyYAML: 12
python dev CUSTOM_PATH_FILE: 8
cmake FLAG build CUSTOM_PATH_DIR FLAG Debug: 8
brew install sdl2: 21
pip install FLAG pip build: 6
cp -ar legate CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
python3 -m unittest: 9
export PREFIX= CUSTOM_PATH_DIR: 8
USES: hasura/comment-progress: 11
pipx install FLAG=FLAG=.github CUSTOM_PATH_FILE poetry: 16
pipx install FLAG=FLAG=.github CUSTOM_PATH_FILE nox: 14
pipx inject FLAG=FLAG=.github CUSTOM_PATH_FILE nox nox-poetry: 12
brew install bash: 31
. CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 30
. CUSTOM_PATH_DIR "ENV_VAR" "ENV_VAR": 12
. CUSTOM_PATH_DIR "ENV_VAR" . CUSTOM_PATH_FILE: 6
USES: ./.github/actions/run-gradle: 19
USES: google-github-actions/deploy-appengine: 8
isort . FLAG: 13
cd Plan: 10
sudo apt-get install bmake: 6
rm -f ENV_VAR CUSTOM_PATH_DIR: 10
vtgate FLAG: 10
USES: slsa-framework/slsa-github-generator/.github/actions/detect-workflow-js: 7
echo "outcome=$([ "ENV_VAR" == "true" ] && echo "success" || echo "failure")" >> "ENV_VAR": 7
USES: MeilCli/danger-action: 7
USES: micronaut-projects/github-pages-deploy-action: 10
. CUSTOM_PATH_DIR clean deploy -Psnapshots -DskipITs -DskipTests FLAG: 9
autoreconf -vfi: 15
export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}": 9
git config FLAG user.email "netty-project-bot": 17
git config FLAG user.name "Netty Project Bot": 17
docker-compose ${{ matrix.docker-compose-build }}: 16
docker-compose ${{ matrix.docker-compose-run }}: 10
bash . CUSTOM_PATH_FILE release.properties netty CUSTOM_PATH_DIR main: 8
cargo install FLAG cargo-pgrx/ FLAG FLAG: 6
conda config FLAG solver libmamba: 8
ssh-keygen -N '' -t rsa -f ~ CUSTOM_PATH_DIR: 8
sudo chmod 755 oscap-ssh: 8
sudo mv -v oscap-ssh CUSTOM_PATH_DIR: 8
sudo chown root:root CUSTOM_PATH_DIR: 12
rm -f oscap-ssh: 8
docker push ENV_VAR CUSTOM_PATH_DIR FLAG: 6
aws ecs describe-task-definition FLAG wikijump-dev-ec2 FLAG taskDefinition > task-definition.json: 6
pip install build wheel: 24
git checkout ${{ github.sha }} || git checkout ${{ github.event.pull_request.head.sha }}: 6
sudo rm -rf .. CUSTOM_PATH_DIR: 7
workdir=$(pwd): 6
USES: gabrielfalcao/pyenv-action: 19
pip3 install requests certifi "confluent-kafka[avro,json,protobuf]==1.7.0": 16
pip3 install avro-python3 kafka-python: 18
pip3 install protobuf: 16
pip3 install FLAG snowflake-connector-python==2.7.4: 17
sudo apt-get -y install jq vim: 11
sudo apt-get -y install squid3: 16
sudo apt-get install apache2-utils: 20
sudo touch CUSTOM_PATH_DIR: 21
sudo chmod 777 CUSTOM_PATH_DIR: 51
sudo htpasswd -db -c CUSTOM_PATH_DIR admin test: 16
sudo mv .github CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 16
sudo service squid start: 16
. CUSTOM_PATH_FILE .. CUSTOM_PATH_DIR: 12
USES: suo/flake8-github-action: 13
echo "deb URL CUSTOM_PATH_DIR | sudo tee -a CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_DIR upload-coverage: 12
poetry install FLAG FLAG FLAG: 9
TAG="$(date '+%Y%m%d').ENV_VAR": 14
echo "Using extra tag ENV_VAR": 8
python3 . CUSTOM_PATH_FILE target CUSTOM_PATH_DIR ${{ env.RESULTS_FILENAME }} \: 7
FLAG tfhe_rs \: 8
FLAG ${{ inputs.instance_type }} \: 11
FLAG "ENV_VAR" \: 33
FLAG "${{ env.BENCH_DATE }}" \: 10
FLAG avx512 \: 7
echo "Computing HMac on results file": 7
-H "X-Slab-Command: store_data_v2" \: 8
cargo test FLAG ${{ matrix.target }} FLAG: 17
USES: keep-network/npm-version-bump: 12
. CUSTOM_PATH_FILE ci: 12
. share CUSTOM_PATH_FILE: 9
share CUSTOM_PATH_DIR: 9
source share CUSTOM_PATH_FILE: 13
cp -r build CUSTOM_PATH_DIR .: 6
FLAG Dockerfile \: 6
USES: exuanbo/actions-deploy-gist: 10
sudo apt-get update -y -q: 9
poetry lock FLAG: 23
python3 -m twine check dist CUSTOM_PATH_DIR: 6
touch CUSTOM_PATH_FILE: 15
npm run docs-build: 9
npx pm2 start verdaccio -- -c .verdaccio.yaml: 18
echo ' CUSTOM_PATH_DIR > .npmrc: 18
npm config set registry URL: 35
git config FLAG user.email "webiny-bot": 37
git config FLAG user.name "webiny-bot": 37
yarn lerna:version:verdaccio: 7
yarn lerna:publish:verdaccio: 7
yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c .verdaccio.yaml: 8
USES: docker://nyholm/roave-bc-check-ga: 17
. CUSTOM_PATH_DIR init: 16
npx ts-node . CUSTOM_PATH_FILE: 13
NODE_ENV=development npm ci: 11
USES: ./.github/actions/ci: 13
. CUSTOM_PATH_DIR fix FLAG FLAG: 7
. CUSTOM_PATH_DIR analyse: 9
chmod +x php-coveralls.phar: 7
cp .env.template .env: 29
rm -rf . CUSTOM_PATH_DIR && rm -f . CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 64
. CUSTOM_PATH_DIR -v create -c . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 28
curl -Lo skaffold URL && sudo install skaffold CUSTOM_PATH_DIR: 28
cd . CUSTOM_PATH_DIR && skaffold run: 28
cd . CUSTOM_PATH_DIR && skaffold init FLAG: 14
python -m pip install -r requirements CUSTOM_PATH_FILE -r requirements CUSTOM_PATH_FILE: 13
pytest FLAG FLAG=10 FLAG networkx: 9
brew install graphviz: 25
choco install graphviz: 10
pip install -r requirements CUSTOM_PATH_FILE -r requirements CUSTOM_PATH_FILE: 20
python -m pip install -r test_requirements.txt: 13
rm -rf tests CUSTOM_PATH_DIR: 12
sudo apt-get install cmake: 13
rustup component add rust-docs: 6
coverage combine coverage* CUSTOM_PATH_DIR: 6
poetry install FLAG test: 10
bash-tools CUSTOM_PATH_FILE: 10
yq FLAG: 16
USES: Zomzog/changelog-checker: 17
sudo apt-get install clang-format-14: 6
USES: korelstar/xmllint-problem-matcher: 10
USES: ChristophWurst/xmllint-action: 96
script CUSTOM_PATH_FILE: 42
script CUSTOM_PATH_DIR -i: 6
echo "{\"experimental\": \"enabled\"}" > ~ CUSTOM_PATH_FILE: 6
USES: docker://pandoc/latex:2.9: 6
pip install sphinx: 24
echo ::set-output name=SOURCE_NAME::ENV_VAR#refs CUSTOM_PATH_DIR: 17
echo ::set-output name=SOURCE_BRANCH::ENV_VAR#refs CUSTOM_PATH_DIR: 20
echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> ENV_VAR: 7
mkdir certbot: 32
sudo cp test CUSTOM_PATH_FILE examples CUSTOM_PATH_FILE: 12
sudo touch examples CUSTOM_PATH_FILE: 24
sudo head -n -8 .github CUSTOM_PATH_FILE > examples CUSTOM_PATH_FILE: 30
sudo echo "handler_file: examples CUSTOM_PATH_FILE" >> examples CUSTOM_PATH_FILE: 18
sudo mkdir acme-sh: 31
awk 'BEGIN {c=0;} CUSTOM_PATH_DIR CERT CUSTOM_PATH_DIR { print > "cert-" c ".pem"}' < acme-sh CUSTOM_PATH_FILE: 20
openssl verify -CAfile cert-2.pem -untrusted cert-1.pem acme-sh CUSTOM_PATH_FILE: 20
docker exec -i acme-sh acme.sh FLAG URL FLAG -d acme-sh.acme FLAG FLAG 3 FLAG: 26
docker run -i FLAG FLAG certbot FLAG acme -v ENV_VAR CUSTOM_PATH_DIR certbot CUSTOM_PATH_DIR register FLAG -m 'certbot' FLAG URL FLAG: 47
docker run -i FLAG FLAG certbot FLAG acme -v ENV_VAR CUSTOM_PATH_DIR certbot CUSTOM_PATH_DIR certonly FLAG URL FLAG FLAG http -d certbot.acme FLAG certbot: 42
sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem certbot CUSTOM_PATH_FILE: 10
docker run -i FLAG FLAG certbot FLAG acme -v ENV_VAR CUSTOM_PATH_DIR certbot CUSTOM_PATH_DIR revoke FLAG FLAG URL  -d certbot.acme FLAG certbot: 15
sudo openssl verify -CAfile cert-2.pem -untrusted cert-1.pem lego CUSTOM_PATH_FILE: 14
docker run -i -v ENV_VAR CUSTOM_PATH_FILE/ FLAG FLAG lego FLAG acme goacme CUSTOM_PATH_DIR -s URL -a FLAG "lego" -d lego.acme revoke: 12
sudo cp -rp certbot/ ${{ github.workspace }} CUSTOM_PATH_DIR: 18
sudo cp -rp lego/ ${{ github.workspace }} CUSTOM_PATH_DIR: 26
sudo tar -C ${{ github.workspace }} CUSTOM_PATH_DIR -cvzf ${{ github.workspace }} CUSTOM_PATH_FILE docker-compose.log data acme-sh certbot lego: 8
sudo cp test CUSTOM_PATH_FILE data CUSTOM_PATH_FILE: 6
sudo touch data CUSTOM_PATH_FILE: 19
sudo chmod 777 data CUSTOM_PATH_FILE: 39
sudo head -n -8 .github CUSTOM_PATH_FILE > data CUSTOM_PATH_FILE: 20
docker exec -i acme-sh acme.sh FLAG URL FLAG FLAG 'acme-sh' FLAG 3: 13
docker rmi $(docker images -q): 13
sudo -E apt-get -qq install $(curl -fsSL URL: 14
echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> ENV_VAR: 17
mv -f openwrt CUSTOM_PATH_FILE Packages: 7
rm -rf packages feeds.buildinfo sha256sums version.buildinfo: 10
pip install FLAG FLAG cklib/: 18
go get: 14
USES: garronej/ts-ci: 16
npx -y -p denoify enable_short_npm_import_path: 6
yarn build:test: 12
git pull origin ENV_VAR##* CUSTOM_PATH_DIR: 24
composer coverage: 17
export MYSQL_PWD=root: 9
make build-cross: 7
echo VERSION=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
echo $(pwd): 15
source ${{github.workspace}} CUSTOM_PATH_FILE: 9
cp -r ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 12
git stash FLAG: 6
git config user.email "ci": 8
git add -A .: 16
chmod +x ~ CUSTOM_PATH_DIR: 49
xcrun simctl boot ENV_VAR: 6
URL=URL: 12
choco install wget: 19
cd opensearch-operator: 8
${{ matrix.install}}: 8
${{ matrix.compile}}: 10
cd cmake-build: 10
cmake FLAG . FLAG 4: 6
USES: diem/actions/changes: 13
USES: ./.github/actions/dockerhub_login: 8
USES: easimon/wipe-cache: 7
USES: s3-actions/s3cmd: 18
sudo apt install gettext: 16
USES: imranismail/setup-kustomize: 39
composer update -o FLAG: 9
pip install black isort: 25
pip install mkdocs-macros-plugin: 15
USES: cargo-bins/cargo-binstall: 6
.github CUSTOM_PATH_FILE packages CUSTOM_PATH_DIR: 8
USES: reitermarkus/automerge: 8
yarn run build:arm64: 7
ninja -C build test: 21
USES: Chocobo1/setup-ccache-action: 21
pnpm add -g pnpm: 9
pnpm test:browser: 6
cd CertificateKit CUSTOM_PATH_DIR: 10
mkdir install: 17
rm -r build: 7
mkdir ${{runner.workspace}} CUSTOM_PATH_DIR: 35
. CUSTOM_PATH_DIR maintenance:install FLAG FLAG=oci FLAG=XE FLAG=127.0.0.1 FLAG=1521 FLAG=autotest FLAG=owncloud FLAG admin FLAG admin: 8
php -f index.php: 35
cd ruby: 10
git push origin vENV_VAR: 8
USES: ./.github/actions/build-images: 7
sudo apt-get update && sudo apt-get install libudev-dev: 36
npm config set cache . CUSTOM_PATH_DIR: 13
yarn config set cache-folder . CUSTOM_PATH_DIR: 13
make setup-js: 19
git checkout ${{ github.ref }}: 18
pnpm run format: 15
. CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG FLAG: 10
USES: devops-infra/action-pull-request: 9
cmake -G "Unix Makefiles" ..: 6
mkdir -p site CUSTOM_PATH_DIR: 6
set(ccache_url "URL runner.os }}.tar.xz"): 6
file(DOWNLOAD "${ccache_url}" . CUSTOM_PATH_FILE SHOW_PROGRESS): 6
execute_process(COMMAND ENV_VAR -E tar xvf . CUSTOM_PATH_FILE): 6
echo ::set-output name=upload_url::$upload_url: 6
yarn build:website: 9
pip install FLAG conan: 9
conan profile show default: 34
git config FLAG filter.lfs.required false: 12
git config FLAG filter.lfs.smudge "git-lfs smudge FLAG %f": 12
git config FLAG filter.lfs.process "git-lfs filter-process FLAG": 12
curl -O -L "URL: 14
7z x 2020.2.zip: 12
mkdir -p sdk: 12
mv . CUSTOM_PATH_DIR .: 16
zstd -d -r FLAG . CUSTOM_PATH_DIR || true: 12
conan build -bf build .: 8
mkdir -p result: 9
cp sdk CUSTOM_PATH_FILE result CUSTOM_PATH_FILE: 6
cp LICENSE result CUSTOM_PATH_DIR: 6
pnpm run ci: 20
echo pnpm version $(pnpm -v): 6
git reset FLAG HEAD: 22
git push -f origin gh-pages: 6
pnpm test:e2e: 9
python scripts CUSTOM_PATH_DIR: 9
echo SKIP_RELEASE="ENV_VAR" >> ENV_VAR: 7
echo IS_CANDIDATE="ENV_VAR" >> ENV_VAR: 7
echo RELEASE_VERSION="ENV_VAR" >> ENV_VAR: 7
. CUSTOM_PATH_DIR FLAG build ${{ steps.build_variables.outputs.REPO }}-web:installDist publishToNexus closeAndReleaseNexusStagingRepository: 6
. CUSTOM_PATH_DIR FLAG publish: 13
tar xf .. CUSTOM_PATH_FILE: 6
go mod init github.com CUSTOM_PATH_DIR: 17
pip install -U .: 10
git fetch origin gh-pages:gh-pages: 10
branch=ENV_VAR#refs CUSTOM_PATH_DIR: 9
echo branch="${branch}" >> ENV_VAR: 7
USES: edgedb/edgedb-pkg/integration/linux/build/debian-buster: 14
USES: edgedb/edgedb-pkg/integration/linux/build/debian-bullseye: 14
USES: edgedb/edgedb-pkg/integration/linux/build/debian-bookworm: 14
USES: edgedb/edgedb-pkg/integration/linux/build/ubuntu-bionic: 14
USES: edgedb/edgedb-pkg/integration/linux/build/ubuntu-focal: 14
USES: edgedb/edgedb-pkg/integration/linux/build/ubuntu-jammy: 14
USES: edgedb/edgedb-pkg/integration/linux/build/centos-7: 7
USES: edgedb/edgedb-pkg/integration/linux/build/centos-8: 14
USES: edgedb/edgedb-pkg/integration/linux/build/rockylinux-9: 14
USES: edgedb/edgedb-pkg/integration/linux/build/linuxmusl-x86_64: 7
USES: edgedb/edgedb-pkg/integration/linux/build/linuxmusl-aarch64: 7
edgedb-pkg CUSTOM_PATH_FILE: 25
USES: edgedb/edgedb-pkg/integration/linux/test/debian-buster: 8
USES: edgedb/edgedb-pkg/integration/linux/test/debian-bullseye: 8
USES: edgedb/edgedb-pkg/integration/linux/test/debian-bookworm: 8
USES: edgedb/edgedb-pkg/integration/linux/test/ubuntu-bionic: 8
USES: edgedb/edgedb-pkg/integration/linux/test/ubuntu-focal: 8
USES: edgedb/edgedb-pkg/integration/linux/test/ubuntu-jammy: 8
USES: edgedb/edgedb-pkg/integration/linux/test/centos-8: 8
USES: edgedb/edgedb-pkg/integration/linux/test/rockylinux-9: 8
USES: edgedb/edgedb-pkg/integration/linux/upload/linux-x86_64: 137
USES: edgedb/edgedb-pkg/integration/actions/describe-artifact: 194
USES: edgedb/edgedb-pkg/integration/linux/testpublished/debian-buster: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/debian-bullseye: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/debian-bookworm: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/ubuntu-bionic: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/ubuntu-focal: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/ubuntu-jammy: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/centos-7: 6
USES: edgedb/edgedb-pkg/integration/linux/testpublished/centos-8: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/rockylinux-9: 12
USES: edgedb/edgedb-pkg/integration/linux/testpublished/linuxmusl-x86_64: 6
USES: edgedb/edgedb-pkg/integration/linux/testpublished/linuxmusl-aarch64: 6
make compile: 18
bash scripts CUSTOM_PATH_FILE ENV_VAR 3rd_party CUSTOM_PATH_DIR 3rd_party CUSTOM_PATH_DIR: 24
mix compile_opencv: 10
rm -f _build CUSTOM_PATH_FILE: 6
rm -rf lib CUSTOM_PATH_DIR && rm -rf src CUSTOM_PATH_DIR: 7
mkdir -p lib CUSTOM_PATH_DIR && mkdir -p src CUSTOM_PATH_DIR: 7
cp -a _build CUSTOM_PATH_DIR "ENV_VAR": 14
cp -a lib CUSTOM_PATH_DIR "ENV_VAR CUSTOM_PATH_DIR: 14
cp -a src CUSTOM_PATH_DIR "ENV_VAR CUSTOM_PATH_DIR: 14
tar -czf "ENV_VAR.tar.gz" "ENV_VAR": 14
ls -lah "ENV_VAR.tar.gz": 14
mv "ENV_VAR.tar.gz" artifacts: 13
cp README.md . CUSTOM_PATH_DIR: 6
sudo chown -Rc ENV_VAR .git/: 16
echo "VERSION=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 37
make vela-cli: 7
. CUSTOM_PATH_FILE -u: 12
cd fbpcs: 10
USES: canonical/setup-lxd: 13
ccache FLAG=2G: 6
#if [ -f requirements.txt ]; then pip install -r requirements.txt; fi: 9
python run_tests.py: 11
cd tracker CUSTOM_PATH_DIR: 9
USES: ./support/actions/pnpm: 13
tool CUSTOM_PATH_FILE: 23
bundle exec script CUSTOM_PATH_DIR: 7
curl -L -O "URL: 6
python ci CUSTOM_PATH_FILE: 33
sh ci CUSTOM_PATH_FILE: 12
pip install twine wheel: 31
git config FLAG user.email "team": 7
container_id=$(docker create -w CUSTOM_PATH_DIR -v ENV_VAR: CUSTOM_PATH_DIR -v CUSTOM_PATH_FILE devcontainer:latest): 6
docker start "$container_id": 13
echo "::set-output name=message::$(git log FLAG=%B -n 1 ${{ github.event.after }})": 11
cmake FLAG . FLAG package FLAG $(nproc): 7
echo ::set-output name=NAME::$(basename build CUSTOM_PATH_FILE): 7
docker exec ${{ env.CONTAINER_NAME }} bash -c "cd CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE": 12
. CUSTOM_PATH_FILE stop: 6
wget -q -O recipes-checker.zip URL: 6
unzip recipes-checker.zip: 6
cd recipes-checker-main: 6
mkdir .github CUSTOM_PATH_DIR: 9
ruby -Ilib exe CUSTOM_PATH_DIR: 6
cd builddir: 9
rustup override set ${{steps.toolchain.outputs.name}}: 16
cargo vet FLAG: 7
USES: OffchainLabs/actions/node-modules/restore: 10
sudo apt-get install -y libprotobuf-dev: 9
pip install grpcio-tools==1.48.2: 8
pip install pytest pytest-xdist: 15
pip wheel -e .: 8
pip install -r requirements-jax.txt: 8
cd RobustToolbox/: 9
pip install poetry==ENV_VAR: 6
mkdir C:\gtk-build\gtk\x64\release: 10
melos bootstrap: 42
melos run test FLAG: 8
rm Gemfile.lock: 6
gem install pkg CUSTOM_PATH_FILE: 13
python -m pip install setuptools codecov pytest pytest-cov coverage numpy: 6
chmod a+x docker CUSTOM_PATH_DIR: 6
pip install build setuptools wheel twine: 6
mvn FLAG clean install -DskipTests: 8
cargo clippy FLAG -- FLAG warnings: 6
make prereqs: 6
cd documentation: 32
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv optimum: 6
sh . CUSTOM_PATH_FILE ${{env.VERSION}}: 16
sed -i -e "s,placeholder_rudder_dataplane_url,${{ secrets.RUDDER_DATAPLANE_URL }},g" ${{ github.workspace }} CUSTOM_PATH_FILE: 25
sed -i -e "s,placeholder_rudder_key,${{ secrets.RUDDER_PROD_KEY }},g" ${{ github.workspace }} CUSTOM_PATH_FILE: 10
pip install poetry poetry-dynamic-versioning: 6
USES: revam/gh-action-get-tag-and-version: 20
USES: ReactiveCircus/android-emulator-runner: 15
USES: kiegroup/github-action-build-chain: 11
cargo login ${{ secrets.CARGO_TOKEN }}: 9
chmod +x operator-sdk-ENV_VAR-x86_64-linux-gnu && sudo mkdir -p CUSTOM_PATH_DIR && sudo cp operator-sdk-ENV_VAR-x86_64-linux-gnu CUSTOM_PATH_DIR && rm operator-sdk-ENV_VAR-x86_64-linux-gnu: 9
nohup make run &: 8
kubectl apply -f config CUSTOM_PATH_FILE: 10
kubectl get all: 28
meson test -C build: 12
.github CUSTOM_PATH_DIR: 48
USES: urlstechie/urlchecker-action: 10
PACKAGE_NAMES=$(go list . CUSTOM_PATH_DIR: 6
USES: elastic/apm-pipeline-library/.github/actions/slack-message: 13
cmake ../: 19
USES: garg3133/welcome-new-contributors: 8
mv . CUSTOM_PATH_FILE ./: 21
tag=$(cut -c 1-7 <<< ENV_VAR): 16
USES: ./.github/actions/setup_bendsql: 7
sudo cp . CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 31
sudo apt install -y python3-jinja2: 6
aws s3 sync . CUSTOM_PATH_DIR ENV_VAR3_PREFIX}/ FLAG "*.json": 6
aws s3 cp . CUSTOM_PATH_FILE ENV_VAR3_PREFIX} CUSTOM_PATH_FILE: 6
USES: everpcpc/comment-on-pr-action: 9
NUMPY_VERSION=$(cat featuretools CUSTOM_PATH_FILE | grep numpy): 6
python -m pip uninstall numpy -y: 6
python -m pip install ENV_VAR FLAG: 6
python -m pip install -r featuretools CUSTOM_PATH_FILE: 9
pytest featuretools CUSTOM_PATH_DIR -n auto: 8
choco install zip -y FLAG: 6
npx eslint .: 19
yarn config set network-timeout 1000000 -g: 6
echo -n ENV_VAR > . CUSTOM_PATH_FILE: 10
echo ENV_VAR64 | base64 -d > . CUSTOM_PATH_FILE: 10
make CLI CUSTOM_PATH_DIR: 6
tar -czf ~ CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 12
tar -xzf ~ CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 12
sudo apt install valgrind: 8
USES: ahmadnassri/action-workflow-queue: 19
USES: mikepenz/gradle-dependency-submission: 14
. CUSTOM_PATH_DIR -B -ntp versions:set -DnewVersion=ENV_VAR: 6
USES: ./.github/setup: 16
golangci-lint version: 7
docker pull digite CUSTOM_PATH_DIR: 8
tox -e ${{ matrix.config[1] }}: 7
USES: SublimeText/UnitTesting/actions/setup: 8
USES: SublimeText/UnitTesting/actions/run-tests: 6
echo "::set-output name=result::$(sfdx force:package:version:create -p LWCRecipes -x -w 20 FLAG | jq -c .)": 6
USES: devops-infra/action-commit-push: 9
conda info FLAG: 15
pip install tox coverage: 17
yarn set version stable: 6
yarn playwright install FLAG: 14
USES: matlab-actions/setup-matlab: 11
cp -R .. CUSTOM_PATH_DIR .: 9
USES: matlab-actions/run-command: 12
ctest -j2 FLAG: 13
USES: onbjerg/foundry-toolchain: 12
echo 'Reason: ${{ github.event.inputs.reason }}': 10
yarn run dist: 12
echo "::set-output name=branch_name::$(REF=ENV_VAR:-ENV_VAR && echo ENV_VAR#refs CUSTOM_PATH_DIR | sed 's CUSTOM_PATH_DIR: 8
echo "::set-output name=body::$body": 11
USES: ./.github/composite_actions/run_xcodebuild_test: 81
sed -i 's CUSTOM_PATH_DIR pkg-config CUSTOM_PATH_FILE: 7
cd yara: 12
export PKG_CONFIG_PATH=$(pwd) CUSTOM_PATH_DIR: 9
npm run setup FLAG . CUSTOM_PATH_DIR: 12
USES: ./.github/actions/stage: 44
npm run build FLAG FLAG: 10
cmake FLAG build -j=2: 9
ctest FLAG FLAG build: 11
rustup show active-toolchain: 9
cargo test FLAG deny-warnings,internal: 6
echo "$(pwd) CUSTOM_PATH_FILE CUSTOM_PATH_DIR >> "ENV_VAR": 7
node ci CUSTOM_PATH_FILE: 13
USES: pchynoweth/action-get-npm-version: 7
npm run build:linux: 11
npm run build:windows: 6
echo "PYTHONPATH=ENV_VAR" >> ENV_VAR: 7
USES: e1himself/goss-installation-action: 8
USES: helaili/jekyll-action: 14
echo '${{ secrets.SERVICE_ACCOUNT_JSON }}' > service_account.json: 7
cp -r CUSTOM_PATH_DIR .: 13
. CUSTOM_PATH_FILE print_thread_dumps: 9
rm -rf artifacts: 34
find . -type d -name "*surefire*" -exec cp FLAG -R {} artifacts/ \;: 26
zip -r artifacts.zip artifacts: 27
USES: Avarok-Cybersecurity/gh-actions-deps: 11
sudo locale-gen en_US.UTF-8: 8
sudo update-locale: 7
docker-compose up -d mysql: 6
poetry update: 9
curl -Lo skaffold URL: 7
cd ${{ runner.temp }}: 7
npm publish FLAG=public: 42
USES: docker://dragonflyoss/linter:v0.2.7: 9
SRS_TAG=$(echo ${{ github.ref }}| awk -F ' CUSTOM_PATH_DIR '{print $3}'): 14
echo "SRS_TAG=ENV_VAR" >> ENV_VAR: 18
SRS_MAJOR=$(echo ENV_VAR| awk -F '.' '{print $1}' |sed 's CUSTOM_PATH_DIR: 14
echo "SRS_MAJOR=ENV_VAR" >> ENV_VAR: 16
echo "SRS_TAG=${{ needs.envs.outputs.SRS_TAG }}" >> ENV_VAR: 37
echo "SRS_MAJOR=${{ needs.envs.outputs.SRS_MAJOR }}" >> ENV_VAR: 31
docker tag ossrs CUSTOM_PATH_DIR ossrs CUSTOM_PATH_DIR: 14
docker push FLAG ossrs CUSTOM_PATH_DIR: 8
. CUSTOM_PATH_DIR install -a > CUSTOM_PATH_DIR 2>&1: 15
chmod +x Scripts CUSTOM_PATH_FILE: 15
cp ENV_VAR CUSTOM_PATH_DIR openwrt CUSTOM_PATH_DIR: 15
make defconfig > CUSTOM_PATH_DIR 2>&1: 28
Firmware-Diy_Main: 13
source ENV_VAR CUSTOM_PATH_DIR && Firmware-Diy: 14
rm -f .config && cp ENV_VAR CUSTOM_PATH_DIR .config: 14
export Compile_Result=false: 14
source ENV_VAR CUSTOM_PATH_FILE && Firmware-Diy_Other: 13
rm -rf . CUSTOM_PATH_DIR && . CUSTOM_PATH_DIR install -a > CUSTOM_PATH_DIR 2>&1: 14
[ $? == 0 ] && echo "Compile_Result=true" >> ENV_VAR: 13
source ENV_VAR CUSTOM_PATH_FILE && Firmware-Diy_End: 13
flutter pub global activate cider: 6
sudo mv appimage-builder-x86_64.AppImage CUSTOM_PATH_DIR: 10
USES: ashley-taylor/regex-property-action: 12
USES: Tiryoh/gha-jobid-action: 15
pip3 install pymongo: 10
echo "RUNNER_OS is ${{ runner.os }}": 8
echo "GITHUB_EVENT_NAME is ${{ github.event_name }}": 8
echo "GITHUB_WORKFLOW is ${{ github.workflow }}": 8
echo "GITHUB_ACTOR is ${{ github.actor }}": 8
echo "GITHUB_REPOSITORY is ${{ github.repository }}": 8
echo "GITHUB_REPOSITORY_OWNER is ${{ github.repository_owner }}": 8
git config pull.rebase true: 20
export JULIA_DIR="$(dirname $(dirname $(which julia)))": 12
pip install flake8 pytest pytest-cov: 20
pip install -e .[all]: 28
sudo apt install unrar: 7
bundle FLAG: 9
. CUSTOM_PATH_DIR spotlessCheck FLAG: 14
docker push ENV_VAR:ENV_VAR##* CUSTOM_PATH_DIR: 7
vendor CUSTOM_PATH_DIR analyze FLAG FLAG FLAG: 6
USES: dagger/dagger-for-github: 7
USES: danharrin/monorepo-split-github-action: 16
node test.js: 8
git fetch FLAG FLAG=1 FLAG: 7
USES: flatpak/flatpak-github-actions/flatpak-builder: 35
cmake -Bbuild -GNinja -DCMAKE_BUILD_TYPE=Release -DWASMEDGE_BUILD_TESTS=ON .: 6
export WASMEDGE_BUILD_DIR="$(pwd) CUSTOM_PATH_DIR: 20
export WASMEDGE_PLUGIN_PATH="$(pwd) CUSTOM_PATH_DIR: 16
export LD_LIBRARY_PATH="$(pwd) CUSTOM_PATH_DIR: 11
sudo chmod -R 777 ENV_VAR: 8
wget FLAG "URL: 22
pip install FLAG setuptools pip: 6
export NODE_OPTIONS="FLAG_old_space_size=4096": 8
USES: peter-evans/create-or-update-project-card: 22
USES: PowerDNS/pdns/set-ubuntu-mirror: 7
bash test_ci.sh: 9
git config FLAG user.name  'Renovate Bot': 11
yarn test-e2e: 9
USES: silverhand-io/actions-node-pnpm-run-steps: 14
USES: 8BitJonny/gh-get-current-pr: 22
sudo apt-get install -y jq m4 make cmake: 6
USES: Chia-Network/actions/setjobenv: 16
USES: Chia-Network/actions/setup-python: 16
USES: chia-network/actions/activate-venv: 21
sh install-timelord.sh -n: 7
.github CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR: 8
yarn install FLAG && yarn bootstrap: 8
pip install FLAG FLAG .. CUSTOM_PATH_DIR: 7
USES: ./.github/actions/setup-node-yarn-deps: 8
cmake FLAG build/ -j $(nproc): 6
pushd doc: 7
python setup.py sdist FLAG=gztar: 10
pip wheel . -w dist: 8
echo '${{ env.PYTHONUSERBASE }} CUSTOM_PATH_DIR >> ENV_VAR: 6
export PIP_USER=0; SKIP=flake8 pre-commit run FLAG: 6
python manage.py makemigrations FLAG: 7
docker-compose stop: 23
sudo cp -t CUSTOM_PATH_DIR conf CUSTOM_PATH_FILE: 6
venv CUSTOM_PATH_DIR run FLAG=.coveragerc FLAG pytest FLAG=10  -n 0 -m "not benchmark" tests CUSTOM_PATH_FILE: 14
sudo iptables -P FORWARD ACCEPT: 6
git submodule > git-modules.txt: 9
cat git-modules.txt: 9
conda activate dedalus: 7
(cd CUSTOM_PATH_DIR && ln -s CUSTOM_PATH_FILE): 16
choco upgrade llvm: 18
USES: ChristopherHX/check-cache: 7
gclient sync: 12
bin CUSTOM_PATH_DIR db:schema:load: 8
cp CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 16
git checkout -b pr: 12
git branch -f main origin CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_DIR spotlessApply: 15
bundle exec jekyll build FLAG "${{ steps.pages.outputs.base_path }}": 8
pip install FLAG off .[test]: 14
USES: puppetlabs/action-litmus_parallel: 14
USES: puppetlabs/action-litmus_spec: 7
LATEST_PUBLISHED_RELEASE_VERSION=$(curl -X GET URL | jq -r '.name'): 9
RELEASE_VERSION=$(grep LATEST_VERSION gradle.properties | cut -d= -f2): 9
NEW_RELEASE_VERSION_EXISTS=$([ "ENV_VAR" == "ENV_VAR" ] && echo '0' || echo '1'): 9
echo "::set-output name=latest-published-release-version::ENV_VAR": 9
echo "::set-output name=release-version::ENV_VAR": 9
echo "::set-output name=new-release-version-exists::ENV_VAR": 9
git config FLAG user.email "arrow-kt": 10
git config FLAG user.name "arrow-kt": 10
git tag -a ${{ steps.versions.outputs.release-version }} -m "Release ${{ steps.versions.outputs.release-version }}": 9
git push origin ${{ steps.versions.outputs.release-version }}: 9
export LATEST_PUBLISHED_VERSION=${{ steps.versions.outputs.latest-published-release-version }}: 9
export RELEASE_VERSION=${{ steps.versions.outputs.release-version }}: 9
python3 script CUSTOM_PATH_FILE: 21
sudo update-alternatives FLAG CUSTOM_PATH_DIR gcc CUSTOM_PATH_DIR 60 FLAG CUSTOM_PATH_DIR g++ CUSTOM_PATH_DIR: 12
USES: ./.github/actions/diffs: 9
cargo install cbindgen: 10
OUT_DIR= CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 6
mv target CUSTOM_PATH_DIR target CUSTOM_PATH_DIR: 13
USES: pufferpanel/download-artifacts: 10
choco install llvm -y: 7
USES: actions-rust-lang/audit: 6
bundle exec rubocop -P: 7
USES: tubone24/update_release: 9
echo ::set-output name=VERSION::"$([[ "ENV_VAR" == refs CUSTOM_PATH_DIR ]] && echo ENV_VAR#refs CUSTOM_PATH_DIR || echo '0.0.0')": 8
du -sk ~ CUSTOM_PATH_DIR: 6
du -sk ~ CUSTOM_PATH_DIR || echo ~ CUSTOM_PATH_DIR is gone: 6
export KUBECONFIG=$(pwd) CUSTOM_PATH_DIR: 24
sudo apt install clang: 6
git commit -am "updating DIRECTORY.md" ||  true: 9
just fetch: 9
yarn run init: 8
git ls-files | xargs ls -l | sort -nrk5 | awk '{if($5 > ${{ secrets.FILE_LIMIT_SIZE }}) print $9 }' | xargs ls -lrth: 12
echo "::set-output name=GIANT-FILES-COUNT::$(git ls-files | xargs ls -l | sort -nrk5 | awk '{if($5 > ${{ secrets.FILE_LIMIT_SIZE }}) print $0}' | wc -l)": 12
echo "files size check failed": 12
python -m pip install FLAG pip wheel setuptools pytest pytest-rerunfailures memory_profiler: 12
#sed -i 's CUSTOM_PATH_FILE\ CUSTOM_PATH_DIR feeds.conf.default: 6
echo "::set-output name=sha_short::$(git rev-parse FLAG ENV_VAR)": 6
USES: Naturalclar/issue-action: 23
USES: docker://aeonphp/automation:latest: 8
mvn FLAG FLAG package: 8
git clone FLAG 1 URL source CUSTOM_PATH_DIR: 12
go run main.go: 7
poetry config virtualenvs.create false FLAG: 7
cd ${{runner.workspace}} CUSTOM_PATH_DIR: 24
python -m pip install -e . FLAG FLAG: 16
echo "RELEASE_DATE=$(date +%b\ %d,\ %Y)" >> ENV_VAR: 6
echo "MODULE_TAG=weaver CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "VERSION=v$(cat VERSION)" >> ENV_VAR: 6
make push-image: 9
php scripts CUSTOM_PATH_FILE: 14
npm install FLAG . CUSTOM_PATH_DIR: 8
yarn global add snyk: 6
bash tests CUSTOM_PATH_FILE install-dependencies: 13
rm -rf public CUSTOM_PATH_FILE: 7
sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev libsamplerate-dev: 8
export HOMEBREW_NO_AUTO_UPDATE=1: 15
cd JUCE_modules: 10
yarn workspaces run build: 9
gh pr merge FLAG FLAG: 6
golint . CUSTOM_PATH_DIR: 7
python -m pip install -U pip # to ensure version > 20 to have cache dir: 8
pytest ${{ matrix.pytest-args }}: 15
FLAG ghcr.io CUSTOM_PATH_DIR \: 11
cd build && cmake FLAG .: 11
cp ENV_VAR CUSTOM_PATH_FILE .: 15
docker tag ENV_VAR kuberhealthy CUSTOM_PATH_DIR: 6
docker push kuberhealthy CUSTOM_PATH_DIR: 6
cmake -E copy .. CUSTOM_PATH_FILE .: 23
cmake .. CUSTOM_PATH_DIR -DCMAKE_BUILD_TYPE=Release: 16
cmake FLAG main_gui FLAG Release FLAG Tsugaru_GUI: 6
rm -rf dist CUSTOM_PATH_FILE: 12
node node_modules CUSTOM_PATH_FILE: 6
USES: firebase/firebase-admin-node/.github/actions/send-email: 8
bundle exec rspec spec CUSTOM_PATH_DIR: 11
USES: ./.github/actions/check-if-pr-is-low-risk: 13
echo "GIT_COMMIT=$(git rev-parse HEAD)" >> ENV_VAR: 6
apt-get install -y nodejs: 6
USES: masci/datadog: 38
echo "~ CUSTOM_PATH_DIR >> ENV_VAR: 27
dotnet build examples CUSTOM_PATH_FILE FLAG Release: 10
mkdir -p target: 9
qmake ..: 6
nci: 39
nr test FLAG: 6
yarn bundlewatch: 6
MSBuild.exe -version: 10
MSBuild.exe .\etl.sln: 10
npm run pkg: 16
python -m pip install cibuildwheel==2.12.3: 8
cd C:\: 8
GIT_COMMIT_VERSION=$( git show -s FLAG='format:%H'): 6
GIT_COMMIT_TIME=$( git show -s FLAG='format:%aI'): 6
cd sites CUSTOM_PATH_DIR: 7
npm FLAG .github CUSTOM_PATH_DIR install  CUSTOM_PATH_DIR: 7
make build-linux: 8
make setup-test-components: 7
xmllint FLAG . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE FLAG: 7
go test -v -coverprofile=profile.cov . CUSTOM_PATH_DIR: 10
USES: ./.github/actions/setup-and-build: 8
pnpm run test:types: 9
python -m pip install torch==${{matrix.torch}} torchvision==${{matrix.torchvision}} -f URL: 16
pip install conan: 17
cmake -G Ninja ENV_VAR -DCMAKE_BUILD_TYPE=ENV_VAR -DBUILDING_RUNTIME=TRUE -DPython3_ROOT_DIR=${pythonLocation}: 7
cmake FLAG . FLAG .. CUSTOM_PATH_DIR: 11
python scripts CUSTOM_PATH_FILE \: 6
USES: ./.github/actions/tests/upload-allure-files-to-bucket: 10
poetry config virtualenvs.create true FLAG: 8
poetry config virtualenvs.in-project true FLAG: 8
curl -sSL URL | tar -xz FLAG=. CUSTOM_PATH_DIR: 31
git worktree add gh-pages gh-pages: 10
git config user.name "Deploy from CI": 18
git config user.email "": 20
git update-ref -d refs CUSTOM_PATH_DIR: 18
mv .. CUSTOM_PATH_DIR .: 34
pip install .[dev,1bit,autotuning]: 7
unzip pr_number.zip: 10
USES: ./.github/actions/install-package: 11
USES: ./.github/actions/job-notify: 14
sudo -E . CUSTOM_PATH_FILE github: 8
git commit -s -m "chore: self mutation": 10
git push origin HEAD:ENV_VAR: 18
bundle check || bundle install: 7
brew install sourcedocs: 7
echo GITHUB_REF=ENV_VAR: 6
sudo apt-get -y -o Acquire::Check-Valid-Until=false update: 6
dotnet restore Source CUSTOM_PATH_FILE: 8
echo "target_triplet=`gcc -dumpmachine`" >> ENV_VAR: 9
cat config.log: 20
mkdir -p dest: 13
DESTDIR=`pwd` CUSTOM_PATH_DIR make install: 13
install -m 600 -D CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 10
USES: voxmedia/github-action-slack-notify-build: 77
chmod +x linuxdeploy-plugin-qt-x86_64.AppImage: 6
chmod 755 CUSTOM_PATH_DIR: 8
echo "New version: ENV_VAR": 9
presto-main CUSTOM_PATH_FILE: 6
ruff check .: 12
call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars${{ matrix.bits }}.bat": 13
export PATH=" CUSTOM_PATH_DIR && export CC=gcc-9: 13
xcodebuild -version -sdk: 9
git clone -b ENV_VAR FLAG 5 URL: 6
cd boost: 17
mv -f ENV_VAR CUSTOM_PATH_DIR libs CUSTOM_PATH_DIR: 6
mv -f * ENV_VAR: 6
cd libs CUSTOM_PATH_DIR: 16
echo ' CUSTOM_PATH_FILE CUSTOM_PATH_DIR > .npmrc: 17
USES: lukka/set-shell-env: 7
echo '[cache]' > ENV_VAR CUSTOM_PATH_FILE: 6
echo 'type = sftp' >> ENV_VAR CUSTOM_PATH_FILE: 6
echo 'host = ${{ secrets.STORAGE_HOST }}' >> ENV_VAR CUSTOM_PATH_FILE: 6
echo 'user = storage' >> ENV_VAR CUSTOM_PATH_FILE: 6
echo 'key_pem = ${{ secrets.STORAGE_KEY }}' >> ENV_VAR CUSTOM_PATH_FILE: 6
rclone copy FLAG FLAG=128 FLAG=100 cache:kiwibrowser-builds CUSTOM_PATH_DIR github.run_id }} CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 9
yarn boot: 11
result="${result CUSTOM_PATH_DIR: 18
rustup override set ${{ matrix.toolchain }}: 20
source activate sksurv-test: 10
pip install check-manifest: 10
USES: P3TERX/debugger-action: 11
echo "::set-env name=FIRMWARE::ENV_VAR": 10
mkdir -p "tmp CUSTOM_PATH_DIR: 17
echo "artifact_name=ENV_VAR" >> ENV_VAR: 21
ctest FLAG build CUSTOM_PATH_DIR: 15
. CUSTOM_PATH_DIR create cluster: 7
git clone URL FLAG FLAG 1 -b ${{ matrix.nextcloud-versions }} nextcloud: 6
composer run test: 18
mvn FLAG clean package: 9
mvn FLAG test: 14
mvn FLAG verify: 8
echo "${{ secrets.FLUTTER_DOTENV }}" > assets CUSTOM_PATH_DIR: 8
echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android CUSTOM_PATH_FILE: 9
echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android CUSTOM_PATH_FILE: 9
echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android CUSTOM_PATH_FILE: 9
flutter build appbundle: 14
npx lerna bootstrap FLAG: 7
pip install tox-gh-actions: 14
docker run FLAG FLAG tonistiigi CUSTOM_PATH_DIR FLAG all: 21
set -eux -o pipefail: 10
meson setup FLAG debugoptimized FLAG on debug: 7
meson test -C debug FLAG: 12
BODY="ENV_VAR CUSTOM_PATH_DIR: 24
USES: orf/cargo-bloat-action: 8
pip3 install -r tests CUSTOM_PATH_FILE: 6
bundle exec kitchen test ${{ matrix.instance }}: 6
USES: ./.github/actions/prepare_ci: 17
python -Im coverage report FLAG=100: 7
python -Im pip install -e .[dev]: 6
echo "GITHUB_SHA_SHORT=ENV_VAR::7}" >> ENV_VAR: 9
echo "GITHUB_REF_SHORT=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 9
docker build . FLAG Dockerfile FLAG my-image-name:$(date +%s): 12
helm lint FLAG env CUSTOM_PATH_FILE: 6
wget FLAG -O CUSTOM_PATH_DIR URL: 6
 CUSTOM_PATH_DIR -C CUSTOM_PATH_DIR server CUSTOM_PATH_DIR &: 6
yarn db:migrate: 7
coverage report FLAG: 8
sudo apt-get remove -y azure-cli google-cloud-sdk google-chrome-stable firefox powershell mono-devel: 6
echo "BRANCH=ENV_VAR" >> ENV_VAR: 30
export COMMIT=$(git rev-parse FLAG "ENV_VAR"): 13
$zipPath = "DBADash_${{steps.GetVersion.outputs.BUILD_NUMBER}}.zip": 7
security create-keychain -p ENV_VAR build.keychain: 10
security unlock-keychain -p ENV_VAR build.keychain: 10
security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ENV_VAR build.keychain: 9
choco install jom: 6
python3 -m twine upload FLAG dist CUSTOM_PATH_DIR: 15
USES: Templum/govulncheck-action: 7
export package_name="BambooTracker-${{ steps.identify-build.outputs.build-tag }}-ENV_VAR": 6
mv -v ENV_VAR ${package_name}: 6
7z a -tzip ${package_name}{.zip,}: 6
git config FLAG user.email 'ENV_VAR'          : 8
git push FLAG origin HEAD:ENV_VAR: 7
flutter pub upgrade: 11
python setup.py build install: 8
echo "ENVOY_VERSION=$(cat ENVOY_VERSION)" >> ENV_VAR: 8
pipx install ninja: 10
pipx run twine check FLAG dist CUSTOM_PATH_DIR: 14
echo "${{ github.ref }}": 16
USES: jakepartusch/wait-for-netlify-action: 10
echo "RELEASE_VERSION=ENV_VAR:11}" >> ENV_VAR: 13
npm install -g semantic-release: 6
make -C examples CUSTOM_PATH_DIR: 17
env PYTHONPATH=. python examples CUSTOM_PATH_FILE: 7
git clean -dfx: 14
echo "COMMIT_MESSAGE<<EOF" >> ENV_VAR: 12
echo "$(git log FLAG=%B -n 1 HEAD^2)" >> ENV_VAR: 7
$url = "URL: 7
echo "VCPKG_ROOT=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
cmake FLAG . FLAG check: 7
pip install -U pip wheel: 18
pip install -v -e .: 16
USES: ./.github/actions/call-rush: 8
npm config set " CUSTOM_PATH_FILE CUSTOM_PATH_DIR "ENV_VAR": 10
bundle exec rake lint: 20
sudo npm run build: 9
cargo build FLAG ${{ matrix.target }} FLAG FLAG FLAG alloc: 16
cargo check FLAG ${{ matrix.target }} FLAG: 14
cargo test FLAG FLAG ${{ matrix.target }} FLAG: 17
HELM_PACKAGE_PATH="ENV_VAR##"Successfully packaged chart and saved it to: "}": 8
echo "HELM_PACKAGE_PATH=ENV_VAR": 8
echo "helm_package_path=ENV_VAR" >> ENV_VAR: 7
GIT_REFNAME="$(echo "${{ github.ref }}" | sed -r 's CUSTOM_PATH_DIR: 10
echo "GIT_REFNAME=ENV_VAR": 10
echo "git_refname=ENV_VAR" >> ENV_VAR: 9
helm plugin install "URL FLAG "${{ env.HELM_PLUGIN_CHARTMUSEUM_PUSH_VERSION }}": 8
helm push "${{ steps.package-chart.outputs.helm_package_path }}" "${{ env.HELM_PUSH_REPOSITORY_NAME }}": 8
ls -R packages: 7
${{matrix.CMD_BUILD}}: 7
mvn -B clean install: 15
isort FLAG FLAG .: 17
ls -l dist/: 16
pnpm release: 13
composer require "laravel CUSTOM_PATH_DIR matrix.laravel }}" "nesbot CUSTOM_PATH_DIR "orchestra CUSTOM_PATH_DIR matrix.testbench }}" FLAG FLAG: 8
mix clean: 13
USES: akaihola/darker: 9
cmake ENV_VAR -DCMAKE_BUILD_TYPE=ENV_VAR -G Ninja: 7
USES: ./whitesource-actions/snyk-issue: 7
mage -v getCurrentDate: 7
mage -v defaultGitConfig: 7
mage -v writeCosignKeyToFile: 6
pnpm prettier: 8
docker build -t plutoboy -f build CUSTOM_PATH_DIR .: 12
docker run -v $(pwd): CUSTOM_PATH_DIR plutoboy: 8
USES: gregsdennis/dependencies-action: 6
yarn build:chrome: 10
call "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat": 8
npx electron-rebuild: 9
cat .npmrc: 19
pnpm install -g cargo-cp-artifact && pnpm install: 10
pnpm install -g electron-builder: 10
set npm_config_arch=arm64: 6
pnpm test:build: 7
pnpm test:types: 17
echo "Not required for docs": 8
export UPX_CMAKE_CONFIG_FLAGS='-DUPX_CONFIG_DISABLE_CXX_STANDARD=ON -DCMAKE_VERBOSE_MAKEFILE=ON': 8
yarn build:examples: 8
USES: ./.github/actions/untracked: 16
USES: ./.github/actions/setup-pyenv: 15
export MLFLOW_HOME=$(pwd): 9
USES: obi1kenobi/cargo-semver-checks-action: 15
USES: Kir-Antipov/mc-publish: 33
cmake FLAG "${{ env.CMAKE_BUILD_DIR }}": 8
sh .. CUSTOM_PATH_FILE: 13
yarn -v: 19
rm -f .npmrc: 9
touch .npmrc: 6
echo "access=public" >> .npmrc: 11
yarn config set version-tag-prefix "": 6
mv -v . CUSTOM_PATH_DIR ./: 6
USES: briansmith/actions-rs-toolchain: 8
USES: briansmith/actions-checkout: 8
tar -xf CUSTOM_PATH_DIR matrix.node }}.js.tar.gz -C ./: 8
yarn build:types: 6
yarn install && yarn pkg: 8
cmake -B build -DCMAKE_BUILD_TYPE=Release: 7
rustup target add x86_64-unknown-linux-gnu: 27
upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's CUSTOM_PATH_DIR: 15
git submodule foreach git checkout main: 9
USES: manyuanrong/setup-ossutil: 28
docker buildx create FLAG: 39
USES: azure/k8s-bake: 30
sudo -E . CUSTOM_PATH_FILE: 62
sudo apt-get install helm: 9
make test-kubernetes: 9
USES: ./.github/actions/setup_bazel: 7
ls -ahl ENV_VAR/: 6
mv . CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 7
system_profiler SPSoftwareDataType: 7
cp -r ~ CUSTOM_PATH_DIR .: 11
cmake FLAG test CUSTOM_PATH_DIR: 6
${{ matrix.t.emu }} test CUSTOM_PATH_DIR: 9
docker login ${{ secrets.EE_REGISTRY_URL }} -u ${{ secrets.EE_DOCKER_USERNAME }} -p "${{ secrets.EE_REGISTRY_TOKEN }}" : 8
sed -i "s CUSTOM_PATH_DIR \"changeMePassword\" CUSTOM_PATH_DIR \"${{ secrets.EE_PG_PASSWORD }}\" CUSTOM_PATH_DIR vars.yaml: 7
sed -i "s CUSTOM_PATH_DIR \"changeMeMinioAccessKey\" CUSTOM_PATH_DIR \"${{ secrets.EE_MINIO_ACCESS_KEY }}\" CUSTOM_PATH_DIR vars.yaml: 7
sed -i "s CUSTOM_PATH_DIR \"changeMeMinioPassword\" CUSTOM_PATH_DIR \"${{ secrets.EE_MINIO_SECRET_KEY }}\" CUSTOM_PATH_DIR vars.yaml: 7
sed -i "s CUSTOM_PATH_DIR \"SetARandomStringHere\" CUSTOM_PATH_DIR \"${{ secrets.EE_JWT_SECRET }}\" CUSTOM_PATH_DIR vars.yaml: 7
sed -i "s CUSTOM_PATH_DIR \"\" CUSTOM_PATH_DIR \"${{ secrets.EE_DOMAIN_NAME }}\" CUSTOM_PATH_DIR vars.yaml: 7
sed -i "s CUSTOM_PATH_DIR \"\" CUSTOM_PATH_DIR \"${{ secrets.EE_LICENSE_KEY }}\" CUSTOM_PATH_DIR vars.yaml: 7
helm template openreplay -n app openreplay -f vars.yaml -f CUSTOM_PATH_FILE FLAG ingress-nginx.enabled=false FLAG skipMigration=true FLAG FLAG=$k_version | kubectl apply -f -: 6
echo 'GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}}' > .release-env: 7
USES: getsentry/action-enforce-license-compliance: 8
echo "::set-output name=rust_toolchain::$(cat rust-toolchain)": 6
pnpm i FLAG FLAG: 12
cargo install FLAG FLAG .: 9
echo "BUILD_CMD=cross" >> ENV_VAR: 6
unset CARGO_TEST_OPTIONS: 7
unset IS_RELEASE ; if [[ ENV_VAR =~ ^refs CUSTOM_PATH_DIR ]]; then IS_RELEASE='true' ; fi: 11
echo "IS_RELEASE=ENV_VAR" >> ENV_VAR: 6
git config user.name "GitHub actions": 7
echo "::set-output name=commit::$(git rev-parse HEAD)": 7
bundle config set path '~ CUSTOM_PATH_DIR && bundle install: 12
bash qbittorrent-nox-static.sh: 13
bash qbittorrent-nox-static.sh icu: 8
bash qbittorrent-nox-static.sh qtbase -i: 9
indi CUSTOM_PATH_FILE: 17
goreleaser FLAG: 7
yarn update: 7
VERSION=$(cat . CUSTOM_PATH_DIR: 6
git submodule init; git submodule update: 8
git remote add github "URL: 7
USES: ./.github/actions/rust-bootstrap: 13
expo publish: 6
USES: Vucko130/delete-older-releases: 10
env PATH=ENV_VAR . CUSTOM_PATH_DIR: 18
pip install psutil: 8
USES: ./.github/actions/boot: 7
. CUSTOM_PATH_FILE runner_tests: 6
cd duckdb: 15
echo "standard,kubernetes-sigs CUSTOM_PATH_DIR | aqua g -f -: 6
echo "x-motemen CUSTOM_PATH_DIR | aqua g -f -: 6
aqua g x-motemen CUSTOM_PATH_DIR aquaproj CUSTOM_PATH_DIR: 6
aqua list: 12
aqua update-checksum: 6
aqua i -l -a: 6
aqua i: 9
aqua which go: 6
restic version: 6
migrate -version: 6
ghq -version: 6
gh version: 6
aqua -c tests CUSTOM_PATH_FILE g local,kubernetes-sigs CUSTOM_PATH_DIR: 6
github-compare -v: 6
terrafmt version: 6
aqua g -i suzuki-shunsuke CUSTOM_PATH_DIR: 8
git diff aqua.yaml: 6
aqua gr cli CUSTOM_PATH_DIR: 6
aqua gr XAMPPRocky CUSTOM_PATH_DIR: 6
dist CUSTOM_PATH_DIR -version: 6
dist CUSTOM_PATH_DIR version: 7
aqua update-aqua: 6
echo 'deb URL focal main' | sudo tee CUSTOM_PATH_FILE: 22
curl URL -o - | sudo apt-key add -: 18
sudo apt install -y build-essential gettext git qt5-default qttools5-dev libqt5svg5-dev libqt5xmlpatterns5-dev: 16
appimage-builder FLAG dist CUSTOM_PATH_FILE FLAG: 13
sudo mv . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 16
USES: Rishabh510/Path-lister-action: 17
echo "Found ${{ steps.path-lister.outputs.path_count }} file(s) with this extension:": 16
for i in ${{ steps.path-lister.outputs.paths }}; do: 16
echo $i: 16
Copy-Item 'src\app\seamlyme\bin\diagrams.rcc' '..\windows-build': 14
composer stan: 7
echo ENV_VAR | docker login ghcr.io -u ENV_VAR FLAG: 7
USES: ./.github/actions/restore-node: 21
echo "node-version=${{ matrix.engine == 'xs' && '18.x' || matrix.engine }}" >> ENV_VAR: 12
echo "test=${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}" >> ENV_VAR: 10
echo "GH_ENGINE=${{ matrix.engine }}" >> ENV_VAR: 12
cd packages CUSTOM_PATH_DIR && yarn ${{ steps.vars.outputs.test }} | ENV_VAR: 45
USES: ./.github/actions/notify-status: 22
mysql -uroot -proot -e 'create database homestead_test;': 6
php artisan migrate:rollback: 7
cargo build FLAG FLAG wasm32-unknown-unknown: 10
cargo build -p xtask: 8
pip3 install -e ci CUSTOM_PATH_DIR: 6
echo "PIP_CACHE=$(pip cache dir)" >> ENV_VAR: 8
echo "quay.io CUSTOM_PATH_DIR > images-orange-x86_64.txt: 7
cosign_bin="ENV_VAR CUSTOM_PATH_DIR: 17
sudo ln -s $cosign_bin CUSTOM_PATH_DIR: 17
sudo -E cosign version: 17
make build_signer: 16
sudo -E make sign_artifacts: 16
sudo -E REFERENCEID=repository.yaml make sign_artifacts: 16
USES: docker://github/super-linter:v4: 6
echo github.ref: "ENV_VAR": 8
echo github.head_ref: "ENV_VAR": 8
tasks CUSTOM_PATH_FILE ${{ github.sha }} dev: 9
shortRev=$(git rev-parse FLAG ${{ github.sha }}): 7
echo "::set-output name=id::$(<pr-id.txt)": 26
export DEPLOY_DOMAIN=URL steps.pr.outputs.id }}.surge.sh: 11
npx surge FLAG ./ FLAG ENV_VAR FLAG ${{ secrets.SURGE_TOKEN }}: 8
docker tag ENV_VAR ENV_VAR CUSTOM_PATH_DIR: 18
python3 -m build FLAG FLAG FLAG dist/ .: 9
npm run jest: 7
rm -rf docs/: 6
USES: pilosus/action-pip-license-checker: 9
echo "${{ steps.license_check_report.outputs.report }}": 7
make pr: 6
version=`grep -E '^#define EMSESP_APP_VERSION' . CUSTOM_PATH_FILE | awk '{print $3}' | sed 's CUSTOM_PATH_DIR: 6
echo "::set-output name=s::$version": 6
platformio upgrade: 9
platformio update: 85
cd interface: 9
echo "day=$(node FLAG "console.log(new Date().getDate())")" >> ENV_VAR: 16
echo "ts=$(node FLAG "console.log(new Date().getTime())")" >> ENV_VAR: 17
yarn build:quick: 30
echo "cypress-folders=$(node scripts CUSTOM_PATH_FILE)" >> ENV_VAR: 11
yarn release FLAG=verdaccio: 11
mkdir ~ CUSTOM_PATH_DIR && echo '{ "id": "ci", "telemetry": false }' > ~ CUSTOM_PATH_DIR: 15
mkdir xyz: 12
yarn webiny FLAG: 13
yarn webiny deploy apps CUSTOM_PATH_DIR FLAG dev: 46
yarn setup-cypress FLAG .. CUSTOM_PATH_DIR: 12
echo "cypress-config=$(cat cypress.json | tr -d ' \t\n\r')" >> ENV_VAR: 9
yarn cypress run FLAG chrome FLAG "cypress CUSTOM_PATH_FILE": 9
yarn cypress run FLAG chrome FLAG "${{ matrix.cypress-folder }}": 9
USES: dwieeb/needs-reply: 9
pip install mkdocs-redirects: 7
gosec -no-fail -fmt=sonarqube -out report.json . CUSTOM_PATH_DIR: 6
make -j2 docker generator runner: 7
. CUSTOM_PATH_DIR -g 4 -d networks CUSTOM_PATH_DIR: 6
echo "FILE_TIME=$(date "+%Y年%m月%d日-%H点")" >> ENV_VAR: 6
rm -rf packages && mkdir packages: 7
find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages: 7
find -name "*kernel.bin*" | xargs -i mv -f {} packages: 6
find -name "*rootfs*" | xargs -i mv -f {} packages: 6
find -name "*.manifest*" | xargs -i mv -f {} packages: 6
find -name "*vmlinuz*" | xargs -i mv -f {} packages: 6
find -name "*esxi.vmdk*" | xargs -i mv -f {} packages: 6
echo "[固件源码](URL >> release.txt: 6
echo "由衷感谢所有为openwrt无私奉献的大佬们" >> release.txt: 6
echo "📥 固件下载" >> release.txt: 6
[ ENV_VAR = true ] && echo "🔗 [国内NN网盘](${{ steps.cowtransfer.outputs.url }})" >> release.txt: 8
[ ENV_VAR = true ] && echo "🔗 [国外WT网盘](${{ steps.wetransfer.outputs.url }})" >> release.txt: 8
#[[ "${{ github.ref }}" == "refs CUSTOM_PATH_DIR ]] && VERSION=$(echo ENV_VAR | sed -e 's CUSTOM_PATH_DIR: 14
[ "ENV_VAR" == "master" ] && VERSION=ENV_VAR: 14
cmake -DBUILD_TESTING=ON -DBUILD_LIB=ON ..: 6
ctest FLAG 5 -C Debug -j4: 9
cd dep CUSTOM_PATH_DIR: 9
USES: kishikawakatsumi/xcresulttool: 11
make check-license: 11
USES: extractions/netrc: 19
. CUSTOM_PATH_DIR publishToMavenLocal -PRELEASE_SIGNING_ENABLED=false -PVERSION_NAME=999: 9
cd build CUSTOM_PATH_DIR matrix.sample }} CUSTOM_PATH_DIR: 6
xcodebuild -configuration Debug -scheme KmmBridgeIntegrationTestSpm -sdk iphonesimulator : 9
xcodebuild -workspace KmmBridgeIntegrationTestCocoapods.xcworkspace -configuration Debug -scheme KmmBridgeIntegrationTestCocoapods -sdk iphonesimulator: 9
git branch -a: 7
USES: haya14busa/action-bumpr: 6
bash ci CUSTOM_PATH_FILE gh release upload FLAG $(ci CUSTOM_PATH_FILE) wezterm-*.rpm *.sha256: 11
rsync -av . tests CUSTOM_PATH_DIR FLAG tests FLAG vendor: 6
pip install numpy typing dataclasses pytest parameterized Pillow: 6
pip install FLAG build setuptools setuptools_scm wheel: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:humble-ros-base: 6
cargo run examples CUSTOM_PATH_FILE: 22
rustup set auto-self-update disable: 33
GITHUB_SHA=$(git rev-parse HEAD): 11
export GITHUB_SHA: 11
rm -rf _work CUSTOM_PATH_DIR: 11
make vhtml: 11
make go-mod-tidy: 6
conda config FLAG always_yes yes: 6
docker compose build: 18
php artisan config:clear: 9
composer psalm: 10
cp pyproject.toml .github CUSTOM_PATH_DIR: 6
USES: super-linter/super-linter/slim: 11
export HOME= CUSTOM_PATH_DIR: 9
cp -rv .. CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 12
rustup target add x86_64-pc-windows-gnu: 9
sudo apt-get install zlib1g-dev: 8
brew install qemu: 22
docker build -t docker.io CUSTOM_PATH_DIR github.sha }} .: 6
yarn FLAG FLAG 100000: 9
kubectl get all -A: 19
mkdir dist && docker run FLAG -v $(pwd) CUSTOM_PATH_DIR static-php cp php-dist CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 9
cd docker/ && sed -ie 's CUSTOM_PATH_DIR Dockerfile && docker run FLAG FLAG multiarch CUSTOM_PATH_DIR FLAG: 10
cat .ortversions CUSTOM_PATH_FILE >> ENV_VAR: 13
pip install tox codecov: 13
USES: ForAllSecure/mapi-action: 6
ln -s CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 29
make deb: 9
npm install -g lerna@${{ matrix.lerna }} yarn@${{ matrix.yarn }}: 8
yarn run build:prod: 8
curl -LsSf URL | tar zxf - -C ENV_VAR:-~ CUSTOM_PATH_DIR: 22
sudo apt-get install git gcc-multilib libc6 libgcc1 libstdc++5 libstdc++6 libsdl-dev p7zip-full -y: 6
sudo sh -c "curl URL -o CUSTOM_PATH_DIR && chmod +x CUSTOM_PATH_DIR: 8
. ~ CUSTOM_PATH_FILE: 6
curl -o aws-iam-authenticator URL && \: 14
chmod +x . CUSTOM_PATH_DIR && \: 14
aws-iam-authenticator version: 14
echo "ENV_VAR" > kubeconfig: 14
KUBECONFIG=kubeconfig kubectl config set-credentials github-actions-dolt FLAG=client.authentication.k8s.io CUSTOM_PATH_DIR FLAG=aws-iam-authenticator FLAG=token FLAG=-i FLAG=eks-cluster-1: 14
KUBECONFIG=kubeconfig kubectl config set-context github-actions-dolt-context FLAG=eks-cluster-1 FLAG=github-actions-dolt FLAG=performance-benchmarking: 12
KUBECONFIG=kubeconfig kubectl config use-context github-actions-dolt-context: 14
git config FLAG user.email "test": 18
git config FLAG user.name "GitHub Almighty": 9
echo "PATH=ENV_VAR" >> "ENV_VAR": 7
make cov: 12
bin CUSTOM_PATH_DIR doctrine:migrations:migrate -n -vvv: 6
composer global require FLAG FLAG FLAG FLAG php-coveralls CUSTOM_PATH_DIR: 8
bootstrap_args="${bootstrap_args} FLAG";: 34
. CUSTOM_PATH_DIR -d yes | awk ' CUSTOM_PATH_DIR ::set-output CUSTOM_PATH_DIR CUSTOM_PATH_DIR ""); print; next} 1': 24
cmake -DCMAKE_PREFIX_PATH=ENV_VAR CUSTOM_PATH_DIR .. && make: 13
sudo apt-get install libpng-dev: 13
mkdir build && cd build;: 11
cmake -DCMAKE_PREFIX_PATH=ENV_VAR CUSTOM_PATH_DIR .. && make;: 11
. CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR output.png;: 11
popd;: 13
cargo udeps: 6
LD_LIBRARY_PATH=ENV_VARt5_DIR CUSTOM_PATH_DIR ninja -k 20 all: 8
echo ${{ github.sha }} > version: 9
echo ${{ steps.docker_bot_build.outputs.digest }}: 10
USES: igorjs/gh-actions-clean-workflow: 10
VERSION=$(curl -s URL ls-remote -h URL main | cut -c1-9): 7
[[ -n "${{ inputs.version }}" ]] && VERSION="${{ inputs.version }}": 7
make bootstrap: 25
make ci-bootstrap: 6
source ENV_VAR: 31
make html SPHINXOPTS="-W": 6
cd build; make -j4: 6
USES: actionshub/yamllint: 8
echo "VERSION_NAME=ENV_VAR" >> ENV_VAR: 8
echo "BRANCH=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 10
echo "::notice ::auto-merge conditions satisfied": 7
sudo apt-get install g++-aarch64-linux-gnu: 8
mkdir build && cd build && cmake -DCMAKE_TOOLCHAIN_FILE=.. CUSTOM_PATH_FILE -DTENGINE_BUILD_TESTS=ON ..: 6
wget ftp: CUSTOM_PATH_FILE: 15
unzip models.zip: 7
unzip images.zip: 7
USES: ./.github/workflows/actions/run-tests: 6
USES: darenm/Setup-VSTest: 23
arduino-cli core update-index: 11
USES: ./.github/actions/build-rpms: 16
ctest FLAG -LE explicitonly -j   &&: 15
dotnet format FLAG: 12
USES: gonuit/heroku-docker-deploy: 8
poetry config pypi-token.pypi ENV_VAR: 14
USES: chetan/git-restore-mtime-action: 12
USES: TimonVS/pr-labeler-action: 33
echo "v8CppApiVersion=$(node FLAG "process.versions.modules")" >> ENV_VAR: 12
yarn install FLAG && yarn build: 13
export DISPLAY=':99.0': 8
sudo apt-get install -y \: 8
cmake \: 18
libasound2-dev \: 6
libavformat-dev \: 6
libcurl4-openssl-dev \: 8
libx264-dev \: 6
libxinerama-dev \: 6
dpkg-dev \: 6
rm CUSTOM_PATH_DIR: 40
hash -r: 11
git clone -b ${{ needs.git-branch.outputs.branch-name }} URL: 15
cd libyang: 9
CC=${{ matrix.config.cc }} cmake -DCMAKE_BUILD_TYPE=${{ matrix.config.dep-build-type }} -DENABLE_TESTS=OFF ..: 6
CC=${{ matrix.config.cc }} cmake -DCMAKE_BUILD_TYPE=${{ matrix.config.build-type }} ${{ matrix.config.options }} ..: 8
export LC_ALL=C.UTF-8: 10
export PATH= CUSTOM_PATH_DIR github.workspace }} CUSTOM_PATH_DIR: 8
${{ matrix.config.make-prepend }} make ${{ matrix.config.make-target }}: 7
poetry install FLAG dev FLAG: 7
echo "PROJECT_VERSION=$(sed -n 's CUSTOM_PATH_DIR = "\(.*\)" CUSTOM_PATH_DIR Cargo.toml | head -n1)" >> ENV_VAR: 8
echo "PROJECT_MAINTAINER=$(sed -n 's CUSTOM_PATH_DIR = \["\(.*\)"\] CUSTOM_PATH_DIR Cargo.toml)" >> ENV_VAR: 6
echo "PROJECT_HOMEPAGE=$(sed -n 's CUSTOM_PATH_DIR = "\(.*\)" CUSTOM_PATH_DIR Cargo.toml)" >> ENV_VAR: 6
echo github.event.action: ${{ github.event.action }}: 16
cd install: 21
sourcebranches="ENV_VAR%\"}": 14
sourcebranches="${sourcebranches#\"}": 14
basebranch="ENV_VAR%\"}": 13
basebranch="${basebranch#\"}": 13
git branch ENV_VAR $basebranch: 13
git pull origin $sourcebranches FLAG: 14
vendor CUSTOM_PATH_DIR fix FLAG FLAG: 16
cd builds: 6
composer global require ergebnis CUSTOM_PATH_DIR: 10
git clone URL openssl_1_1_1: 10
cd openssl_1_1_1: 10
git checkout OpenSSL_1_1_1-stable: 10
make build_libs -j4: 6
chmod +x artifacts CUSTOM_PATH_DIR: 14
cp -R crypto CUSTOM_PATH_DIR artifacts/: 12
artifacts CUSTOM_PATH_DIR -V: 28
. CUSTOM_PATH_DIR build -S: 8
curl -X POST -H "Content-Type: application CUSTOM_PATH_DIR -H "Authorization: token ${{ github.token }}" \: 8
URL github.repository }} CUSTOM_PATH_DIR env.githubCommit }}: 8
USES: bwoodsend/setup-winlibs-action: 6
USES: friendlyanon/setup-vcpkg: 11
pnpm -r publish FLAG public FLAG: 13
aws s3 sync build CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR secrets.AWS_STAGING_DEPLOYMENT_BUCKET }} CUSTOM_PATH_DIR: 9
aws s3 cp build CUSTOM_PATH_FILE s3: CUSTOM_PATH_DIR secrets.AWS_STAGING_DEPLOYMENT_BUCKET }} CUSTOM_PATH_DIR: 9
cargo install cargo-deb: 27
. CUSTOM_PATH_FILE ${{ steps.vars.outputs.tag }}: 7
echo "name of github basebranch is ENV_VAR": 8
VERSION=ENV_VAR##*-}: 6
IMAGE_TAG="ENV_VAR": 10
echo ::set-output name=IMAGE_NAME::ENV_VAR: 6
echo ::set-output name=IMAGE_TAG::ENV_VAR: 9
docker push ENV_VAR CUSTOM_PATH_DIR steps.wf-vars.outputs.IMAGE_NAME }}:${{ steps.wf-vars.outputs.IMAGE_TAG }}: 6
composer global config minimum-stability dev: 6
composer global config prefer-stable true: 6
flyctl deploy FLAG: 20
cd integration: 8
mkdir archive: 6
echo "Build environment configured:": 8
echo "  AWS_DEFAULT_REGION  = ENV_VAR": 7
echo "  AWS_S3_BUCKET_NAME  = ENV_VAR3_BUCKET_NAME}": 7
bash .ci-dockerfiles CUSTOM_PATH_FILE: 8
npm install -g codecov: 13
make install-go-modules: 6
make vulncheck: 9
gon -log-level=debug -log-json . CUSTOM_PATH_FILE: 8
sudo apt-get -y install bc build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler: 12
cd kernel: 7
CONFIG_PACKAGE_curl=y: 6
docker pull ${{ steps.meta.outputs.tags }}: 6
git config FLAG user.email "trickypr": 7
git config FLAG user.name "TrickyPR": 7
echo "ac_add_options FLAG" >> mozconfig: 8
cd engine: 7
echo 'export PATH=" CUSTOM_PATH_DIR >> ~ CUSTOM_PATH_DIR: 15
cp . CUSTOM_PATH_FILE .: 13
tar -czvf .. CUSTOM_PATH_FILE *: 8
python3 -m pip install FLAG -r requirements.text: 6
export TOWHEE_WORKER=True: 7
dir *.exe: 8
git remote set-url origin URL github.repository }}: 10
mkdir upload CUSTOM_PATH_DIR: 10
docker tag consoleme public.ecr.aws CUSTOM_PATH_DIR: 6
echo "go-build=$(go env GOCACHE)" >> "ENV_VAR": 12
echo "go-mod=$(go env GOMODCACHE)" >> "ENV_VAR": 12
npm run test-unit: 29
goreleaser release FLAG -f . CUSTOM_PATH_FILE: 7
pwd && ls: 6
aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}: 18
aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}: 18
cargo test-all-features: 7
ccache FLAG || true: 14
mv build CUSTOM_PATH_DIR output CUSTOM_PATH_DIR: 6
chmod +x dist CUSTOM_PATH_DIR: 13
BASE_IMAGE="${{ env.GH_REPO }}:${{ env.RELEASE_VERSION }}": 7
AARCH64_IMAGE="ENV_VAR-aarch64": 6
LATEST_IMAGE="${{ env.GH_REPO }}:latest": 6
docker manifest create "ENV_VAR" "ENV_VAR86_64_IMAGE" "ENV_VAR64_IMAGE": 8
docker manifest push "ENV_VAR": 8
USES: ./.github/actions/bootstrap-test-lakefs: 25
venv\Scripts\Activate.ps1: 8
cd docs-files: 6
rm frontend CUSTOM_PATH_FILE || true: 16
cp -r docs-files CUSTOM_PATH_DIR frontend CUSTOM_PATH_DIR: 10
set C_FLAGS=" CUSTOM_PATH_DIR: 10
call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.BIN}} CUSTOM_PATH_DIR: 6
echo "TAG=${{ github.event.inputs.ref }}" >> ENV_VAR: 8
USES: mozilla-mobile/relbot: 8
USES: ./.github/actions/test-dependencies: 9
USES: fedora-python/tox-github-action: 6
sudo FLAG=PATH env flutter packages get: 9
cd examples CUSTOM_PATH_DIR && sudo FLAG=PATH env flutter packages get: 7
sudo FLAG=PATH env flutter test: 7
cd examples CUSTOM_PATH_DIR && sudo FLAG=PATH env flutter build web: 7
poetry config virtualenvs.create false: 48
mkdir -p release CUSTOM_PATH_DIR: 25
cp . CUSTOM_PATH_DIR release CUSTOM_PATH_DIR: 13
cp . CUSTOM_PATH_FILE release CUSTOM_PATH_FILE: 15
cp -r . CUSTOM_PATH_DIR release CUSTOM_PATH_DIR: 9
USES: ./.github/actions/setup_docker: 16
conda config FLAG anaconda_upload yes: 11
npm install -g appcenter-cli: 24
echo pvTestingAccessKey="${{secrets.PV_VALID_ACCESS_KEY}}" >> local.properties: 8
echo storePassword="${{secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD}}" >> local.properties: 8
echo keyPassword="${{secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD}}" >> local.properties: 8
echo keyAlias=picovoice >> local.properties: 8
echo storeFile=.. CUSTOM_PATH_FILE >> local.properties: 8
echo "${{secrets.ANDROID_RELEASE_KEYSTORE_FILE_B64}}" | base64 -d > picovoice.jks: 8
USES: ricardochaves/python-lint: 12
git checkout FLAG gh-pages: 9
java -jar . CUSTOM_PATH_FILE convertbitmap -f bdf -o . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 12
java -jar . CUSTOM_PATH_FILE convertbitmap -f ttf -o . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 12
wine . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 8
echo "${{ steps.xyz.outputs.acc }}": 6
python3 examples CUSTOM_PATH_FILE: 48
yarn run compile: 10
ruby .github CUSTOM_PATH_FILE: 8
bundle exec rake test:all: 12
echo NOOP: 7
source bin CUSTOM_PATH_FILE: 6
chmod +x . CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE : 6
USES: ./.github/actions/setup-meteor: 7
nix develop FLAG .#ci: 15
nix develop FLAG: 7
mvn clean test -Dprops.file=testconfig CUSTOM_PATH_FILE: 19
echo "::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')": 6
USES: docker://antonyurchenko/git-release:latest: 10
echo "===modified beam search===": 19
cmake FLAG . FLAG prepare_for_ide: 6
cmake FLAG . -j ${{ steps.build_job_count.outputs.VALUE }}: 8
rm -rf ${{ steps.build_paths.outputs.BINARY }}: 8
(New-Object System.Net.WebClient).DownloadFile($url, $archive_name): 9
ctest FLAG -C Release -V: 6
curl -fsSL URL -o get-docker.sh: 9
sudo sh get-docker.sh: 7
git clone git: CUSTOM_PATH_FILE: 16
cp .. CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 28
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv onnx: 6
npm run demo: 10
cat tiny_models CUSTOM_PATH_FILE: 6
echo "::set-output name=version::$(cat .nvmrc)": 11
USES: docker://dkhamsing/awesome_bot:latest: 9
mvn -B -DskipTests=true install: 18
mvn -amd -B -P external -pl external CUSTOM_PATH_DIR verify: 17
git fetch origin master: 37
docker exec -i acme-sh acme.sh FLAG URL FLAG 'acme-sh' FLAG -d acme-sh.acme FLAG FLAG 3 FLAG FLAG: 38
openssl verify -CAfile acme-sh CUSTOM_PATH_FILE acme-sh CUSTOM_PATH_FILE: 9
sudo chmod -R 777 examples CUSTOM_PATH_DIR: 9
TEST_RESULT_DIR=ENV_VAR make test CUSTOM_PATH_DIR: 7
tparse -notests -smallscreen -sort cover -format markdown -file "ENV_VAR CUSTOM_PATH_FILE": 6
npm run build:umd: 9
yarn export: 9
git push origin ${{ github.head_ref }}: 8
. CUSTOM_PATH_FILE .: 16
git clone FLAG FLAG chowdsp URL: 9
bash .dockerfiles CUSTOM_PATH_FILE: 14
cd lib: 10
echo "TAG=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 9
yarn install FLAG FLAG ..: 7
ssh-add - <<< "ENV_VAR": 6
yq -o=json "${work_dir} CUSTOM_PATH_FILE" | jq . > "${destination_directory} CUSTOM_PATH_FILE": 12
curl -sLO "URL env.kubectl_version }} CUSTOM_PATH_DIR: 20
curl -sLO "URL env.kubectl_version }} CUSTOM_PATH_FILE256": 20
echo "$(cat kubectl.sha256)  kubectl" | sha256sum FLAG: 20
curl -LO "URL env.eksctl_version }} CUSTOM_PATH_DIR -s)_amd64.tar.gz": 12
sudo tar xzvfC eksctl_$(uname -s)_amd64.tar.gz CUSTOM_PATH_DIR: 13
rm eksctl_$(uname -s)_amd64.tar.gz: 13
USES: ./.github/actions/setup-eks-cluster: 8
cilium hubble enable ${{ steps.vars.outputs.hubble_enable_defaults }}: 28
cilium status FLAG: 45
cilium hubble port-forward&: 41
sleep 10s: 84
[[ $(pgrep -f "cilium.*hubble.*port-forward|kubectl.*port-forward.*hubble-relay" | wc -l) == 2 ]]: 50
FLAG "cilium-junits CUSTOM_PATH_DIR env.job_name }} (${{ join(matrix.*, ', ') }}) - 1.xml" \: 8
pkill -f "cilium.*hubble.*port-forward|kubectl.*port-forward.*hubble-relay": 12
cilium uninstall FLAG=install CUSTOM_PATH_DIR FLAG: 7
kubectl create -n kube-system secret generic cilium-ipsec-keys FLAG=keys="15 rfc4106(gcm(aes)) $(echo $(dd if= CUSTOM_PATH_DIR count=20 bs=1 2> CUSTOM_PATH_DIR | xxd -p -c 64)) 128": 15
cilium connectivity test ${{ steps.vars.outputs.connectivity_test_defaults }} FLAG \: 8
FLAG "cilium-junits CUSTOM_PATH_DIR env.job_name }} (${{ join(matrix.*, ', ') }}) - 2.xml" \: 8
FLAG github_job_step="Run connectivity test with IPSec (${{ join(matrix.*, ', ') }})": 8
eksctl delete cluster FLAG ${{ env.clusterName }} FLAG ${{ matrix.region }}: 8
sudo apt-get -y install libxml2-utils: 7
cd .\packaging: 6
mv "dist CUSTOM_PATH_FILE" "dist CUSTOM_PATH_FILE": 6
pip install interrogate: 12
echo ttf-mscorefonts-installer msttcorefonts CUSTOM_PATH_DIR select true | sudo debconf-set-selections: 7
python -m pip FLAG FLAG install FLAG .[test]: 6
python -m pip install FLAG git+URL: 13
cd .ci CUSTOM_PATH_DIR && go install github.com CUSTOM_PATH_DIR: 19
echo "::set-output name=version::ENV_VAR:10}": 11
cd test; python FLAG |& grep -q "Python 3" || flags="-W error"; python $flags test_all.py ENV_VAR && git ls-files -o FLAG: 11
find . -path . CUSTOM_PATH_DIR -prune -o -name "TEST-*.xml" -exec cp {} all-test-reports/ \;: 6
echo "ENV_VAR" > private.asc: 9
gpg FLAG FLAG private.asc: 9
xpm install FLAG linux-x64 FLAG ${{ github.event.inputs.xpm_install_loglevel }} ${{ github.event.inputs.xpm_install_options }}: 6
xpm run build FLAG linux-x64: 6
xpm install FLAG win32-x64 FLAG ${{ github.event.inputs.xpm_install_loglevel }} ${{ github.event.inputs.xpm_install_options }}: 8
xpm run build FLAG win32-x64: 8
USES: artichoke/setup-rust/build-and-test: 11
cp ENV_VAR CUSTOM_PATH_FILE ENV_VAR: 7
USES: aptos-labs/aptos-core/.github/actions/rust-setup: 21
testsuite CUSTOM_PATH_FILE: 7
USES: up9cloud/action-rsync: 6
npm run build:production: 7
pip install wheel==0.35.0: 7
python -m scripts.install_third_party_libs: 11
cp lib CUSTOM_PATH_FILE lib CUSTOM_PATH_FILE: 13
git config FLAG user.email ${{secrets.commit_email}}: 6
git config FLAG user.name ${{secrets.commit_name}}: 6
cd invoiceninja: 6
git checkout v5-develop: 7
pylint FLAG: 11
USES: ergo720/auto-close-issues: 7
ls -la dist/: 11
python3 -m pip install FLAG wheel: 7
python3 -m pip install FLAG setuptools: 8
ratarmount FLAG: 6
yarn run coverage: 9
USES: bridgecrewio/checkov-action: 7
pip3 install FLAG pip setuptools wheel: 6
pip3 install git+URL: 9
terraform FLAG: 30
flake8 ./: 6
git checkout FETCH_HEAD: 14
sudo apt install -y lcov: 7
git config FLAG user.email "dry-bot": 8
git config FLAG user.name "dry-bot": 8
gem install ossy FLAG: 12
tmp CUSTOM_PATH_DIR: 6
git pull FLAG origin master: 7
set -e;: 12
cd packages CUSTOM_PATH_DIR && yarn build: 17
sudo dpkg -i packages-microsoft-prod.deb: 7
echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"Current\" xmlns=\"URL > Environment.props: 6
git add JotunnLib CUSTOM_PATH_FILE: 6
rustup update stable FLAG: 12
rustup update nightly FLAG: 12
tar -xzf maven-repo.tgz -C ~: 25
USES: guybedford/chomp-action: 6
bash release.sh: 7
echo "result=ENV_VAR" >> ENV_VAR: 8
echo "POETRY_VERSION=$(scripts CUSTOM_PATH_FILE)" >> ENV_VAR: 8
make publish-docs: 7
USES: ./.github/actions/install-llvm: 9
echo ::set-output name=current_version::ENV_VAR#refs CUSTOM_PATH_DIR: 14
npm install -g ajv-cli: 119
kind create cluster FLAG=kindest CUSTOM_PATH_DIR FLAG=. CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_DIR -B clean install -Dmaven.javadoc.skip=true -Dmaven.test.skip=true: 7
. CUSTOM_PATH_DIR -B clean install -Pit -DskipTests -f . CUSTOM_PATH_FILE: 8
. CUSTOM_PATH_DIR -B clean install -Pexample -Dmaven.javadoc.skip=true -Dmaven.test.skip=true -f . CUSTOM_PATH_FILE: 10
kind load docker-image "apache CUSTOM_PATH_DIR: 6
. CUSTOM_PATH_DIR test -Pit -f . CUSTOM_PATH_FILE: 6
USES: ./.github/actions/create-release: 29
. CUSTOM_PATH_FILE linux: 10
mkdir tests: 7
git rm -f FLAG gc CUSTOM_PATH_DIR && git submodule update FLAG FLAG=1 FLAG: 6
kubectl get pods: 23
echo "*********************************************************************": 20
gfortran FLAG: 7
echo "******************************************************": 18
cd CUSTOM_PATH_FILE}} CUSTOM_PATH_DIR: 6
FLAG=0 \: 10
export CC=ENV_VAR CUSTOM_PATH_DIR: 6
export OMP_NUM_THREADS=1: 12
echo "DEBUG=n" >> ENV_VAR: 6
echo "git_hash=$(git rev-parse FLAG ENV_VAR)" >> ENV_VAR: 8
cat out: 6
make staticcheck: 15
sudo npm i pnpm -g: 11
pnpm recursive install: 8
pnpm clean: 13
VERSION=ENV_VAR##* CUSTOM_PATH_DIR: 10
mv CUSTOM_PATH_DIR .: 11
USES: docker://ubuntu:22.04: 15
USES: docker://arm32v7/ubuntu:22.04: 9
sw_vers # lsb_release -sd: 18
bash scripts CUSTOM_PATH_FILE FLAG ${{ github.event.inputs.version }} FLAG ${{ github.event.inputs.base_url }}: 17
systeminfo # lsb_release -sd: 8
echo "Great success!": 8
echo "CCACHE_DIR=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
python3 ${{ github.workspace }} CUSTOM_PATH_FILE: 8
sudo apt-get update; sudo apt-get install -y libudev-dev libgbm-dev libxkbcommon-dev libegl1-mesa-dev libwayland-dev libinput-dev libdbus-1-dev libsystemd-dev libseat-dev: 7
cargo update -Z minimal-versions: 16
echo ${{ steps.extract_tag.outputs.tag }}: 6
go get sigs.k8s.io CUSTOM_PATH_DIR: 29
bundle exec ruby . CUSTOM_PATH_FILE: 10
ls -al dist/: 11
cat build CUSTOM_PATH_FILE: 21
[ -e ENV_VAR ] || sudo apt-get install -y FLAG ENV_VAR: 19
docker manifest push ghcr.io CUSTOM_PATH_DIR: 11
echo ::set-output name=VERSION::$(cat VERSION): 6
sudo wget URL -O CUSTOM_PATH_FILE: 19
make libgit2: 7
USES: PostHog/check-package-version: 22
USES: ./.github/composite-actions/install-dependencies: 7
find . CUSTOM_PATH_DIR -name '*CMakeFiles*' -type d -exec rm -rf "{}" +: 8
mv thirdparty CUSTOM_PATH_DIR ./: 6
ulimit -s unlimited: 18
USES: mockingbirdnest/actions/windows/download_artifact: 7
pip install black flake8 isort: 16
sudo lxd init FLAG: 11
brew install gnu-getopt > CUSTOM_PATH_DIR: 7
echo 'export PATH=" CUSTOM_PATH_DIR >> CUSTOM_PATH_FILE_profile: 11
echo 'export FLAGS_GETOPT_CMD="$(brew FLAG gnu-getopt) CUSTOM_PATH_DIR >> CUSTOM_PATH_FILE_profile: 7
mkdir android_ndk && cd android_ndk: 7
echo "sdk.dir=ENV_VAR" > local.properties: 30
echo "ndk.dir=ENV_VAR CUSTOM_PATH_DIR >> local.properties: 31
export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}": 23
. CUSTOM_PATH_DIR init action library: 22
APK=$(find plugin CUSTOM_PATH_DIR -name '*arm64-v8a*.apk'): 10
APK=$(dirname "ENV_VAR"): 10
echo "APK=ENV_VAR" >> ENV_VAR: 12
tar -xvf ghr.tar.gz: 11
mv ghr*linux_amd64 CUSTOM_PATH_DIR .: 12
mkdir apks: 14
find artifacts -name "*.apk" -exec cp {} apks \;: 14
find artifacts -name "*.sha256sum.txt" -exec cp {} apks \;: 11
. CUSTOM_PATH_DIR -delete -prerelease -t "${{ github.token }}" -n "${{ github.event.inputs.tag }}" "${{ github.event.inputs.tag }}" apks: 10
cat > service_account_credentials.json << EOF: 16
${{ secrets.ANDROID_PUBLISHER_CREDENTIALS }}": 16
FLAG "ENV_VAR": 8
git submodule update FLAG FLAG -- toolchain CUSTOM_PATH_DIR: 13
pip install -r python-requirements.txt: 14
tar xvf tc-isa-sim.tar: 6
tar FLAG -xf build.tar.zst: 25
ant ENV_VAR -f ide CUSTOM_PATH_FILE test: 80
ant ENV_VAR -f ide CUSTOM_PATH_DIR test: 12
ant ENV_VAR -f java CUSTOM_PATH_FILE test: 41
ant ENV_VAR -Dvanilla.javac.exists=true -f platform CUSTOM_PATH_FILE test: 49
ant ENV_VAR -Dvanilla.javac.exists=true -f platform CUSTOM_PATH_DIR test: 8
ant ENV_VAR -f webcommon CUSTOM_PATH_FILE test: 24
ant ENV_VAR -f webcommon CUSTOM_PATH_FILE test-unit: 6
ant ENV_VAR -f enterprise CUSTOM_PATH_FILE test: 24
ant ENV_VAR -f php CUSTOM_PATH_FILE test: 49
ant ENV_VAR -f php CUSTOM_PATH_FILE2 test: 6
yarn lint:ts: 17
USES: docker://alpine: 9
echo For security reasons, all pull requests need to be approved first before running any automated CI.: 7
qmake -r MNECPP_CONFIG+=noTests: 9
cd mne-cpp: 7
poetry run isort . FLAG: 11
api-extractor run: 6
description="${description CUSTOM_PATH_DIR: 11
mkdir -p tmp: 30
git remote add upstream ${{ github.event.pull_request.base.repo.html_url }}: 13
pip install FLAG FLAG eager wheel: 6
pip3 install invoke: 9
python3 ci CUSTOM_PATH_FILE: 14
cmake -DCMAKE_BUILD_TYPE=Debug ..: 9
diff="${diff CUSTOM_PATH_DIR: 12
USES: ./.github/actions/tagDocker: 7
mix docs: 15
ref=${{ github.ref }}: 15
[ "${ref::10}" = 'refs CUSTOM_PATH_DIR ] && tag=${ref:10} || tag=${{ github.event.inputs.tag }}: 7
sed -i " CUSTOM_PATH_DIR logs corda_partya_1 -f CUSTOM_PATH_DIR s CUSTOM_PATH_DIR "scripts CUSTOM_PATH_FILE": 8
make convert-compose-method2: 6
make start-server COMPOSE_ARG='FLAG docker CUSTOM_PATH_FILE1': 6
make start-server COMPOSE_ARG='FLAG docker CUSTOM_PATH_FILE2': 11
sed -i "s#<PATH-TO-WEAVER>#ENV_VAR CUSTOM_PATH_DIR docker-testnet-envs CUSTOM_PATH_FILE1: 6
sed -i "s#<PATH-TO-WEAVER>#ENV_VAR CUSTOM_PATH_DIR docker-testnet-envs CUSTOM_PATH_FILE2: 6
make deploy COMPOSE_ARG='FLAG docker-testnet-envs CUSTOM_PATH_FILE1' NETWORK_NAME=$(grep NETWORK_NAME docker-testnet-envs CUSTOM_PATH_FILE1 | cut -d '=' -f 2): 6
make deploy COMPOSE_ARG='FLAG docker-testnet-envs CUSTOM_PATH_FILE2' NETWORK_NAME=$(grep NETWORK_NAME docker-testnet-envs CUSTOM_PATH_FILE2 | cut -d '=' -f 2): 6
sed -i "s#<PATH-TO-WEAVER>#ENV_VAR CUSTOM_PATH_DIR docker-testnet CUSTOM_PATH_FILE1: 12
sed -i "s#^AUTO_SYNC=true#AUTO_SYNC=false#g" docker-testnet CUSTOM_PATH_FILE1: 12
sed -i "s#^DNS_CONFIG_PATH=.*#DNS_CONFIG_PATH=. CUSTOM_PATH_FILE#g" docker-testnet CUSTOM_PATH_FILE1: 12
sed -i "s#<PATH-TO-WEAVER>#ENV_VAR CUSTOM_PATH_DIR docker-testnet CUSTOM_PATH_FILE2: 12
sed -i "s#^AUTO_SYNC=true#AUTO_SYNC=false#g" docker-testnet CUSTOM_PATH_FILE2: 12
sed -i "s#^DNS_CONFIG_PATH=.*#DNS_CONFIG_PATH=. CUSTOM_PATH_FILE#g" docker-testnet CUSTOM_PATH_FILE2: 12
make deploy COMPOSE_ARG='FLAG docker-testnet CUSTOM_PATH_FILE1' DLT_SPECIFIC_DIR=$(grep DLT_SPECIFIC_DIR docker-testnet CUSTOM_PATH_FILE1 | cut -d '=' -f 2): 12
make deploy COMPOSE_ARG='FLAG docker-testnet CUSTOM_PATH_FILE2' DLT_SPECIFIC_DIR=$(grep DLT_SPECIFIC_DIR docker-testnet CUSTOM_PATH_FILE2 | cut -d '=' -f 2): 12
cp .npmrc.template .npmrc: 15
sed -i "s CUSTOM_PATH_DIR secrets.GITHUB_TOKEN }} CUSTOM_PATH_DIR .npmrc: 15
cp config.template.json config.json: 15
sed -i "s#<PATH-TO-WEAVER>#ENV_VAR CUSTOM_PATH_DIR config.json: 14
sed -i "s CUSTOM_PATH_FILE CUSTOM_PATH_DIR .env: 14
. CUSTOM_PATH_DIR env set MEMBER_CREDENTIAL_FOLDER ENV_VAR CUSTOM_PATH_DIR: 14
. CUSTOM_PATH_DIR env set CONFIG_PATH ENV_VAR CUSTOM_PATH_FILE: 14
. CUSTOM_PATH_DIR configure membership FLAG=network1 FLAG=network2 FLAG=localhost:9500: 10
docker logs iin-agent-Org1MSP-network1: 12
docker logs iin-agent-Org1MSP-network2: 12
. CUSTOM_PATH_DIR configure membership FLAG=network2 FLAG=network1 FLAG=localhost:9501: 10
make build-image-local: 8
CCP_PATH=ENV_VAR CUSTOM_PATH_FILE: 12
sed -i "s#<path-to-connection-profile>#ENV_VAR#g" src CUSTOM_PATH_FILE: 8
cat src CUSTOM_PATH_FILE: 19
cp chaincode.json.template chaincode.json: 6
tail -10 .. CUSTOM_PATH_FILE: 8
echo "BASE: ${{ env.NX_BASE }}": 8
echo "HEAD: ${{ env.NX_HEAD }}": 8
git config FLAG url."URL "git:": 9
git clean -xdf: 25
git restore -SW .: 8
ls -ltrh: 9
ls -ltrh dist: 9
echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> ENV_VAR: 11
echo "ENV_VAR" | jq: 7
echo "${{ secrets.PRIVATE_REGISTRY_PASSWORD }}" | docker login -u ${{ secrets.PRIVATE_REGISTRY_USERNAME }} FLAG dokken.azurecr.io: 8
echo "${{ secrets.PUBLIC_REGISTRY_PASSWORD }}" | docker login -u ${{ secrets.PUBLIC_REGISTRY_USERNAME }} FLAG: 8
USES: JulienKode/pull-request-name-linter-action: 11
mkdir -p package CUSTOM_PATH_DIR: 12
mvn -V FLAG always -ntp verify -Pskip FLAG plugin CUSTOM_PATH_FILE -Dgpg.skip: 8
rustup target add x86_64-pc-windows-msvc: 18
USES: pragmatrix/release-action: 143
export DYLD_LIBRARY_PATH= CUSTOM_PATH_DIR: 10
make backend: 15
pip install .[docs]: 16
bash machine-state.sh: 12
pip install FLAG FLAG pip setuptools wheel: 10
USES: Chia-Network/actions/clean-workspace: 20
USES: Chia-Network/actions/git-ssh-to-https: 6
bash build_scripts CUSTOM_PATH_FILE || true: 6
mkdir "ENV_VAR" CUSTOM_PATH_DIR: 8
chmod +x "ENV_VAR" CUSTOM_PATH_DIR: 9
gui_ref=$(git submodule status chia-blockchain-gui | sed -e 's CUSTOM_PATH_DIR CUSTOM_PATH_DIR -e 's/ chia-blockchain-gui.*$ CUSTOM_PATH_DIR: 7
echo "${gui_ref}": 7
echo "rm -rf . CUSTOM_PATH_DIR: 7
unset HAS_AWS_SECRET: 7
if [ -n "ENV_VAR" ]; then HAS_AWS_SECRET='true' ; fi: 7
GIT_SHORT_HASH=$(echo "ENV_VAR" | cut -c1-8): 7
CHIA_DEV_BUILD=ENV_VAR-ENV_VAR: 7
ls "ENV_VAR" CUSTOM_PATH_DIR: 7
nohup CUSTOM_PATH_DIR -b :8080 -p - ${{ secrets.PROTOCOL }} 2> CUSTOM_PATH_DIR &: 7
curl -v URL || exit 1: 7
curl -f FLAG 127.0.0.1:8080 -v URL || exit 1: 6
sudo apt-get install -y git: 16
sudo apt-get install build-essential: 16
python3 .github CUSTOM_PATH_FILE "ENV_VAR": 13
set MSYSTEM=MINGW64: 12
rm -f *.tar.gz: 6
echo "tag=$(echo $unstable_tag)" >> ENV_VAR: 6
make install-requirements: 8
pip install -U openmim: 47
mim install mmengine: 10
mim install 'mmcv>=2.0.0': 9
mim install 'mmdet>=3.0.0rc0': 9
mim install 'mmsegmentation>=1.0.0rc0': 9
rm -rf .eggs && pip install -e .: 41
apt-get update && apt-get install -y ffmpeg libsm6 libxext6 git ninja-build libglib2.0-0 libsm6 libxrender-dev libxext6: 16
rm -rf .eggs: 23
pip install -e . -U: 6
pip install lmdb: 13
gem install bundler:2.0.2: 7
brew install cairo: 7
USES: WyriHaximus/github-action-helm3: 14
composer require "phpunit CUSTOM_PATH_DIR matrix.phpunit }}" FLAG FLAG: 15
npm install  CUSTOM_PATH_DIR -g: 8
cd ios/: 6
USES: nixbuild/nix-quick-install-action: 22
echo "APP_VERSION=ENV_VAR" >> ENV_VAR: 6
echo "=========================================": 10
pip install -e ".[all]": 9
mkdir pkg_: 16
mv *.zip pkg_: 6
VERSION=$(grep -Eo "[0-9\.]+" src CUSTOM_PATH_FILE | head -1): 7
REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD FLAG): 8
SHA7="ENV_VAR::7}": 10
TAG="ENV_VAR-ENV_VAR-ENV_VAR7}": 6
echo "tag=ENV_VAR" >> ENV_VAR: 45
cp release CUSTOM_PATH_FILE tmp: 18
yarn checkchange: 10
sudo apt-get install -y clang-format-12: 7
xcrun codesign FLAG runtime FLAG FLAG FLAG FLAG FLAG "Developer ID Application: ${{ secrets.DEVELOPER_NAME }}" to-be-signed CUSTOM_PATH_FILE: 12
. CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 72
cd images CUSTOM_PATH_DIR && make build: 8
sudo apt-get install -y hub: 18
ln -s CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 8
dpkg FLAG arm64: 7
USES: gacts/github-slug: 10
USES: reedyuk/npm-version: 12
pip install -q pytest-cov==2.4.0  python-coveralls  codacy-coverage: 9
pytest FLAG=hypernets FLAG=30: 7
pip install -U git+URL: 30
npx prettier FLAG .: 26
poetry run pre-commit run FLAG: 15
npm list: 26
mvn -T 1C -B clean install -DskipTests: 8
flutter pub run build_runner build: 12
sudo apt-get install libolm-dev libolm3: 8
yarn benchmark: 8
USES: ridedott/dependabot-auto-merge-action: 9
echo "OCCLUM_VERSION=$(grep 'Version =' src CUSTOM_PATH_FILE | awk '{print $4}')" >> ENV_VAR;: 8
echo "OCCLUM_BRANCH=$(echo ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR;: 8
cp -r tools CUSTOM_PATH_DIR .: 12
python manage.py compilemessages: 7
mkdir _install: 23
sudo apt-get install graphviz -y: 8
BUNDLER_SPEC_SUB_VERSION=${{ matrix.bundler.value }} bin CUSTOM_PATH_DIR override_version: 6
pip install -e ".[docs]": 7
cd ${{ github.workspace }} CUSTOM_PATH_DIR && sudo . CUSTOM_PATH_FILE ${{ env.QUAY_ORGANIZATION_DEV }} ${{ steps.vars.outputs.sha }}: 7
echo "build_version=$(git describe FLAG FLAG "refs CUSTOM_PATH_DIR >> ENV_VAR: 6
chown -R $(id -u):$(id -g) ENV_VAR: 11
kernel_version=4.19.238-stable: 12
docker run FLAG FLAG -v $(pwd): CUSTOM_PATH_DIR -e kvm_accel="tcg" -e kern_version="$kernel_version" -e test_name="ENV_VAR" -t rafaeldtinoco CUSTOM_PATH_DIR: 151
kernel_version=5.4.166-ubuntu+: 12
kernel_version=5.4.189-stable: 12
kernel_version=5.8.18-ubuntu: 12
kernel_version=5.10.111-stable: 12
kernel_version=5.11.22-ubuntu: 23
kernel_version=5.13.19-ubuntu: 12
kernel_version=5.14.18-fedora33: 12
kernel_version=5.15.30-ubuntu: 12
kernel_version=5.15.34-stable: 12
kernel_version=5.16.18-stable: 12
kernel_version=5.16.19-fedora34: 12
USES: ./.github/workflows/actions/compatibility: 6
yarn config set supportedArchitectures.cpu "ia32": 13
yarn build:ts: 22
yarn test packages CUSTOM_PATH_DIR: 8
yarn config set supportedArchitectures.libc "musl": 16
yarn config set supportedArchitectures.cpu "arm64": 16
yarn config set supportedArchitectures.libc "glibc": 10
yarn config set supportedArchitectures.cpu "arm": 8
ls -R artifacts: 7
yarn lerna publish from-package FLAG FLAG: 7
echo py_version=`make PYTHON_VERSION` >> ENV_VAR: 6
cd drupal: 22
sudo apt -o Acquire::Retries=3 update: 14
msbuild CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 7
sudo apt install protobuf-compiler: 15
echo "SKIP_TESTS=yes" >> ENV_VAR: 7
echo "{rust_hash}={$(rustc -Vv | grep commit-hash | awk '{print $2}')}" >> ENV_VAR: 8
sudo CUSTOM_PATH_DIR: 8
productsign FLAG "ENV_VAR" build CUSTOM_PATH_FILE build CUSTOM_PATH_FILE: 6
pkgutil FLAG build CUSTOM_PATH_FILE: 6
rm -f build CUSTOM_PATH_FILE: 12
scripts CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 6
codesign -s "ENV_VAR" -v dist CUSTOM_PATH_FILE: 6
codesign -v dist CUSTOM_PATH_FILE: 6
 CUSTOM_PATH_FILE ENV_VAR: 6
cd rust: 19
cat ${{ github.workspace }} CUSTOM_PATH_FILE: 16
pip install pytest-xvfb: 8
pip install pytest-qt: 9
mim install 'mmcv >= 2.0.0': 15
coverage run FLAG FLAG mmpose -m pytest tests/: 6
apt-get update && apt-get install -y python${{matrix.python-version}}-dev: 12
python -m pip install lmdb: 9
cmake FLAG . FLAG FLAG: 13
ctest -j2: 16
cd _build: 33
meson compile: 13
meson test: 8
npm install FLAG netlify-cli: 7
USES: ./.github/actions/build-component-per-arch: 9
USES: ./.github/actions/build-component-multi-arch: 9
USES: buildpulse/buildpulse-action: 9
cp . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR matrix.os }}: 12
rm -rf ENV_VAR CUSTOM_PATH_FILE/: 64
DJL_ENGINE=onnxruntime . CUSTOM_PATH_DIR clean run: 7
go install ENV_VAR@ENV_VAR: 9
pip install FLAG FLAG requirements-test.txt: 11
pre-commit install-hooks: 18
go mod download -json: 7
make images: 15
mkdir -p releases: 7
USES: iota9star/sign-android-release: 9
flutter build ios FLAG FLAG FLAG: 9
sudo apt-get install -y clang-format-13: 8
. CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE: 9
echo 'NOT REQUIRED': 14
source scripts CUSTOM_PATH_FILE: 61
USES: ./.github/workflows/composite/test-setup: 7
pip install -r dev CUSTOM_PATH_FILE: 7
source . CUSTOM_PATH_FILE FLAG: 10
USES: ./.github/actions/setup-java: 16
xcodebuild -list: 15
gem install bundler; bundle install: 10
rm -rf vendor: 13
poetry install -v: 7
git push origin HEAD:master: 20
sshpass -p ${{ secrets.DEPLOY_SERVER_PASSWORD }} ssh -o StrictHostKeyChecking=no root@${{ secrets.DEPLOY_SERVER_IP }} "cd CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE": 6
gu install native-image: 17
. CUSTOM_PATH_DIR maintenance:install FLAG FLAG=${{ matrix.databases }} FLAG=nextcloud FLAG=127.0.0.1 FLAG=ENV_VAR FLAG=root FLAG=rootpassword FLAG admin FLAG password: 45
composer test:integration: 8
npm rebuild node-sass: 8
bash copy.sh: 9
cargo install cross FLAG: 6
pip install -r requirements.txt -r dev-requirements.txt: 15
python network-api CUSTOM_PATH_FILE collectstatic FLAG FLAG 0: 8
python network-api CUSTOM_PATH_FILE migrate FLAG: 8
python network-api CUSTOM_PATH_FILE block_inventory: 8
python network-api CUSTOM_PATH_FILE load_fake_data: 6
sudo rm -rf CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 15
sudo sh -c 'find CUSTOM_PATH_DIR -type d -name "go-build*" -mtime +3 | xargs rm -rf': 10
USES: Dovyski/payload-info-action: 10
export BOMCOMMENT=$(echo -e "${{ steps.findcomment.outputs.comment-body }}" | tr -d "[:space:]"): 9
echo "##[set-output name=bompath;]$(echo "ENV_VAR" | awk -F : '{print $2}')": 10
rm -rf ~ CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR docker kill $(docker ps -q) | true; docker system prune -a FLAG -f: 8
USES: vmware-tanzu/carvel-setup-action: 6
yarn install FLAG FLAG FLAG 500000: 6
mingw32-make -j4: 6
mingw32-make install: 6
brew link qt5 FLAG: 8
yarn audit: 9
mkdir -p var CUSTOM_PATH_DIR: 6
eval $(minikube docker-env): 36
minikube delete: 11
yarn run test-coverage: 6
npm run lint:all: 9
npm run test:types:all: 6
npm run build editor: 13
npm run test:ci chart: 6
npm run test:ci color: 6
npm run test:ci code: 6
npm run test:ci table: 6
npm run test:ci uml: 6
docker load FLAG CUSTOM_PATH_DIR env.CONTAINER }}.tar: 20
composer run phpstan: 6
USES: greut/eclint-action: 9
yarn policies set-version ${{ matrix.yarn-version }}: 9
python -c "import sysconfig, platform; print(platform.system(), sysconfig.get_python_version())": 6
DATETIME=$(date +'%Y%m%d%H%M'): 6
echo "DATETIME=ENV_VAR" >> "ENV_VAR": 6
git remote rm origin: 10
cargo test FLAG=test tests: 10
echo "Run ansible version": 7
command -v ansible: 7
ansible FLAG: 12
echo BOOST_ROOT=%BOOST_ROOT_1_78_0% >> %GITHUB_ENV%: 7
python build CUSTOM_PATH_FILE fetch FLAG libsodium: 7
python build CUSTOM_PATH_FILE fetch FLAG ninja: 7
python build CUSTOM_PATH_FILE fetch FLAG cmake: 7
python build CUSTOM_PATH_FILE fetch FLAG zlib: 7
python build CUSTOM_PATH_FILE fetch FLAG zstd: 7
python build CUSTOM_PATH_FILE fetch FLAG fmt: 7
python build CUSTOM_PATH_FILE fetch FLAG boost: 7
python build CUSTOM_PATH_FILE fetch FLAG double-conversion: 7
python build CUSTOM_PATH_FILE fetch FLAG gflags: 7
python build CUSTOM_PATH_FILE fetch FLAG glog: 7
python build CUSTOM_PATH_FILE fetch FLAG googletest: 7
python build CUSTOM_PATH_FILE fetch FLAG lz4: 7
python build CUSTOM_PATH_FILE fetch FLAG snappy: 7
python build CUSTOM_PATH_FILE fetch FLAG perl: 7
python build CUSTOM_PATH_FILE fetch FLAG openssl: 7
python build CUSTOM_PATH_FILE fetch FLAG libevent: 7
python build CUSTOM_PATH_FILE fetch FLAG folly: 6
python build CUSTOM_PATH_FILE build FLAG libsodium: 7
python build CUSTOM_PATH_FILE build FLAG ninja: 7
python build CUSTOM_PATH_FILE build FLAG cmake: 7
python build CUSTOM_PATH_FILE build FLAG zlib: 7
python build CUSTOM_PATH_FILE build FLAG zstd: 7
python build CUSTOM_PATH_FILE build FLAG fmt: 7
python build CUSTOM_PATH_FILE build FLAG boost: 7
python build CUSTOM_PATH_FILE build FLAG double-conversion: 7
python build CUSTOM_PATH_FILE build FLAG gflags: 7
python build CUSTOM_PATH_FILE build FLAG glog: 7
python build CUSTOM_PATH_FILE build FLAG googletest: 7
python build CUSTOM_PATH_FILE build FLAG lz4: 7
python build CUSTOM_PATH_FILE build FLAG snappy: 7
python build CUSTOM_PATH_FILE build FLAG perl: 7
python build CUSTOM_PATH_FILE build FLAG openssl: 7
python build CUSTOM_PATH_FILE build FLAG libevent: 7
python build CUSTOM_PATH_FILE build FLAG folly: 6
mage -h: 61
cd cmd CUSTOM_PATH_DIR: 30
sudo apt-get FLAG update: 30
USES: ./.github/actions/ssh-access: 23
USES: apache/pulsar-test-infra/gh-actions-artifact-client/dist: 14
ENV_VAR CUSTOM_PATH_FILE restore_tar_from_github_actions_artifacts pulsar-maven-repository-binaries: 10
USES: ./.github/actions/copy-test-reports: 12
USES: apache/pulsar-test-infra/action-junit-report: 6
node src CUSTOM_PATH_FILE: 9
conda update -q conda: 6
conda init bash: 6
bash: 8
USES: camshaft/rust-cache: 27
TARGET="${{ github.sha }} CUSTOM_PATH_DIR: 14
aws s3 sync target CUSTOM_PATH_DIR "s3: CUSTOM_PATH_DIR FLAG private FLAG: 9
URL="ENV_VAR CUSTOM_PATH_FILE": 13
echo "URL=ENV_VAR" >> ENV_VAR: 12
USES: ouzi-dev/commit-status-updater: 20
USES: model-checking/kani-github-action: 6
cargo miri test FLAG: 9
echo "::set-output name=matrix::{\"include\": $content }": 9
EXTRA_JAVA_TEST_ARGS=$(mvn help:evaluate -Dexpression=extraJavaTestArgs -q -DforceStdout): 8
export MAVEN_OPTS="ENV_VAR ENV_VAR": 8
USES: github/ossar-action: 37
echo ${{ steps.package.outputs.current-version }}: 16
USES: elastic/apm-pipeline-library/.github/actions/test-report: 10
USES: unfor19/install-aws-cli-action: 8
cm pull repo mlcommons: 7
~ CUSTOM_PATH_DIR collection build FLAG "ENV_VAR CUSTOM_PATH_DIR: 7
~ CUSTOM_PATH_DIR collection install .cache CUSTOM_PATH_FILE: 19
USES: ./.github/actions/spin-ci-dependencies: 8
cd web CUSTOM_PATH_DIR: 7
pip3 install -U dco-check: 6
cd Software CUSTOM_PATH_DIR: 20
make -j9: 11
curl URL env.K6_VERSION }} CUSTOM_PATH_DIR env.K6_VERSION }}-linux-amd64.tar.gz -L | tar xvz FLAG 1 && sudo cp k6 CUSTOM_PATH_DIR: 9
cd ${{ inputs.component }}: 8
make integration-test API_GATEWAY_URL=localhost:ENV_VAR: 8
make build-release: 11
touch "ENV_VAR CUSTOM_PATH_DIR: 6
mkdir -p bin CUSTOM_PATH_DIR: 7
(cd build; make -j2): 9
set CL= CUSTOM_PATH_DIR: 6
echo ::set-output name=commit::$(git rev-parse FLAG HEAD): 6
ls . CUSTOM_PATH_DIR && chmod -R 777 . CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE: 8
chmod -R 777 . CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE: 101
. CUSTOM_PATH_DIR androidSourcesJar javadocJar: 10
. CUSTOM_PATH_DIR publishReleasePublicationToSonatypeRepository FLAG 1 closeAndReleaseSonatypeStagingRepository: 8
mkdir ddp: 11
python run.py: 13
echo Fetching ENV_VAR: 8
echo "Metadata comparison:" >> output.txt: 9
echo "Date: $(date)" >> output.txt: 10
echo "Reference: ENV_VAR" >> output.txt: 6
echo "Target version: ENV_VAR" >> output.txt: 7
echo "Chain: ENV_VAR" >> output.txt: 6
echo "FLAG" >> output.txt: 10
docker pull jacogr CUSTOM_PATH_DIR: 7
echo -e "Running:\nENV_VAR": 8
ENV_VAR >> output.txt: 8
sed -z -i 's CUSTOM_PATH_DIR output.txt: 10
cat output.txt | egrep -n -i '': 8
SUMMARY=$(. CUSTOM_PATH_FILE output.txt): 7
echo -e ENV_VAR: 8
echo -e ENV_VAR >> output.txt: 8
chromedriver FLAG= CUSTOM_PATH_DIR &: 31
sudo Xvfb -ac :99 -screen 0 1280x1024x24 > CUSTOM_PATH_DIR 2>&1 & # optional: 9
echo "::set-output name=version::$(echo ENV_VAR)": 6
make -j 3: 19
cd libtrace CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 6
dotnet tool update -g docfx: 11
cd Build CUSTOM_PATH_DIR: 6
helm repo add jetstack URL FLAG: 6
helm install cert-manager jetstack CUSTOM_PATH_DIR FLAG installCRDs=true FLAG: 6
. CUSTOM_PATH_FILE FLAG "${{ github.ref_name }}": 8
cd . CUSTOM_PATH_DIR && npm install: 11
cd . CUSTOM_PATH_DIR && npm run build: 8
git show FLAG: 18
cd guide: 7
ln -s CUSTOM_PATH_DIR "ENV_VAR CUSTOM_PATH_DIR: 10
echo GITHUB_REPOSITORY: %GITHUB_REPOSITORY%: 19
for CUSTOM_PATH_DIR %%i in ("%GITHUB_REPOSITORY%") do set LIBRARY=%%~nxi: 17
echo LIBRARY: %LIBRARY%: 19
echo LIBRARY=%LIBRARY%>>%GITHUB_ENV%: 19
echo GITHUB_BASE_REF: %GITHUB_BASE_REF%: 19
echo GITHUB_REF: %GITHUB_REF%: 19
if "%GITHUB_BASE_REF%" == "" set GITHUB_BASE_REF=%GITHUB_REF%: 21
set BOOST_BRANCH=develop: 21
for CUSTOM_PATH_DIR %%i in ("%GITHUB_BASE_REF%") do if "%%~nxi" == "master" set BOOST_BRANCH=master: 19
echo BOOST_BRANCH: %BOOST_BRANCH%: 19
git clone -b %BOOST_BRANCH% FLAG 1 URL boost-root: 18
cd boost-root: 43
xcopy CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR %GITHUB_WORKSPACE% libs\%LIBRARY%\: 21
git submodule update FLAG tools CUSTOM_PATH_DIR: 63
cmd CUSTOM_PATH_DIR bootstrap: 12
b2 -d0 headers: 12
sudo apt install ${{matrix.install}}: 13
echo GITHUB_REPOSITORY: ENV_VAR: 16
LIBRARY=ENV_VAR#* CUSTOM_PATH_DIR: 14
echo LIBRARY: ENV_VAR: 16
echo "LIBRARY=ENV_VAR" >> ENV_VAR: 16
echo GITHUB_BASE_REF: ENV_VAR: 16
echo GITHUB_REF: ENV_VAR: 17
REF=ENV_VAR:-ENV_VAR: 23
REF=ENV_VAR#refs CUSTOM_PATH_DIR: 16
echo REF: ENV_VAR: 16
echo BOOST_BRANCH: ENV_VAR: 16
git clone -b ENV_VAR FLAG 1 URL boost-root: 18
cp -r ENV_VAR CUSTOM_PATH_DIR libs CUSTOM_PATH_DIR: 36
mkdir __build__ && cd __build__: 21
ctest FLAG FLAG=error: 12
cd .. CUSTOM_PATH_DIR && mkdir __build__ && cd __build__: 6
python tools CUSTOM_PATH_FILE FLAG_args "FLAG 3" %LIBRARY%: 17
ctest FLAG FLAG=error -C Debug: 9
ctest FLAG FLAG=error -C Release: 9
cmake FLAG . -j 4 FLAG Release: 8
ctest FLAG -C Release: 12
cmake FLAG . -j 4 FLAG Debug: 8
ctest FLAG -C Debug: 10
dotnet nuget push . CUSTOM_PATH_FILE FLAG FLAG URL FLAG ${{ secrets.nugetKey }}: 8
sudo apt-get install doxygen graphviz -y: 6
gcloud config set project ${{ secrets.GOOGLE_HOPRASSOCIATION_PROJECT }}: 7
USES: overtrue/phplint: 10
cp .env.testing .env: 6
php artisan dusk:chrome-driver ` CUSTOM_PATH_DIR FLAG | cut -d " " -f3 | cut -d "." -f1`: 7
php artisan serve &: 11
php artisan dusk: 6
echo "date=$(date +'%Y%m%d')" >> ENV_VAR: 9
echo "::warning ENV_VAR": 6
npm run prepack: 9
~ CUSTOM_PATH_DIR update: 14
sudo add-apt-repository ppa:longsleep CUSTOM_PATH_DIR: 6
export GO111MOUDULE=on: 6
USES: rhysd/action-setup-vim: 19
FLAG CUSTOM_PATH_DIR \: 8
DEV=TRUE make modules CUSTOM_PATH_DIR: 13
yarn run eslint: 7
make -C cmake.output autogen: 7
mvn deploy: 7
curl URL -sSf | sh -s -- FLAG=nightly FLAG=minimal -y && rustup show: 6
sudo rm -rf . CUSTOM_PATH_DIR: 17
USES: christian-korneck/update-container-description-action: 21
make -j4 check: 11
rm -f .. CUSTOM_PATH_FILE: 7
yarn install FLAG FLAG example: 8
poetry install -vvv: 10
poetry run tools CUSTOM_PATH_FILE: 6
sudo apt install libunwind8-dev: 6
USES: omarabid-forks/rs-toolchain: 8
USES: omarabid-forks/rs-cargo: 30
make : 11
poetry config FLAG virtualenvs.in-project true: 6
git fetch FLAG FLAG FLAG origin  # for "git describe": 9
USES: ./.github/workflows/custom/before-install: 8
USES: ./.github/workflows/custom/after-install: 8
cat out.txt: 8
grep -E "\[VARIABLE_NAME_INCORRECT_FORMAT\]" out.txt: 6
rm out.txt: 6
until curl FLAG -f -lSL "URL github.repository_owner }} CUSTOM_PATH_DIR steps.vars.outputs.sha }} CUSTOM_PATH_DIR &> CUSTOM_PATH_DIR do sleep 45s; done: 10
cilium hubble enable: 13
kubectl port-forward -n kube-system deployment CUSTOM_PATH_DIR 4245:4245&: 10
cilium connectivity test: 10
cilium uninstall FLAG: 13
pgrep -f "kubectl port-forward" | xargs kill -9 # kill background port forwards: 6
kubectl delete pod -n cilium-test FLAG=kind=client: 6
kubectl delete pod -n cilium-test FLAG=kind=echo: 6
python cilium-sysdump.zip FLAG cilium-sysdump-out: 8
sudo apt-get update && sudo apt-get -y install libsnmp-dev: 6
USES: ./.github/actions/artifact-name: 13
tar -czvf ${{ env.ASSET_FULL_NAME }}.tar.gz ${{ env.ASSET_FULL_NAME }}: 6
USES: quickwit-inc/upload-to-github-release: 11
USES: frenck/action-addon-linter: 7
gulp build: 6
USES: ./.github/actions/prepare-env: 16
conan profile new FLAG default: 30
md build: 12
conan profile list: 19
conan install .. FLAG missing: 7
USES: sclorg/tfaga-wrapper: 10
pip install FLAG FLAG .: 14
curl -sSfL URL | sh -s -- -b CUSTOM_PATH_DIR: 10
mkdir -p .cache: 6
USES: pmd/pmd-github-action: 8
ct install: 11
cp ..\..\..\Qt\6.2.1\msvc2019_64\bin CUSTOM_PATH_FILE ./: 8
cp -a ~ CUSTOM_PATH_FILE ./: 15
mkdir -p . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 8
cp -a ~ CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 6
echo "OPENSANCTIONS_DATE=$(date +%Y%m%d)" >> ENV_VAR: 6
aws s3 sync FLAG FLAG FLAG "public, max-age=84600" FLAG REPLACE FLAG public-read ENV_VAR CUSTOM_PATH_DIR s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
aws cloudfront create-invalidation FLAG ETROMAQBEJS91 FLAG " CUSTOM_PATH_DIR: 6
xvfb-run -a -s "-screen 0 1024x768x24 -ac +extension GLX +render -noreset" python docs CUSTOM_PATH_FILE: 8
echo " CUSTOM_PATH_FILE CUSTOM_PATH_DIR secrets.PUBLISH_GH_TOKEN }}" > .npmrc: 6
mv CUSTOM_PATH_FILE .: 6
USES: ./.github/workflows/custom-actions/set-commit-status: 7
cmake FLAG build -j: 7
brew install ffmpeg: 13
go generate -v . CUSTOM_PATH_DIR: 7
mv .github CUSTOM_PATH_FILE .: 10
USES: ./.github/actions/setup-test-environment: 9
bundle exec rails test test CUSTOM_PATH_DIR: 10
yarn check || yarn install FLAG;: 7
bundle exec rails g webpacker:install && bundle exec rails g webpacker:install:react && bundle exec rails g react:install: 7
bundle exec rails test:system: 11
USES: antrea-io/has-changes: 7
make bin: 10
USES: madhead/semver-utils: 8
cp dev-project CUSTOM_PATH_FILE dev-project CUSTOM_PATH_DIR: 6
docker-compose -f dev-project CUSTOM_PATH_FILE up -d: 7
docker exec -t \: 7
pip install lxml: 6
chmod +x ports CUSTOM_PATH_FILE: 20
gem install octokit: 6
sudo dpkg FLAG i386;: 8
sudo apt-get -y install qemu-user-static wine-stable wine32 wine64;: 8
docker pull multiarch CUSTOM_PATH_DIR: 12
sh scripts CUSTOM_PATH_FILE -triplet "ENV_VAR" "ENV_VAR";: 16
[ ! -z "$(ls -A scripts CUSTOM_PATH_DIR ] && exit -1;: 8
echo "DEV_BUILD=$(git rev-list `git rev-list FLAG FLAG FLAG=1`..HEAD FLAG)" >> ENV_VAR: 8
USES: skymatic/code-sign-action: 17
msbuild CUSTOM_PATH_DIR CUSTOM_PATH_DIR Sources CUSTOM_PATH_FILE: 24
REPO_OWNER=${{ github.repository_owner }}: 11
cargo test && cargo test -- FLAG: 7
echo "${{ secrets.NPMRC }}" > ~ CUSTOM_PATH_DIR: 6
USES: BobAnkh/auto-generate-changelog: 10
. CUSTOM_PATH_DIR check FLAG FLAG: 11
mkdir bin CUSTOM_PATH_DIR: 11
$basedir=(pwd).path.replace("\\"," CUSTOM_PATH_DIR: 16
npm run test:js: 9
USES: ./.github/actions/integration-tests: 16
cat README.md: 11
git config FLAG user.name "README-bot": 6
ls -la CUSTOM_PATH_DIR: 23
sha=$(cat tmp CUSTOM_PATH_FILE): 6
git config FLAG user.email "grindelsack": 9
docker run -d -p 80:80 FLAG -id FLAG acme FLAG=acme-srv -v "$(pwd) CUSTOM_PATH_DIR grindsa CUSTOM_PATH_DIR: 8
docker exec -i acme-sh acme.sh FLAG URL FLAG FLAG 2 FLAG: 9
USES: juliangruber/sleep-action: 141
echo ::set-output name=short_ref::ENV_VAR#refs CUSTOM_PATH_DIR: 13
ls -la ~ CUSTOM_PATH_DIR: 6
. CUSTOM_PATH_FILE : 10
brew install xcodegen: 14
. CUSTOM_PATH_FILE "TEST-${{ matrix.test }}" ${{ matrix.test }}: 8
twilio FLAG: 14
twilio api FLAG: 12
. CUSTOM_PATH_DIR -c psalm.xml: 6
echo ::add-mask::ENV_VAR: 13
sed -i 's CUSTOM_PATH_DIR web CUSTOM_PATH_FILE: 6
botway -v: 8
bundle exec srb tc: 10
docker manifest push ENV_VAR CUSTOM_PATH_DIR: 6
echo "BRANCH_NAME=ENV_VAR" >> ENV_VAR: 23
sed -i 's CUSTOM_PATH_DIR customization.cfg: 19
touch tarplz: 7
yes|. CUSTOM_PATH_FILE: 7
curl -sL URL > ENV_VAR CUSTOM_PATH_FILE: 8
composer global require FLAG FLAG FLAG symfony CUSTOM_PATH_DIR: 22
make cython: 6
pytest -v test: 11
yarn install FLAG=skip-build: 15
node . CUSTOM_PATH_FILE build: 8
tar -xf babel-artifact.tar; rm babel-artifact.tar: 8
yarn dedupe: 10
sudo make: 16
cp ${{ github.workspace }} CUSTOM_PATH_FILE ${{ github.workspace }} CUSTOM_PATH_DIR: 8
curl FLAG "URL | jq -r .tag_name | xargs -I {} echo TAG={} >> ENV_VAR: 14
USES: mozilla-mobile/sync-strings-action: 6
USES: getsentry/action-setup-volta: 16
git config FLAG init.defaultBranch master: 9
clang -v: 8
yarn FLAG && yarn build: 12
git reset FLAG ${{ github.event.inputs.commit }}: 9
make FLAG=cmake CUSTOM_PATH_DIR ENV_VAR_build: 6
make FLAG=cmake CUSTOM_PATH_DIR ENV_VAR_test: 6
git remote set-url origin URL github.actor }}:${{ secrets.GITHUB_TOKEN }} CUSTOM_PATH_DIR github.repository }}.git: 7
npx playwright install FLAG ${{ matrix.browser }} chromium: 8
cargo test -v FLAG: 6
echo "cache=$(go env GOCACHE)" >> ENV_VAR: 11
echo "modcache=$(go env GOMODCACHE)" >> ENV_VAR: 9
sudo sh -c 'echo "DEBIAN_FRONTEND=noninteractive" >> CUSTOM_PATH_DIR: 19
sudo apt install FLAG gcc make libssl-dev: 8
sudo update-alternatives FLAG php        CUSTOM_PATH_DIR: 6
sudo update-alternatives FLAG phpize     CUSTOM_PATH_DIR: 6
sudo git clean -fxd src: 6
sudo make phpthemis_install: 8
make test_php: 6
echo "ok": 29
sleep 1 # give the server time to launch: 13
kill -SIGTERM "$!": 7
USES: Legit-Labs/action-download-artifact: 7
java -fullversion 2>&1 | grep '11.0': 6
nohup ENV_VAR CUSTOM_PATH_DIR ENV_VAR &: 15
ENV_VAR CUSTOM_PATH_DIR wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done': 16
sudo killall -9 ENV_VAR || true: 10
ENV_VAR CUSTOM_PATH_DIR shell settings put global window_animation_scale 0.0: 6
ENV_VAR CUSTOM_PATH_DIR shell settings put global transition_animation_scale 0.0: 6
ENV_VAR CUSTOM_PATH_DIR shell settings put global animator_duration_scale 0.0: 6
gzip -9 adb-log.txt: 7
export SKIP_BUNDLING=1: 10
export RCT_NO_LAUNCH_PACKAGER=1: 10
nohup sh -c "sleep 30 && xcrun simctl spawn booted log stream FLAG debug FLAG compact > simulator.log 2>&1 &": 6
gzip -9 simulator.log: 6
USES: ./.github/actions/setup/directories: 10
rustup target add aarch64-apple-ios-sim: 12
IMAGE_ID=ENV_VAR: 7
brew install gettext: 11
python setup.py clean bdist_wheel: 6
git tag ${{ github.event.inputs.version }}: 9
false: 41
cd TarsDocker CUSTOM_PATH_DIR: 7
mix hex.audit: 6
echo VERSION="$(git describe FLAG FLAG=0 FLAG='v[0-9]*' | cut -c2-)-dev-ENV_VAR-$(git rev-parse FLAG HEAD)-$(date FLAG +'%Y%m%d%H%M')" >> ENV_VAR: 6
. CUSTOM_PATH_DIR build FLAG ${{ steps.build_variables.outputs.REPO }}-web:installDist: 6
sudo apt-get install libopenblas-dev liblapack-dev: 6
sudo chown -R $(id -u) CUSTOM_PATH_DIR: 9
sudo apt build-dep -d -y ${{ github.workspace }} CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
sudo apt build-dep -y ${{ github.workspace }} CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 7
cd ${{ github.workspace }} CUSTOM_PATH_FILE CUSTOM_PATH_DIR && . CUSTOM_PATH_DIR FLAG: 8
apt-get install -y ca-certificates curl file idn2 make: 15
dnf install -y ca-certificates curl findutils file idn2 make: 13
pacman -Syu FLAG FLAG ca-certificates curl file libidn2 make: 12
apk add FLAG ca-certificates curl file libidn2 make: 30
printf "ID=alpine\n" > CUSTOM_PATH_DIR: 9
mkdir -p CUSTOM_PATH_DIR mkdir -p CUSTOM_PATH_DIR opkg update ||:: 9
opkg install ca-certificates curl file idn2 make: 9
brew install curl libidn2 make: 15
make test-all TEST_SHELL="$(command -v bash)": 6
make test-all TEST_SHELL="$(command -v zsh)": 6
make test-all TEST_SHELL="$(command -v dash)": 6
apk add FLAG busybox: 6
apk info FLAG busybox: 6
make test-all TEST_SHELL="$(command -v busybox) ash": 6
USES: gfreezy/upload-release-asset: 10
nr lint: 14
nr build: 18
nr test: 10
git clone ssh: CUSTOM_PATH_FILE: 6
tar -xzf .. CUSTOM_PATH_FILE -C ~: 17
git rebase $(cat ~ CUSTOM_PATH_FILE): 12
echo "ENV_VAR" | sudo tee -a CUSTOM_PATH_DIR: 7
go mod tidy && git diff FLAG go.mod go.sum: 6
cargo build FLAG ${{ matrix.target }} FLAG FLAG FLAG pkcs8: 10
sudo apt install shellcheck: 7
make gotest: 10
python -m pip install cython: 9
sudo make test: 11
cp docker CUSTOM_PATH_FILE FrameworkBenchmarks CUSTOM_PATH_FILE: 25
. CUSTOM_PATH_DIR FLAG benchmark FLAG C++ CUSTOM_PATH_DIR: 6
cd results CUSTOM_PATH_DIR && cat results.json: 7
USES: edge/simple-slack-notify: 14
sudo apt-get update -qy: 19
make -j "$(nproc)": 6
make -j2 gomoddownload: 17
bin CUSTOM_PATH_DIR init: 12
rm -rf vendor CUSTOM_PATH_DIR: 9
git checkout ${{ github.event.pull_request.head.ref }}: 18
rush build -t  CUSTOM_PATH_DIR: 22
vendor CUSTOM_PATH_DIR fix: 7
mv ENV_VAR CUSTOM_PATH_DIR .: 7
rm -rf .flatpak-builder CUSTOM_PATH_DIR: 6
find .flatpak-builder CUSTOM_PATH_DIR -xtype l -exec rm {} \; # removing dead symlinks: 6
npm run format:ci: 15
pip install .[camera_obs,rllib,test,torch,train]: 7
USES: rubyforgood/remove-label-from-cards: 6
go build -race -v -a . CUSTOM_PATH_DIR: 9
sudo cmake FLAG .: 17
sudo cmake FLAG . FLAG install: 14
ENV_VARrl = "URL: 8
(New-Object System.Net.WebClient).DownloadFile(ENV_VARrl, "$env:TEMP\boost.exe"): 7
Start-Process -Wait -FilePath "$env:TEMP\boost.exe" " CUSTOM_PATH_DIR: 7
xcrun notarytool store-credentials "notarytool-profile" FLAG "ENV_VAR" FLAG "ENV_VAR" FLAG "ENV_VAR": 6
echo $env:PATH: 6
USES: hashicorp/actions-set-product-version: 8
TAG=ENV_VAR: 13
echo tag_name=ENV_VAR >> ENV_VAR: 10
sudo sealos login -u ${{ github.repository_owner }} -p ${{ secrets.GH_PAT }} FLAG ghcr.io: 6
sudo rm -rf registry: 8
sudo sealos images: 14
poetry run python -m pip install FLAG pip: 10
poetry run python -c "import imageio;imageio.plugins.freeimage.download()": 7
. CUSTOM_PATH_FILE CUSTOM_PATH_DIR install: 9
npm run build:package: 6
sudo apt-get update && sudo apt-get install -y protobuf-compiler: 10
make build-${{ matrix.component }}-docker REGISTRY=ENV_VAR VERSION=ENV_VAR: 6
pip install FLAG "pip>=21.3.1,<23.2": 8
ENV_VAR36 CUSTOM_PATH_DIR -m pytest -v src CUSTOM_PATH_FILE: 8
cmake FLAG build FLAG Debug FLAG: 14
cmake FLAG build FLAG Release FLAG: 25
ctest -C Debug  FLAG: 6
cmake -G "${{matrix.gen}}" -A ${{matrix.arch}}  -B build_install_test tests CUSTOM_PATH_DIR: 8
cmake FLAG build_install_test FLAG Release: 9
python -m pip install -U wheel: 11
gem update FLAG FLAG: 12
echo "value=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 6
python otherfiles CUSTOM_PATH_FILE: 6
composer require "illuminate CUSTOM_PATH_DIR matrix.laravel }}" FLAG: 9
python tests.py: 9
echo "::set-output name=tag_name::$(git tag FLAG version:refname | tail -n 1)": 19
bundle config FLAG path .bundle CUSTOM_PATH_DIR: 6
bundle FLAG 3 FLAG 3: 10
echo "The job was automatically triggered by a ${{ github.event_name }} event.": 10
echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!": 6
echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.": 6
echo "The ${{ github.repository }} repository has been cloned to the runner.": 7
USES: ./.github/actions/e2e-tests: 6
brew install autoconf automake libtool pkg-config curl git cmake nasm: 9
echo "export DEVELOPER_DIR= CUSTOM_PATH_DIR matrix.xcode }}.app CUSTOM_PATH_DIR > ~ CUSTOM_PATH_FILE: 21
USES: benjyw/rust-cache: 11
echo "hash=$(. CUSTOM_PATH_FILE)" >> ENV_VAR: 7
. CUSTOM_PATH_DIR version > ${{ runner.temp }} CUSTOM_PATH_FILE && [[ -s ${{ runner.temp }} CUSTOM_PATH_FILE ]]: 6
. CUSTOM_PATH_DIR list ::: 6
. CUSTOM_PATH_DIR roots: 6
. CUSTOM_PATH_DIR help goals: 6
. CUSTOM_PATH_DIR help targets: 6
. CUSTOM_PATH_DIR help subsystems: 6
. CUSTOM_PATH_DIR run src CUSTOM_PATH_FILE -- build-wheels: 8
. CUSTOM_PATH_DIR package src CUSTOM_PATH_DIR: 8
chmod +x src CUSTOM_PATH_DIR: 29
export S3_DST=s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR show FLAG FLAG=%cd FLAG=format:%Y-%m-%d) CUSTOM_PATH_DIR: 12
echo "Uploading test reports to ENV_VAR3_DST}": 12
. CUSTOM_PATH_DIR run . CUSTOM_PATH_FILE                   --                   FLAG=dist CUSTOM_PATH_DIR                   FLAG=ENV_VAR3_DST}                   FLAG="": 12
curl FLAG -L URL -o "ENV_VAR CUSTOM_PATH_DIR: 21
USES: pantsbuild/actions/expose-pythons: 25
if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi: 16
build_tools CUSTOM_PATH_FILE: 12
make vendor: 28
echo "archive=${archive}" >> ENV_VAR: 6
echo "asset_name=${asset_name}" >> ENV_VAR: 6
cmake ENV_VAR ..: 6
cd docs && yarn build: 9
echo ${{ steps.qemu.outputs.platforms }}: 19
echo "PROJECT_SOURCE_CODE_DIR=`echo ENV_VAR`" >> ENV_VAR: 7
echo "IMAGE_REGISTRY=`echo ghcr.io CUSTOM_PATH_DIR ${{ github.repository_owner }} | tr 'A-Z' 'a-z')`" >> ENV_VAR: 7
echo "VERSION_NAME=$(cat gradle.properties | grep -w "VERSION_NAME" | cut -d'=' -f2)" >> ENV_VAR: 12
docker exec pki pki-server cert-export ca_signing FLAG ca_signing.crt: 8
docker exec pki openssl x509 -text -noout -in CUSTOM_PATH_FILE: 7
mix ecto.migrate: 15
sudo rm -rf CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 22
kubectl config set-context FLAG FLAG=ENV_VAR: 9
kubectl wait FLAG=condition=available FLAG=1000s deployment CUSTOM_PATH_DIR: 60
USES: INTI-CMNB/KiBot: 9
USES: hallee/eslint-action: 6
sudo -E apt-get -y install $(curl -fsSL is.gd CUSTOM_PATH_DIR: 9
git clone ENV_VAR -b ENV_VAR workspace CUSTOM_PATH_DIR: 14
cd workspace CUSTOM_PATH_DIR: 29
echo "OPENWRT_PATH=ENV_VAR" >> ENV_VAR: 10
echo "OPENWRT_PATH=$(echo ENV_VAR)" >> ENV_VAR: 6
export VERSION_INFO=$(git show -s FLAG=short FLAG="Author: %an<br CUSTOM_PATH_DIR %cd<br CUSTOM_PATH_DIR %s<br CUSTOM_PATH_DIR hash: %H"): 6
echo "VERSION_INFO=ENV_VAR" >> ENV_VAR: 10
echo "VERSION_INFO=$(echo ENV_VAR)" >> ENV_VAR: 7
echo "CONFIG_ALL=y" >> ENV_VAR CUSTOM_PATH_DIR: 6
echo "CONFIG_ALL_NONSHARED=y" >> ENV_VAR CUSTOM_PATH_DIR: 6
export CURRENT_BRANCH="$(git symbolic-ref FLAG HEAD)": 14
echo "CURRENT_BRANCH=ENV_VAR" >> ENV_VAR: 14
echo "CURRENT_BRANCH=$(echo ENV_VAR)" >> ENV_VAR: 6
export SOURCE_REPO="$(echo ENV_VAR | awk -F ' CUSTOM_PATH_DIR '{print $(NF)}')": 14
echo "SOURCE_REPO=ENV_VAR" >> ENV_VAR: 16
echo "SOURCE_REPO=$(echo ENV_VAR)" >> ENV_VAR: 6
export DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}'): 13
echo "DEVICE_TARGET=ENV_VAR" >> ENV_VAR: 15
echo "DEVICE_TARGET=$(echo ENV_VAR)" >> ENV_VAR: 6
export DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}'): 13
echo "DEVICE_SUBTARGET=ENV_VAR" >> ENV_VAR: 15
echo "DEVICE_SUBTARGET=$(echo ENV_VAR)" >> ENV_VAR: 6
export TOOLCHAIN_IMAGE="toolchain-ENV_VAR-ENV_VAR-ENV_VAR-ENV_VAR": 6
echo "TOOLCHAIN_IMAGE=ENV_VAR" >> ENV_VAR: 14
echo "TOOLCHAIN_IMAGE=$(echo ENV_VAR)" >> ENV_VAR: 6
rm -rf .config* dl bin: 14
cd workspace: 20
mksquashfs openwrt ENV_VAR -force-gid 1001 -force-uid 1001 -comp zstd: 14
split -d -b 1900M ENV_VAR ENV_VAR CUSTOM_PATH_FILE.: 13
echo ENV_VAR > ENV_VAR CUSTOM_PATH_FILE: 24
ls -lh ENV_VAR CUSTOM_PATH_DIR: 14
USES: mknejp/delete-release-assets: 47
echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！": 14
echo -e "已知CPU型号（降序）：8370C，8272CL，8171M，E5-2673 \n": 14
echo "FLAG信息FLAG": 14
echo "CPU物理数量：$(cat CUSTOM_PATH_DIR | grep "physical id" | sort | uniq | wc -l)": 14
echo -e "CPU核心信息：$(cat CUSTOM_PATH_DIR | grep name | cut -f2 -d: | uniq -c) \n": 14
echo -e "$(sudo lshw -short -C memory | grep GiB) \n": 14
echo "硬盘数量：$(ls CUSTOM_PATH_DIR | grep -v [1-9] | wc -l)" && df -hT: 10
sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* llvm* firefox* google* dotnet* powershell* openjdk* mysql* php* mongodb* moby* snap* aspnetcore*: 6
sudo -E apt-get -y install libfuse-dev $(curl -fsSL is.gd CUSTOM_PATH_DIR: 9
sudo swapoff -a && sudo rm -f CUSTOM_PATH_DIR: 6
export ROOT_FREE_KB=$(df FLAG=1024 FLAG=avail / | tail -1): 15
export ROOT_LOOP_KB=$(expr ENV_VAR - 1048576): 15
export ROOT_LOOP_BYTES=$(expr ENV_VAR \* 1024): 15
sudo fallocate -l ENV_VAR CUSTOM_PATH_FILE: 29
export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf FLAG CUSTOM_PATH_FILE): 13
sudo pvcreate -f ENV_VAR: 26
export MNT_FREE_KB=$(df FLAG=1024 FLAG=avail CUSTOM_PATH_DIR | tail -1): 15
export MNT_LOOP_KB=$(expr ENV_VAR - 102400): 15
export MNT_LOOP_BYTES=$(expr ENV_VAR \* 1024): 15
export MNT_LOOP_DEVNAME=$(sudo losetup -Pf FLAG CUSTOM_PATH_FILE): 13
sudo vgcreate vgstorage ENV_VAR ENV_VAR: 13
sudo lvcreate -n lvstorage -l 100%FREE vgstorage: 13
export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}'): 13
sudo mkfs.btrfs -L combinedisk ENV_VAR: 13
sudo mount -o compress=zstd ENV_VAR ENV_VAR: 13
sudo chown -R runner:runner ENV_VAR: 15
mkdir ENV_VAR CUSTOM_PATH_DIR && chmod 777 ENV_VAR CUSTOM_PATH_DIR: 6
sudo cp -rp CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 14
sudo mount -B ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_DIR && df -hT: 6
git checkout -t origin CUSTOM_PATH_DIR: 23
ENV_VAR CUSTOM_PATH_FILE ENV_VAR: 32
make diffconfig: 24
make target CUSTOM_PATH_DIR -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \: 13
yes n | make target CUSTOM_PATH_DIR -j1 V=s IGNORE_ERRORS=1: 13
mkdir -p files CUSTOM_PATH_DIR: 60
cp ENV_VAR CUSTOM_PATH_FILE files CUSTOM_PATH_DIR: 10
make package CUSTOM_PATH_DIR -j$(nproc) || make package CUSTOM_PATH_DIR -j1 V=s: 19
make target CUSTOM_PATH_DIR -j$(nproc) || make target CUSTOM_PATH_DIR -j1 V=s: 19
make json_overview_image_info: 6
make checksum: 20
echo "FILE_DATE=$(date +"%Y.%m.%d")" >> ENV_VAR: 8
lsblk -f: 13
sudo btrfs filesystem usage ENV_VAR: 24
cat sha256sums: 15
cp ENV_VAR CUSTOM_PATH_DIR build.config: 7
mv -f ENV_VAR CUSTOM_PATH_FILE packages: 7
tar -zcf Packages.tar.gz packages: 7
rm -rf packages feeds.buildinfo version.buildinfo: 7
echo "FIRMWARE_PATH=ENV_VAR" >> ENV_VAR: 9
sudo apt-get install -y FLAG nodejs: 6
echo "Github actions is sane!": 6
echo "Running build with deal.ii version ${{ matrix.dealii_version }} on branch ENV_VAR#refs CUSTOM_PATH_DIR: 6
make -j${{ env.COMPILE_JOBS }}: 10
#Allow OMPI to run as root: 11
export OMPI_ALLOW_RUN_AS_ROOT=1: 15
export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1: 15
echo "earliest_version: 0.1.0" >> releasenotes CUSTOM_PATH_FILE: 15
sudo apt update && sudo apt install wait-for-it -y: 6
make helm CUSTOM_PATH_DIR: 9
USES: ./.github/actions/setup-yq: 6
touch continue: 6
python -m venv test-env: 6
echo "IMAGE_TAG=ENV_VAR" >> ENV_VAR: 15
sh autogen.sh: 18
make -j check: 12
USES: bhowell2/github-substring-action: 10
USES: yizhoumo/setup-ossutil: 13
USES: isbang/compose-action: 20
yarn build:release: 10
mv target CUSTOM_PATH_FILE target CUSTOM_PATH_FILE: 19
[ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> ENV_VAR: 8
echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> ENV_VAR: 8
make deps -C src TARGET=server -j2: 6
make -C src TARGET=server -j2: 6
echo 'USER_LANGUAGE="en"' > . CUSTOM_PATH_FILE: 9
echo "" >> . CUSTOM_PATH_FILE: 116
echo 'USER_NO_STOP="y"' >> . CUSTOM_PATH_FILE: 9
echo 'USER_INSTALL_TYPE="server"' >> . CUSTOM_PATH_FILE: 6
echo "USER_DIR= CUSTOM_PATH_DIR >> . CUSTOM_PATH_FILE: 9
echo 'USER_ENABLE_EMAIL="n"' >> . CUSTOM_PATH_FILE: 9
echo 'USER_ENABLE_SYSCHECK="n"' >> . CUSTOM_PATH_FILE: 9
echo 'USER_ENABLE_ROOTCHECK="n"' >> . CUSTOM_PATH_FILE: 9
echo 'USER_ENABLE_SYSCOLLECTOR="n"' >> . CUSTOM_PATH_FILE: 6
echo 'USER_ENABLE_SCA="n"' >> . CUSTOM_PATH_FILE: 6
echo 'USER_WHITE_LIST="n"' >> . CUSTOM_PATH_FILE: 9
echo 'USER_ENABLE_SYSLOG="n"' >> . CUSTOM_PATH_FILE: 9
echo 'USER_ENABLE_AUTHD="n"' >> . CUSTOM_PATH_FILE: 9
echo 'USER_AUTO_START="y"' >> . CUSTOM_PATH_FILE: 9
sudo sh install.sh: 10
USES: ./.github/actions/setup-builder: 48
pylint $(git ls-files '*.py'): 11
apt update && apt -y install curl jq: 28
echo "::set-output name=REQ_ID::${{needs.build.outputs.REQ_ID}}": 28
echo "::set-output name=SHA::${{needs.build.outputs.SHA}}": 28
echo "${{ needs.running.outputs.REQ_ID }}": 28
echo "${{ needs.running.outputs.SHA }}": 28
sudo rm CUSTOM_PATH_FILE CUSTOM_PATH_DIR && sudo apt-get update: 35
python3 -m pip install -r tests CUSTOM_PATH_FILE: 39
bash utils CUSTOM_PATH_FILE: 9
type -p curl > CUSTOM_PATH_DIR || (apt update && apt install curl -y): 6
curl -fsSL URL | dd of= CUSTOM_PATH_FILE \: 6
&& chmod go+r CUSTOM_PATH_FILE \: 6
&& echo "deb [arch=$(dpkg FLAG) signed-by= CUSTOM_PATH_FILE] URL stable main" | tee CUSTOM_PATH_FILE > CUSTOM_PATH_DIR \: 6
&& apt update \: 6
&& apt install gh -y: 6
bash . CUSTOM_PATH_FILE FLAG: 7
eval $( CUSTOM_PATH_DIR shellenv): 17
cmake -DCMAKE_BUILD_TYPE=Release -B build/: 8
cmake FLAG build/ -j $(($(nproc) CUSTOM_PATH_DIR: 8
export LD_LIBRARY_PATH=`pwd` CUSTOM_PATH_DIR          : 8
USES: ./.github/actions/pyenv: 7
pytest test: 13
df -h .: 17
cargo install cargo-about: 8
rustup target add thumbv7em-none-eabihf: 11
USES: ./.github/actions/setup-clang: 6
USES: ./.github/actions/private-tangle/setup: 10
USES: ./.github/actions/private-tangle/tear-down: 10
make -j src.build NVCC_GENCODE="-gencode=arch=compute_70,code=sm_70": 7
. CUSTOM_PATH_DIR dokkaHtml FLAG FLAG: 6
yarn run lint:js: 8
release_version=ENV_VAR#refs CUSTOM_PATH_DIR: 8
export VERSION=${release_version:17}: 8
export VERSION_SHORT=$(echo ENV_VAR | sed 's CUSTOM_PATH_DIR: 16
echo "VERSION_SHORT=ENV_VAR" >> ENV_VAR: 17
cp . CUSTOM_PATH_FILE5 . CUSTOM_PATH_FILE5: 20
mv config ~ CUSTOM_PATH_DIR: 16
mv oraclekey.cer ~ CUSTOM_PATH_DIR: 16
oci os object put FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG . CUSTOM_PATH_FILE FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_FILE: 8
oci os object put FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG . CUSTOM_PATH_DIR env.VERSION }} CUSTOM_PATH_DIR env.VERSION }}.zip FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_DIR env.VERSION }}.zip: 8
oci os object put FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG . CUSTOM_PATH_DIR env.VERSION }} CUSTOM_PATH_DIR env.VERSION }}.zip.blockmap FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_DIR env.VERSION }}.zip.blockmap: 8
oci os object put FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG . CUSTOM_PATH_DIR env.VERSION }} CUSTOM_PATH_DIR env.VERSION }}.dmg FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_DIR env.VERSION }}.dmg: 8
oci os object put FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG . CUSTOM_PATH_DIR env.VERSION }} CUSTOM_PATH_DIR env.VERSION }}.dmg.blockmap FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_DIR env.VERSION }}.dmg.blockmap: 8
oci os object put FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG . CUSTOM_PATH_DIR env.VERSION }} CUSTOM_PATH_FILE FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_FILE: 8
pip install cffi: 7
~ CUSTOM_PATH_DIR os object put FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG . CUSTOM_PATH_DIR env.VERSION }} CUSTOM_PATH_FILE FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_FILE: 6
docker run -d -p 7700:7700 getmeili CUSTOM_PATH_DIR . CUSTOM_PATH_DIR FLAG=true FLAG=masterKey: 7
make llvm-source: 13
rm -rf llvm-project: 7
find llvm-build -name CMakeFiles -prune -exec rm -r '{}' \;: 6
. CUSTOM_PATH_FILE libLoader: 6
python .ci CUSTOM_PATH_FILE: 15
echo ::group::HTTPIE: 9
pip install httpie: 9
echo "HTTPIE_CONFIG_DIR=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 9
echo "TEST=${{ matrix.env.TEST }}" >> ENV_VAR: 7
echo "Need to debug? Please check: URL: 9
http FLAG 30 FLAG FLAG format FLAG hb "URL || true: 8
docker images || true: 9
docker ps -a || true: 9
docker logs pulp || true: 9
docker exec pulp ls -latr CUSTOM_PATH_FILE/ || true: 9
docker exec pulp cat CUSTOM_PATH_FILE CUSTOM_PATH_DIR || true: 9
docker exec pulp bash -c "pip3 list && pip3 install pipdeptree && pipdeptree": 8
docker run -d -it FLAG=proxy FLAG acme FLAG -p 8080:8080 mosajjal CUSTOM_PATH_DIR -vv &: 14
docker logs proxy | grep socks5 | grep -- "->": 12
docker logs proxy | grep http | grep -- "->": 6
docker stop proxy: 13
sudo echo "ca_bundle: volume CUSTOM_PATH_FILE" >> examples CUSTOM_PATH_FILE: 13
sudo openssl base64 -d -in CUSTOM_PATH_FILE7 | openssl pkcs7 -inform DER -outform PEM -print_certs -out examples CUSTOM_PATH_FILE: 6
sudo echo "est_host: URL >> examples CUSTOM_PATH_FILE: 9
cp CUSTOM_PATH_FILE  data: 9
sudo mkdir -p data CUSTOM_PATH_DIR: 49
docker exec acme-srv sh CUSTOM_PATH_FILE restart: 16
sleep 45: 7
sudo echo "handler_file: CUSTOM_PATH_FILE" >> data CUSTOM_PATH_FILE: 16
sudo chmod -R 777 data CUSTOM_PATH_DIR: 8
sudo echo "est_host: URL >> data CUSTOM_PATH_FILE: 7
echo ::set-output name=tag::ENV_VAR CUSTOM_PATH_DIR: 18
sudo apt-get install -y lld: 9
-- -maxcpucount:2 -verbosity:minimal -nologo: 7
add-apt-repository ppa:git-core CUSTOM_PATH_DIR: 17
echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> ENV_VAR: 28
echo "::set-output name=modcache::$(go env GOMODCACHE)": 20
export FFSRC=ENV_VAR CUSTOM_PATH_DIR: 13
sudo apt remove -y libc++1-14 libc++abi1-14 libunwind-14 python3-lldb-14 # conflict with latest llvm: 7
mv .env.example .env: 7
USES: ./.github/actions/run-integ-test: 10
mvn -q -B -ntp clean install -DskipTests: 16
mvn -B -f docker CUSTOM_PATH_FILE install -am -Pdocker,-main -DskipTests -Ddocker.nocache=true: 30
mvn -B -f tests CUSTOM_PATH_FILE install -am -Pdocker,-main -DskipTests: 14
sudo dmesg: 10
sudo apt install rpm libarchive-tools: 6
npm run electron:linux: 7
npm run electron:mac: 7
npm run electron:windows: 9
mv ui CUSTOM_PATH_DIR motis CUSTOM_PATH_DIR: 9
cp -r deps CUSTOM_PATH_DIR motis CUSTOM_PATH_DIR: 9
buildcache -s: 10
dart pub global activate mono_repo 6.5.7: 9
dart pub global run mono_repo generate FLAG: 12
dart test FLAG: 19
bundle config deployment true: 6
bundle install FLAG 4: 9
cp . CUSTOM_PATH_DIR matrix.target }} CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 7
7z a -ttar -so -an . CUSTOM_PATH_DIR | 7z a -si . CUSTOM_PATH_DIR matrix.target }}.tar.gz: 6
echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> ENV_VAR: 10
npx -p publib publib-maven: 8
npx -p publib publib-pypi: 8
cd .repo && npx projen package:go: 12
npx -p publib publib-golang: 7
. CUSTOM_PATH_DIR test FLAG=false FLAG tests CUSTOM_PATH_FILE: 12
. CUSTOM_PATH_FILE > CUSTOM_PATH_DIR 2>&1: 12
cargo fmt FLAG examples CUSTOM_PATH_FILE FLAG -- FLAG: 9
cargo build FLAG examples CUSTOM_PATH_DIR matrix.example }} CUSTOM_PATH_FILE: 8
cargo run FLAG examples CUSTOM_PATH_DIR matrix.example }} CUSTOM_PATH_FILE: 8
typos: 8
python3 -m pip uninstall -y transformers && python3 -m pip install -e .: 17
echo "${{ matrix.folders }}": 9
matrix_folders=${{ matrix.folders }}: 9
matrix_folders=${matrix_folders CUSTOM_PATH_DIR: 11
echo "$matrix_folders": 9
echo "matrix_folders=$matrix_folders" >> ENV_VAR: 9
python3 -m pytest -v FLAG=${{ matrix.machine_type }}_tests_gpu_${{ matrix.folders }} tests CUSTOM_PATH_DIR matrix.folders }}: 6
cat CUSTOM_PATH_DIR matrix.machine_type }}_tests_gpu_${{ matrix.folders }} CUSTOM_PATH_FILE: 9
git fetch && git checkout ${{ github.sha }}: 18
echo "Runner availability: ${{ needs.check_runner_status.result }}": 6
make docker-build IMG=${{ secrets.ECR_REPOSITORY }} CUSTOM_PATH_DIR env.SPLUNK_OPERATOR_IMAGE_NAME }}:ENV_VAR: 6
echo "Uploading Image to ECR:: ${{ env.SPLUNK_OPERATOR_IMAGE_NAME }}:ENV_VAR": 6
echo "TEST_CLUSTER_NAME=eks-integration-test-cluster-${{ matrix.test }}-ENV_VAR" >> ENV_VAR: 6
USES: Azure/setup-kubectl: 9
curl "${{ steps.dotenv.outputs.AWSCLI_URL}}" -o "awscliv2.zip": 6
sudo . CUSTOM_PATH_DIR FLAG: 13
aws FLAG: 18
curl FLAG FLAG FLAG "URL steps.dotenv.outputs.EKSCTL_VERSION }} CUSTOM_PATH_DIR -s)_amd64.tar.gz" | tar xz -C CUSTOM_PATH_DIR: 6
eksctl version: 6
docker pull ${{ env.SPLUNK_ENTERPRISE_IMAGE }}: 7
docker pull ${{ secrets.ECR_REPOSITORY }} CUSTOM_PATH_DIR env.SPLUNK_OPERATOR_IMAGE_NAME }}:ENV_VAR: 10
docker tag ${{ env.SPLUNK_ENTERPRISE_IMAGE }} ${{ secrets.ECR_REPOSITORY }} CUSTOM_PATH_DIR env.SPLUNK_ENTERPRISE_IMAGE }}: 6
docker push ${{ secrets.ECR_REPOSITORY }} CUSTOM_PATH_DIR env.SPLUNK_ENTERPRISE_IMAGE }}: 6
export EKS_CLUSTER_K8_VERSION=${{ steps.dotenv.outputs.EKS_CLUSTER_K8_VERSION }}: 6
sudo snap install kustomize: 6
make int-test: 6
find . CUSTOM_PATH_DIR -name "*.log" -exec cp {} CUSTOM_PATH_DIR \;: 6
make cleanup: 8
make cluster-down: 9
wget URL env.HDF5_VERSION }} CUSTOM_PATH_DIR env.HDF5_VERSION }}.tar.gz &> CUSTOM_PATH_DIR: 6
tar -xzf hdf5-${{ env.HDF5_VERSION }}.tar.gz: 6
pushd hdf5-${{ env.HDF5_VERSION }}: 6
wget URL env.NETCDF_C_VERSION }}.tar.gz: 6
pushd netcdf-c-${{ env.NETCDF_C_VERSION }}: 6
wget URL env.NETCDF_F_VERSION }}.tar.gz: 6
pushd netcdf-fortran-${{ env.NETCDF_F_VERSION }}: 6
pushd pnetcdf-${{ env.PNETCDF_VERSION }}: 6
export FC= CUSTOM_PATH_DIR: 16
cmake -Wno-dev -DNetCDF_C_LIBRARY= CUSTOM_PATH_FILE -DNetCDF_C_INCLUDE_DIR= CUSTOM_PATH_DIR -DPnetCDF_PATH=' CUSTOM_PATH_DIR -DPIO_ENABLE_FORTRAN=Off -DPIO_ENABLE_LOGGING=On -DPIO_ENABLE_TIMING=Off .. || (cat CMakeFiles CUSTOM_PATH_FILE && cat CMakeFiles CUSTOM_PATH_FILE): 6
pip install openmim: 20
rm -rf .eggs && mim install -e .: 8
python -m pip install . CUSTOM_PATH_DIR: 9
USES: bluefireteam/flutter-gh-pages: 9
make valgrind: 6
gem install dotenv: 11
pip3 install tabulate termcolor: 10
sudo mv gn CUSTOM_PATH_DIR: 11
export LLVM_BIN_PATH=" CUSTOM_PATH_DIR: 18
node .github CUSTOM_PATH_FILE .github CUSTOM_PATH_FILE: 6
rm -rf feeds CUSTOM_PATH_DIR: 16
USES: supabase/setup-cli: 17
echo "CC=gcc" >> ENV_VAR: 6
USES: angular/dev-infra/github-actions/npm/checkout-and-setup-node: 26
yarn stylelint: 7
USES: angular/dev-infra/github-actions/bazel/setup: 22
USES: angular/dev-infra/github-actions/bazel/configure-remote: 21
npm run build:es2015: 8
npm run build:esm5: 6
npm run build:cjs: 8
kubectl wait FLAG=condition=available FLAG=120s deployment CUSTOM_PATH_DIR: 7
mkdir testlog: 6
go test -v .: 16
mkdir -p wrdir && mkdir -p wrdir CUSTOM_PATH_DIR: 9
touch build build CUSTOM_PATH_FILE: 7
sudo apt -y install protobuf-compiler: 10
cd bgfx: 12
".build CUSTOM_PATH_DIR matrix.binsuffix}}" FLAG: 6
sudo apt-get install -yq libcue-dev libfuse-dev libsqlite3-dev libavcodec-dev libavformat-dev libswresample-dev libavutil-dev libswscale-dev libavfilter-dev libchardet-dev: 10
sudo apt-get install -yq libdvdread-dev libdvdnav-dev libbluray-dev: 10
echo "RELADOMO_JDK_HOME=ENV_VAR" >> ENV_VAR: 8
USES: sclorg/build-and-push-action: 6
echo ${{github.ref}}: 8
git submodule update FLAG FLAG FLAG 4: 6
git clone FLAG=1 URL ${{runner.workspace}} CUSTOM_PATH_DIR: 10
cmake FLAG . FLAG ENV_VAR FLAG: 11
certUtil -hashfile artifacts CUSTOM_PATH_FILE SHA256 > artifacts CUSTOM_PATH_FILE: 7
mkdir -p ${{runner.workspace}} CUSTOM_PATH_DIR: 11
source ${{runner.workspace}} CUSTOM_PATH_FILE: 6
echo "=============================================================": 70
USES: extdn/github-actions-m2/magento-coding-standard: 6
export DOCKER_CLI_EXPERIMENTAL=enabled: 11
docker run FLAG FLAG docker CUSTOM_PATH_DIR: 8
echo "SAPLING_VERSION=$(ci CUSTOM_PATH_FILE)" >> ENV_VAR: 7
USES: axel-op/googlejavaformat-action: 12
python -m pip install -U setuptools wheel: 12
python -m tox -e ${{ matrix.toxenv }}: 9
mkdir workspace: 7
make kustomize: 8
python -m pip install FLAG pip setuptools tox coverage codecov: 6
python -m coverage report FLAG: 8
python -m pip install . CUSTOM_PATH_FILE: 10
python -m pip install -e . CUSTOM_PATH_DIR: 8
git config user.name "rabbitmq-ci": 10
git config user.email "rabbitmq-ci": 10
cd code: 7
git clone -b ENV_VAR FLAG 1 URL ENV_VAR: 7
git submodule update -q FLAG libs CUSTOM_PATH_DIR: 12
git submodule update -q FLAG tools CUSTOM_PATH_DIR: 34
mkdir -p libs CUSTOM_PATH_DIR: 6
python tools CUSTOM_PATH_FILE FLAG benchmark FLAG example FLAG examples FLAG tools ENV_VAR: 6
. CUSTOM_PATH_FILE FLAG=gcc: 6
test -f CUSTOM_PATH_DIR && rm -rf CUSTOM_PATH_DIR: 13
sudo cp ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 8
b2 -v: 6
cd $env:BOOST_ROOT: 8
.\b2 headers: 7
sudo apt-get purge FLAG llvm python3-lldb-14 llvm-14: 6
cd redis: 7
ENV_VAR CUSTOM_PATH_DIR fmt -- FLAG: 6
ENV_VAR CUSTOM_PATH_DIR test FLAG: 6
cd pytests;. CUSTOM_PATH_FILE: 8
target CUSTOM_PATH_DIR: 11
s3cmd put -P target CUSTOM_PATH_FILE s3: CUSTOM_PATH_DIR: 9
docker run -i FLAG FLAG acme curlimages CUSTOM_PATH_DIR FLAG -f URL: 30
yarn encore production: 7
symfony security:check: 7
echo ENV_VAR64 | base64 -di > ${{ github.workspace }} CUSTOM_PATH_FILE: 7
USES: ./.github/actions/runTestsTaggedAs: 25
git commit -m "COMMIT_MSG" || echo "Nothing to commit": 17
USES: andymckay/append-gist-action: 7
make site: 8
bundle exec rake parallel:spec['spec\ CUSTOM_PATH_DIR: 7
npm run lint:scss: 6
npm run depcruise: 7
USES: Reedyuk/read-properties: 6
python -m pip install FLAG -r dev-requirements.txt: 8
rm ENV_VAR CUSTOM_PATH_FILE: 9
sudo apt-get install moreutils jo: 9
USES: ./.github/actions/vulkan: 14
git clone URL wiki: 7
cd build && . CUSTOM_PATH_DIR: 8
poetry run coveralls FLAG=github: 8
dotnet tool update dotnet-sonarscanner FLAG . CUSTOM_PATH_DIR: 6
pnpm ci:test: 7
buf generate: 9
python -m tox FLAG 0: 6
cp -r . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 6
npm run doc: 35
sudo apt-get install libsnappy-dev libc6-dev libc6 build-essential: 70
mkdir -p build; cd build: 10
mkdir -p package: 6
sudo du -h -d1 CUSTOM_PATH_DIR: 8
sudo scripts CUSTOM_PATH_FILE: 11
git submodule status library CUSTOM_PATH_DIR > libcore_status: 7
flutter precache: 13
dart pub global activate FLAG path . && patrol: 6
flutter build apk FLAG FLAG=does-not-exist || true: 8
cd game_frontend: 12
pnpm run prepare: 13
git config FLAG url."URL git: CUSTOM_PATH_FILE/: 6
cd contracts: 10
git add ${{ needs.init.outputs.git_path }}: 9
git push origin ${{ needs.init.outputs.head_ref }}: 6
sudo rm CUSTOM_PATH_FILE CUSTOM_PATH_DIR && sudo dpkg FLAG # Speed up installation and get rid of unwanted lists: 6
USES: ./.github/sccache: 10
git push FLAG FLAG: 15
USES: JasonEtco/is-sponsor-label-action: 20
USES: ./.github/actions/set-container-repo-and-determine-image-tag: 13
sudo sh -c 'echo 0 > CUSTOM_PATH_DIR: 12
timeout FLAG=SIGABRT 60m . CUSTOM_PATH_DIR: 9
sudo apt clean && sudo apt update: 9
sudo apt-get -y install clang: 7
docker-compose -f docker-compose.yml up -d: 12
yarn run test:e2e: 8
composer config -g cache-dir "${{ env.COMPOSER_CACHE }}": 10
sudo chown -R runner:runner CUSTOM_PATH_DIR: 7
cp -r .. CUSTOM_PATH_DIR ./: 18
ls -Ahl: 12
USES: ./.github/actions/start-localstack: 8
echo "BULL_MQ_PRO_NPM_TOKEN=${{ secrets.BULL_MQ_PRO_NPM_TOKEN }}" >> ENV_VAR: 6
sudo apt install automake autoconf libtool libtool-bin: 16
nuget restore $env:Solution_Name: 7
cargo +nightly update -Zminimal-versions: 7
sudo apt install graphviz: 20
brew install docker colima: 7
sudo ln -sf ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 6
USES: dawidd6/action-delete-branch: 27
make proto-lint: 12
echo "## ${{ matrix.name }}" > image-digest CUSTOM_PATH_DIR matrix.name }}.txt: 6
cmake FLAG build -j $(nproc): 11
bazel info: 8
git config FLAG user.name 'reactorbot': 10
git config FLAG user.email '32325210+reactorbot': 10
pod lib lint FLAG FLAG: 6
USES: sangonzal/repository-traffic-action: 9
(cd test-dev && make -j 3): 6
USES: open-watcom/setup-watcom: 7
git fetch origin ENV_VAR: 18
git reset FLAG FETCH_HEAD: 11
PATH=ENV_VAR CUSTOM_PATH_DIR: 17
cargo +nightly clippy FLAG FLAG -- -D warnings: 6
sudo apt install libudev-dev: 7
. CUSTOM_PATH_FILE ${{matrix.arch}} unix: 10
. CUSTOM_PATH_FILE win64 windows: 10
copy LICENSE.txt platforms\windows: 9
"%programfiles(x86)%\Inno Setup 6\iscc.exe" platforms\windows\script.iss: 9
FLAG husarnet CUSTOM_PATH_DIR \: 16
FLAG husarnet CUSTOM_PATH_DIR: 8
docker manifest push husarnet CUSTOM_PATH_DIR: 7
cmake FLAG build FLAG 2: 11
USES: nf-core/setup-nextflow: 7
python setup.py sdist FLAG=zip: 9
git pull origin "ENV_VAR": 7
make changelog: 9
& . CUSTOM_PATH_FILE1: 10
USES: symfonycorp/security-checker-action: 22
echo "::add-path::${{ github.workspace }} CUSTOM_PATH_DIR: 7
sudo apt-get install -y socat: 6
ginkgo version: 6
USES: rossjrw/pr-preview-action: 12
cd extensions CUSTOM_PATH_DIR: 10
USES: ./.github/actions/create-pr: 6
USES: ./.github/actions/node/setup: 76
USES: ./.github/actions/node/16: 13
USES: ./.github/actions/node/18: 12
USES: ./.github/actions/node/latest: 56
echo "sha=ENV_VAR" >> ENV_VAR: 11
git update-index FLAG .npmrc: 9
USES: elastic/apm-pipeline-library/.github/actions/check-dependent-jobs: 12
USES: ms-jpq/sync-dockerhub-readme: 8
cp -r CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 13
tox -e typecheck: 6
git rm -rf .: 11
dotnet workload install maui-mobile: 6
dotnet restore ${{env.UI_PROJECT_PATH}}: 6
dotnet test ${{env.UI_TEST_PROJECT_PATH}}: 6
dotnet test ${{env.CORE_TEST_PROJECT_PATH}}: 6
dotnet test ${{env.INFRASTRUCTURE_PROJECT_PATH}}: 6
PP_PATH=ENV_VAR CUSTOM_PATH_FILE: 19
cp ENV_VAR ~ CUSTOM_PATH_DIR Profiles: 16
bash src CUSTOM_PATH_FILE: 9
which node: 11
yarn install FLAG=skip-build FLAG: 7
echo "ENV_VAR\Python\Scripts" >> ENV_VAR: 9
make test-acc: 6
ctest -j2 FLAG -C ENV_VAR: 6
bundle install FLAG=3 FLAG=3: 10
sudo chown -R ENV_VAR:ENV_VAR CUSTOM_PATH_DIR: 10
USES: ./actions/deploy: 9
docker login -u ${{ secrets.docker_user }} -p ${{ secrets.docker_password }}: 6
docker build -t alephdata CUSTOM_PATH_DIR .: 9
docker push alephdata CUSTOM_PATH_DIR: 9
echo ${{ secrets.FIREBASE_OPTIONS }} | base64 FLAG > lib CUSTOM_PATH_FILE: 6
echo "SHORT_SHA=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 14
USES: ./.github/workflows/test: 19
git clone FLAG=1 URL .. CUSTOM_PATH_DIR: 32
docker image ls FLAG "{{.Repository}}:{{.Tag}}" | grep "ENV_VAR" || { echo "Image ENV_VAR was not found!" ; exit 1; }: 20
echo "ERROR == Expected to find image from cache ENV_VAR"; exit -1: 18
cd Tests: 13
python run_tests.py FLAG: 11
rm build CUSTOM_PATH_FILE: 9
echo "PLATFORM=${{ github.event.inputs.platform }}" >> ENV_VAR: 6
brew config: 16
eval $(opam env): 34
FLAG "type=local,src= CUSTOM_PATH_FILE-cache" \: 16
FLAG "type=local,dest= CUSTOM_PATH_FILE-cache" \: 15
echo "TAG_NAME=Test-manual-`date +"%F%H%M"`" >> ENV_VAR: 12
echo "RELEASE_NAME=Test manual `date +"%F%H%M"`" >> ENV_VAR: 12
echo ${{ steps.create-release-data.outputs.upload_url }}: 7
npx tsc FLAG: 14
mkdir -p logs: 9
USES: ./.github/actions/download: 27
USES: ./.github/actions/run-python-test-set: 9
USES: ./.github/actions/allure-report-generate: 6
sudo apt-get install -y $(. CUSTOM_PATH_FILE -a linux CUSTOM_PATH_DIR: 6
cargo install grcov FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG 0.8.13: 6
USES: TapTap21/docker-remote-deployment-action: 7
sentry-cli releases new -p ENV_VAR ENV_VAR: 7
sentry-cli releases set-commits FLAG ENV_VAR: 9
sentry-cli releases finalize ENV_VAR: 16
sentry-cli releases deploys ENV_VAR new -e ENV_VAR: 6
npm run test-integration: 8
sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB: 6
cmake FLAG build/ FLAG Release: 13
cmake FLAG build/ FLAG Release FLAG package: 9
cmake CUSTOM_PATH_FILE: 14
rm -rf dist/: 13
npm install .. CUSTOM_PATH_DIR: 6
npm install -g auto-changelog: 7
cd ImageMagick-Windows: 7
CloneRepositories.cmd URL shallow: 11
call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat": 23
cd ImageMagick-Windows\VisualMagick\configure: 10
msbuild configure.2022.sln CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 9
set CUSTOM_PATH_DIR solution=<solution: 7
msbuild %solution% CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE}}: 6
echo ok: 6
USES: tj-actions/glob: 7
pip install -U poetry: 6
pipenv run yarn algob deploy: 21
pipenv run yarn algob run scripts CUSTOM_PATH_FILE: 40
bundle config set without 'tools benchmarks docs': 10
echo "##[set-env name=GOPATH;]$(dirname ENV_VAR)": 11
echo "##[add-path]$(dirname ENV_VAR) CUSTOM_PATH_DIR: 11
git apply . CUSTOM_PATH_FILE: 7
wait: 17
USES: turtlebrowser/get-conan: 27
echo ${{ steps.version.outputs.version }}: 6
dd if= CUSTOM_PATH_DIR of=100MB.bin bs=1M count=100: 8
dd if= CUSTOM_PATH_DIR of=keyfile bs=1 count=4096: 9
 CUSTOM_PATH_DIR -eHfk keyfile 100MB.bin 100MB.enc: 6
USES: zendesk/checkout: 15
USES: zendesk/setup-ruby: 13
USES: google-github-actions/get-secretmanager-secrets: 27
source .composer-root-version: 12
echo "COMPOSER_ROOT_VERSION=ENV_VAR" >> ENV_VAR: 12
docker kill $(docker ps -q) || exit 0: 9
composer require FLAG squizlabs CUSTOM_PATH_DIR: 8
vendor CUSTOM_PATH_DIR FLAG=PSR12 app: 13
composer require FLAG nunomaduro CUSTOM_PATH_DIR: 7
vendor CUSTOM_PATH_DIR analyse app -c . CUSTOM_PATH_FILE  FLAG=4 FLAG: 8
composer require ${{ matrix.variant }} FLAG: 11
ctest -C Release: 10
cd linux: 6
msbuild quake2.sln CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
sudo apt-get install -y mesa-common-dev libglu1-mesa-dev : 6
sudo apt-get install -y libgmp-dev libxkbcommon-x11-0 patchelf: 6
sh install CUSTOM_PATH_DIR runner.os }} CUSTOM_PATH_FILE: 12
export PYTHON_VERSION=${{ matrix.pyversion }}: 7
USES: martijnhols/actions-cache: 11
make packer: 21
brew install bash coreutils: 8
make test-clean: 37
make prepare-test: 34
Scripts CUSTOM_PATH_FILE ${{ matrix.platforms }}: 7
sudo xcode-select -s ' CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 18
USES: ./.github/actions/backup-restore-test: 9
sudo dpkg FLAG arm64: 10
echo "CYPRESS_RECORD_KEY=${{ secrets.CYPRESS_RECORD_KEY }}" >> ENV_VAR: 15
mkdir -p client CUSTOM_PATH_DIR: 7
npm run seed: 7
mkdir -p public CUSTOM_PATH_DIR: 8
R CMD INSTALL .: 10
USES: Eomm/why-don-t-you-tweet: 6
bin CUSTOM_PATH_DIR version: 7
echo "SKIPPED": 13
.\build.bat all: 9
python -m pip install -U setuptools: 8
USES: frenck/action-setup-yq: 6
sudo apt-get update -yq: 22
cd cmake_build: 11
cp CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR &&: 9
ln -sf CUSTOM_PATH_FILE ~ CUSTOM_PATH_DIR &&: 13
. ~ CUSTOM_PATH_DIR && : 8
sudo apt-get install -y libopenblas-dev: 13
make install-lint: 7
make install_deps: 6
sudo loginctl enable-linger ENV_VAR: 6
sudo systemctl start user@ENV_VAR.service: 6
echo "XDG_RUNTIME_DIR= CUSTOM_PATH_DIR >> ENV_VAR: 7
7z a -ttar -xr!node_modules -r build.tar .: 6
7z x build.tar && del build.tar: 6
npm run test:test: 6
7z a -ttar -r coverage.tar coverage: 6
cp hbc CUSTOM_PATH_DIR dist CUSTOM_PATH_DIR: 6
cp executables CUSTOM_PATH_FILE dist CUSTOM_PATH_FILE: 6
cp executables CUSTOM_PATH_FILE dist CUSTOM_PATH_DIR: 6
brew link FLAG python: 13
. CUSTOM_PATH_DIR version FLAG: 7
USES: ./.github/actions/common-setup: 19
make start: 14
cp config.template.json tmp.json: 8
USES: checkmarx-ts/checkmarx-cxflow-github-action: 6
yarn lerna run FLAG \*\* CUSTOM_PATH_DIR matrix.package-name }} FLAG FLAG build: 6
cd packages CUSTOM_PATH_DIR matrix.package-name }}: 6
npm run build:tests: 6
PEER_DEPS=$(node -e 'console.log(Object.entries(require(". CUSTOM_PATH_FILE || {}).map(([p,v]) => `${p}@${v}`).join(" "))'): 15
! [ -z "ENV_VAR" ] && echo "(install targets) PEER_DEPS='ENV_VAR'" || true: 15
! [ -z "ENV_VAR" ] && npm install FLAG ENV_VAR || true: 14
deno test -A FLAG: 6
echo "git_revision=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 6
aws s3 cp FLAG ENV_VAR CUSTOM_PATH_DIR "s3: CUSTOM_PATH_DIR: 8
docker buildx install: 11
USES: docker://k8slt/github-labeler-action: 6
nvcc FLAG: 13
GIT_LFS_SKIP_SMUDGE=1 git clone URL: 6
echo "PWD: ENV_VAR": 10
echo "CHECKOUT_REPO=${{ github.repository }}" >> ENV_VAR: 23
echo "CHECKOUT_REF=refs CUSTOM_PATH_DIR >> ENV_VAR: 15
USES: artursouza/sticky-pull-request-comment: 50
BASE_STR="PERF|ENV_VAR|ENV_VAR|ENV_VAR|ENV_VAR|ENV_VAR": 8
echo "Base string is ENV_VAR": 8
SUFFIX=$(echo ENV_VAR | sha1sum | head -c 10): 10
echo "Suffix is ENV_VAR": 8
TEST_PREFIX="daprprfENV_VAR": 8
echo "Test prefix is ENV_VAR": 10
echo "TEST_PREFIX=ENV_VAR" >> ENV_VAR: 10
echo "TEST_RESOURCE_GROUP=Dapr-Perf-ENV_VAR" >> ENV_VAR: 6
make setup-helm-init: 6
USES: hacs/actions: 9
mv ${{github.workspace}} CUSTOM_PATH_FILE ${{github.workspace}} CUSTOM_PATH_FILE: 6
msbuild CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
USES: davidSchuppa/base64Secret-toFile-action: 8
tmp=$(mktemp): 20
sudo systemctl restart docker.service: 31
echo ${{ secrets.GITHUB_TOKEN }} | gh auth login FLAG: 14
USES: newrelic/repolinter-action: 7
rm -rf public CUSTOM_PATH_DIR: 7
rm -rf assets CUSTOM_PATH_DIR: 11
rm -rf assets CUSTOM_PATH_FILE: 27
curl -L URL -O: 7
USES: snyk/actions/gradle-jdk11: 6
make install -j4: 15
yarn ui build: 22
yarn react build: 6
yarn ${{ matrix.package }} build: 10
USES: ./.github/workflows/push-results: 6
make ci-cs: 6
yarn lint:all: 8
mkdir out: 15
echo "::set-output name=sha_short::$(echo ${{ github.sha }} | cut -c -7)": 6
echo "Coverage output directory: ${{ env.COVERAGE_OUTPUT_DIR }}": 6
cat ${{ env.COVERAGE_OUTPUT_DIR }} CUSTOM_PATH_FILE: 6
s3FullURI="s3: CUSTOM_PATH_DIR secrets.S3_COVERAGE_BUCKET_NAME }} CUSTOM_PATH_DIR: 6
echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version FLAG generic)" >> "ENV_VAR": 9
USES: pulumi/pulumi-package-publisher: 9
USES: ./.github/actions/go-common: 6
invoke build: 7
npm init -y: 14
dotnet test FLAG FLAG: 6
echo "::set-output name=branch::ENV_VAR#refs CUSTOM_PATH_DIR: 15
curl FLAG -o- -L URL | bash: 6
echo ${{ steps.bump_version.outputs.next-version }}: 7
cat dev-requirements.in | grep tox | xargs pip install: 9
tox -- soda -k soda CUSTOM_PATH_DIR: 6
sudo apt-get install -y libsasl2-dev: 6
npm version FLAG FLAG ENV_VAR: 6
sed -i "s CUSTOM_PATH_DIR package.json: 7
git FLAG diff FLAG HEAD: 8
USES: michaelkaye/setup-matrix-synapse: 7
docker-compose ps -a: 7
ps aux|grep forward|grep -v grep|awk '{print $2}'|xargs kill -9: 11
git fetch FLAG FLAG origin: 13
echo '${{ steps.file_changes.outputs.files}}': 10
make test-functional: 9
cd work: 8
find ENV_VAR -type f -name 'jacocoRootReport.xml': 10
export files='': 10
export files="${files%?}": 10
echo $files: 12
python3 -m pip install -r dev-requirements.txt: 8
dotnet test FLAG net6.0 . CUSTOM_PATH_FILE: 9
aws configure set aws_access_key_id ${{ secrets.DEV_AWS_ACCESS_KEY }}: 7
aws configure set aws_secret_access_key ${{ secrets.DEV_AWS_SECRET_KEY }}: 7
aws configure set default.region us-east-1: 11
sky status: 12
go test -race -v -coverprofile=coverage.txt -covermode=atomic . CUSTOM_PATH_DIR: 8
cp tests CUSTOM_PATH_DIR .: 8
USES: maadhattah/combine-dependabot-prs: 6
make install-test: 11
make fmtcheck: 11
make venv: 15
sudo apt-get install -y libusb-1.0-0-dev libudev-dev: 12
sudo apt -y install clang-10 llvm libelf-dev gcc-multilib libpcap-dev linux-tools-$(uname -r) elfutils dwarves git libbsd-dev bridge-utils unzip build-essential bison flex iperf iproute2 nodejs socat ethtool: 6
git clone URL iproute2-main: 25
cd iproute2-main CUSTOM_PATH_DIR: 25
DESTDIR=build make install: 25
cd iproute2-main/: 25
export PKG_CONFIG_PATH=ENV_VAR:`pwd` CUSTOM_PATH_DIR && LIBBPF_FORCE=on LIBBPF_DIR=`pwd` CUSTOM_PATH_DIR . CUSTOM_PATH_DIR && make && sudo cp -f tc CUSTOM_PATH_DIR CUSTOM_PATH_DIR && cd -: 25
loxilb-ebpf CUSTOM_PATH_FILE: 25
sudo -E env "PATH=ENV_VAR" make: 25
sudo -E env "PATH=ENV_VAR" make test: 24
docker run -u root FLAG SYS_ADMIN   FLAG unless-stopped FLAG -dit -v CUSTOM_PATH_DIR FLAG loxilb ghcr.io CUSTOM_PATH_DIR: 25
pwd && ls && sudo -E env "PATH=ENV_VAR" make docker-cp: 19
docker exec -dit loxilb mkllb_bpffs: 20
id=`docker ps -f name=loxilb | cut  -d " "  -f 1 | grep -iv  "CONTAINER"` && docker commit $id ghcr.io CUSTOM_PATH_DIR: 25
docker stop loxilb && docker rm loxilb: 19
cd cicd CUSTOM_PATH_DIR: 113
#. CUSTOM_PATH_FILE: 9
USES: Azure/webapps-deploy: 7
USES: twisted/python-info-action: 18
USES: akheron/dependabot-cron-action: 7
poetry self add "poetry-dynamic-versioning[plugin]": 8
pwd; ls -la: 7
nuget sources add -name github -Source URL -Username yiyungent -Password ${{ secrets.GITHUB_TOKEN }}: 9
id=$(echo ENV_VAR | cut -dv -f2): 6
echo "id=$id" >> ENV_VAR: 9
cp .pio CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 20
git config FLAG user.email "perini.davide";: 9
git config FLAG user.name "Davide Perini";: 9
git add . CUSTOM_PATH_FILE;: 45
git commit -m "COMMIT_MSG";: 9
git push;: 9
cd currentbranch;: 18
tar -xvf . CUSTOM_PATH_FILE: 13
ARCH=linux CUSTOM_PATH_DIR make docker-build-multi-arch: 31
python -m build -s: 7
export REPO=$(basename ENV_VAR) &&: 13
cd ENV_VAR CUSTOM_PATH_DIR && mkdir src/ &&: 9
mv ENV_VAR/ src/ && mkdir ENV_VAR/ && mv src/ ENV_VAR/ && cd ENV_VAR/ &&: 6
npm run crowdin download: 8
npm run ghbuild: 6
. CUSTOM_PATH_DIR :app:assembleDebug: 17
cat snap CUSTOM_PATH_FILE: 6
choco install zip: 10
pre-commit run FLAG FLAG always: 6
ENV_VARrogressPreference = "SilentlyContinue": 11
Invoke-WebRequest URL -OutFile rustup-init.exe: 8
del rustup-init.exe: 7
rustup target add FLAG stable ${{ matrix.target }}: 6
echo "::set-output name=base::$(jq -r '.base.sha' pr.json)": 8
echo "::set-output name=head::$(jq -r '.head.sha' pr.json)": 8
gcloud container clusters get-credentials ${{ env.clusterName1 }} FLAG ${{ env.zone }}: 7
CONTEXT_1="$(kubectl config view | grep ${{ env.clusterName1 }} | head -1 | awk '{print $2}')": 6
gcloud container clusters get-credentials ${{ env.clusterName2 }} FLAG ${{ env.zone }}: 7
CONTEXT_2="$(kubectl config view | grep ${{ env.clusterName2 }} | head -1 | awk '{print $2}')": 6
cilium status FLAG FLAG ${{ steps.contexts.outputs.context1 }}: 7
cilium clustermesh status FLAG FLAG ${{ steps.contexts.outputs.context1 }}: 12
cilium clustermesh status FLAG FLAG ${{ steps.contexts.outputs.context2 }}: 12
cilium status FLAG ${{ steps.contexts.outputs.context1 }}: 6
cilium clustermesh status FLAG ${{ steps.contexts.outputs.context1 }}: 6
cilium status FLAG ${{ steps.contexts.outputs.context2 }}: 6
cilium clustermesh status FLAG ${{ steps.contexts.outputs.context2 }}: 6
USES: johnwason/vcpkg-action: 15
echo "$(cat .next CUSTOM_PATH_FILE)" >> ENV_VAR: 8
echo EOF >> ENV_VAR: 12
make check-clippy: 8
make build-cluster: 6
USES: docker://github/super-linter:v3: 8
env | grep '^JAVA': 11
docker pull docker.pkg.github.com CUSTOM_PATH_DIR: 14
python -m pip wheel -r requirements-dev.txt: 7
python setup.py clean: 16
sudo wget -q URL -O CUSTOM_PATH_FILE: 8
mkdir -p AppDir CUSTOM_PATH_DIR: 17
USES: DenverCoder1/doxygen-github-pages-action: 6
USES: ./.github/actions/stage2-setup: 18
${{inputs.SUDO}} ${{inputs.BINARY}} logs earthly-buildkitd || true: 15
docker push cardanocommunity CUSTOM_PATH_DIR: 7
echo ENV_VAR | jq: 10
echo "img_file= CUSTOM_PATH_FILE" >> ENV_VAR: 6
ssh-add ~ CUSTOM_PATH_DIR: 14
echo "quay.io CUSTOM_PATH_DIR > images-blue-x86_64.txt: 7
pytest -vv: 23
make install-fast: 13
cd ENV_VAR/: 8
tag_name="ENV_VAR##* CUSTOM_PATH_DIR: 12
pip install cibuildwheel: 21
sudo ln -s FLAG CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 16
sudo service redis-server start: 9
make artifacts: 8
USES: Homebrew/actions/bump-formulae: 7
bash .github CUSTOM_PATH_DIR matrix.cuda-version }}-${{ runner.os }}.sh: 9
source .github CUSTOM_PATH_DIR matrix.cuda-version }}-${{ runner.os }}-env.sh: 9
USES: ./.github/actions/prepare-build-env: 18
ls -l dist CUSTOM_PATH_DIR: 6
rm yarn.lock: 7
yarn list FLAG=0: 10
git config FLAG user.name "John Doe": 8
echo ${{github.actor}}: 6
mvn -N io.takari:maven:wrapper -Dmaven=3.8.2: 8
python -m pip install FLAG -r requirements-setuptools.txt: 6
USES: tsuyoshicho/action-mypy: 7
source .ci CUSTOM_PATH_FILE: 82
make linux: 16
ls -lh dist: 17
build-docker-images CUSTOM_PATH_FILE: 9
cat .env > ENV_VAR: 11
echo "GITHUB_REF_NAME="ENV_VAR% CUSTOM_PATH_DIR >> ENV_VAR: 8
make clean build: 6
cargo +${{ env.RUST_TOOLCHAIN }} test-bpf FLAG .. CUSTOM_PATH_DIR -- FLAG FLAG 1: 6
USES: tomchv/wait-my-workflow: 7
curl -u ":ENV_VAR" \: 6
yarn install FLAG=false: 7
echo ENV_VAR | base64 FLAG | gpg FLAG FLAG FLAG FLAG: 12
cmake FLAG tests CUSTOM_PATH_DIR: 8
cmake FLAG build/: 24
brew update-reset: 11
USES: elastic/apm-pipeline-library/.github/actions/buildkite: 10
swig -version: 10
echo "GOPATH=${{ github.workspace }}" >> ENV_VAR: 33
python -m coverage html: 8
docker cp . CUSTOM_PATH_FILE postgres:/: 10
docker exec -i postgres sh -c 'exec psql -U postgres -d testdb < CUSTOM_PATH_FILE': 8
chmod +x . CUSTOM_PATH_FILE : 8
sh . CUSTOM_PATH_FILE "${{ github.event.inputs.urlOld }}" "${{ github.event.inputs.urlNew }}" "${{ github.event.inputs.currentVersion }}" "${{ github.event.inputs.migratingVersion }}" "${{ github.event.inputs.database }}" "${{ github.event.inputs.os }}" "${{ secrets.MIGRATION_EMAIL }}" "${{ secrets.MIGRATION_PASSWORD }}" "${{ secrets.MIGRATION_PAT }}" | tee "migration-automation CUSTOM_PATH_FILE": 6
cp . CUSTOM_PATH_FILE migration-automation CUSTOM_PATH_DIR: 6
docker cp . CUSTOM_PATH_FILE sqlserver-test: CUSTOM_PATH_FILE: 10
docker exec sqlserver-test CUSTOM_PATH_DIR -S localhost -U SA -P 'YourStrongPassw0rd' -d testdb -i CUSTOM_PATH_FILE: 10
psql -d testdb -f ". CUSTOM_PATH_FILE": 10
sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -Q 'SELECT @': 6
sqlcmd -U SA -P 'YourStrongPassw0rd' -d testdb -i . CUSTOM_PATH_FILE: 10
USES: ./.github/actions/install-node-deps: 16
sudo apt install -y gettext: 7
conda env update FLAG environment.yml FLAG base: 8
. CUSTOM_PATH_FILE CUSTOM_PATH_DIR build: 15
USES: ./.github/actions/setup-godot-deps: 27
. CUSTOM_PATH_FILE ENV_VAR false ENV_VAR: 6
sudo apt-get install build-essential scons pkg-config libx11-dev libxcursor-dev libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev: 6
. CUSTOM_PATH_FILE ENV_VAR false: 21
BRANCH=ENV_VAR#refs CUSTOM_PATH_DIR: 7
tag=$(git describe FLAG FLAG=0): 12
. CUSTOM_PATH_DIR -B clean deploy -Pdocumentation: 6
mkdir ${{github.workspace}} CUSTOM_PATH_DIR && tools CUSTOM_PATH_FILE ${{github.workspace}}  ${{github.workspace}} CUSTOM_PATH_DIR: 6
echo "docs_only=${{ fromJSON(steps.changes.outputs.all_count) == fromJSON(steps.changes.outputs.docs_count) && fromJSON(steps.changes.outputs.docs_count) > 0 }}" >> ENV_VAR: 16
-p  CUSTOM_PATH_DIR \: 16
python -m coverage html FLAG FLAG: 16
dapr FLAG: 12
make pre-commit: 6
chmod 777 autobahn-tests CUSTOM_PATH_DIR: 6
git fetch origin ENV_VAR:ENV_VAR: 7
>> ENV_VAR: 7
echo "::add-path:: CUSTOM_PATH_DIR: 9
wasm-pack test FLAG: 14
pip cache purge: 8
sudo apt-get install -yq libelf-dev zlib1g-dev: 8
go install "github.com CUSTOM_PATH_DIR: 13
ld FLAG: 8
make format-check: 14
file . CUSTOM_PATH_DIR: 20
"c:\Program Files\Git\bin\bash.exe" -c "git checkout -f $(git -c user.name=x -c user.email=x commit-tree $(git hash-object -t tree CUSTOM_PATH_DIR < CUSTOM_PATH_DIR || :": 43
. CUSTOM_PATH_DIR git-clean: 74
Get-ChildItem -Force -Recurse: 37
ls -lAR: 38
go generate: 16
export PATH= CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 10
cd ci_tools_atomic_dex: 17
nimble build -y: 13
echo skipped: 6
sudo apt-get install fonts-noto-color-emoji: 8
mvn FLAG install -DskipTests: 9
cd e2e-tests: 15
npm run backend:dropAllDBTables: 7
make -s build_generated: 7
make test HARNESS_JOBS=ENV_VAR:-4} OPENSSL_TEST_RAND_ORDER=0: 8
USES: perl-actions/install-with-cpanm: 15
npm version ENV_VAR FLAG: 8
docker run -v ENV_VAR CUSTOM_PATH_DIR -e HUGO_REFLINKSERRORLEVEL=ERROR FLAG grafana CUSTOM_PATH_DIR CUSTOM_PATH_DIR -c 'make hugo': 10
USES: ./actions/has-matching-release-tag: 9
USES: ./actions/docs-target: 12
git clone FLAG FLAG FLAG 1 -b master URL secrets.WEBSITE_SYNC_TOKEN }} CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 13
USES: hyperledger/indy-shared-gha/.github/actions/get-release-info: 6
python -m pip install virtualenv: 14
USES: asyncapi/.github/.github/actions/get-node-version-from-package-lock: 12
DATE=`date "+%Y%m%d"`: 14
run_number=$(printf "%02d" $run_number): 14
build_number="ENV_VAR${run_number}": 14
echo '$build_number='$build_number: 14
echo "BUILD_NUMBER=$build_number" >> ENV_VAR: 14
cargo test FLAG FLAG target FLAG eden CUSTOM_PATH_FILE: 37
sudo rm -fr ENV_VAR && mkdir ENV_VAR: 10
npm run test:cover: 12
bash  . CUSTOM_PATH_FILE: 10
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv torchaudio: 6
cargo hack FLAG check: 6
npm test -- FLAG FLAG: 6
echo "Skipping CI for docs & contrib files": 7
package_version="$(printf '%(%Y%m%d)T.${{ github.run_number }}')": 8
echo "package_version=${package_version}" >> ENV_VAR: 9
echo "tag_name=${tag_name}" >> ENV_VAR: 6
git tag "${tag_name}": 6
pytest -v FLAG=tee-sys mamba CUSTOM_PATH_DIR: 6
mamba create -n test_env xtensor -c conda-forge -y: 6
mamba env create -f mamba CUSTOM_PATH_FILE: 6
mamba env update -f mamba CUSTOM_PATH_FILE: 6
swig -swiglib: 7
npm run test:playwright: 6
nmake CUSTOM_PATH_DIR: 8
mkdir package CUSTOM_PATH_DIR: 11
copy "ENV_VARnv:Qt5_Dir} CUSTOM_PATH_FILE" package/: 8
sudo apt-get install libvorbis-dev zlib1g-dev libhunspell-dev x11proto-record-dev : 8
sudo ln -sf CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
cd OpenCC/: 7
make PREFIX= CUSTOM_PATH_DIR -j$(nproc): 7
git config FLAG user.name github-actions[bot]: 11
git config FLAG user.email github-actions[bot]: 6
npm run link: 13
sudo apt-get install -y wget: 10
chmod -R ugo+w .: 8
brew install cmake: 19
export KIND_IMAGE=kindest CUSTOM_PATH_DIR matrix.k8s-version.version }}: 9
make kind-create-cluster: 11
make kind-load-image-archive: 11
export USE_CONFIG=${{ join(matrix.config.values, ',') }}: 10
make kind-install-kyverno: 11
USES: ./.github/actions/kyverno-wait-ready: 11
USES: ./.github/actions/kyverno-logs: 11
sed -i ' CUSTOM_PATH_DIR tryInvokeMiddleware CUSTOM_PATH_DIR try{console.log("Invoke middleware", mw.name);}catch(x){}' node_modules CUSTOM_PATH_FILE: 7
node build: 13
xz -9e FLAG FLAG nexe CUSTOM_PATH_DIR -c > parpar.xz: 6
go test -covermode=count -coverprofile=coverage.out . CUSTOM_PATH_DIR: 6
npm version ENV_VAR: 17
sudo timedatectl set-timezone Asia CUSTOM_PATH_DIR: 9
yarn changeset version FLAG: 8
npm init FLAG: 6
npm install && npm run bootstrap: 19
echo ${{github.event.inputs.npm_channel}}: 8
git reset FLAG main: 6
echo "SLACK_FOOTER=<ENV_VAR CUSTOM_PATH_DIR here to go to the job logs>" >> ENV_VAR: 27
USES: ocaml/setup-ocaml: 12
pnpm prettier:check: 6
docker compose -f docker-compose.dev.yml down: 7
docker compose -f docker-compose.dev.yml up -d: 7
sudo apt-get install libz3-dev: 6
sf org create scratch -f config CUSTOM_PATH_FILE -a scratch-org -d -y 1 FLAG=preview: 16
USES: getsentry/action-github-commit: 7
python get-pip.py: 6
dnf -y install epel-release dnf-plugins-core python3-dnf-plugins-core util-linux FLAG: 6
. CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG: 23
USES: cytopia/upload-artifact-retry-action: 6
echo "::info ::Scanned": 8
git tag vENV_VAR: 12
git push FLAG origin: 10
echo "::set-output name=date::`date -u +'%Y-%m-%dT%H:%M:%SZ'`": 8
${{matrix.setenvs}}: 9
${{matrix.depcmds}}: 7
rm -rf core CUSTOM_PATH_DIR: 9
sudo apt-get -yq update: 12
cargo bench -- FLAG bencher | tee output.txt: 6
mv . CUSTOM_PATH_DIR github.sha }} CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR && rm -rf . CUSTOM_PATH_DIR github.sha }}: 8
echo "NX_RUN_GROUP is ${{ env.NX_RUN_GROUP }}": 6
git config FLAG user.email test: 7
npx nx-cloud stop-all-agents: 11
npx nx-cloud start-agent: 11
echo "This job's status is ${{ job.status }}.": 12
echo "current_version=$current_version" >> ENV_VAR: 8
chmod 600 . CUSTOM_PATH_DIR: 10
cp -r public CUSTOM_PATH_DIR build/ &&: 9
python -m pip install -e '.[dev]': 6
dotnet build -c Debug: 6
source CUSTOM_PATH_DIR matrix.ros_distro }} CUSTOM_PATH_FILE: 9
rm Cargo.lock: 9
sudo bash . CUSTOM_PATH_FILE: 23
. CUSTOM_PATH_DIR clean install -DskipTests: 6
sudo apt-get install -y mysql-server mysql-client make unzip g++ etcd curl git wget: 7
pip install ".[dev]": 22
echo "REPO_NAME=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 7
cd ENV_VARibrariesPath: 8
git checkout release CUSTOM_PATH_DIR: 8
USES: ./.github/bootstrap_platform: 11
${{ matrix.config.preamble }}: 8
cmake FLAG build FLAG FLAG Release: 9
USES: Mudlet/gsheets-append-action: 8
make -C examples: 8
sudo apt install clang-format: 13
pushd tcms/ && . CUSTOM_PATH_DIR && popd: 7
export LANG=en-us: 8
npm install FLAG create-dmg: 12
ls : 6
USES: ./../action/.github/actions/check-sarif: 6
USES: vvvv/PublishVLNuget: 8
USES: avakar/tag-and-release: 9
sudo -E apt-get -qq install $(curl -fsSL git.io CUSTOM_PATH_DIR rdate: 8
wget -q URL -O toolchain-image.img: 8
mkdir openwrt-ro openwrt workdir overlay: 8
sudo mount -o loop toolchain-image.img openwrt-ro: 8
sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt: 8
mkdir -p dl: 8
echo "::set-output name=SOURCE_COMMIT::$(git log -1 FLAG='%H')": 8
make download -j16 && make download -j16: 8
cd data CUSTOM_PATH_DIR: 14
sed -i "s CUSTOM_PATH_DIR distfeeds*.conf: 24
echo "dtparam=i2c_arm=on,audio=on" >> target CUSTOM_PATH_FILE: 6
cp .. CUSTOM_PATH_FILE files CUSTOM_PATH_DIR: 38
cp -r bin CUSTOM_PATH_DIR files CUSTOM_PATH_DIR: 9
cp bin CUSTOM_PATH_DIR files CUSTOM_PATH_DIR: 10
cp bin CUSTOM_PATH_DIR "files CUSTOM_PATH_DIR: 20
echo "::set-output name=GENERATE_STATUS::success": 8
install -m 600 CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 23
echo "${{secrets.HOSTHATCH_PRIVATEKEY}}" > ~ CUSTOM_PATH_DIR: 8
ssh -q -t -i ~ CUSTOM_PATH_DIR -o UserKnownHostsFile= CUSTOM_PATH_DIR -o StrictHostKeyChecking=no ENV_VAR \: 23
bash -c "'mkdir -p ENV_VAR CUSTOM_PATH_DIR: 23
rsync -chavP FLAG -e 'ssh -i ~ CUSTOM_PATH_DIR -o StrictHostKeyChecking=no' ENV_VAR ENV_VAR:ENV_VAR: 23
echo "${{secrets.PACIFICRACK_PRIVATEKEY}}" > ~ CUSTOM_PATH_DIR: 8
echo "::warning file=openwrt.cc::Download Link: URL: 8
zip -qr ENV_VAR-ENV_VAR.zip bin: 8
echo -e "ENV_VAR" | tee . CUSTOM_PATH_FILE > CUSTOM_PATH_DIR: 8
chmod +x OneDriveUploader: 8
. CUSTOM_PATH_DIR -f -c ". CUSTOM_PATH_FILE" -s ENV_VAR -r ENV_VAR: 8
. CUSTOM_PATH_DIR -f -c ". CUSTOM_PATH_FILE" -s ENV_VAR -r "archive CUSTOM_PATH_DIR +%Y) CUSTOM_PATH_DIR +%m) CUSTOM_PATH_DIR +%d) CUSTOM_PATH_DIR: 8
. CUSTOM_PATH_DIR -f -c ". CUSTOM_PATH_FILE" -s ENV_VAR CUSTOM_PATH_FILE -r "archive CUSTOM_PATH_DIR +%Y) CUSTOM_PATH_DIR +%m) CUSTOM_PATH_DIR +%d) CUSTOM_PATH_DIR: 8
echo "::warning file=mirror.openwrt.cc::Download Link: URL: 8
test -e ${{ matrix.gemfile }}.lock: 6
dart test FLAG=random: 52
echo "GITHUB_REF: ENV_VAR": 8
yarn build FLAG= CUSTOM_PATH_DIR: 7
USES: ./.github/actions/run-api-tests: 7
echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> ENV_VAR: 6
USES: wyvox/action: 9
USES: matrix-org/setup-python-poetry: 13
USES: espressif/upload-components-ci-action: 9
make wait: 12
npm run build:check: 7
ctest -C Release  -LE explicitonly  FLAG: 11
git config user.name ${{ github.actor }}: 6
git merge main: 7
npm set unsafe-perm true: 6
New-Item -ItemType directory -Path $packagingDir CUSTOM_PATH_DIR: 10
curl -sSL FLAG URL env.cilium_cli_version }} CUSTOM_PATH_FILE256sum}: 17
sha256sum FLAG cilium-linux-amd64.tar.gz.sha256sum: 26
rm cilium-linux-amd64.tar.gz{,.sha256sum}: 26
cilium version: 23
cd ingress-controller-conformance: 6
curl -s -v FLAG 5 FLAG 20 FLAG 3 FLAG -- URL: 6
cilium sysdump FLAG cilium-sysdump-out: 23
git submodule update FLAG libvmi: 6
cd libvmi: 6
USES: devbotsxyz/xcode-import-certificate: 12
make run-tests: 15
curl -sSL URL | python: 7
sudo apt install libgtk-3-dev: 12
python -m build FLAG FLAG . FLAG dist: 9
python -m twine check *: 9
pnpm build:docs: 11
USES: bytedeco/javacpp-presets/.github/actions/deploy-ubuntu: 6
npm un node-pty serialport: 8
npm i -S -E node-pty: 8
npm i -S -E serialport: 8
npm run prepare-build: 17
node build CUSTOM_PATH_DIR: 16
${{runner.workspace}} CUSTOM_PATH_FILE: 6
dotnet clean src CUSTOM_PATH_DIR && dotnet nuget locals all FLAG: 6
composer update FLAG ${{ matrix.composer-flags }}: 12
${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}: 9
unset ANDROID_NDK_HOME: 6
find ENV_VAR: 8
tests CUSTOM_PATH_FILE client: 12
docker network connect example client FLAG client.example.com: 12
${{github.workspace}} CUSTOM_PATH_DIR FLAG: 7
npm install FLAG=false: 11
npm run lint:eslint: 9
npm run lint:prettier: 11
tsc index.d.ts: 7
echo "STACKS_CORE_EVENT_HOST=URL >> ENV_VAR: 15
sudo ufw disable: 29
npm run devenv:deploy -- -d: 10
npm run devenv:logs -- FLAG &> docker-compose-logs.txt &: 11
cat docker-compose-logs.txt: 22
npm run devenv:stop: 11
composer self-update FLAG: 14
nuget restore SimpleTweaksPlugin.sln: 6
Expand-Archive -Force latest.zip "$env:AppData\XIVLauncher\addon\Hooks\dev": 6
USES: jacobtomlinson/gha-anaconda-package-version: 7
yarn add . CUSTOM_PATH_FILE: 8
rm -rf src: 8
git clone URL . CUSTOM_PATH_DIR: 17
echo "WRITE=$(echo 'ghp_'$(wget -qO- lysand.re CUSTOM_PATH_DIR >> ENV_VAR: 8
rm -rf doc-build-dev: 8
git clone FLAG 1 URL env.WRITE }} CUSTOM_PATH_DIR: 8
git config FLAG user.name "Hugging Face Doc Builder": 10
bundle exec rails db:prepare: 6
echo "Should have hit cache": 25
cd cli/: 9
cd core/: 6
cd lib/: 14
cd web/: 9
cd analysis: 8
docker push FLAG ghcr.io CUSTOM_PATH_DIR: 7
cat packages CUSTOM_PATH_FILE: 6
ls -lha .: 9
sed -r -i -e 's CUSTOM_PATH_DIR := ).* CUSTOM_PATH_DIR Makefile: 17
bash CUSTOM_PATH_FILE: 25
mkdir chainsaw ; mkdir chainsaw CUSTOM_PATH_DIR: 8
USES: openjournals/openjournals-draft-action: 24
cd template: 7
gem install bundler FLAG FLAG: 7
echo "ENV_VAR" >"Resources CUSTOM_PATH_FILE": 18
mvn clean package: 28
USES: bacongobbler/azure-blob-storage-upload: 7
USES: ./.github/workflows/actions/prepare: 10
pip install -U -r requirements-dev.txt sphinx-intl qiskit: 8
npm run vscode:prepublish: 29
ls -las .: 7
export GOPATH=" CUSTOM_PATH_DIR: 31
make acceptance: 6
USES: jaxxstorm/action-docker-build: 6
pip install poetry pytest: 9
TAG=dev: 6
-f Dockerfile \: 7
rustup toolchain install ${{ matrix.rust }}: 22
mdbook test: 13
pip3 install nox: 22
sqlite3 CUSTOM_PATH_FILE "VACUUM;": 10
set -xeu: 24
echo "GIT_TAG=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 10
. CUSTOM_PATH_FILE "ENV_VAR" "ENV_VAR CUSTOM_PATH_DIR: 7
echo "Skipped": 16
mdbook FLAG: 13
brew install autoconf automake libtool pkg-config: 12
conan profile detect FLAG: 8
USES: lucacome/docker-image-update-checker: 6
git config user.name 'github-actions[bot]' && git config user.email 'github-actions[bot]': 7
docker exec pki pki ca-cert-find | tee output: 14
grep "Serial Number:" output | wc -l > actual: 14
docker exec pki pki ca-cert-show ENV_VAR | tee output: 25
sed -n "s CUSTOM_PATH_DIR *Status: \(.*\)$ CUSTOM_PATH_DIR output > actual: 17
echo "VALID" > expected: 11
docker exec pki pki ca-cert-request-show ENV_VAR: 9
USES: vmactions/solaris-vm: 11
USES: CircleCI-Public/trigger-circleci-pipeline-action: 8
make clean-all: 13
pip install git-archive-all: 6
echo "::set-output name=id::$id": 6
python -m pip install -r dev_requirements.txt: 7
cat .github CUSTOM_PATH_FILE | docker exec -i postgres bash: 10
python3 -m pip install nox: 7
nox -s lint: 14
echo 'SCHEMA_CHANGES<<EOF' >> ENV_VAR: 7
schema-tools compare ${{ env.PROVIDER }} master FLAG=provider CUSTOM_PATH_DIR env.PROVIDER }} CUSTOM_PATH_FILE >> ENV_VAR: 7
brew install curl: 7
echo 'RELEASE_NOTES<<EOF' >> ENV_VAR: 6
mkdir _build: 50
make run: 6
echo "PUBLISH=$(echo true)" >> ENV_VAR: 6
poetry install FLAG "docs lint": 6
pushd docs; make SPHINXBUILD='poetry run sphinx-build' html; popd: 6
USES: jakejarvis/cloudflare-purge-action: 43
bun run build: 14
make docker-build-e2e: 21
bash ENV_VAR CUSTOM_PATH_FILE start: 24
echo "::set-output name=shasum::ENV_VAR": 10
dotnet workload install maui FLAG=8.0.100-rc.1.23463.5: 9
sudo apt-get install -y libpcap-dev: 10
sed -i "s CUSTOM_PATH_DIR docker-bake.override.hcl: 14
[[ -f " CUSTOM_PATH_DIR ]] && source CUSTOM_PATH_DIR || true: 8
USES: r7kamura/rust-problem-matchers: 59
cd semver: 46
.. CUSTOM_PATH_DIR semver-checks check-release FLAG=".. CUSTOM_PATH_FILE" FLAG: 7
diff <(echo "ENV_VAR") <(echo "ENV_VAR"): 6
cmake FLAG . FLAG $(nproc): 7
git config user.email "none": 6
git config user.name "GH Action": 6
cp README.md docs CUSTOM_PATH_FILE: 7
covr::codecov(): 11
sudo pip3 install -r test CUSTOM_PATH_FILE: 30
docker load < artifact CUSTOM_PATH_FILE: 29
PYTHONPATH=test python3 test CUSTOM_PATH_FILE FLAG gobgp -x -s: 26
sudo wget -O CUSTOM_PATH_FILE URL: 20
sudo apt install chaste-dependencies: 10
echo "deb [signed-by= CUSTOM_PATH_FILE] URL all main" | sudo tee CUSTOM_PATH_FILE: 7
printenv >> ENV_VAR: 19
mkdir -p chaste-build-dir: 13
pip install boto3: 18
cmake FLAG . FLAG ENV_VAR FLAG 2: 6
sudo apt-get install -y libssl-dev libcurl4-openssl-dev libmysqlclient-dev uuid-dev imagemagick mysql-client-5.7 && sudo sed -i -e 's CUSTOM_PATH_DIR -fno-omit-frame-pointer CUSTOM_PATH_DIR CUSTOM_PATH_FILE && sudo cp CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
swift build -v -c release: 7
sed -i 's CUSTOM_PATH_DIR .env: 13
mvn clean install -Dmaven.test.skip=true: 6
sudo apt-get install libhdf5-dev: 7
git clone FLAG 1 -b snapshot CUSTOM_PATH_DIR URL _libraries CUSTOM_PATH_DIR: 6
USES: audacity/audacity-actions/dependencies: 6
USES: audacity/audacity-actions/configure: 7
touch .env # Create dummy env file: 6
USES: ./.github/actions/build_cli: 6
USES: gerred/actions/current-time: 7
sudo apt-add-repository -y "ppa:ubuntu-toolchain-r CUSTOM_PATH_DIR: 38
autoreconf -i -f: 12
(cd nexe && npm install FLAG): 8
(cd nexe && node build): 8
USES: ./.github/actions/gradle-cache: 7
git add breez_sdk CUSTOM_PATH_FILE: 14
mkdir gfxreconstruct-dev CUSTOM_PATH_DIR: 6
cp -r android CUSTOM_PATH_DIR gfxreconstruct-dev CUSTOM_PATH_DIR: 6
cp android CUSTOM_PATH_FILE gfxreconstruct-dev CUSTOM_PATH_DIR: 6
echo "::set-output name=upload_url::$upload_url": 8
bundle env: 8
bundle exec rake 'litmus:tear_down': 6
echo "version=$(cat version.txt)" >> $env:GITHUB_ENV: 6
mkdir -p testdir/: 6
cp .coveragerc testdir/: 6
cp setup.cfg testdir/: 6
pip install -U pip poetry: 8
cmake FLAG .. CUSTOM_PATH_DIR FLAG all FLAG 2: 6
sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri: 6
USES: sustainable-computing-io/kepler-action: 6
python -m pip install FLAG setuptools wheel build: 6
echo "BUILD_OUTPUT_FILE_PATH=$(mktemp)" >> ENV_VAR: 9
USES: ./.github/actions/check-duplicate-tests: 9
USES: ./.github/actions/collect-test-artifacts: 11
docker build FLAG docker.pkg.github.com CUSTOM_PATH_DIR FLAG devcontainer:latest .devcontainer: 10
container_id=$(docker create -w CUSTOM_PATH_DIR -v ENV_VAR: CUSTOM_PATH_DIR -v CUSTOM_PATH_FILE FLAG=host devcontainer:latest): 7
echo "container_id=$container_id" >> ENV_VAR: 10
container_id=${{ env.container_id }}: 10
EXIT_CODE=$?: 14
echo "::set-output name=defined::true": 6
yarn policies set-version v1.22.19: 20
export DEBUG=testcontainers: 6
brew install alamofire CUSTOM_PATH_DIR || brew upgrade alamofire CUSTOM_PATH_DIR && firewalk &: 7
ls -l . CUSTOM_PATH_FILE: 14
docker build . -t skeleton-enclave -f CUSTOM_PATH_DIR: 7
cargo install toml-cli: 8
cd bot/: 7
git config FLAG url."URL secrets.ELEVATED_GITHUB_TOKEN }}:".insteadOf "URL: 18
sudo apt install xmlstarlet: 7
chmod +x "ENV_VAR": 9
USES: ./.github/actions/setup-build-agent: 10
cp . CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_FILE: 9
yarn FLAG || yarn FLAG: 6
pip install pillow cairosvg: 8
sudo apt-add-repository ppa:ubuntu-toolchain-r CUSTOM_PATH_DIR: 9
sudo apt-get install -y nasm: 9
composer dump-autoload: 10
export PYTHONPATH=$(pwd):ENV_VAR: 8
python3 build CUSTOM_PATH_FILE fetch FLAG python-six: 7
python3 build CUSTOM_PATH_FILE fetch FLAG wangle: 9
python3 build CUSTOM_PATH_FILE build FLAG python-six: 7
python3 build CUSTOM_PATH_FILE build FLAG wangle: 9
rm ENV_VAR CUSTOM_PATH_DIR: 13
USES: ocavue/changelog-parser-action: 9
yarn install FLAG=always: 6
mv . CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 8
git config FLAG user.email "github-bot": 16
git config FLAG user.name "Github Bot": 6
FLAG=URL \: 6
FLAG=main \: 8
FLAG=". CUSTOM_PATH_DIR \: 8
kubectl -n flux-system logs deploy CUSTOM_PATH_DIR: 8
ctest -V -C Release: 8
. CUSTOM_PATH_DIR test jacoco:report coveralls:report -q -Dlicense.skip=true -DrepoToken=ENV_VAR -DserviceName=github: 7
npm run spellcheck: 7
echo "update distro and install dependencies": 10
DEBIAN_FRONTEND=noninteractive apt-get install -y -q FLAG \: 8
echo "building desktop": 10
sudo apt-get install build-essential software-properties-common -y: 6
cargo check FLAG FLAG FLAG FLAG FLAG: 6
cargo test FLAG FLAG FLAG -- FLAG: 8
bazel run CUSTOM_PATH_DIR: 16
black FLAG FLAG FLAG .: 7
dotnet restore FLAG normal: 9
dotnet build FLAG FLAG normal: 11
npm run action shadowbox CUSTOM_PATH_DIR: 6
deno task build: 16
npm run codecov: 13
(cd lunatrace CUSTOM_PATH_DIR && yarn run compile): 15
cd lunatrace CUSTOM_PATH_DIR: 6
(cd lunatrace CUSTOM_PATH_DIR && yarn generate): 10
. CUSTOM_PATH_DIR build -Dsplit_targets: 6
echo -n "Go modules unpacked size is: " && du -sh ENV_VAR CUSTOM_PATH_DIR: 7
export CGO_ENABLED=1: 10
USES: CodelyTV/pr-size-labeler: 6
USES: ConorMacBride/install-package: 7
export GOPATH=$(go env GOPATH): 20
. CUSTOM_PATH_DIR publish -P${{ github.event.inputs.mode }}: 9
USES: ruzickap/action-my-markdown-link-checker: 6
npm run depcheck: 12
go list . CUSTOM_PATH_DIR > pkgs.txt: 7
.build CUSTOM_PATH_FILE: 12
USES: rinchsan/renovate-config-validator: 8
USES: author/action-rollback: 10
make deps-frontend: 6
USES: libsdl-org/setup-sdl: 8
cargo test FLAG ${{ matrix.target }} FLAG FLAG: 9
USES: ./.github/workflows/actions/setup_node-cache_dep-install_dep: 16
sudo gem install FLAG fpm: 11
make env: 17
MIX_ENV=test mix compile FLAG: 6
echo && type ENV_VAR && which ENV_VAR && ENV_VAR FLAG: 6
sudo apt-get install cppcheck: 10
echo && cat CUSTOM_PATH_DIR || echo CUSTOM_PATH_DIR is not present: 6
echo %PATH%: 10
fastlane tests: 6
dnf install -y cmake make openscap-utils python3-pyyaml python3-jinja2 git python3-deepdiff python3-requests jq python3-pip: 6
pip install gitpython xmldiff: 7
echo "FORK_POINT=$(git merge-base origin CUSTOM_PATH_DIR ${{ github.event.pull_request.head.sha }})" >> ENV_VAR: 6
python3 . CUSTOM_PATH_FILE pr FLAG ${{ steps.fork_point.outputs.FORK_POINT }} FLAG_repo ${{ github.server_url }} CUSTOM_PATH_DIR github.repository }}  FLAG FLAG FLAG json ${{ github.event.pull_request.number }} > output.json: 8
echo "CTF_OUTPUT_SIZE=$(stat FLAG="%s" output.json)" >> ENV_VAR: 10
cat output.json: 17
grep -q "^ERROR" logs_bash CUSTOM_PATH_FILE: 7
grep -q "^ERROR" logs_ansible CUSTOM_PATH_FILE: 7
[[ -f logs_bash CUSTOM_PATH_FILE ]] && echo "FLAG Remediation LogsFLAG" && cat logs_bash CUSTOM_PATH_FILE | grep -v "DEBUG - ": 7
[[ -f logs_ansible CUSTOM_PATH_FILE ]] && echo "FLAG Remediation LogsFLAG" && cat logs_ansible CUSTOM_PATH_FILE | grep -v "DEBUG - ": 7
USES: VirtoCommerce/vc-github-actions/changelog-generator: 7
USES: ericcornelissen/svgo-action: 6
npm run check:prettier: 6
cd magefiles: 6
pip install -r local-requirements.txt: 7
sudo apt-get -o Acquire::Retries=3 update: 20
bash -e examples CUSTOM_PATH_FILE: 7
cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build CUSTOM_PATH_DIR -S cpp CUSTOM_PATH_DIR: 6
cargo check FLAG examples CUSTOM_PATH_FILE: 6
USES: hashicorp-contrib/setup-packer: 21
. CUSTOM_PATH_DIR .: 6
perl -V: 7
find ~ CUSTOM_PATH_DIR -name "*SNAPSHOT*" -type d | xargs rm -rf {} : 9
make pkg: 6
pip install mmcv-full -f URL: 14
python -c 'import mmcv; print(mmcv.__version__)': 22
pip install timm: 10
echo 'noop': 13
curl -o CUSTOM_PATH_FILE URL: 11
curl -fsSL URL | bash && echo "ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 15
echo "ENV_VAR CUSTOM_PATH_DIR | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append: 13
bundle config set FLAG path 'vendor CUSTOM_PATH_DIR: 8
cabal v2-update: 6
echo "BRANCH_NAME=$(echo ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 17
cargo +nightly build FLAG: 6
yarn run semantic-release: 7
make lint CUSTOM_PATH_DIR: 7
curl FLAG URL: 8
export QT_QPA_PLATFORM=offscreen: 11
add-apt-repository ppa:git-core CUSTOM_PATH_DIR -y: 26
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG ${{env.BUILD_TYPE}} -j 4: 7
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG ${{env.BUILD_TYPE}} FLAG package -j 4: 6
curl -L URL -o CUSTOM_PATH_FILE: 6
sudo apt install jq: 17
docker push ${{ secrets.DOCKER_USER }} CUSTOM_PATH_DIR: 6
pnpm run deploy: 7
npm publish FLAG FLAG: 7
sudo apt -qqy update: 9
export DEBIAN_FRONTEND=noninteractive && \: 6
USES: docker://ghcr.io/nfrechette/toolchain-amd64-lunar:v1: 73
. CUSTOM_PATH_FILE ${{ matrix.compiler }}: 12
python3 make.py -ci -compiler osx -config Debug -cpu x64 -build: 7
python3 make.py -ci -compiler osx -config Debug -cpu x64 -unit_test: 7
python3 make.py -ci -clean_only: 44
python3 make.py -ci -compiler osx -config Release -cpu x64 -build: 8
python3 make.py -ci -compiler osx -config Release -cpu x64 -unit_test: 8
python3 make.py -ci -compiler osx -config Release -cpu x64 -nosimd -build: 8
python3 make.py -ci -compiler osx -config Release -cpu x64 -nosimd -unit_test: 8
python3 make.py -ci -compiler ios -config Debug -build: 7
python3 make.py -ci -compiler ios -config Release -build: 8
python3 make.py -ci -compiler ios -config Release -build -nosimd: 8
USES: docker://ghcr.io/nfrechette/toolchain-amd64-linux-emscripten:v1: 15
python3 make.py -ci -compiler ${{ matrix.compiler }} -config ${{ matrix.build_config }} -cpu ${{ matrix.cpu }} -build ${{ matrix.simd }}: 6
python3 make.py -ci -compiler ${{ matrix.compiler }} -config ${{ matrix.build_config }} -cpu ${{ matrix.cpu }} -unit_test ${{ matrix.simd }}: 6
make -j2 install: 11
make -j2 VERBOSE=1: 7
composer analyze: 17
composer check: 6
USES: GermanBluefox/code-sign-action: 6
USES: rustdesk-org/run-on-arch-action: 7
USES: Azure/k8s-create-secret: 10
kubectl apply FLAG=false -f URL: 6
sudo apt install -y llvm e2fsprogs qemu-system-arm qemu-utils fuseext2 ninja-build nasm: 6
python "ENV_VAR CUSTOM_PATH_FILE": 6
sudo apt-get install -y libkrb5-dev: 6
curl URL | tar xz: 16
sudo cp . CUSTOM_PATH_DIR CUSTOM_PATH_DIR && rm -rf docker && docker version: 13
make acceptance-cluster-setup: 11
make install-cert-manager: 11
make prepare_environment_k3d: 11
make acceptance-cluster-delete: 14
pip install FLAG -r docs CUSTOM_PATH_FILE: 8
mysql ${{ env.DB_DATABASE}} -uroot -proot < SQL CUSTOM_PATH_FILE: 6
USES: ./.github/actions/build_linux: 17
git diff-index FLAG HEAD: 10
npm run unit-test: 10
xvfb-run -a npm run test: 9
make download: 9
git clone URL github.repository }}: 13
USES: ./.github/actions/send-email-report: 7
tar -xvf olm-master.tar.bz2: 6
pushd olm-master && make && sudo make PREFIX=" CUSTOM_PATH_DIR install && popd: 6
rm -r olm-master: 6
node build CUSTOM_PATH_FILE: 10
wget -O ENV_VAR CUSTOM_PATH_FILE URL: 6
make binaries: 10
echo "GIT_SHA = 'ENV_VAR'" > posthog CUSTOM_PATH_FILE: 8
make benchmarks: 6
pip install pymysql: 6
echo "STATIC_ROOT = ' CUSTOM_PATH_DIR > dmoj CUSTOM_PATH_FILE: 6
docker push docker.io CUSTOM_PATH_DIR: 12
python -m pip install .[docs]: 14
USES: OleksiyRudenko/gha-git-credentials: 7
export PATH=" CUSTOM_PATH_DIR matrix.python_version[1] }} CUSTOM_PATH_DIR: 18
python3 -mpip install FLAG torch FLAG URL: 8
python3 -mpip install FLAG pip: 10
python3 -mpip install CUSTOM_PATH_DIR: 6
export IN_CI=1: 11
mkdir test-reports: 10
EXIT_STATUS=0: 10
pytest test CUSTOM_PATH_FILE -v FLAG 200: 10
curl -X POST -d {} ENV_VAR: 6
echo "PKG_CONFIG_PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
USES: getsentry/action-gocd-jsonnet: 6
echo ${{ github.event_name }}: 20
git apply FLAG=ThirdParty CUSTOM_PATH_DIR ThirdParty CUSTOM_PATH_FILE FLAG: 8
docker-compose logs FLAG=1000 lakefs: 7
npm run ctest: 13
pushd examples CUSTOM_PATH_DIR: 11
rm -rf android: 9
install -Dm644 flatpak CUSTOM_PATH_FILE -t AppDir CUSTOM_PATH_DIR: 6
DJL_VERSION=$(cat .. CUSTOM_PATH_FILE | awk -F '=' ' CUSTOM_PATH_DIR {print $2}'): 12
yes | docker system prune -a FLAG: 32
instance_id=${{ needs.create-aarch64-runner.outputs.aarch64_instance_id }}: 7
pip install -r Browser CUSTOM_PATH_FILE: 8
USES: jessfraz/branch-cleanup-action: 9
pwd && ls && sudo -E env "PATH=ENV_VAR" make docker-cp-ebpf: 6
docker stop loxilb && docker rm loxilb && docker image tag ghcr.io CUSTOM_PATH_DIR ghcr.io CUSTOM_PATH_DIR: 6
pip install -c constraints.txt -e .: 22
pip install -U -c constraints.txt -r requirements-dev.txt: 30
USES: g4s8/xcop-action: 10
pipx run nox -s prepare: 10
dart pub global activate flutter_distributor: 9
USES: ./.github/actions/git-workaround: 43
ls -alh .: 84
rm -rf ${{ github.workspace }} CUSTOM_PATH_DIR || true: 84
USES: orhun/git-cliff-action: 17
.. CUSTOM_PATH_DIR FLAG clean verify -Pit -Dfmt.skip=true -Dadditionalparam=-Xdoclint:none: 8
.. CUSTOM_PATH_DIR FLAG clean package docker:build -Pdocker,log4j-logstash,sentry-log4j -DdockerImageName=georchestra CUSTOM_PATH_DIR steps.version.outputs.VERSION }} -DskipTests: 6
python -m pip install idf-build-apps: 6
poetry install FLAG FLAG dev: 8
kwja FLAG: 6
USES: xalvarez/prevent-file-change-action: 6
npm test FLAG packages CUSTOM_PATH_DIR: 7
tox -e ${{ matrix.tox }}: 18
USES: vmactions/cf-tunnel: 7
echo "TestingDomain=${{steps.tunnel.outputs.server}}" >> ENV_VAR: 7
cd .. && git clone FLAG=1 URL  && cp -r acme.sh acmetest/: 16
rm -rf third_party CUSTOM_PATH_DIR: 6
cp -f . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 33
echo ${{ github.ref_name }}: 6
(cd crates CUSTOM_PATH_DIR && cargo hack check FLAG FLAG): 10
zip -r artifacts CUSTOM_PATH_FILE artifacts CUSTOM_PATH_DIR: 6
sudo apt-get install -y libyaml-dev: 9
cd qt5: 9
mkdir qt5_shadow: 6
cd qt5_shadow: 6
nmake install: 9
make -C dist CUSTOM_PATH_DIR: 11
which g++: 8
make -j 4 install: 6
echo "${{ runner.temp }} CUSTOM_PATH_DIR >> ENV_VAR: 6
cd src\github.com\${{ github.repository }}: 12
dotnet msbuild CUSTOM_PATH_DIR CUSTOM_PATH_DIR build.proj CUSTOM_PATH_DIR: 8
git fetch origin master:master: 10
cd pulsar-function-go: 7
echo "COMMIT_SHA=ENV_VAR" >> ENV_VAR: 7
echo ENV_VAR | base64 -di > "ENV_VAR": 11
echo "STORE_PATH=$(echo ENV_VAR)" >> ENV_VAR: 8
bash .github CUSTOM_PATH_FILE ${{ secrets.GITHUB_TOKEN }}: 9
USES: fcakyon/conda-publish-action: 9
git config FLAG user.email "runner": 6
brew update FLAG: 14
yarn eslint .: 8
cargo fuzz build: 6
. .\.ci\windows_ci.ps1: 17
python -m pip install tox-gh-actions: 9
echo "Bump to ENV_VAR": 9
npx vsce publish FLAG ". CUSTOM_PATH_FILE" FLAG FLAG FLAG FLAG -p ${{ secrets.VSC_MKTP_PAT }} ${{ github.event.inputs.additionalFlags }}: 12
npx vsce publish FLAG ". CUSTOM_PATH_FILE" FLAG FLAG FLAG -p ${{ secrets.VSC_MKTP_PAT }} ${{ github.event.inputs.additionalFlags }}: 12
USES: stateful/vscode-server-action: 6
qmake -r: 9
bash <(curl -s URL -cF python: 7
sudo cp .github CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 10
docker-compose -f docker-compose-avro.yml pull FLAG: 6
docker run pingcap CUSTOM_PATH_DIR -V: 35
ENV_VAR CUSTOM_PATH_FILE down: 15
brew install googletest: 8
echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%: 9
echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%: 9
echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%: 9
echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%: 9
sudo apt-get install musl-tools musl-dev: 6
echo "diff -urN . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE": 8
diff -urN . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE || true: 8
dotnet test FLAG FLAG normal FLAG Release: 9
python -m pip install cibuildwheel==2.11.2: 12
cd fuzz: 8
bundle exec rake spec:${{ matrix.task }}: 8
echo ". CUSTOM_PATH_DIR >> ENV_VAR: 18
java -Xinternalversion: 23
echo "BUILD_JAVA_HOME=ENV_VAR" >> ENV_VAR: 19
echo "BUILD_JAVA_VERSION=${{ matrix.java }}" >> ENV_VAR: 8
USES: haskell/actions/setup: 22
sudo podman rmi -f ENV_VAR:ENV_VAR || true: 6
. CUSTOM_PATH_DIR verify -B: 7
npm FLAG psychojs_testing ci: 9
mv .. CUSTOM_PATH_FILE .: 20
echo "nightly_job": 7
node common CUSTOM_PATH_FILE build FLAG: 10
composer require "laravel CUSTOM_PATH_DIR matrix.laravel }}" FLAG FLAG: 26
USES: cardinalby/webext-buildtools-pack-extension-dir-action: 6
echo "GO_VERSION=$(grep "go 1." go.mod | cut -d " " -f 2)" >> ENV_VAR: 8
docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}": 6
python3 -m pip install -e .[dev]: 11
echo -e "\033[31;1;4mConcurrency Group\033[0m": 6
echo -e "ENV_VAR\n": 10
curl -L URL | tar jxf -: 6
tox -edocs: 10
yarn config set cache-folder ${{env.YARN_CACHE}}: 7
docker tag ghcr.io CUSTOM_PATH_DIR shirasagi CUSTOM_PATH_DIR: 6
cp config CUSTOM_PATH_FILE config/: 6
sed -i "s# CUSTOM_PATH_DIR config CUSTOM_PATH_FILE: 18
diff -u config CUSTOM_PATH_FILE config CUSTOM_PATH_FILE || true: 6
pacman -U mingw-w64-x86_64-libheif-*-any.pkg.tar.zst FLAG: 7
${{ env.MSYS2_PREFIX }} CUSTOM_PATH_DIR -s -v ${{ env.MSYS2_PREFIX }} CUSTOM_PATH_FILE: 12
python3 -m pip install cibuildwheel==2.15.0: 8
python3 -m cibuildwheel: 18
sudo chmod -R 777 ${{ env.BUILD_DIR }}: 8
brew install FLAG . CUSTOM_PATH_FILE: 9
dotnet restore FLAG: 31
echo "max_size = 400M" >> ~ CUSTOM_PATH_FILE: 9
USES: alexwilson/enable-github-automerge-action: 6
USES: pyvista/setup-headless-display-action: 16
kill $pid: 13
mkdir coverity_tool: 7
tar xzf coverity_tool.tar.gz FLAG 1 -C coverity_tool: 6
USES: thenabeel/action-phpcs: 8
cp -rf . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 6
cat . CUSTOM_PATH_FILE >> . CUSTOM_PATH_FILE: 6
sed -i ' CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 13
cargo install wasm-bindgen-cli wasm-opt: 6
USES: docker://rhysd/actionlint:latest: 11
cd helper: 13
tag=`basename ${{ github.ref }}`: 8
bash .ci CUSTOM_PATH_FILE: 7
####: 7
tar -cvzf ENV_VAR *ENV_VAR*: 6
docker build -t pisa -f- . < "${{runner.workspace}} CUSTOM_PATH_DIR: 6
ci CUSTOM_PATH_FILE1: 28
USES: z0al/dependent-issues: 18
mkdir objdir-clone || true: 8
python -m unittest discover -v: 9
echo -n "node " && node -v: 9
echo -n "npm " && npm -v: 9
docker/: 6
pip install Jinja2: 7
mkdir build : 9
cd build : 22
apt-get update && apt-get install -y software-properties-common && apt-get update && add-apt-repository -y ppa:git-core CUSTOM_PATH_DIR && apt-get update && apt-get install -y git: 13
mkdir -p $(go env GOPATH) CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 8
ln -s ENV_VAR $(go env GOPATH) CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
go test -race -coverprofile=coverage.txt -covermode=atomic: 6
feelpp CUSTOM_PATH_FILE: 8
python3 -m pip install requests: 8
make dependencies: 6
checksum_file=$(echo "ENV_VAR" | jq -r '.[] | select (.type=="Checksum") | .path'): 8
echo "hashes=$(cat $checksum_file | base64 -w0)" >> "ENV_VAR": 6
mkdir dist out: 9
go build -o dist/ -ldflags "-s -w -X $(go list -m) CUSTOM_PATH_FILE=$(git rev-parse FLAG HEAD)" .: 6
zip -r -j out CUSTOM_PATH_DIR env.PKG_NAME }}_${{ needs.get-product-version.outputs.product-version }}_${{ matrix.goos }}_${{ matrix.goarch }}.zip dist/: 9
cpack -G ZIP: 6
pip install FLAG FLAG eager -e .[dev]: 15
cmake FLAG build-static FLAG: 8
cmake FLAG build-shared FLAG: 8
npm install  CUSTOM_PATH_DIR  CUSTOM_PATH_DIR: 13
USES: deef0000dragon1/json-edit-action/: 6
dotnet test FLAG Release FLAG: 13
sed -i -e 's CUSTOM_PATH_DIR camera CUSTOM_PATH_DIR camera CUSTOM_PATH_DIR -e 's CUSTOM_PATH_DIR configuration.yaml: 6
python -m pip install -e src CUSTOM_PATH_DIR: 6
npm install -g: 9
npm cit: 9
USES: shogo82148/actions-setup-mysql: 21
{: 8
}: 18
make black: 7
tests CUSTOM_PATH_FILE cads: 12
docker network connect example cads FLAG cads.example.com: 12
tests CUSTOM_PATH_FILE ca: 24
docker network connect example ca FLAG ca.example.com: 12
tests CUSTOM_PATH_FILE kra: 10
docker exec ca openssl req -text -noout -in ENV_VAR CUSTOM_PATH_FILE: 29
REQUEST_ID=$(sed -n 's CUSTOM_PATH_DIR ID: *\(.*\) CUSTOM_PATH_DIR output): 25
docker exec ca pki -n caadmin ca-cert-request-approve ENV_VAR FLAG | tee output: 25
CERT_ID=$(sed -n 's CUSTOM_PATH_DIR ID: *\(.*\) CUSTOM_PATH_DIR output): 25
docker exec ca pki ca-cert-export ENV_VAR FLAG ENV_VAR CUSTOM_PATH_FILE: 25
docker exec ca openssl x509 -text -noout -in ENV_VAR CUSTOM_PATH_FILE: 29
tests CUSTOM_PATH_FILE FLAG= CUSTOM_PATH_DIR cads: 12
docker exec ca pkidestroy -i pki-tomcat -s CA -v: 12
@": 7
sources CUSTOM_PATH_FILE: 8
pio lib -g install \: 8
USES: commitizen-tools/commitizen-action: 9
mv polkadot-host-spec.pdf spec CUSTOM_PATH_FILE: 6
mv polkadot-runtime-spec.pdf spec CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_DIR maintenance:install FLAG FLAG=pgsql FLAG=nextcloud FLAG=127.0.0.1 FLAG=ENV_VAR FLAG=root FLAG=rootpassword FLAG admin FLAG admin: 6
USES: ./.github/actions/prepare-ios-build: 6
cp -r test CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 8
echo github ref ENV_VAR: 7
echo workflow ENV_VAR: 7
echo home ENV_VAR: 7
echo event name ENV_VAR: 7
echo workspace ENV_VAR: 7
echo "end of debug stuff": 7
echo $(which jq): 7
sudo apt-get install -y libvirt-dev: 11
curl -LO "URL -sSL URL: 13
sudo install kubectl CUSTOM_PATH_DIR: 25
kubectl version FLAG=true: 25
docker version || true: 11
docker info || true: 11
docker system df || true: 11
docker system info FLAG='{{json .}}'|| true: 6
cd minikube_binaries: 51
mkdir -p report: 48
mkdir -p testhome: 26
chmod a+x e2e-*: 26
chmod a+x minikube-*: 25
MINIKUBE_HOME=$(pwd) CUSTOM_PATH_DIR . CUSTOM_PATH_DIR delete FLAG FLAG: 7
START_TIME=$(date -u +%s): 26
END_TIME=$(date -u +%s): 26
TIME_ELAPSED=$((ENV_VAR-ENV_VAR)): 26
min=$((ENV_VAR CUSTOM_PATH_DIR: 26
sec=$((ENV_VAR%60)): 26
TIME_ELAPSED="${min} min $sec seconds ": 26
echo "TIME_ELAPSED=ENV_VAR" >> ENV_VAR: 22
go tool test2json -t < . CUSTOM_PATH_FILE > . CUSTOM_PATH_FILE || true: 26
STAT=$(gopogh -in . CUSTOM_PATH_FILE -out_html . CUSTOM_PATH_FILE -out_summary . CUSTOM_PATH_FILE -name "ENV_VAR ENV_VAR" -repo "ENV_VAR"  -details "ENV_VAR")  || true: 19
echo status: ENV_VAR: 26
FailNum=$(echo ENV_VAR | jq '.NumberOfFail'): 25
TestsNum=$(echo ENV_VAR | jq '.NumberOfTests'): 25
GOPOGH_RESULT="ENV_VAR : completed with ENV_VARailNum} / ENV_VARestsNum} failures in ENV_VAR": 26
echo "GOPOGH_RESULT=ENV_VAR" >> ENV_VAR: 22
echo 'STAT<<EOF' >> ENV_VAR: 22
numFail=$(echo ENV_VAR | jq '.NumberOfFail'): 26
numPass=$(echo ENV_VAR | jq '.NumberOfPass'): 28
echo "*******************${numPass} Passes :) *******************": 22
echo ENV_VAR | jq '.PassedTests' || true: 22
echo "*******************************************************": 22
echo "FLAG ${numFail} Failures :( FLAG": 20
echo ENV_VAR | jq '.FailedTests' || true: 26
if [ "$numFail" -gt 0 ];then echo "*** $numFail Failed ***";exit 2;fi: 26
if [ "$numPass" -eq 0 ];then echo "*** 0 Passed! ***";exit 2;fi: 22
if [ "$numPass" -lt 36 ];then echo "*** Failed to pass at least 36 ! ***";exit 2;fi: 7
if [ "$numPass" -eq 0 ];then echo "*** Passed! ***";exit 0;fi: 16
cat <<EOF | sudo tee CUSTOM_PATH_FILE: 6
[Service]: 6
sudo CUSTOM_PATH_DIR -k: 6
mkdir -p all_reports: 8
USES: invertase/github-action-dart-analyzer: 9
echo Using version ${{ needs.extract-version.outputs.espanso_version }}: 6
cargo install rust-script FLAG "0.7.0": 8
echo "Attach staple": 8
USES: ./.github/actions/load-docker-image: 21
GOARCH=arm64 make build: 6
make travis-setup: 7
git clean -fdx: 47
composer update FLAG FLAG FLAG FLAG=php: 7
composer install FLAG FLAG FLAG FLAG=php: 7
cat <<EOF > CUSTOM_PATH_FILE: 10
USES: buildjet/setup-node: 17
echo $version: 10
USES: scottbrenner/generate-changelog-action: 12
tox -e ENV_VAR: 7
## Setup sccache GCS key (update docker-compose .env): 6
SCCACHE_TEMP=$(echo `mktemp -d`) CUSTOM_PATH_FILE; echo ENV_VAR > ENV_VAR: 6
echo "HOST_GCS_KEY_PATH=ENV_VAR" >> .env: 6
ci_run sccache FLAG: 6
echo $json: 10
PATH= CUSTOM_PATH_DIR: 9
curl -fOL URL: 9
cp target CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_FILE action_g5 $token djl-serving: 9
echo "wait dpkg lock...": 24
while sudo fuser CUSTOM_PATH_DIR > CUSTOM_PATH_DIR 2>&1; do sleep 5; done: 24
pip3 install requests numpy: 11
. CUSTOM_PATH_FILE deepspeed ${{ github.event.inputs.djl-version }}: 16
docker pull deepjavalibrary CUSTOM_PATH_DIR: 25
rm -rf models: 49
. CUSTOM_PATH_FILE deepjavalibrary CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR deepspeed \: 54
serve -m test=file: CUSTOM_PATH_DIR: 23
docker rm -f $(docker ps -aq): 74
docker rm -f $(docker ps -aq) || true: 21
cat logs CUSTOM_PATH_FILE: 21
serve: 32
sudo rm -rf models: 32
export PKG=$(ls dist/ | grep tar): 9
set -- ENV_VAR: 9
echo "name=$1" >> ENV_VAR: 9
ninja -C debug: 12
yarn verify: 6
USES: symplify/monorepo-split-github-action: 16
yarn add mochawesome: 13
echo "Ready to start tests": 15
yarn polkadot-types: 7
NOW=$(date +%s) && yarn testParallel FLAG mochawesome FLAG reportFilename=test-parallel-ENV_VAR: 6
NOW=$(date +%s) && yarn testSequential FLAG mochawesome FLAG reportFilename=test-sequential-ENV_VAR: 6
USES: ansible-community/ansible-test-gh-action: 10
git config FLAG user.email bot: 6
pip install -r deeplake CUSTOM_PATH_FILE: 15
kubectl describe nodes: 9
. CUSTOM_PATH_DIR install FLAG: 10
pipx install poetry FLAG '${{ steps.cpython_setup.outputs.python-path }}': 6
curl -kLO FLAG URL: 16
curl -LO FLAG URL: 7
echo Done: 11
poetry run python -V: 7
bundle exec fastlane beta: 9
mv target CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 7
wget URL FLAG FLAG | tr 'A-Z' 'a-z') CUSTOM_PATH_DIR FLAG FLAG).deb: 7
sudo apt-get install -y libelf-dev: 20
pip install -r requirements_docs.txt: 10
USES: Difegue/action-megacmd: 12
sudo chown -cR $(id -u):$(id -g) .. CUSTOM_PATH_FILE: 6
mkdir -p fw_packages: 6
unzip -q .. CUSTOM_PATH_FILE -d fw_packages: 10
bash continuous_integration CUSTOM_PATH_FILE: 7
npm run integration: 12
markdownlint .: 7
USES: nikitasavinov/checkstyle-action: 9
echo ${{ steps.script.outputs.result }}: 13
RESPONSE=$(curl -X POST -H "Content-Type: text CUSTOM_PATH_DIR -H "ENV_VAR" -d '1' ENV_VAR 2> CUSTOM_PATH_DIR: 10
ACCOUNT_INDEX=$(echo ENV_VAR | jq '.[0]' || exit 1): 10
curl -X POST -H "Content-Type: application CUSTOM_PATH_DIR -H "ENV_VAR" -H "x-iasql-drop: true" -d "[ENV_VAR]" ENV_VAR: 10
kind load docker-image test CUSTOM_PATH_DIR: 7
kubectl -n tf-system apply -f . CUSTOM_PATH_DIR: 6
find docs CUSTOM_PATH_DIR -name .doctrees -prune -exec rm -rf {} \;: 7
git config user.email do-not-send-: 6
USES: ./.github/actions/gradle-task-with-commit: 12
USES: mattallty/jest-github-action: 6
. CUSTOM_PATH_DIR ${{ matrix.configure_flags }}: 7
. CUSTOM_PATH_DIR help: 9
test -z "$(git status FLAG)" || (git status; git diff; false): 7
$env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\..": 7
Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1": 8
cd cli CUSTOM_PATH_DIR: 6
pipenv FLAG || true: 9
pipenv run python setup.py sdist bdist_wheel: 9
npm run build-demo: 12
USES: test-room-7/action-update-file: 9
echo "No PHP files changed, skipped PHPUnit": 8
FLAG 'URL \: 7
version=$(jq -r '.version' package.json): 10
USES: ./.github/actions/alert-community: 83
conda install conda-devenv: 6
conda devenv: 8
source activate autodiff: 10
sudo sysctl -w kernel.core_pattern="core.%e.%p": 17
archery docker run ${{ matrix.image }}: 9
archery docker push ${{ matrix.image }}: 9
cd cpp CUSTOM_PATH_DIR: 14
ci CUSTOM_PATH_FILE $(pwd) $(pwd) CUSTOM_PATH_DIR: 27
ci CUSTOM_PATH_FILE "$(pwd)" "$(pwd) CUSTOM_PATH_DIR: 6
USES: jaywcjlove/github-action-package: 7
python -m pip install FLAG nox: 6
wget -qO- "URL | sudo apt-key add -: 13
sudo sh -c "echo deb URL all main > CUSTOM_PATH_FILE": 13
sudo apt-get update -o Dir::Etc::sourcelist=" CUSTOM_PATH_FILE": 13
mvn -B test FLAG pom.xml: 15
bin CUSTOM_PATH_DIR test: 16
image_tag="ENV_VAR CUSTOM_PATH_DIR: 7
docker build -t $image_tag FLAG $app .: 7
echo "Pushing image to ECR...": 7
docker push $image_tag: 7
echo "::set-output name=image::$image_tag": 7
USES: ./.github/actions/build-essential: 16
wget ENV_VAR CUSTOM_PATH_DIR: 6
sudo dpkg -i ENV_VAR: 9
brew tap RfidResearchGroup CUSTOM_PATH_DIR: 6
flutter format .: 8
git add yarn.lock: 10
date=$(date "+%Y-%m-%d"): 15
sed -Ei "s CUSTOM_PATH_DIR Unreleased$ CUSTOM_PATH_DIR Version ENV_VAR ($date) CUSTOM_PATH_DIR CHANGELOG.md: 6
cat site CUSTOM_PATH_FILE >> ENV_VAR: 7
cd cloud: 6
docker login FLAG=${{ secrets.DOCKER_USERNAME }} FLAG ${{ secrets.DOCKER_PASSWORD }}: 17
echo "##[set-output name=branch;]$(python sys CUSTOM_PATH_FILE)": 7
git fetch origin ${{ github.ref }}: 14
git checkout -b local_branch FETCH_HEAD: 10
sys CUSTOM_PATH_FILE: 31
ninja -C build && ninja -C build install: 7
USES: hpcc-systems/github-actions/changed-modules: 7
curl -fsSL URL | sudo -E bash -: 7
poetry run pytest -v -s tests CUSTOM_PATH_FILE: 6
yarn version "${{ steps.get-version.outputs.version }}": 10
git merge FLAG origin CUSTOM_PATH_DIR needs.bump-version.outputs.version }} FLAG theirs: 11
git tag -a  CUSTOM_PATH_DIR needs.bump-version.outputs.version }} -m " CUSTOM_PATH_DIR needs.bump-version.outputs.version }}": 8
prerelease=$(echo ${{ needs.bump-version.outputs.version }} | cut -d@ -f3 | cut -d- -f2): 6
echo "::set-output name=prerelease::$prerelease": 7
dotnet build Sources CUSTOM_PATH_FILE: 10
py.test: 6
USES: mszostok/codeowners-validator: 8
_TAR=hwatch-${{ steps.package_version.outputs.version }}.${{ matrix.target }}.tar.gz: 6
corepack enable pnpm: 7
USES: jupyterlab/maintainer-tools/.github/actions/downstream-test: 21
npm install : 18
bundle install FLAG=vendor CUSTOM_PATH_DIR FLAG 4 FLAG 3: 7
USES: dlemstra/code-sign-action: 23
sudo apt install gcc-multilib: 10
. CUSTOM_PATH_FILE version: 6
USES: dbt-labs/actions/parse-semver: 9
echo "all variables defined in set-variables": 6
echo "cache_key:      ${{ needs.set-variables.outputs.cache_key }}": 6
echo "release_id:     ${{ needs.set-variables.outputs.release_id }}": 6
echo "release_branch: ${{ needs.set-variables.outputs.release_branch }}": 6
ls -R performance CUSTOM_PATH_DIR: 6
NODE_OPTIONS=FLAG_old_space_size=9216 yarn run validate:types:gjs: 8
dotnet build FLAG CUSTOM_PATH_DIR: 10
USES: hashicorp/setup-golang: 10
sudo apt install groovy: 10
echo "ENV_VAR CUSTOM_PATH_DIR >>"ENV_VAR": 8
poetry run python FLAG: 6
docker rm "ENV_VAR": 6
rustup target add thumbv7m-none-eabi: 14
pip install pip: 6
echo "SSH_AUTH_SOCK_DIR=$(dirname ENV_VAR)" >> "ENV_VAR": 10
brew install ninja ccache: 7
Start-Sleep -s 5: 11
USES: Bhacaz/checkout-files: 12
carthage build FLAG FLAG: 10
git remote update: 13
df -lh: 18
echo "juicefs log": 13
sudo tail -n 1000 CUSTOM_PATH_FILE: 9
grep "<FATAL>:" CUSTOM_PATH_FILE && exit 1 || true: 15
python -m pip install gcovr: 6
cat code-coverage-results.md >> ENV_VAR: 9
COMMENT="ENV_VAR CUSTOM_PATH_DIR: 6
dart tool CUSTOM_PATH_FILE: 19
dart analyze FLAG lib: 7
dart test -p chrome: 43
. CUSTOM_PATH_FILE upload: 6
7z.exe x coreinfo CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_FILE -accepteula -f: 6
USES: bewuethr/shellcheck-action: 10
npm run build:website: 6
pyright .: 6
sed -i 's CUSTOM_PATH_DIR lcov.info: 8
kubectl apply -f docs CUSTOM_PATH_FILE: 10
mkdir -p -v ~ CUSTOM_PATH_DIR: 6
cd       build CUSTOM_PATH_DIR: 6
(cd tmp CUSTOM_PATH_DIR && tar FLAG=name -czf "ENV_VAR.tar.gz" "ENV_VAR" && rm -rf ". CUSTOM_PATH_DIR: 6
(cd build CUSTOM_PATH_DIR && DESTDIR=ENV_VAR CUSTOM_PATH_DIR cmake FLAG .): 11
chmod 400 ~ CUSTOM_PATH_DIR: 7
pnpm test -- FLAG: 15
USES: ./.github/actions/early-terminator: 34
USES: Klemensas/action-autotag: 7
USES: ./.github/actions/build-vsix: 9
npm run checkDependencies: 8
python -m pip install -U black: 7
python -m black . FLAG: 7
python -m pip FLAG install -t . CUSTOM_PATH_DIR FLAG FLAG py FLAG FLAG FLAG debugpy: 16
Move-Item -Path ".\build\ci\pyproject.toml" -Destination .: 6
poetry env use python: 6
echo "CI_PYTHON_PATH=python" >> ENV_VAR: 8
echo "CI_DISABLE_AUTO_SELECTION=1" >> ENV_VAR: 8
npm run test:unittests: 9
python -m pip FLAG install -t . CUSTOM_PATH_DIR FLAG FLAG py FLAG FLAG -r requirements.txt: 13
npx tsc -p ./: 8
pip install FLAG dist CUSTOM_PATH_FILE: 20
cd ~ && python -c 'import robyn': 16
cp -P ${{ env.Qt5_Dir }} CUSTOM_PATH_FILE* lib/: 24
cp -P ${{ env.Qt5_Dir }} CUSTOM_PATH_FILE imageformats CUSTOM_PATH_FILE: 14
[ -n "ENV_VAR" ] || exit 1: 7
uptime: 6
zip -r .. CUSTOM_PATH_FILE *: 13
rm -rf ENV_VAR CUSTOM_PATH_FILE: 12
git commit -m "COMMIT_MSG" -a || echo "No changes to commit": 15
SETUPTOOLS_ENABLE_FEATURES=legacy-editable pip install -r . CUSTOM_PATH_FILE: 6
sudo apt-get install binutils libproj-dev gdal-bin: 8
USES: ./.github/actions/send-on-chain: 12
USES: ./.github/actions/setup-idaes: 13
java -jar target CUSTOM_PATH_FILE: 9
chmod +x setup.sh && chmod +x workspace CUSTOM_PATH_FILE: 7
node-sass FLAG FLAG=false . CUSTOM_PATH_DIR FLAG=. CUSTOM_PATH_DIR: 8
docker pull inclavarecontainers CUSTOM_PATH_DIR env.RUNE_VERSION }}-${{ matrix.tag }};: 6
docker tag inclavarecontainers CUSTOM_PATH_DIR env.RUNE_VERSION }}-${{ matrix.tag }} inclavare-dev:${{ matrix.tag }};: 6
inclavare_dev=$(docker run -itd FLAG FLAG FLAG host -e http_proxy=URL -e https_proxy=URL -v ENV_VAR: CUSTOM_PATH_DIR inclavare-dev:${{ matrix.tag }});: 7
echo "inclavare_dev=$inclavare_dev" >> ENV_VAR: 12
docker stop $inclavare_dev: 12
USES: ./.github/actions/generate-random-port: 15
docker cp CUSTOM_PATH_FILE  $inclavare_test: CUSTOM_PATH_DIR: 7
docker restart $inclavare_test; docker exec $inclavare_test bash -c 'rm -rf CUSTOM_PATH_DIR matrix.tag }}': 6
docker stop $inclavare_test: 12
. CUSTOM_PATH_DIR spotless:check: 9
aws ecr get-login-password FLAG ENV_VAR | docker login FLAG AWS FLAG ENV_VAR.dkr.ecr.ENV_VAR.amazonaws.com: 7
docker push ENV_VAR.dkr.ecr.ENV_VAR.amazonaws.com CUSTOM_PATH_DIR: 12
sed -i 's CUSTOM_PATH_DIR mmtk-jikesrvm CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_DIR mmtk-openjdk CUSTOM_PATH_FILE: 8
contrib CUSTOM_PATH_FILE: 7
grunt: 14
yarn workspace  CUSTOM_PATH_DIR build:publish: 7
misc CUSTOM_PATH_FILE: 7
brew FLAG: 8
sudo apt-get install FLAG erlang-dev: 6
mkdir build && pushd build: 7
cmake FLAG . -j2: 12
USES: takanabe/github-actions-automate-projects: 19
uname -m: 9
npm run bench: 7
$rootDir = $pwd.Path: 6
Start-Sleep -s 60: 10
cd $rootDir CUSTOM_PATH_FILE: 6
dotnet test . -c Debug: 6
cd $rootDir: 6
docker push registry.cn-hangzhou.aliyuncs.com CUSTOM_PATH_DIR: 12
sudo apt-get install \: 6
gcloud storage cp "ENV_VAR" "ENV_VAR": 19
tar -xf "ENV_VAR": 6
USES: laminas/documentation-theme/github-actions/docs: 7
pip install FLAG requirements CUSTOM_PATH_FILE: 13
rm -r share CUSTOM_PATH_DIR: 7
FLAG FLAG FLAG \: 6
FLAG FLAG FLAG FLAG \: 7
dotnet test -c Release src CUSTOM_PATH_FILE: 56
. CUSTOM_PATH_DIR war: 6
git add -f .: 9
unzip . CUSTOM_PATH_FILE -d . CUSTOM_PATH_DIR: 6
python -m pip install wheel twine: 8
curl -X POST -d {} URL: 6
pip install -e ".[shell]": 6
bash tool CUSTOM_PATH_FILE: 16
sf package install -p $versionId -w 10 -o scratch-org -r: 12
tox -e ${{ matrix.tox-env }}: 16
export LD_LIBRARY_PATH=ENV_VAR CUSTOM_PATH_DIR -m)-linux-gnu:ENV_VAR CUSTOM_PATH_DIR: 8
export PKG_CONFIG_PATH=ENV_VAR CUSTOM_PATH_DIR -m)-linux-gnu CUSTOM_PATH_DIR: 8
sudo yarn global add yalc: 6
rustup component add miri: 9
sudo apt-key adv FLAG hkp: CUSTOM_PATH_FILE:80 FLAG C5AD17C747E3415A3642D57D77C6C491D6AC1D69: 6
cargo hack build FLAG ${{ matrix.target }} FLAG FLAG std: 10
sed -i "s CUSTOM_PATH_FILE CUSTOM_PATH_DIR vcpkg-configuration.json: 6
export LIBCLANG_PATH= CUSTOM_PATH_DIR: 6
alias cmake='cmake3': 6
kubectl create deployment httpbin FLAG=kennethreitz CUSTOM_PATH_DIR: 10
kubectl expose deployment httpbin FLAG=ClusterIP FLAG=80: 10
kubectl wait FLAG=condition=available FLAG=60s deploy CUSTOM_PATH_DIR: 15
helm install iter8 charts CUSTOM_PATH_DIR FLAG logLevel=trace: 6
kubectl rollout status FLAG FLAG=60s statefulset CUSTOM_PATH_DIR: 16
FLAG "tasks={http}" \: 6
FLAG http.url="URL \: 7
FLAG logLevel=trace: 16
kubectl wait FLAG=condition=complete FLAG=180s job CUSTOM_PATH_DIR: 15
kubectl logs -l iter8.tools CUSTOM_PATH_DIR: 13
helm delete httpbin-test: 7
kubectl port-forward service CUSTOM_PATH_DIR 8080:8080 &: 14
curl "URL -f: 14
sudo apt-get install -qq gcc clang: 6
sudo apt-get install -qq python3 python3-setuptools: 6
make deps-js: 6
( shopt -s dotglob nullglob; rm -rf . CUSTOM_PATH_DIR ): 16
( shopt -s dotglob nullglob; rm -rf ENV_VAR CUSTOM_PATH_DIR ): 8
aws s3 cp s3: CUSTOM_PATH_DIR env.BUILDER_VERSION }} CUSTOM_PATH_FILE . CUSTOM_PATH_FILE && chmod a+x . CUSTOM_PATH_FILE: 18
python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }} CUSTOM_PATH_DIR env.BUILDER_SOURCE }} CUSTOM_PATH_DIR env.BUILDER_VERSION }} CUSTOM_PATH_FILE?run=${{ env.RUN }}', 'builder.pyz')": 16
python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }} CUSTOM_PATH_DIR env.BUILDER_SOURCE }} CUSTOM_PATH_DIR env.BUILDER_VERSION }} CUSTOM_PATH_FILE?run=${{ env.RUN }}', 'builder')": 6
cd action: 6
npm publish FLAG public FLAG beta: 7
sudo locale-gen: 9
php-cs-fixer fix FLAG FLAG: 7
sed -n -e "1{ CUSTOM_PATH_DIR CUSTOM_PATH_DIR -e "2{ CUSTOM_PATH_DIR -e " CUSTOM_PATH_DIR $(git describe FLAG=0 FLAG="$(git describe FLAG=0 FLAG='v*.*.*' FLAG)" FLAG='v*.*.*' FLAG | tr -d v) CUSTOM_PATH_DIR CHANGELOG.md > release-notes.txt: 12
sudo apt-get -y install ${{matrix.install}}: 9
USES: rotki/action-env: 12
make capsimg: 7
USES: loopwerk/tag-changelog: 17
git checkout -b main: 7
 CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_FILE: 12
pip install grpcio-tools: 7
sudo snap install protobuf FLAG: 13
cmake FLAG . FLAG Release -j 3: 9
USES: reugn/github-action-aerospike: 6
cd cpymo-backends CUSTOM_PATH_DIR: 10
mkdir Payload: 11
cp . CUSTOM_PATH_FILE .. CUSTOM_PATH_FILE: 8
strip . CUSTOM_PATH_DIR: 8
USES: leafo/gh-actions-lua: 22
USES: leafo/gh-actions-luarocks: 16
BRANCH="ENV_VAR#refs CUSTOM_PATH_DIR: 7
echo "Building for ENV_VAR": 7
USES: wlixcc/SFTP-Deploy-Action: 8
USES: Xunzhuo/prowox: 7
mdbook build book: 14
USES: armbian/actions/make-json: 6
cat json CUSTOM_PATH_FILE >> README.md: 6
echo done: 7
source_archive=$(echo apache-arrow-adbc-*.tar.gz): 8
VERSION=${source_archive#apache-arrow-adbc-}: 8
VERSION=ENV_VAR%.tar.gz}: 8
tar xf apache-arrow-adbc-ENV_VAR.tar.gz: 8
mv apache-arrow-adbc-ENV_VAR adbc: 8
echo "schedule: ${{ github.event.schedule }}" >> ENV_VAR: 6
echo "ref: ${{ github.ref }}" >> ENV_VAR: 6
pushd adbc: 11
. CUSTOM_PATH_FILE $(pwd): 6
echo "schedule: ${{ github.event.schedule }}": 7
echo "ref: ${{ github.ref }}": 11
npm ci FLAG FLAG FLAG FLAG: 15
bin CUSTOM_PATH_DIR env-up-detach: 9
bin CUSTOM_PATH_DIR env-setup: 9
go clean -testcache -fuzzcache: 8
chmod +x bin CUSTOM_PATH_FILE: 8
cargo FLAG FLAG: 13
echo '${{ toJSON(needs) }}': 11
cmake FLAG obj FLAG RelWithDebInfo: 7
cmake FLAG obj FLAG RelWithDebInfo FLAG install CUSTOM_PATH_DIR: 6
sed -i 's CUSTOM_PATH_DIR  #define MARAUDER_MINI/  \ CUSTOM_PATH_DIR MARAUDER_MINI CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_DIR  #define MARAUDER_V6/  \ CUSTOM_PATH_DIR MARAUDER_V6 CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_DIR  #define MARAUDER_KIT/  \ CUSTOM_PATH_DIR MARAUDER_KIT CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_DIR  #define GENERIC_ESP32/  \ CUSTOM_PATH_DIR GENERIC_ESP32 CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 7
sed -i 's CUSTOM_PATH_DIR  #define MARAUDER_FLIPPER/  \ CUSTOM_PATH_DIR MARAUDER_FLIPPER CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 7
sed -i 's CUSTOM_PATH_DIR  #define ESP32_LDDB/  \ CUSTOM_PATH_DIR ESP32_LDDB CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_DIR  #define MARAUDER_DEV_BOARD_PRO/  \ CUSTOM_PATH_DIR MARAUDER_DEV_BOARD_PRO CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_DIR  #define MARAUDER_V4/  \ CUSTOM_PATH_DIR MARAUDER_V4 CUSTOM_PATH_DIR esp32_marauder CUSTOM_PATH_FILE: 6
python -m unittest discover tests: 10
echo 'ORG='$(echo $(dirname ENV_VAR) | awk '{print tolower($0)}') >> ENV_VAR: 9
brew upgrade: 20
echo RUNNER_IP=$(ip addr show eth0 | grep -i "inet " | cut -d ' ' -f 6 | cut -d ' CUSTOM_PATH_DIR -f 1) >> ENV_VAR: 27
echo RUNNER_PATH=$(pwd | sed 's_ CUSTOM_PATH_DIR >> ENV_VAR: 26
echo "runner IP is ${{ env.RUNNER_IP }}": 27
sudo echo "ENV_VAR" > examples CUSTOM_PATH_FILE: 8
sudo echo "handler_file: CUSTOM_PATH_FILE" >> examples CUSTOM_PATH_FILE: 9
sudo mount -t tmpfs -o size=5M none CUSTOM_PATH_DIR: 8
sudo echo "ENV_VAR" > CUSTOM_PATH_FILE: 8
sudo chmod 600 CUSTOM_PATH_FILE: 9
sudo echo "ENV_VAR" > CUSTOM_PATH_DIR: 8
sudo echo "ca_bundle: CUSTOM_PATH_FILE" >> data CUSTOM_PATH_FILE: 6
USES: jpetrucciani/bandit-check: 8
echo "::set-output name=version::$(amplify FLAG)": 7
USES: duckdb/duckdb-wasm-ci-env: 79
pipx install cookiecutter: 10
pipx install shfmt-py: 10
cookiecutter . CUSTOM_PATH_DIR FLAG FLAG FLAG . CUSTOM_PATH_DIR matrix.features }}.yaml: 6
cd features: 10
devcontainer features test -f ${{ matrix.features }} -i ${{ matrix.baseImage }} .: 7
devcontainer features test FLAG .: 11
USES: azu/action-package-version-to-git-tag: 6
coveralls FLAG=github || coveralls FLAG=github-actions: 6
coveralls FLAG=github FLAG || coveralls FLAG=github-actions FLAG: 6
armory configure FLAG: 8
nr typecheck: 6
USES: macauley/action-homebrew-bump-cask: 6
yarn FLAG && yarn FLAG . CUSTOM_PATH_DIR: 9
make push-microservices-images: 6
USES: UnlyEd/github-action-store-variable: 6
. CUSTOM_PATH_DIR :flank-scripts:download: 14
php -d opcache.enable_cli=1 vendor CUSTOM_PATH_DIR FLAG none $(if [ -n "ENV_VAR" ]; then echo FLAG; else echo FLAG; fi) -v: 15
if [ -n "ENV_VAR" ]; then mv coverage CUSTOM_PATH_FILE coverage CUSTOM_PATH_FILE; fi: 15
yarn electron-builder FLAG: 8
EOL: 30
echo "tag=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 19
USES: kt3k/license_checker: 9
USES: gr2m/twitter-together: 6
docker_build_release_digest="${{ steps.docker_build_release.outputs.digest }}": 8
docker_build_release_sbom_digest="sha256:$(docker buildx imagetools inspect FLAG ${image_name} | sha256sum | head -c 64)": 9
cmake -B debug -G Ninja . -DCMAKE_BUILD_TYPE=Debug: 6
cmake -B release -G Ninja . -DCMAKE_BUILD_TYPE=Release: 6
echo "::set-env name=BRANCH::$(echo ENV_VAR#refs CUSTOM_PATH_DIR | sed 's CUSTOM_PATH_DIR: 8
dotnet pack src CUSTOM_PATH_FILE/ -c Release -o ENV_VAR CUSTOM_PATH_DIR -p:RepositoryBranch=ENV_VAR -p:ContinuousIntegrationBuild=true -p:DeterministicSourcePaths=true CUSTOM_PATH_DIR: 15
dotnet new FLAG ENV_VAR CUSTOM_PATH_FILE: 10
dotnet new bunit FLAG -o ENV_VAR CUSTOM_PATH_DIR: 10
dotnet restore ENV_VAR CUSTOM_PATH_FILE FLAG ENV_VAR CUSTOM_PATH_DIR: 8
dotnet test ENV_VAR CUSTOM_PATH_DIR: 10
USES: rollbar/github-deploy-action: 23
make lint-ci: 7
pip install pygithub: 6
USES: ./.github/actions/test_sqllogic_standalone_linux: 6
USES: ./.github/actions/artifact_failure: 23
export PATH=ENV_VAR CUSTOM_PATH_DIR matrix.tmux-version }} CUSTOM_PATH_DIR: 6
conda install -c defaults anaconda-client conda-build: 6
wget -O - URL 2> CUSTOM_PATH_DIR | sudo apt-key add -: 7
yarn lint FLAG=false: 10
USES: RyanSiu1995/kubebuilder-action: 8
. CUSTOM_PATH_DIR clean jar FLAG: 6
sudo apt install virtualenv: 8
echo "Check the current value of JAVA_HOME": 10
conda install FLAG FLAG pytorch torchvision captum cpuonly -c pytorch: 12
pytest -s -v . CUSTOM_PATH_DIR: 8
pushd packages CUSTOM_PATH_DIR: 24
flutter build appbundle FLAG FLAG: 6
set -ux: 16
rm artifact CUSTOM_PATH_FILE: 6
rmdir artifact: 26
mvn clean: 13
curl -L ${{ env.WDK_URL }} -o wdk-redist.msi: 6
curl -L ${{ env.LIBUSB0_URL }} -o libusb0-redist.zip: 6
curl -L ${{ env.LIBUSBK_URL }} -o libusbk-redist.7z: 6
msiexec CUSTOM_PATH_DIR wdk-redist.msi CUSTOM_PATH_DIR TARGETDIR=%CD%\wdk: 6
7z x libusb0-redist.zip: 6
7z x libusbk-redist.7z: 6
del *.zip: 6
del *.7z: 6
move libusb-win32* libusb0: 6
move libusbK* libusbk: 6
pip install asv: 8
npm install FLAG pnpm: 6
sed -i ' CUSTOM_PATH_DIR Cargo.toml: 6
sed -i 's CUSTOM_PATH_DIR Cargo.toml: 7
echo "VERSION=${version}" >> ENV_VAR: 7
. CUSTOM_PATH_DIR integration_test CUSTOM_PATH_FILE: 18
mvn javadoc:javadoc: 9
git worktree add gh-pages: 9
git push FLAG FLAG origin gh-pages: 9
USES: brettcannon/check-for-changed-files: 21
docker build -t ocadotechnology CUSTOM_PATH_DIR FLAG tester .: 6
docker run -i -p 5000:5000 ocadotechnology CUSTOM_PATH_DIR CUSTOM_PATH_DIR -c "coverage run setup.py test && coverage xml": 6
read CONTAINERID <<< $(docker ps FLAG -q | head -1): 6
docker cp -a ENV_VAR:.coverage $(pwd) CUSTOM_PATH_DIR: 6
docker cp -a ENV_VAR:coverage.xml $(pwd) CUSTOM_PATH_FILE: 6
msys2 . CUSTOM_PATH_FILE MSYS: 6
msys2 . CUSTOM_PATH_FILE MINGW64: 7
msys2 . CUSTOM_PATH_FILE MINGW32: 6
msys2 . CUSTOM_PATH_FILE UCRT64: 6
msys2 . CUSTOM_PATH_FILE CLANG32: 6
msys2 . CUSTOM_PATH_FILE CLANG64: 6
set MSYSTEM=MINGW32: 11
curl URL > src CUSTOM_PATH_FILE: 7
sudo apt-get update -y && \: 6
export LDFLAGS="-L CUSTOM_PATH_DIR: 13
python -m pip install coverage[toml]: 6
python -m coverage report FLAG=100: 11
mkdir -p .tmp: 7
npm deprecate  CUSTOM_PATH_DIR "This package has moved to the  CUSTOM_PATH_DIR scope. See URL for more information.": 8
sudo apt install mingw-w64: 8
curl -o- URL | bash: 12
USES: Trass3r/setup-cpp: 6
sudo systemctl start postgresql: 10
yarn test:ember FLAG ${{ matrix.browser }}: 14
npm run-script build: 14
echo "Update version ...": 8
perl -pe "s CUSTOM_PATH_DIR steps.versions.outputs.release-version }} CUSTOM_PATH_DIR -i gradle.properties: 8
yarn run-production &: 6
unzip . CUSTOM_PATH_FILE: 9
date +%s > report.txt: 6
USES: ./.github/.release/actions/actions/mock-server: 7
USES: ./.github/workflows/composite/maximize-build-space: 13
curl -sSLO URL: 6
python tests CUSTOM_PATH_FILE ray: 9
USES: SwiftDocOrg/swift-doc: 6
USES: ./.github/actions/poetry_setup: 11
STATUS="$(git status)": 6
echo "ENV_VAR" | grep 'nothing to commit, working tree clean': 6
npm run test:build: 14
KEYCHAIN_PATH="ENV_VAR CUSTOM_PATH_FILE-db": 7
pip3 install -r psl-python CUSTOM_PATH_FILE: 8
sudo apt install debootstrap perl git wget xz-utils bubblewrap autoconf: 6
sudo tar -C CUSTOM_PATH_DIR -xpf CUSTOM_PATH_FILE: 6
chmod +x build_wine.sh: 6
sha256sum *.tar.xz: 7
USES: ./.github/workflows/composites/unity-build-plugins/android/: 7
USES: ./.github/workflows/composites/unity-build-plugins/ios/: 7
USES: ./.github/workflows/composites/unity-build-plugins/osx/: 7
USES: ./.github/workflows/composites/unity-build-plugins/windows/: 7
USES: coreos/actions-lib/build-container: 6
pip install -r requirements_build.txt: 8
USES: katexochen/go-tidy-check: 9
datadog-ci junit upload FLAG "ENV_VAR" ENV_VAR CUSTOM_PATH_FILE: 10
cat CUSTOM_PATH_DIR && echo "FLAG": 6
git config user.name mengshang918: 6
git config user.email mengshang918: 6
npm set " CUSTOM_PATH_FILE_TOKEN}}": 6
ctest FLAG FLAG: 34
echo "::info ::Done": 6
USES: ./.github/actions/cleanup-java-env: 7
USES: apollographql/federation-subgraph-compatibility: 8
cargo version: 6
USES: negz/create-tag: 12
php artisan test modules CUSTOM_PATH_FILE: 6
xpm install FLAG linux-arm FLAG ${{ github.event.inputs.xpm_install_loglevel }} ${{ github.event.inputs.xpm_install_options }}: 6
xpm run build FLAG linux-arm: 6
xpm install FLAG darwin-x64 FLAG ${{ github.event.inputs.xpm_install_loglevel }} ${{ github.event.inputs.xpm_install_options }}: 6
xpm run build FLAG darwin-x64: 6
sfdx force:package:install -p ${{ steps.createPackageVersion.outputs.packageVersionId }} -w 10 -u scratch-org -r: 6
git clone -b develop FLAG 1 URL .. CUSTOM_PATH_DIR: 55
grep BOOST_VERSION .. CUSTOM_PATH_FILE: 17
sed -i " CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 25
npm run update: 9
cd lib && mkdir .libs && cp libcurl.a .libs: 9
python3 build.py FLAG: 25
npm install github-release-notes -g: 6
git config FLAG user.name "apicurio-ci": 8
git config FLAG user.email "apicurio.ci": 8
git remote add origin "URL secrets.ACCESS_TOKEN }} CUSTOM_PATH_FILE": 8
git fetch FLAG FLAG FLAG=5 origin master: 7
. CUSTOM_PATH_DIR FLAG clean verify: 6
echo "CCACHE_BASEDIR=ENV_VAR" >> ENV_VAR: 6
mkdir _build && cd _build: 7
. CUSTOM_PATH_DIR -PreproducibleBuild=true build publishToMavenLocal -S: 10
cd smoketests-jreleaser: 22
sed -i -e "s CUSTOM_PATH_DIR needs.precheck.outputs.version }} CUSTOM_PATH_DIR pom.xml: 10
sed -i -e "s CUSTOM_PATH_DIR needs.precheck.outputs.version }} CUSTOM_PATH_DIR build.xml: 10
sed -i -e "s CUSTOM_PATH_DIR needs.precheck.outputs.version }} CUSTOM_PATH_DIR gradle.properties: 10
echo "::group::➡️ build": 10
. CUSTOM_PATH_DIR -B -ntp deploy -DaltDeploymentRepository=local::file:. CUSTOM_PATH_DIR: 10
echo "::group::➡️ json-schema": 8
echo "::group::➡️ env": 10
echo "::group::➡️ assemble": 10
echo "::group::➡️ config": 10
echo "::group::➡️ changelog": 10
echo "::group::➡️ download": 10
echo "::group::➡️ catalog": 10
echo "::group::➡️ checksum": 10
echo "::group::➡️ sign": 10
echo "::group::➡️ deploy": 10
echo "::group::➡️ upload": 10
echo "::group::➡️ release": 10
echo "::group::➡️ prepare": 10
echo "::group::➡️ package": 10
echo "::group::➡️ publish": 10
echo "::group::➡️ full-release": 10
echo "::group::➡️ announce": 10
echo "::group::➡️ template generate": 10
echo "::group::➡️ init": 10
echo "::group::➡️ auto-config": 8
phpunit -c tests CUSTOM_PATH_FILE: 12
yarn prettier:ci: 6
sudo docker buildx build FLAG linux CUSTOM_PATH_DIR FLAG oneuptime CUSTOM_PATH_DIR FLAG -f . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 10
dnf -y install git: 8
pushd src &&: 6
cp config.example.ts config.ts &&: 6
echo "- Ref: ${{ steps.resolve_parameters.outputs.resolvedRef }}" >> ENV_VAR: 9
echo "- Short SHA: ${{ steps.resolve_parameters.outputs.short_sha }}" >> ENV_VAR: 9
echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ghcr.io FLAG ${{ github.actor }} FLAG: 6
mkdir -p ${{ github.workspace }}: 17
git merge FLAG FLAG ENV_VAR || (echo "::error::Merge conflict, please check." && exit -1);: 7
export JAVA_HOME= CUSTOM_PATH_DIR: 8
rm -rf . CUSTOM_PATH_DIR && cp -rf CUSTOM_PATH_DIR . CUSTOM_PATH_DIR && cd ci-tool && git pull && source lib CUSTOM_PATH_FILE: 18
. CUSTOM_PATH_FILE Test Pack: 7
dotnet build FLAG Release FLAG src CUSTOM_PATH_FILE: 7
cargo install cargo-make: 6
mkdir -p builds CUSTOM_PATH_DIR: 6
cd builds CUSTOM_PATH_DIR: 6
npx -p publib publib-nuget: 7
USES: GitGuardian/ggshield-action: 6
choco pack: 12
fluvio cluster diagnostics FLAG: 6
wget -c "URL: 13
export VERSION=${{ steps.get_version.outputs.VERSION }}: 7
mkdir -p lib CUSTOM_PATH_DIR: 7
mkdir dmg: 6
mkdir build CUSTOM_PATH_DIR: 27
mv build CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 13
python -m dev fix-readme: 6
cargo build FLAG ${{ matrix.target }} FLAG FLAG FLAG arithmetic: 7
cargo build FLAG ${{ matrix.target }} FLAG FLAG FLAG ecdsa: 6
cargo build FLAG ${{ matrix.target }} FLAG FLAG FLAG serde: 8
curl -LO ENV_VAR CUSTOM_PATH_FILE: 7
make prep: 6
git add .github CUSTOM_PATH_FILE: 6
git push origin develop: 20
export PATH=ENV_VAR:$(go env GOPATH) CUSTOM_PATH_DIR # temporary fix. See URL: 6
MATRIX=$(echo "ENV_VAR" | jq -rc \: 8
make setup_env: 6
make pytest: 16
PATH=" CUSTOM_PATH_DIR: 10
python build CUSTOM_PATH_FILE: 6
echo '<html><head><meta http-equiv = "refresh" content =" 0 ; url = CUSTOM_PATH_FILE">< CUSTOM_PATH_DIR > atest CUSTOM_PATH_FILE: 6
zip -r -j site.zip atest CUSTOM_PATH_DIR > no_output 2>&1: 6
curl -s -H "Content-Type: application CUSTOM_PATH_DIR -H "Authorization: Bearer ${{ secrets.NETLIFY_TOKEN }}" FLAG "" URL > response.json: 6
docker pull iotaledger CUSTOM_PATH_DIR: 10
. CUSTOM_PATH_FILE dev: 27
. CUSTOM_PATH_FILE android . CUSTOM_PATH_FILE samples CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_FILE ios . CUSTOM_PATH_FILE samples CUSTOM_PATH_DIR: 7
flutter pub global activate flutter_plugin_tools: 11
flutter pub global run flutter_plugin_tools format: 11
rm package.json: 11
dotnet build Source CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_DIR -p . CUSTOM_PATH_DIR test: 6
python -m pip install setuptools wheel: 9
mkdir -p artifacts CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR: 420
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 30m bash -c "cd CUSTOM_PATH_DIR && CUSTOM_PATH_FILE HOROVOD_LOG_LEVEL=DEBUG pytest FLAG -v FLAG 10 FLAG '[%(asctime)-15s %(levelname)s %(filename)s:%(lineno)d %(funcName)s()] %(message)s' FLAG=no FLAG FLAG= CUSTOM_PATH_FILE test_elastic_spark_tensorflow2.py": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 30m bash -c "cd CUSTOM_PATH_DIR && CUSTOM_PATH_FILE HOROVOD_LOG_LEVEL=DEBUG pytest FLAG -v FLAG 10 FLAG '[%(asctime)-15s %(levelname)s %(filename)s:%(lineno)d %(funcName)s()] %(message)s' FLAG=no FLAG FLAG= CUSTOM_PATH_FILE test_elastic_spark_tensorflow.py": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 30m bash -c "cd CUSTOM_PATH_DIR && CUSTOM_PATH_FILE HOROVOD_LOG_LEVEL=DEBUG pytest FLAG -v FLAG 10 FLAG '[%(asctime)-15s %(levelname)s %(filename)s:%(lineno)d %(funcName)s()] %(message)s' FLAG=no FLAG FLAG= CUSTOM_PATH_FILE test_elastic_spark_torch.py": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c "cd CUSTOM_PATH_DIR && HOROVOD_LOG_LEVEL=DEBUG pytest FLAG -v FLAG 10 FLAG '[%(asctime)-15s %(levelname)s %(filename)s:%(lineno)d %(funcName)s()] %(message)s' FLAG=no FLAG FLAG= CUSTOM_PATH_FILE test_elastic_torch.py test_elastic_tensorflow2.py": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c "cd CUSTOM_PATH_DIR && HOROVOD_LOG_LEVEL=DEBUG pytest FLAG -v FLAG 10 FLAG '[%(asctime)-15s %(levelname)s %(filename)s:%(lineno)d %(funcName)s()] %(message)s' FLAG=no FLAG FLAG= CUSTOM_PATH_FILE test_elastic_torch.py test_elastic_tensorflow.py test_elastic_tensorflow_keras.py": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " CUSTOM_PATH_FILE CUSTOM_PATH_DIR start && cd CUSTOM_PATH_DIR && pytest FLAG -v FLAG=fd FLAG FLAG= CUSTOM_PATH_FILE test_static_run.py": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m horovodrun -np 2 -H localhost:2 FLAG python CUSTOM_PATH_FILE: 36
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m python CUSTOM_PATH_FILE FLAG 2 FLAG localhost:2 FLAG gloo: 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c " cd CUSTOM_PATH_DIR && (ls -1 test_*.py | xargs -n 1 horovodrun -np 2 -H localhost:2 FLAG CUSTOM_PATH_DIR CUSTOM_PATH_FILE gloo)": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m python CUSTOM_PATH_FILE FLAG CUSTOM_PATH_DIR FLAG 2 FLAG localhost:2 FLAG gloo: 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m horovodrun -np 2 -H localhost:2 FLAG python CUSTOM_PATH_FILE FLAG CUSTOM_PATH_DIR: 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c " cd CUSTOM_PATH_DIR && (ls -1 test_*.py | xargs -n 1 CUSTOM_PATH_DIR CUSTOM_PATH_FILE gloo)": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m python CUSTOM_PATH_FILE 2 localhost:2 gloo: 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "horovodrun -np 2 python -m horovod.tensorflow.data.compute_worker CUSTOM_PATH_FILE & horovodrun -np 2 FLAG python CUSTOM_PATH_FILE CUSTOM_PATH_FILE": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m python CUSTOM_PATH_FILE 2 2 2 localhost:2,127.0.0.1:2: 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m horovodrun -np 2 FLAG 2 FLAG 2 -H localhost:2,127.0.0.1:2 FLAG python CUSTOM_PATH_FILE: 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "  CUSTOM_PATH_FILE CUSTOM_PATH_DIR start && cd CUSTOM_PATH_DIR && pytest FLAG -v FLAG=fd FLAG FLAG= CUSTOM_PATH_FILE test_static_run.py": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR &&  CUSTOM_PATH_FILE CUSTOM_PATH_DIR start && cd CUSTOM_PATH_DIR && pytest FLAG -v FLAG=fd FLAG FLAG= CUSTOM_PATH_FILE test_static_run.py": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " python CUSTOM_PATH_FILE FLAG 2 FLAG localhost:2 FLAG mpi": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " OMP_NUM_THREADS=1 \$(cat CUSTOM_PATH_DIR python CUSTOM_PATH_FILE": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR && OMP_NUM_THREADS=1 \$(cat CUSTOM_PATH_DIR python CUSTOM_PATH_FILE": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c "  cd CUSTOM_PATH_DIR && (ls -1 test_*.py | xargs -n 1 \$(cat CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE mpi)": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR &&  cd CUSTOM_PATH_DIR && (ls -1 test_*.py | xargs -n 1 \$(cat CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE mpi)": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " python CUSTOM_PATH_FILE FLAG CUSTOM_PATH_DIR FLAG 2 FLAG localhost:2 FLAG mpi": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR && python CUSTOM_PATH_FILE FLAG CUSTOM_PATH_DIR FLAG 2 FLAG localhost:2 FLAG mpi": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " \$(cat CUSTOM_PATH_DIR python CUSTOM_PATH_FILE FLAG CUSTOM_PATH_DIR: 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR && \$(cat CUSTOM_PATH_DIR python CUSTOM_PATH_FILE FLAG CUSTOM_PATH_DIR: 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c "  cd CUSTOM_PATH_DIR && (ls -1 test_*.py | xargs -n 1 CUSTOM_PATH_DIR CUSTOM_PATH_FILE mpi)": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 15m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR &&  cd CUSTOM_PATH_DIR && (ls -1 test_*.py | xargs -n 1 CUSTOM_PATH_DIR CUSTOM_PATH_FILE mpi)": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " python CUSTOM_PATH_FILE 2 localhost:2 mpi": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR && python CUSTOM_PATH_FILE 2 localhost:2 mpi": 24
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " \$(cat CUSTOM_PATH_DIR python CUSTOM_PATH_FILE": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR && \$(cat CUSTOM_PATH_DIR python CUSTOM_PATH_FILE": 24
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "cd CUSTOM_PATH_DIR && pytest -v FLAG=no FLAG FLAG= CUSTOM_PATH_FILE integration CUSTOM_PATH_FILE": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " python CUSTOM_PATH_FILE FLAG 3 FLAG 64": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " python CUSTOM_PATH_FILE FLAG 3": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR && python CUSTOM_PATH_FILE FLAG 3": 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c " python CUSTOM_PATH_FILE FLAG 3 FLAG CUSTOM_PATH_DIR: 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "\$(cat CUSTOM_PATH_DIR && echo ' CUSTOM_PATH_DIR > CUSTOM_PATH_DIR && python CUSTOM_PATH_FILE FLAG 3 FLAG CUSTOM_PATH_DIR: 12
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "OMP_NUM_THREADS=1 CUSTOM_PATH_FILE python CUSTOM_PATH_FILE FLAG 2 FLAG CUSTOM_PATH_DIR FLAG CUSTOM_PATH_DIR FLAG 3": 18
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "OMP_NUM_THREADS=1 CUSTOM_PATH_FILE python CUSTOM_PATH_FILE FLAG 2 FLAG CUSTOM_PATH_DIR FLAG file: CUSTOM_PATH_DIR FLAG 3 FLAG 0.1": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "OMP_NUM_THREADS=1 CUSTOM_PATH_FILE python CUSTOM_PATH_FILE FLAG 2 FLAG file: CUSTOM_PATH_DIR FLAG 3 FLAG 0.1": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 30m bash -c "cd CUSTOM_PATH_DIR && (ls -1 test_spark*.py | xargs -n 1 CUSTOM_PATH_DIR CUSTOM_PATH_FILE spark)": 6
docker-compose -f docker-compose.test.yml run -e GITHUB_ACTIONS FLAG FLAG "$(pwd) CUSTOM_PATH_DIR matrix.image }} CUSTOM_PATH_DIR ${{ matrix.image }} CUSTOM_PATH_DIR 10m bash -c "cd CUSTOM_PATH_DIR spark-submit FLAG \"local[2]\" \" CUSTOM_PATH_FILE\" CUSTOM_PATH_FILE & OMP_NUM_THREADS=1 CUSTOM_PATH_FILE spark-submit FLAG \"local[2]\" FLAG tensorflow2_mnist_data_service_train_fn_compute_side_dispatcher.py,tensorflow2_mnist_data_service_train_fn_training_side_dispatcher.py tensorflow2_mnist_data_service.py CUSTOM_PATH_FILE": 6
docker system df: 17
pythran FLAG: 6
bash qbittorrent-nox-static.sh libtorrent: 8
pip install mkdocs-git-revision-date-localized-plugin: 6
pip install -r requirements_additional.txt: 8
rm -rf ~ CUSTOM_PATH_DIR github.event.inputs.version }}*: 15
mvn -B clean package FLAG pom.xml: 6
echo ${{ github.event.release.tag_name }}: 8
qmake -v: 20
USES: gagoar/invoke-aws-lambda: 7
tag=$(echo ENV_VAR | cut -d / -f 3): 6
echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~ CUSTOM_PATH_DIR: 10
export ASAN_OPTIONS=detect_leaks=0: 9
docker-compose -f . CUSTOM_PATH_FILE up -d: 11
docker-compose -f . CUSTOM_PATH_FILE down: 8
vcpkg install openssl:x64-windows openssl:x64-windows-static: 8
vcpkg list: 8
USES: ./.github/actions/free-up-disk-space: 12
USES: ./.github/actions/minikube-setup: 10
USES: ./.github/actions/base-download: 10
USES: ./.github/actions/kserve-dep-setup: 10
kubectl get pods -n kserve: 22
kubectl describe pods -n kserve: 10
USES: m-kuhn/backport: 6
node -e "require('google-proto-files').loadSync('schema CUSTOM_PATH_FILE');": 6
. CUSTOM_PATH_DIR &&: 10
yarn install FLAG | grep -v 'YN0013': 6
USES: bab2min/run-on-arch-action: 11
python -m pip install -r requirements CUSTOM_PATH_FILE -c requirements CUSTOM_PATH_FILE: 8
pip install -r requirements CUSTOM_PATH_FILE -c requirements CUSTOM_PATH_FILE: 6
make cythonize: 12
USES: regclient/actions/regctl-installer: 9
tar xvf images.tar.gz: 6
ruby . CUSTOM_PATH_FILE: 7
echo "using version tag ENV_VAR:10}": 7
echo ::set-output name=version::"ENV_VAR:10}": 7
sudo .github CUSTOM_PATH_DIR: 19
USES: ben-z/actions-comment-on-issue: 8
gradle wrapper: 8
echo "SDL3_DIR=$(pwd) CUSTOM_PATH_DIR >> ENV_VAR: 12
( cd prefix; find ) | LC_ALL=C sort -u: 8
export PKG_CONFIG_PATH=${{ env.SDL3_DIR }} CUSTOM_PATH_DIR: 11
echo "COMPOSER_CACHE_FILES_DIR=$(composer config cache-files-dir)" >> ENV_VAR: 14
mkdir -p build/: 6
cd images: 6
USES: udondan/jsii-publish: 12
cd ${{ env.folder }}: 27
make pip_test: 11
cd machine-learning: 7
docker-compose -f docker CUSTOM_PATH_FILE up -d: 15
echo This action can only be run on development branch, not ${{ github.ref }}: 6
curl -s URL | sudo bash: 11
make analyze: 9
pip3 install -r requirements CUSTOM_PATH_FILE: 9
. CUSTOM_PATH_FILE1 -dsn ${{ secrets.SENTRY_DSN }}: 7
. CUSTOM_PATH_FILE1 -url ${{ secrets.AVD3_URL }}: 6
ci CUSTOM_PATH_FILE " CUSTOM_PATH_DIR: 7
echo "PLAYWRIGHT_BROWSERS_PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 8
echo "PLAYWRIGHT_BROWSERS_PATH=ENV_VAR\.cache\playwright-bin" >> $env:GITHUB_ENV: 8
pnpm playwright install chromium: 15
pnpm prettier FLAG .: 11
bundle exec appraisal install: 6
git reset FLAG ${{ inputs.commit }}: 6
pnpm exec playwright install chromium: 8
pnpm exec playwright test FLAG=tests CUSTOM_PATH_FILE: 8
pnpm exec allure generate FLAG ${{ env.ALLURE_RESULTS_DIR }} FLAG ${{ env.ALLURE_REPORT_DIR }}: 9
USES: Homebrew/actions/failures-summary-and-bottle-result: 9
git config FLAG user.email 1589480+BrewTestBot: 6
git config FLAG user.name BrewTestBot: 6
"ENV_VAR" \: 8
USES: EddieHubCommunity/gh-action-community/src/welcome: 11
sudo apt-get install -yq sqlite libsqlite3-dev: 24
bundle exec rake workflow:verify[ENV_VAR]: 24
cargo x generate-summaries: 6
output="$(cargo x diff-summary libra-base CUSTOM_PATH_FILE target CUSTOM_PATH_FILE)": 9
echo "::set-output name=diff::${output}": 10
python3 -m pip install tox: 32
msbuild CUSTOM_PATH_DIR Sandboxie\SandboxDll.sln CUSTOM_PATH_DIR CUSTOM_PATH_DIR -maxcpucount:8: 6
msbuild CUSTOM_PATH_DIR Sandboxie\Sandbox.sln CUSTOM_PATH_DIR CUSTOM_PATH_DIR -maxcpucount:8: 9
SandboxiePlus\install_jom.cmd: 7
msbuild CUSTOM_PATH_DIR SandboxieTools\SandboxieTools.sln CUSTOM_PATH_DIR CUSTOM_PATH_DIR -maxcpucount:8: 7
USES: afc163/surge-preview: 19
id="${{ steps.create-cluster.outputs.ID }}": 10
USES: nev7n/wait_for_response: 9
yarn install FLAG;: 6
USES: abhinavsingh/setup-bazel: 22
USES: ./.github/workflows/check: 7
rustup self update: 14
curl -sSL URL | tar -xz FLAG=bin: 9
rustc -Vv: 20
echo ${{github.event.inputs.extension_version}}: 7
echo ${{github.event.inputs.branch}}: 7
echo ${{github.event.inputs.trigger_reason}}: 9
$source_dir = "$(ridk exec cygpath FLAG "$(Get-Location)")": 6
$build_dir = "$(ridk exec cygpath FLAG "$(Get-Location)\build")": 6
ENV_VARrrorActionPreference = "Continue": 7
echo ENV_VAR > ENV_VAR CUSTOM_PATH_DIR: 10
pip install -r requirements-lint.txt: 7
tox -m docs: 6
rm -f .repo CUSTOM_PATH_FILE: 12
npm install FLAG  CUSTOM_PATH_DIR  CUSTOM_PATH_DIR: 7
cd test CUSTOM_PATH_FILE: 10
cp Adafruit_Blinka CUSTOM_PATH_FILE micropython CUSTOM_PATH_DIR: 7
pwd >> ENV_VAR: 6
pnpm run test-unit: 7
npm version ${{ github.event.inputs.version }}: 9
cargo fmt -- FLAG FLAG always: 9
cat >. CUSTOM_PATH_FILE <<EOL: 9
APPLICATION_CHART_REPO_URL=URL: 8
ADDON_CHART_REPO_URL=URL: 8
zip FLAG . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 7
.github CUSTOM_PATH_FILE \: 9
cat r CUSTOM_PATH_FILE: 6
scripts CUSTOM_PATH_DIR ${{needs.get_version.outputs.icloudpd_version}} amd64: 6
scripts CUSTOM_PATH_DIR ${{needs.get_version.outputs.icloudpd_version}}: 8
echo "::set-output name=cache::$(make go.cachedir)": 9
make vendor vendor.check: 24
make check-diff: 11
make -j2 test: 7
echo "Docker login": 6
USES: webiny/action-post-run: 21
gem install json: 9
USES: ./.github/actions/yarn: 12
pip install -U build twine wheel: 6
sudo apt-get install libdbus-1-dev: 6
sudo pip3 install -r requirements.txt: 8
USES: klothoplatform/gh-action-retry: 8
yarn ${{ matrix.step }}: 17
nix-store FLAG: 6
. CUSTOM_PATH_DIR print_thread_dumps: 12
USES: ./.github/actions/rust-toolchain-from-file: 14
< CUSTOM_PATH_DIR: 22
brew install jq: 14
USES: suzuki-shunsuke/github-action-renovate-config-validator: 6
USES: guyarb/golang-test-annotations: 10
USES: ./agoric-sdk/.github/actions/restore-node: 7
USES: ./agoric-sdk/.github/actions/notify-status: 7
cp FrameworkBenchmarks CUSTOM_PATH_FILE FrameworkBenchmarks CUSTOM_PATH_FILE: 6
cp LICENSE dist/: 6
USES: ./.github/actions/parse-version: 9
USES: ./.github/actions/setup-docker: 8
pushd tests: 12
USES: ./.github/workflows/actions/quarto-dev: 6
echo "version=$version" >> $env:GITHUB_OUTPUT: 7
conan profile update settings.build_type=Release default: 6
chmod +x solc-static-linux: 9
sudo mv solc-static-linux CUSTOM_PATH_DIR: 9
spec CUSTOM_PATH_FILE: 6
git config FLAG user.name 'Tanner Linsley': 6
git config FLAG user.email 'tannerlinsley': 6
npm install -g ts-node: 6
sudo xcode-select FLAG "$(find CUSTOM_PATH_DIR -mindepth 1 -maxdepth 1 ! -type l | grep "Xcode_[\.0-9]*app" | sort -V | tail -1) CUSTOM_PATH_DIR: 6
echo "C:\msys64\mingw64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append: 6
sudo install gopogh-linux-amd64 CUSTOM_PATH_DIR: 10
USES: Borales/actions-yarn: 6
curl -fsSLO URL: 6
command-exists dorothy: 6
echo-style FLAG='ok': 6
yarn playwright install-deps: 8
echo "PLAYWRIGHT_VERSION=ENV_VAR" >> ENV_VAR: 9
source .envrc: 25
cos-build ENV_VAR: 24
go build -o build: 41
sudo apt-get install -y xorriso squashfs-tools: 20
create_remote_manifest manifest.yaml: 20
sudo -E MAKEISO_ARGS="FLAG cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" MANIFEST=manifest.yaml.remote make local-iso: 14
sudo -E YQ= CUSTOM_PATH_DIR MAKEISO_ARGS="FLAG cOS-Seed-green-${{ env.COS_VERSION }}-x86_64" make iso: 14
brew install yq: 38
COS_VERSION=$(cos_version): 28
PACKER_ARGS="-var='accelerator=hvf' -var='build=ENV_VAR' -var='arch=x86_64' -var='flavor=green' -var='feature=vagrant' -only qemu.cos" make packer: 14
PACKER_ARGS="-var='feature=vagrant' -var='build=ENV_VAR' -var='arch=x86_64' -var='flavor=green' -only virtualbox-iso.cos" make packer: 14
make vagrantfile: 14
drop_recovery manifest.yaml: 10
echo "quay.io CUSTOM_PATH_DIR > images-green-x86_64.txt: 7
zypper in -y bc qemu-tools sudo curl e2fsprogs dosfstools mtools squashfs gptfdisk make tar gzip xz which: 7
mv disk.vhd cOS-Vanilla-AZURE-green-${{ env.COS_VERSION }}-x86_64.vhd: 7
echo "installed-version=$(pulumi version)" >> "ENV_VAR": 6
echo "expected-version=v$(curl -sS URL >> "ENV_VAR": 6
echo "Expected version ${{ steps.vars.outputs.expected-version }} but found ${{ steps.vars.outputs.installed-version }}": 6
curl -fsSL URL | sh: 18
wget URL && \: 10
.\build.ps1: 12
rustup target add aarch64-unknown-linux-musl: 6
echo "::set-output name=oso_version::$(cat VERSION)": 10
mkdir -p languages CUSTOM_PATH_DIR: 16
cp -r oso_static_library CUSTOM_PATH_FILE languages CUSTOM_PATH_FILE: 12
rm languages CUSTOM_PATH_FILE: 6
cp README.md languages CUSTOM_PATH_FILE: 6
node dist CUSTOM_PATH_FILE: 8
echo "::set-output name=oso_version::${github_ref CUSTOM_PATH_DIR: 6
npm run lint-ci: 8
7z a ${{ github.workspace }} CUSTOM_PATH_FILE *checkstyle* -r: 8
. CUSTOM_PATH_DIR FLAG FLAG -e FLAG FLAG clean test verify -Pjacoco -Dmaven.wagon.httpconnectionManager.ttlSeconds=120 -Dmaven.wagon.http.retryHandler.count=5 -DskipTests=false -DskipIntegrationTests=false -Dcheckstyle.skip=false -Dcheckstyle_unix.skip=false -Drat.skip=false -Dmaven.javadoc.skip=true -DembeddedZookeeperPath=${{ github.workspace }} CUSTOM_PATH_DIR: 12
. CUSTOM_PATH_DIR FLAG FLAG -e FLAG FLAG clean test verify -Pjacoco -D"http.keepAlive=false" -D"maven.wagon.http.pool=false" -D"maven.wagon.httpconnectionManager.ttlSeconds=120" -D"maven.wagon.http.retryHandler.count=5" -DskipTests=false -DskipIntegrationTests=true -D"checkstyle.skip=false" -D"checkstyle_unix.skip=true" -D"rat.skip=false" -D"maven.javadoc.skip=true" -D"embeddedZookeeperPath=${{ github.workspace }} CUSTOM_PATH_DIR: 12
cat diff.log: 6
USES: docker://takanabe/github-actions-automate-projects:v0.0.1: 31
cargo install cargo-llvm-cov: 8
sed -i'' 's CUSTOM_PATH_DIR tests CUSTOM_PATH_FILE: 7
echo -e "[pytest]\nddtrace-patch-all = 1" > pytest.ini: 6
pip install FLAG MarkupSafe==2.0.1: 6
nosetests: 7
pytest tests CUSTOM_PATH_DIR FLAG=ploomber: 8
echo "Integration tests... success! ;-)": 7
npx prettier FLAG .gitignore FLAG FLAG .: 6
USES: vmactions/dragonflybsd-vm: 7
mkdir -p "${{ github.workspace }} CUSTOM_PATH_DIR: 6
USES: robvanderleek/create-issue-branch: 6
SKIP=no-commit-to-branch pre-commit run FLAG: 6
cmd.exe CUSTOM_PATH_DIR "call `"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\amd64\vcvars64.bat`" && set > %temp%\vcvars.txt": 8
dotnet test tests CUSTOM_PATH_FILE FLAG:"XPlat Code Coverage" -r TestResults -c Release -f net6.0 FLAG FLAG: 6
sleep 480: 9
python3 -m pip install FLAG pillow: 8
python3 -m pip install pytest packaging defusedxml: 8
python3 -m pip install FLAG=:all: pillow_heif: 6
cd .. && python3 -m pytest pillow_heif: 10
USES: oxidize-rb/actions/setup-ruby-and-rust: 11
-t "ghcr.io CUSTOM_PATH_DIR \: 6
sudo apt-get install gcc-multilib g++-multilib: 10
echo "GitHub ref: ENV_VAR": 7
echo "GitHub event: ENV_VAR": 7
USES: ./.github/actions/build-test: 7
echo "::set-output name=sha_short::ENV_VAR::7}": 19
docker push kubeshop CUSTOM_PATH_DIR steps.github_sha.outputs.sha_short }}: 12
sudo apt -o Acquire::Retries=3 install -y musl-tools: 11
cmake FLAG . -- -j 6: 6
echo "Running . CUSTOM_PATH_DIR: 8
cd tests && python tests.py: 6
pip install .  FLAG certifi: 6
make download-terraform: 6
7z x .. CUSTOM_PATH_DIR: 13
sleep 40: 8
cd ${{github.workspace}} && sudo rm -rf ..?* .[!.]* *: 8
pip3 install FLAG -r requirements.txt: 11
USES: ./.github/.release/actions/actions/utils/fast-jobs-failure: 20
pdm run pkg_install: 8
cmake FLAG ${{ env.build_dir }} FLAG ${{ env.config }} FLAG dtest FLAG 4: 6
cargo -Vv && rustc -Vv: 7
Scripts CUSTOM_PATH_FILE: 16
cargo llvm-cov clean FLAG: 6
echo "GRAALVM_HOME: ENV_VAR": 8
echo "JAVA_HOME: ENV_VAR": 8
rustup toolchain install stable FLAG FLAG minimal: 9
pip install -U -r requirements_test.txt: 8
echo "Failed to restore Python venv from cache": 10
echo "Failed to restore pre-commit environment from cache": 10
. venv\\Scripts\\activate: 6
echo "TEMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV: 8
yarn run lint:types: 13
autoconf automake cmake g++ git libcrypto++-dev libcurl4-gnutls-dev \: 9
libgit2-dev libqt5qml5 libqt5quick5 libqt5svg5-dev \: 9
libqt5webkit5-dev libsqlite3-dev libssh2-1-dev libssl-dev libssl-dev \: 9
libtool libusb-1.0-0-dev libxml2-dev libxslt1-dev libzip-dev make \: 9
pkg-config qml-module-qtlocation qml-module-qtpositioning \: 9
qml-module-qtquick2 qt5-qmake qtchooser qtconnectivity5-dev \: 7
qtdeclarative5-dev qtdeclarative5-private-dev qtlocation5-dev \: 9
qtpositioning5-dev qtscript5-dev qttools5-dev qttools5-dev-tools \: 9
qtquickcontrols2-5-dev xvfb libbluetooth-dev libmtp-dev: 8
echo "building mobile": 6
git config FLAG user.name "Subsurface CI": 9
bash -e -x subsurface CUSTOM_PATH_FILE -mobile: 6
echo "running tests for mobile": 6
cd build-mobile CUSTOM_PATH_DIR: 6
xvfb-run FLAG make check: 14
bash -e -x subsurface CUSTOM_PATH_FILE -desktop -build-with-webkit: 8
echo "running tests for desktop": 7
python3 -m pip install -r docs CUSTOM_PATH_FILE: 9
yarn buildall: 12
sed -i 's CUSTOM_PATH_FILE\ CUSTOM_PATH_DIR README.md: 8
yarn workspace react-day-picker run build: 7
USES: godaddy-wordpress/setup-wp-env: 7
npx grunt build: 13
python -m pip install -U cibuildwheel: 6
echo "${{github.workspace}} CUSTOM_PATH_DIR >> ENV_VAR: 8
git config FLAG core.filemode false: 8
git config FLAG branch.autosetuprebase always: 7
echo "prerelease=true" >> ENV_VAR: 9
python3 build.py: 8
USES: distributhor/workflow-webhook: 10
GOPROXY=URL go mod download: 9
cmake -Bbuild: 7
branch_name=ENV_VAR##* CUSTOM_PATH_DIR: 20
make readme CUSTOM_PATH_DIR: 9
make readme: 12
USES: cloudposse/actions/github/create-pull-request: 8
. CUSTOM_PATH_DIR :desktop:packageUberJarForCurrentOS: 6
. CUSTOM_PATH_DIR de.qaware.maven:go-offline-maven-plugin:resolve-dependencies: 20
npm run lint && npm run test: 6
.github CUSTOM_PATH_FILE || \: 9
python utilities CUSTOM_PATH_FILE: 7
make zip: 10
cd data: 15
yarn deploy:stg: 9
previousTag=$(git tag FLAG=-creatordate | grep "^v" | sed -n 2p): 9
current_tag=$(git rev-parse FLAG=8 HEAD): 7
release_date=$(date +'%Y%m%d'): 7
echo "ENV_VAR-ENV_VAR.$release_date.$current_tag">version.txt  : 7
cat version.txt: 12
make ${{ matrix.unit_type }}: 6
make crypto_setup_gopath: 8
cd finance: 6
ng version: 6
cd printing CUSTOM_PATH_DIR flutter create -t app FLAG FLAG net.nfet FLAG example .: 6
USES: maxim-lobanov/setup-android-tools: 9
USES: codfish/semantic-release-action: 11
cmake FLAG build -j 4: 15
echo ${{ secrets.CI_REGISTRY_TOKEN }} | docker login docker.pkg.github.com -u ENV_VAR FLAG: 27
docker pull "docker.pkg.github.com CUSTOM_PATH_DIR: 24
docker tag docker.pkg.github.com CUSTOM_PATH_DIR ENV_VAR: 24
-e MJKEY \: 6
FLAG 6500m \: 12
 CUSTOM_PATH_DIR -c \: 19
mkdir build64: 6
cd build64: 7
pyinstaller -F -n meshtastic FLAG meshtastic meshtastic CUSTOM_PATH_FILE: 6
autoreconf -if: 13
fossa init: 9
gem install brakeman FLAG ENV_VAR: 13
USES: hole19/git-tag-action: 6
echo "name=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 6
sudo apt install zstd golang docker.io containerd runc: 14
docker build -f . CUSTOM_PATH_DIR -t ENV_VAR CUSTOM_PATH_DIR .: 7
docker save ENV_VAR CUSTOM_PATH_DIR | gzip -f > builder.zstd: 7
~ CUSTOM_PATH_DIR sign FLAG FLAG cosign.key $(docker inspect FLAG='{{index .RepoDigests 0}}' ENV_VAR CUSTOM_PATH_DIR ): 7
docker buildx build FLAG=linux CUSTOM_PATH_DIR FLAG -t graphiteapp CUSTOM_PATH_DIR .: 12
USES: celinekurpershoek/link-checker: 7
echo "${{steps.link-report.outputs.result}}": 7
mkdir -p deployment-test: 6
export GOPATH= CUSTOM_PATH_DIR: 6
USES: marocchino/tool-versions-action: 10
composer require "api-platform CUSTOM_PATH_DIR matrix.api-platform }}" FLAG FLAG FLAG: 8
bin CUSTOM_PATH_DIR assets:install public -vvv: 7
bin CUSTOM_PATH_DIR cache:warmup: 6
APP_DEBUG=1 bin CUSTOM_PATH_DIR doctrine:database:create -vvv: 6
symfony server:ca:install: 9
vendor CUSTOM_PATH_DIR features CUSTOM_PATH_DIR FLAG FLAG FLAG -vvv -f progress FLAG="~&&~&&~": 19
USER_INPUT=${{ github.event.inputs.tag_prefix }}: 8
docker push docker.io CUSTOM_PATH_DIR env.TAG }}: 6
docker rmi docker.io CUSTOM_PATH_DIR env.TAG }}: 6
find . CUSTOM_PATH_FILE | xargs pip install: 7
USES: flatpak/flatpak-github-actions/flat-manager: 7
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG python-six: 10
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG wangle: 12
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG fbthrift: 10
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG fb303: 8
python3 build CUSTOM_PATH_FILE FLAG build FLAG python-six: 7
python3 build CUSTOM_PATH_FILE FLAG build FLAG wangle: 9
python3 build CUSTOM_PATH_FILE FLAG build FLAG fbthrift: 7
echo "IMAGE_TAG=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 6
cd build CUSTOM_PATH_DIR env.TEST_URL }}: 11
cd build CUSTOM_PATH_DIR env.TEST_URL }} CUSTOM_PATH_DIR: 13
sudo apt-get install -y libzmq3-dev: 7
pip install poetry==${{ vars.POETRY_VERSION }}: 6
python3 -m pip install black: 18
swiftlint: 14
sudo -E apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3.8 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev libfuse-dev python3-setuptools: 9
USES: stefanbuck/github-issue-parser: 17
USES: redhat-plumbers-in-action/advanced-issue-labeler: 12
yarn typescript: 11
dotnet publish -c Release: 7
npm run start: 10
composer normalize: 14
sed -i "s CUSTOM_PATH_DIR gradle.properties: 8
sudo env PATH=ENV_VAR just ci-prepare: 10
pip list | grep 'astroid\|pylint': 6
popd &> CUSTOM_PATH_DIR: 10
python3 .. CUSTOM_PATH_FILE: 12
seleniumbase install chromedriver: 6
echo "def test_1(): pass" > nothing.py: 6
pytest nothing.py: 6
pytest examples CUSTOM_PATH_FILE FLAG=chrome FLAG -v -s FLAG=junit CUSTOM_PATH_FILE: 26
bash . CUSTOM_PATH_DIR build FLAG: 7
pip3 install -r "ENV_VAR CUSTOM_PATH_FILE": 6
python3 -m pip install aiogithubapi: 6
FLAG 100GB \: 6
FLAG pd-ssd \: 6
FLAG cloud-platform \: 10
gcloud compute ssh \: 6
FLAG ${{ env.ZONE }} \: 7
FLAG="-o ServerAliveInterval=5" \: 14
docker login -u ENV_VAR -p ENV_VAR ENV_VAR: 11
export CXX=g++-9: 16
npm run dev: 11
cabal update: 10
mkdir -p tidal-listener CUSTOM_PATH_DIR: 6
mv tidal-listener CUSTOM_PATH_DIR tidal-listener CUSTOM_PATH_DIR: 8
USES: julia-actions/cache: 6
USES: sunxyw/workflows/setup-environment: 6
python -m pip install cmind: 7
.automation CUSTOM_PATH_FILE: 13
$appsettings.applicationInsights.instrumentationkey = "${{ secrets.InstrumentationKey }}": 7
USES: azure/cli: 6
USES: opspresso/action-docker: 17
npm run generate-docs: 8
make ${{matrix.config}}: 6
echo "{\"workload_hard_timeout\": 1000}" > sieve_config.json: 59
mkdir -p build-static/: 6
ls -hal ${{ github.workspace }} CUSTOM_PATH_DIR: 12
ln -s ds-swig ${{ github.workspace }} CUSTOM_PATH_DIR: 12
chmod +x ${{ github.workspace }} CUSTOM_PATH_DIR ${{ github.workspace }} CUSTOM_PATH_DIR: 12
wget -O temp.zip URL: 10
unzip temp.zip: 10
rm temp.zip: 10
mv convert_graphdef_memmapped_format CUSTOM_PATH_DIR: 8
cp CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 16
USES: ./.github/actions/smoke-tests: 6
VERSION="${{ github.ref }}": 7
VERSION=ENV_VAR##*v}: 8
BODY=$(git show -s FLAG=%b): 7
echo "::set-output name=BODY::ENV_VAR": 7
export SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}: 7
export SENTRY_URL=URL: 7
export SENTRY_ORG=iobroker: 6
sentry-cli releases new ENV_VAR: 7
USES: sudo-bot/action-doctum: 7
mkdir -p smbx13: 6
cd smbx13: 6
rm smbx13.7z: 6
ctest -N FLAG ${{ env.MULTI_CORE_TESTS_REGEX }}: 10
echo ${{ secrets.GOOGLE_SERVICE_WEB }} | base64 -d > packages CUSTOM_PATH_FILE: 7
echo "COVALENT_KEY=${{ env.COVALENT_KEY }}" >> .env: 9
echo "GITHUB_SHA=${{ env.GITHUB_SHA }}" >> .env: 6
docker pull FLAG FLAG linux CUSTOM_PATH_DIR ${tag}: 9
cp .pio CUSTOM_PATH_FILE .. CUSTOM_PATH_FILE: 20
docker pull registry.opensuse.org CUSTOM_PATH_DIR: 6
docker run FLAG -t -d -v ENV_VAR: CUSTOM_PATH_DIR FLAG cobbler registry.opensuse.org CUSTOM_PATH_DIR: 6
docker exec -u 0 -it cobbler bash -c ". CUSTOM_PATH_FILE": 6
docker stop cobbler && docker rm cobbler: 6
sed -i "s CUSTOM_PATH_DIR PKGBUILD: 9
cd examples CUSTOM_PATH_DIR && npm install FLAG && npm test: 11
USES: conda/actions/canary-release: 6
USES: mskelton/changelog-reminder-action: 9
cd core CUSTOM_PATH_DIR && yarn install FLAG: 6
cmake -B build ${{env.CMAKE_FLAGS}}: 6
USES: tomsun28/issues-translate-action: 10
cd rizin: 7
echo -n "verifying images:": 39
helm dependency update: 7
cd upstream_utils: 8
. CUSTOM_PATH_DIR && . CUSTOM_PATH_DIR: 7
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG FLAG ${{env.BUILD_TYPE}}: 6
poetry config virtualenvs.in-project false: 29
poetry config virtualenvs.path ~ CUSTOM_PATH_DIR: 28
composer bin build install FLAG: 6
composer compose: 6
yarn build:production: 13
echo "::set-output name=version::ENV_VAR#refs CUSTOM_PATH_DIR: 6
echo "versions=$(curl -s URL | jq -c '[[.[] | select(.lts != false)][:3] | .[].cycle | tonumber]')" >> "ENV_VAR": 8
gcloud container clusters get-credentials ${{ env.clusterName }} FLAG ${{ env.zone }}: 8
cilium connectivity test ${{ steps.vars.outputs.connectivity_test_defaults }}: 7
USES: kiegroup/kie-ci/.ci/actions/dsl-tests: 7
df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR && df -h: 6
shopt -s nullglob: 8
mysql -h 127.0.0.1 FLAG 8888 -uroot -ppassword < installer CUSTOM_PATH_FILE: 8
python3 -m pip FLAG: 8
USES: bitwarden/gh-actions/download-artifacts: 7
rustup override set ${{ matrix.rust }}: 13
cat ENV_VAR CUSTOM_PATH_FILE | grep ^archives_base_name= >> ENV_VAR: 9
cat ENV_VAR CUSTOM_PATH_FILE | grep ^minecraft_version= >> ENV_VAR: 11
cat ENV_VAR CUSTOM_PATH_FILE | grep ^base_version= >> ENV_VAR: 9
kustomize version: 6
kubectl get nodes -o wide: 7
RELEASE_VERSION=$(echo ENV_VAR | sed -nE 's!refs CUSTOM_PATH_DIR: 11
USES: ./.github/actions/yarn-install-and-build: 8
DEBUG=amman* yarn amman:start: 8
DEBUG=mpl* yarn test: 8
USES: ryankurte/action-apt: 6
USES: CodeIntelligenceTesting/github-actions/start-fuzzing: 6
USES: CodeIntelligenceTesting/github-actions/monitor-fuzzing: 6
python -m pip install FLAG pipenv: 11
git add VERSION: 6
echo "pluginVerifierHomeDir=~ CUSTOM_PATH_DIR >> ENV_VAR: 9
. CUSTOM_PATH_DIR listProductsReleases # prepare list of IDEs for Plugin Verifier: 8
valgrind FLAG=full FLAG=yes -v FLAG=no FLAG=all FLAG=999 . CUSTOM_PATH_DIR: 8
cd application: 8
zip -r reports.zip ** CUSTOM_PATH_DIR: 6
docker tag todo-app ENV_VAR.dkr.ecr.ENV_VAR.amazonaws.com CUSTOM_PATH_DIR: 10
cd cdk && npm install: 6
cd cdk: 9
docker run FLAG -v $(pwd): CUSTOM_PATH_DIR -w CUSTOM_PATH_DIR node:${{ matrix.node }}-slim yarn test: 7
docker run FLAG -v $(pwd): CUSTOM_PATH_DIR -w CUSTOM_PATH_DIR node:${{ matrix.node }}-alpine yarn test: 7
USES: ./.github/actions/production-ipfs-pin: 6
choco install nsis: 9
cd desktop: 12
git config -l | grep 'http\..*\.extraheader' | cut -d= -f1 | xargs -L1 git config FLAG: 6
USES: ./.github/actions/job-preamble: 17
USES: ./.github/actions/cache-go-dependencies: 10
USES: VirtoCommerce/vc-github-actions/sonar-scanner-begin: 6
vc-build Compile: 8
USES: VirtoCommerce/vc-github-actions/sonar-scanner-end: 6
vc-build Compress -skip Clean+Restore+Compile+Test: 7
USES: VirtoCommerce/vc-github-actions/build-docker-image: 6
mvn install -Pjacoco: 9
build: 7
docker push ${{ secrets.DOCKER_REGISTRY }} CUSTOM_PATH_DIR: 7
kubectl wait FLAG=condition=available FLAG=300s FLAG=default deployment CUSTOM_PATH_DIR: 7
brew install expect: 6
PYTORCH_VERSION=${{ github.event.inputs.pt_version }}: 11
PYTORCH_VERSION=ENV_VAR:-$(cat gradle.properties | awk -F '=' ' CUSTOM_PATH_DIR {print $2}')}: 8
aws s3 sync engines CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR: 8
aws cloudfront create-invalidation FLAG E371VB8JQ6NRVY FLAG " CUSTOM_PATH_DIR: 26
pip3 install awscli FLAG: 13
yum -y groupinstall "Development Tools": 7
gradle help "-DgradleVersionCheck=${{matrix.gradle}}": 7
curl 'URL > device CUSTOM_PATH_FILE: 9
sed -i ' CUSTOM_PATH_DIR configs CUSTOM_PATH_DIR: 16
sed -i 's CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR friendlywrt CUSTOM_PATH_FILE: 11
sudo add-apt-repository -y ppa:deadsnakes CUSTOM_PATH_DIR: 7
python -m pip install FLAG tox codecov: 7
tox ${{ matrix.toxargs }} -e ${{ matrix.toxenv }} -- ${{ matrix.toxposargs }}: 11
sudo touch CUSTOM_PATH_DIR && sudo chmod +x CUSTOM_PATH_DIR: 23
cd  C:\wazuh\src\win32: 6
. CUSTOM_PATH_DIR -B package: 6
gulp lint: 6
echo "Image pushed to ${{ steps.push-to-quay.outputs.registry-paths }}": 8
git config FLAG user.email "$(git log FLAG='%ae' HEAD^!)": 7
git config FLAG user.name "$(git log FLAG='%an' HEAD^!)": 6
brew install FLAG vcv-rack: 6
 CUSTOM_PATH_DIR Rack\ 2\ Free.app CUSTOM_PATH_DIR -h <<< '\n' && cat ENV_VAR CUSTOM_PATH_FILE: 6
erbb setup: 11
erbb configure && erbb build simulator && erbb build && erbb build hardware: 12
python3 test CUSTOM_PATH_FILE: 16
PROJECT_ITEM_ID=$(gh project item-add ${{ env.PROJECT_NUMBER }} FLAG "hashicorp" FLAG ${{ env.ITEM_URL }} FLAG json | jq '.id'): 10
bash "ENV_VAR CUSTOM_PATH_FILE": 70
npm config set git-tag-version false: 6
PACKAGE_VERSION=$(node -p "require('. CUSTOM_PATH_FILE"): 14
npm install FLAG FLAG marked: 8
npm run zip: 6
USES: netlify/pr-labeler-action: 6
sudo apt-get install xmlstarlet: 7
version=$(xmlstarlet sel -t -v 'string( CUSTOM_PATH_DIR addon.xml): 7
USES: EthanSK/git-branch-name-action: 6
USES: ./.github/actions/install-go-and-deps: 13
USES: ./.github/actions/build-mage: 13
tools CUSTOM_PATH_DIR git:diff: 10
cd debug: 20
make clean all: 11
php artisan key:generate FLAG: 7
composer cs: 16
make -k -j2: 6
sleep 3 # wait x server up: 6
export QT_X11_NO_MITSHM=1 # URL: 6
xhost +local:root: 6
USES: jsk-ros-pkg/jsk_travis: 13
pre-commit run -a FLAG: 15
make container: 15
python -m pip install bandit: 12
git remote add upstream ${{ github.event.repository.clone_url }}: 6
yarn run build:plugins: 6
USES: pkgdeps/git-tag-action: 9
CXX=ENV_VAR CUSTOM_PATH_DIR: 10
sudo apt-key add llvm-snapshot.gpg.key: 8
make -C src clean: 14
echo "id: ${{ steps.last_release.outputs.id }}": 6
npx cypress cache path: 6
npx cypress cache list: 6
npx cypress verify: 9
npx cypress info: 8
cargo install cargo-udeps FLAG: 9
echo "DEB_FILE=ENV_VAR_$(. CUSTOM_PATH_FILE" >> ENV_VAR: 9
mkdir -p editors CUSTOM_PATH_DIR: 6
rush ensure-consistent-versions: 7
ANDROID_ROOT= CUSTOM_PATH_DIR: 9
ANDROID_SDK_ROOT=ENV_VAR CUSTOM_PATH_DIR: 9
ANDROID_NDK_ROOT=ENV_VAR CUSTOM_PATH_DIR: 8
ln -sfn ENV_VAR CUSTOM_PATH_DIR ENV_VAR: 8
USES: ./.github/actions/pnpm-install: 22
USES: repo-sync/github-sync: 9
printf "Using go at: $(which go)\n": 15
printf "Go version: $(go version)\n": 15
printf "\n\nGo environment:\n\n": 15
printf "\n\nSystem environment:\n\n": 15
pip install FLAG cloudsmith-cli: 11
cd dist && echo "hash=$(sha256sum * | base64 -w0)" >> ENV_VAR: 6
gh release create FLAG FLAG ${{ github.repository }} ${{ github.ref_name }} *.intoto.jsonl CUSTOM_PATH_DIR artifact CUSTOM_PATH_DIR: 6
USES: ./.github/actions/echo: 6
brew install bmake pcre: 7
find . -name 'lexer.?' -exec touch '{}' \; # workaround for git checkout timestamps: 11
find . -name 'parser.?' -exec touch '{}' \; # workaround for git checkout timestamps: 11
export ANDROID_HOME= CUSTOM_PATH_DIR: 7
npm run check-types: 23
cd hedera-services: 8
docker-compose up &: 12
echo "IP=ENV_VAR" >> ENV_VAR: 10
sudo update-ca-certificates: 11
echo IP: ENV_VAR: 7
vendor CUSTOM_PATH_DIR -q FLAG=checkstyle | cs2pr: 12
USES: wyvox/action-setup-pnpm: 12
USES: sdkman/sdkman-action: 9
tar -czf .. CUSTOM_PATH_FILE *: 7
USES: tix-factory/release-manager: 7
mv rust CUSTOM_PATH_DIR assets CUSTOM_PATH_DIR: 6
node npm CUSTOM_PATH_FILE: 6
zip -9j release CUSTOM_PATH_FILE artifacts CUSTOM_PATH_DIR: 6
USES: zulip/github-actions-zulip/send-message: 31
sudo apt-get -y install build-essential binutils git autoconf automake gettext texinfo: 6
cd  ${{github.workspace}} CUSTOM_PATH_DIR: 12
USES: actionshub/markdownlint: 10
pip install FLAG off -U git+URL: 6
curl -L URL -o kurobako: 12
chmod +x kurobako: 12
USES: c-bata/github-actions-kurobako/plot: 9
cat . CUSTOM_PATH_FILE | . CUSTOM_PATH_DIR report > . CUSTOM_PATH_FILE: 9
gcloud config set project ${{ secrets.GCP_PROJECT_ID }}: 9
gsutil cp ${{ steps.kurobako-plot.outputs.image-path }} gs: CUSTOM_PATH_DIR github.repository }} CUSTOM_PATH_DIR github.sha }}.png: 9
USES: c-bata/github-actions-kurobako: 9
python3 -m pip install poetry: 7
make -C doc html: 9
poetry run make test: 7
docker-compose -f tests CUSTOM_PATH_FILE up -d: 8
USES: ./.github/actions/docker-push-variables: 6
make gen-client-ts: 8
sudo apt-get -y install cuda: 6
brew install libuv: 9
USES: docker://docker.io/nixos/nix: 81
nix-env -if . && m . CUSTOM_PATH_DIR: 70
reuse lint: 9
npx ci: 6
tar -xzf m2-io-quarkus.tgz -C ~: 9
find . -name '*-reports' -type d -o -name '*.log' | tar -czf test-reports.tgz -T -: 13
mkdir -p "ENV_VAR" CUSTOM_PATH_DIR: 24
xonsh ci CUSTOM_PATH_FILE: 6
call "C: CUSTOM_PATH_DIR Files (x86) CUSTOM_PATH_DIR Visual Studio CUSTOM_PATH_FILE": 9
cd integration_tests: 12
go get -v . CUSTOM_PATH_DIR: 13
ENV_VAR CUSTOM_PATH_FILE publish FLAG FLAG="ENV_VAR" FLAG="ENV_VAR CUSTOM_PATH_DIR FLAG modules CUSTOM_PATH_DIR secrets.MAINTENANCE_TOKEN }} CUSTOM_PATH_FILE: 6
mkdir gitlfs && pushd gitlfs: 6
curl -L URL | tar -zxv: 8
cd Kiwi && git config FLAG FLAG safe.directory CUSTOM_PATH_DIR && git lfs pull: 6
perl configdata.pm FLAG: 9
python -m pip install FLAG pip setuptools wheel tox: 15
USES: edgarrc/action-7z: 8
. CUSTOM_PATH_DIR FLAG ${{github.repository}} FLAG_hash ${{github.sha}} FLAG_url URL: 14
curl URL -o flakybot.exe -s -L: 6
. CUSTOM_PATH_FILE FLAG ${{github.repository}} FLAG_hash ${{github.sha}} FLAG_url URL: 6
cd build && ctest FLAG -j 2: 9
. CUSTOM_PATH_DIR :app:assembleRelease: 8
cd build32: 6
npm install FLAG=global  CUSTOM_PATH_DIR: 6
echo "::set-env name=VERSION::ENV_VARuGetPackageVersion": 6
dotnet build src CUSTOM_PATH_FILE/ -c Release FLAG -p:RepositoryBranch=ENV_VAR -p:ContinuousIntegrationBuild=true -p:DeterministicSourcePaths=true: 9
dotnet test src CUSTOM_PATH_FILE/ -c Release FLAG FLAG normal CUSTOM_PATH_DIR: 21
dotnet pack src CUSTOM_PATH_FILE/ -c Release -o ENV_VAR CUSTOM_PATH_DIR -p:RepositoryBranch=ENV_VAR -p:ContinuousIntegrationBuild=true -p:DeterministicSourcePaths=true: 12
sudo apt-get install -y clang: 10
echo "::set-output name=version::$(node -v)": 19
npm ci FLAG FLAG FLAG=false: 22
mv _output CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 6
USES: esp-rs/xtensa-toolchain: 12
USES: maxkomarychev/octions/octions/issues/add-labels: 6
cp -r .github CUSTOM_PATH_DIR .: 9
npm ping FLAG URL: 7
echo "it('should pass', () => { expect(true).toBeTruthy(); });" | tee pass.test.js: 6
yarn jest pass.test.js: 6
echo "const leftPad = require('left-pad'); it('should resolve a module', () => { expect(typeof leftPad).toBe('function');});" | tee module.test.js: 6
yarn jest module.test.js: 6
mkdir oss_temp_file: 6
USES: ghostoy/dingtalk-action: 7
shellcheck FLAG && \: 11
pip3 install .[dev]: 6
bash fastlane CUSTOM_PATH_FILE: 9
git diff FLAG pnpm-lock.yaml: 6
apt-get install git-lfs: 8
USES: dolthub/pull-request-comment-trigger: 10
echo "::set-output name=benchmark::true": 6
mvn checkstyle:check: 10
kubectl wait FLAG=condition=available FLAG=500s deployment CUSTOM_PATH_DIR: 18
tag=ENV_VAR#refs CUSTOM_PATH_DIR: 11
sudo apt-get install libmbedtls-dev: 15
pod repo update: 38
. CUSTOM_PATH_FILE ./ . CUSTOM_PATH_FILE: 6
#echo "SSH_AUTH_SOCK=ENV_VAR)" >> "ENV_VAR": 8
twine upload . CUSTOM_PATH_DIR: 6
if [[ -d . CUSTOM_PATH_DIR ]]; then rm -rf . CUSTOM_PATH_DIR fi: 11
USES: docker://pivotalrabbitmq/delete-release-action:latest: 6
echo "::set-output name=node_version::$(node FLAG)": 6
yarn FLAG FLAG FLAG FLAG: 14
gh pr merge FLAG FLAG FLAG "ENV_VAR": 7
npm run build:libs: 13
nox: 17
USES: ./.github/actions/extism: 13
cd go: 8
. CUSTOM_PATH_FILE nightly: 6
rm *.md: 9
cp .. CUSTOM_PATH_DIR ./: 6
make -C build install: 6
USES: diem/actions/matches: 30
language CUSTOM_PATH_FILE: 9
go install -v . CUSTOM_PATH_DIR: 8
USES: Codeinwp/merge-branch: 7
. CUSTOM_PATH_FILE "${{ github.repository_owner }}" "${{ github.token }}": 15
NOTES="ENV_VAR CUSTOM_PATH_DIR: 6
coverage run FLAG FLAG mmgen -m pytest tests/: 6
python -m pip install mmcv-full -f URL FLAG mmcv-full: 6
docker push beryju CUSTOM_PATH_DIR: 6
rm -f bin CUSTOM_PATH_DIR: 9
python3.7 -m venv .venv: 9
echo 'Acquire::Retries "10";' > CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 11
echo 'APT::Install-Recommends "false";' > CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
echo 'APT::Install-Suggests "false";' > CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
echo 'APT::Get::Assume-Yes "true";' > CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
echo 'APT::Get::Fix-Missing "true";' > CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
curl -sSLo ENV_VAR CUSTOM_PATH_FILE ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}: 16
cmake -E make_directory "ENV_VAR";: 28
"ENV_VAR CUSTOM_PATH_FILE";: 8
make wasm: 6
. CUSTOM_PATH_DIR configure: 15
sudo . CUSTOM_PATH_DIR install: 11
export PKG_CONFIG_PATH=ENV_VAR CUSTOM_PATH_DIR: 13
renovate-config-validator: 16
poetry config pypi-token.pypi "${{ secrets.PYPI_TOKEN }}": 6
make run-local: 6
touch local.properties: 11
releasever=${{ github.ref }}: 8
releasever="${releasever#refs CUSTOM_PATH_DIR: 8
docker buildx build FLAG linux CUSTOM_PATH_DIR FLAG -t mplatform CUSTOM_PATH_DIR -f hack CUSTOM_PATH_FILE .: 15
npm prune FLAG: 13
${{ matrix.task.run }}: 6
rustup update ${{ matrix.rust }} && rustup default ${{ matrix.rust }}: 9
git add -N . && git diff FLAG: 6
. CUSTOM_PATH_FILE ${{ env.CONTAINER_NAME }} run_next: 7
doppler FLAG: 11
chown user -R ..: 8
chown user -R CUSTOM_PATH_DIR: 8
sed -i 's CUSTOM_PATH_DIR proton-tkg.cfg: 15
output=$(curl FLAG -F html= CUSTOM_PATH_FILE 'URL && echo "$output" > build CUSTOM_PATH_FILE || echo "Failed to inject DataUnlocker's script": 6
find CUSTOM_PATH_DIR -name table_printer.rb | xargs sed -i "" " CUSTOM_PATH_FILE(params)) CUSTOM_PATH_DIR: 6
cmake -DIRODS_DISABLE_COMPILER_OPTIMIZATIONS=ON ../: 8
Get-ChildItem ". CUSTOM_PATH_DIR: 6
Get-ChildItem ./: 6
sqlx db setup: 7
USES: ./.github/actions/install-main-dependencies: 9
make spell: 6
make clean_sphinx: 9
make style: 7
tar -zcvf artifacts CUSTOM_PATH_FILE FLAG=. CUSTOM_PATH_DIR .: 9
python -m pip install -U setuptools pip wheel: 17
cd electron: 9
sudo tail -n 100 CUSTOM_PATH_FILE: 7
tail -300 CUSTOM_PATH_FILE: 6
USES: cygnetdigital/wait_for_response: 7
-G "Unix Makefiles" \: 9
-DCMAKE_BUILD_TYPE=Debug \: 6
cd git-secrets && sudo make install && cd ..: 6
git-secrets FLAG: 12
pulsar-client-cpp CUSTOM_PATH_FILE: 6
nuget push ** CUSTOM_PATH_FILE -Source URL: 6
USES: apache/airflow-cancel-workflow-runs: 23
sudo apt-get install xorg-dev: 12
mkdir debug: 11
.. CUSTOM_PATH_DIR FLAG FLAG ENV_VAR: 8
cmake .. -DMVDIST_ONLY=True: 11
python -m setup bdist_wheel FLAG manylinux1_x86_64 FLAG CUSTOM_PATH_DIR: 6
cd Dependencies: 12
cd cpython: 12
git checkout v3.7.9: 12
cmake .. -DMVDIST_ONLY=True -DMV37DIST=True: 9
USES: christian-draeger/read-properties: 42
. CUSTOM_PATH_DIR runData: 8
USES: myci-actions/checkout: 10
locale-gen: 6
USES: myci-actions/export-env-var: 8
ln -s "$(brew FLAG llvm) CUSTOM_PATH_DIR " CUSTOM_PATH_DIR: 8
mx.graalsqueak CUSTOM_PATH_FILE shallow-clone-graalvm-project URL: 7
. CUSTOM_PATH_DIR FLAG check: 12
echo "files_cache=$(composer config cache-files-dir)" >> ENV_VAR: 6
echo "vcs_cache=$(composer config cache-vcs-dir)" >> ENV_VAR: 6
composer install -o: 15
sudo cmake FLAG build FLAG dist -v: 6
cargo nextest run FLAG: 8
pip install -r CI CUSTOM_PATH_FILE: 6
pip install six: 7
cheetah compile -R plugin: 12
python testsuite CUSTOM_PATH_FILE: 12
sudo apt-get -y install uuid-dev libcurl4-openssl-dev: 6
gem install FLAG fpm: 6
sed -i "s CUSTOM_PATH_DIR runner CUSTOM_PATH_DIR: 8
echo "OS: ${{ matrix.os }}" : 6
echo "Python: ${{ matrix.py_ver }}" : 6
echo "Conda build path: ENV_VAR": 6
echo "Deploy OS: ENV_VAR": 6
echo "Deploy Python: ENV_VAR": 6
echo "GA event name: ${{ github.event_name }}": 6
echo "GA ref: ${{ github.ref }}": 6
conda activate env_ENV_VAR: 14
choco install protoc: 7
USES: ./.github/actions/set-up-yarn-cache: 7
sudo rm -rf $(which node): 10
echo "dry-run=FLAG" >> ENV_VAR: 10
echo "vtag=ENV_VAR" >> ENV_VAR: 10
python -m build FLAG FLAG wheelhouse: 11
REPOSITORY=$(echo ${{ github.repository }} | sed -e "s#.* CUSTOM_PATH_DIR: 17
echo "Release version: ${{ env.RELEASE_VERSION }}": 7
git config FLAG safe.directory '*': 7
cat . CUSTOM_PATH_FILE > . CUSTOM_PATH_FILE: 8
echo RELEASE_VERSION=$(cat VERSION) >> ENV_VAR: 9
make check-version: 7
make test-behavior: 9
make test-integration-aws: 6
make test-integration-clickhouse: 6
make test-integration-elasticsearch: 6
make test-integration-gcp: 6
make test-integration-influxdb: 6
make test-integration-kafka: 6
make test-integration-pulsar: 6
make test-integration-splunk: 6
make test-shutdown: 6
make slim-builds: 98
npm install -g pm2: 6
pm2 stop zombienet: 6
sudo ninja -C . install: 7
curl -1sLf \: 7
mix dialyzer FLAG github: 7
USES: wzshiming/gh-ci-bot: 10
make deps-go: 7
ls && git submodule update FLAG: 10
USES: ./amplify-js/.github/actions/setup-samples-staging: 6
.. CUSTOM_PATH_FILE -s \: 10
"ci:test \: 9
dotnet pack src CUSTOM_PATH_FILE FLAG Release -p:PackageVersion=${{ steps.version.outputs.version }} -p:Version=${{ steps.version.outputs.version }}: 10
VERSION=$(cargo pkgid | cut -d# -f2 | cut -d: -f2): 12
docker stop $rune_test: 6
USES: ./.github/install-dependencies: 7
yarn lerna run build FLAG  CUSTOM_PATH_DIR: 7
echo "::set-output name=next_version::ENV_VAR": 6
apt-get update && apt-get install -y curl: 13
USES: MSP-Greg/setup-ruby-pkgs: 17
USES: ./.github/actions/setup/: 20
cd esp32s3-hal/: 8
chmod u+x ${{github.workspace}} CUSTOM_PATH_DIR: 24
${{github.workspace}} CUSTOM_PATH_DIR FLAG_runs=1 FLAG_delegate_path=${{github.workspace}} CUSTOM_PATH_FILE FLAG=${{github.workspace}} CUSTOM_PATH_FILE: 24
cilium FLAG ${{ env.contextName1 }} status FLAG: 15
cilium FLAG ${{ env.contextName2 }} status FLAG: 15
cilium FLAG ${{ env.contextName1 }} clustermesh status FLAG: 8
cilium FLAG ${{ env.contextName2 }} clustermesh status FLAG: 8
make bootstrap-tools: 6
msbuild CUSTOM_PATH_DIR CUSTOM_PATH_FILE_CONFIGURATION}} CUSTOM_PATH_DIR ${{env.SOLUTION_FILE_PATH}}: 7
docker-compose down -v: 6
docker push ${{ secrets.CW_DOCKER_REGISTRY }} CUSTOM_PATH_DIR: 6
USES: kamilkisiela/release-canary: 8
USES: kamilkisiela/pr-comment: 8
python -c "import doctr; print(doctr.__version__)": 6
cilium connectivity test ${{ steps.vars.outputs.connectivity_test_defaults }} FLAG: 6
cd "ENV_VARootDir CUSTOM_PATH_DIR: 10
"ENV_VAR" -m unittest discover -v: 6
USES: iFaxity/wait-on-action: 6
python setup.py install FLAG: 20
sudo systemctl start redis-server: 8
cargo check FLAG wasm32-unknown-unknown: 7
apt-get -qq update: 14
pnpm type-check: 8
brew unlink libomp: 8
brew install libomp.rb: 7
gem install fpm: 6
sudo apt-get install  git: 7
sed -i 's CUSTOM_PATH_DIR PG_VERSION 14.1 CUSTOM_PATH_DIR postgres CUSTOM_PATH_DIR: 7
sed -i 's CUSTOM_PATH_DIR PG_SHA256 4d3c101ea7ae38982f06bdc73758b53727fb6402ecd9382006fa5ecc7c2ca41f CUSTOM_PATH_DIR postgres CUSTOM_PATH_DIR: 7
pnpm FLAG theme-${{ matrix.name }}-demo demo:vite-build: 6
> demo CUSTOM_PATH_DIR matrix.name }} CUSTOM_PATH_FILE: 6
mvn clean install -P ${{ matrix.profile }} -B FLAG pom.xml: 6
echo "::group::CMake": 13
echo "::group::Build": 16
echo "Running on $(nproc) cores": 13
cmake FLAG . -j $(nproc): 12
yarn install FLAG FLAG && yarn build: 9
.travis CUSTOM_PATH_FILE: 15
sudo apt-get install clang-format-10: 11
git config user.name "${{github.event.sender.login}}": 6
yarn codegen: 18
yarn ts-node . CUSTOM_PATH_FILE: 14
php vendor CUSTOM_PATH_DIR fix FLAG FLAG: 7
sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu: 7
rm -rf release CUSTOM_PATH_FILE: 8
cd ${{ github.workspace }} CUSTOM_PATH_DIR ${{ matrix.pm }} link;: 31
cargo test -- FLAG: 7
ls -l build CUSTOM_PATH_DIR: 8
bash extras CUSTOM_PATH_FILE: 11
lsif-go: 7
npm run build FLAG . CUSTOM_PATH_DIR: 10
echo "::set-output name=tag::$(echo "${{ github.ref }}" | grep -oP 'refs CUSTOM_PATH_DIR: 7
php . CUSTOM_PATH_FILE: 19
export LIBRARIES_BRANCH=`echo ENV_VAR | sed 's CUSTOM_PATH_DIR: 8
LIBRARIES_FILE=$(ls -t | head -n 1) && tar xpzf ENV_VAR: 13
make -j ENV_VAR -C .. CUSTOM_PATH_DIR matrix.BuildType }}: 6
cd .. CUSTOM_PATH_DIR matrix.BuildType }}: 7
export DEPLOY_BRANCH=`echo ENV_VAR | sed 's CUSTOM_PATH_DIR: 9
git clean -f: 8
wasm-pack build FLAG FLAG web: 11
cmake FLAG build FLAG all: 18
pnpm FLAG= CUSTOM_PATH_DIR build: 15
export PATH=$(pwd):ENV_VAR: 25
cd experimental CUSTOM_PATH_DIR: 8
echo "value=$(cat GO_VERSION)" >> ENV_VAR: 10
python -c 'import pymeshlab; pymeshlab.use_cpu_opengl()' #just for windows: 6
pytest FLAG pymeshlab -m "not glcontext": 8
USES: iterative/setup-cml: 6
yarn install && yarn build: 17
python -m pip install FLAG nox pip setuptools: 19
echo "Current JAVA_HOME = ENV_VAR": 8
du -a ENV_VAR | sort -n -r | head -n 10: 9
pip FLAG CUSTOM_PATH_FILE CUSTOM_PATH_DIR install .[tests]: 9
USES: ./.github/actions/publish-deb: 8
. CUSTOM_PATH_DIR :app:assemble FLAG FLAG FLAG FLAG "ENV_VAR": 7
pytest FLAG FLAG=xml: 11
echo "ASSET_NAME=ENV_VAR" >> ENV_VAR: 7
sha256sum dist CUSTOM_PATH_FILE: 7
cp -v new_drawable.xml app CUSTOM_PATH_FILE: 6
USES: gr2m/await-npm-package-version-action: 6
sudo mv helm-docs CUSTOM_PATH_DIR: 6
USES: jossef/action-latest-release-info: 7
. CUSTOM_PATH_DIR lintDebug FLAG: 6
(cd packages CUSTOM_PATH_DIR && python setup.py bdist_wheel); cp packages CUSTOM_PATH_DIR dist: 9
sudo apt install -y protobuf-compiler: 6
cmake FLAG "${{ github.workspace }} CUSTOM_PATH_DIR FLAG "Debug" FLAG: 8
cmake FLAG "${{ github.workspace }} CUSTOM_PATH_DIR FLAG "Release" FLAG: 8
cmake FLAG "${{ github.workspace }} CUSTOM_PATH_DIR FLAG "Debug" FLAG install: 6
cmake FLAG "${{ github.workspace }} CUSTOM_PATH_DIR FLAG "Release" FLAG install: 6
aws ecr-public get-login-password FLAG ENV_VAR | docker login FLAG AWS FLAG ENV_VAR CUSTOM_PATH_DIR: 11
docker build -t ENV_VAR -f . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 11
docker tag ENV_VAR:ENV_VAR ENV_VAR CUSTOM_PATH_DIR: 11
tar xf CUSTOM_PATH_FILE: 6
echo "::remove-matcher owner=flake8::": 6
TAG=$(cat VERSION): 6
docker tag kubeovn CUSTOM_PATH_DIR kubeovn CUSTOM_PATH_DIR: 14
docker push kubeovn CUSTOM_PATH_DIR: 16
cmake FLAG "ENV_VAR" FLAG package: 6
poetry publish FLAG FLAG: 12
! coverage run -a FLAG bin CUSTOM_PATH_DIR -c error.config: 8
python3 -m venv FLAG venv: 7
python3 -m pip install -q -r requirements.txt: 7
cp dist CUSTOM_PATH_FILE dist CUSTOM_PATH_FILE: 9
source .env CUSTOM_PATH_DIR: 21
git clone FLAG 1 ENV_VAR -b ENV_VAR .: 6
echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash: 6
sudo apt-get install musl-tools libudev-dev: 7
. CUSTOM_PATH_DIR gems: 12
USES: PlasmoHQ/bpp: 8
echo "Version not changed": 8
pytest FLAG -v test CUSTOM_PATH_FILE: 7
brew unlink python: 9
RELEASE_VERSION=v1.14.0: 7
chmod +x operator-sdk_linux_amd64 && sudo mkdir -p CUSTOM_PATH_DIR && sudo mv operator-sdk_linux_amd64 CUSTOM_PATH_DIR: 6
rush install: 17
call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat": 6
eatmydata -- go run test.go -skip-build -keep-data=false -docker=false -print-log -follow -tag upgrade_downgrade_query_serving_queries: 6
rm -f ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 8
pnpm -v: 15
export ROOT_PATH=$(pwd): 15
tar -zxf apache-zookeeper-3.6.3-bin.tar.gz: 8
sed -i ' CUSTOM_PATH_DIR pom.xml: 41
mvn package -DskipTests -Ptest FLAG pom.xml: 11
echo "EXTRA_GRADLE_ARGS=-PreleaseMode" >> ENV_VAR: 8
BOOST_BRANCH=develop && [ "ENV_VAR" == "master" ] && BOOST_BRANCH=master || true: 18
. CUSTOM_PATH_DIR -d0 headers: 10
echo "using ${{matrix.toolset}} : : ${{matrix.compiler}} ;" > ~ CUSTOM_PATH_FILE: 6
USES: remorses/bump-version: 7
echo "::set-output name=version::${version}": 16
npm run start -- FLAG: 9
echo "MOD_DPATH = ENV_VAR": 6
python -m pytest FLAG FLAG={self.mod_name} ENV_VAR .. CUSTOM_PATH_DIR: 6
ls -la wheelhouse: 9
ls -altr: 7
GPG_EXECUTABLE=gpg: 6
echo "Decrypting Keys": 6
openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:CI_SECRET -d -a -in dev CUSTOM_PATH_FILE | ENV_VAR FLAG: 18
echo "Finish Decrypt Keys": 6
ENV_VAR FLAG || true: 9
ENV_VAR FLAG  || echo "first invocation of gpg creates directories and returns 1": 6
VERSION=$(python -c "import setup; print(setup.VERSION)"): 6
pip install urllib3 requests[security] twine: 6
GPG_KEYID=$(cat dev CUSTOM_PATH_DIR: 6
echo "GPG_KEYID = 'ENV_VAR'": 6
DO_GPG=True GPG_KEYID=ENV_VAR TWINE_REPOSITORY_URL=ENV_VAR TWINE_PASSWORD=ENV_VAR TWINE_USERNAME=ENV_VAR GPG_EXECUTABLE=ENV_VAR DO_UPLOAD=True DO_TAG=False . CUSTOM_PATH_FILE: 6
pip install setuptools_scm: 6
python -m unittest -v: 12
tar -xvf reearth-web.tar.gz; mv reearth-web web; ls: 7
USES: ./.github/composites/install: 7
echo "ActionTriggerBy = ${{ github.event.action }} / ${{ github.event_name }}": 12
run_number=$(($workflow_run_number % 100)): 12
. CUSTOM_PATH_FILE scripts CUSTOM_PATH_FILE: 10
rm .cargo CUSTOM_PATH_FILE: 6
docker push azbuilder CUSTOM_PATH_DIR: 8
make install-cli: 6
${{ matrix.task }}: 18
PROFILEDIR=debug make -f Makefile build-all: 12
PROFILEDIR=debug make -f Makefile install: 8
${{github.workspace}}\.github\scripts\GetFolderSize.ps1: 16
ENV_VARfxBytes = [System.Convert]::FromBase64String("${{ secrets.SAMPLES_BASE64_ENCODED_PFX }}"): 12
ENV_VARfxPath = [System.IO.Path]::GetFullPath("${{github.workspace}}\GitHubActionsWorkflow.pfx"): 12
Write-Host ENV_VARfxPath: 12
[System.IO.File]::WriteAllBytes("ENV_VARfxPath", ENV_VARfxBytes): 12
$certificatePath = [System.IO.Path]::GetFullPath("${{github.workspace}}\GitHubActionsWorkflow.pfx"): 12
Write-Host $certificatePath: 12
Remove-Item -path $certificatePath: 13
(cd common && npm install && npm run build): 18
(cd github-action/ && npm install && npm run build && npm run package): 18
echo "VERSION_SHORT: ENV_VAR": 6
echo ${{ matrix.compiler }} | awk ' CUSTOM_PATH_DIR { print "TOOLSET=gcc" } CUSTOM_PATH_DIR { print "TOOLSET=clang" }' >> ENV_VAR: 10
bootstrap: 9
b2 headers: 9
cd coordinator/: 32
echo "JAVA_17=ENV_VAR" >> ENV_VAR: 8
cd apis/: 22
JAVA_HOME=ENV_VAR17 . CUSTOM_PATH_DIR -B -ntp versions:set -DremoveSnapshot versions:commit: 6
echo "PYTHON_VERSION=${{ matrix.python-version }}" >> ENV_VAR: 6
python -m pip install cibuildwheel==2.16.2 twine: 8
echo "deb [trusted=yes] URL CUSTOM_PATH_DIR | sudo tee CUSTOM_PATH_FILE: 6
cargo cache FLAG: 7
pytest -vvv -s kubernetes CUSTOM_PATH_DIR: 6
FLAG 'URL github.repository }} CUSTOM_PATH_DIR github.event.issue.number }} CUSTOM_PATH_DIR \: 13
echo "${{ secrets.PFX_BASE64 }}" > cert.pfx.base64: 6
certutil -decode cert.pfx.base64 cert.pfx: 6
& 'C:\Program Files (x86)\Windows Kits\10\bin\x86\signtool.exe' sign CUSTOM_PATH_DIR cert.pfx CUSTOM_PATH_DIR ${{ secrets.PFX_PASSWORD }}  CUSTOM_PATH_DIR sha256 CUSTOM_PATH_DIR URL CUSTOM_PATH_DIR sha256 CUSTOM_PATH_DIR CUSTOM_PATH_DIR .\seamly2d-installer.exe: 6
pip install tensorflow==${{ matrix.tensorflow }}: 7
pip install keras==${{ matrix.keras }}: 6
python -m pip install -U .: 7
stestr run FLAG: 13
pip install FLAG=dist qiskit-aer: 7
npm run e2e:ci: 6
cd build && make -j3 | grep FLAG -Ev '^(cp lib\ CUSTOM_PATH_FILE)' && (exit ENV_VAR[0]}): 8
npm run build-e2e: 6
sudo cp CUSTOM_PATH_FILE  ~ CUSTOM_PATH_FILE: 6
brew install mingw-w64: 7
mvn clean package -DskipTests: 12
USES: chainguard-dev/actions/setup-mirror: 14
make ko-policy-controller: 14
kustomize build test CUSTOM_PATH_DIR | kubectl apply -f -: 7
kubectl rollout status FLAG 5m FLAG cosign-system deployments CUSTOM_PATH_DIR: 13
export LD_LIBRARY_PATH=ENV_VAR:ENV_VAR CUSTOM_PATH_DIR: 15
. CUSTOM_PATH_DIR lintKotlin: 8
make -f Makefile.repo: 6
make -j 2 check VERBOSE=1: 6
docker login FLAG=${{ secrets.DOCKER_USERNAME }} FLAG=${{ secrets.DOCKER_PASSWORD }}: 6
npm run start-local-server: 7
cd samples CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE ENV_VAR: 7
sed -i "s CUSTOM_PATH_DIR setup.py: 13
. CUSTOM_PATH_FILE ci-export-vars: 22
. CUSTOM_PATH_FILE ci-setup-deps-target: 7
USES: coparse-inc/action-electron-builder: 11
pip install coverage pytest: 7
git remote set-head origin FLAG: 29
USES: brettcannon/pip-secure-install: 11
npm run test:cover:report: 7
pip install -U pip setuptools wheel FLAG: 8
PYTHONPATH=ENV_VAR pytest tests: 6
USES: ./.github/actions/build-backend-binary: 6
dotnet pack src CUSTOM_PATH_FILE -c Release -o publish: 8
dotnet nuget push publish CUSTOM_PATH_FILE -s URL -k ENV_VAR FLAG: 11
echo "cache=$(make go.cachedir)" >> ENV_VAR: 12
add-apt-repository -y universe: 20
tox -e${{ matrix.toxenv }}: 22
echo "Largest packages:": 6
dpkg-query -Wf 'ENV_VARnstalled-Size}\tENV_VARackage}\n' | sort -n | tail -n 50: 6
sudo apt-get FLAG FLAG remove $(dpkg-query -f 'ENV_VARackage}\n' -W | grep -E '^(ghc-|google-cloud-sdk|google-chrome|firefox|mysql-server|dotnet-sdk|hhvm|mono)') || echo "(error ignored)": 6
sudo DEBIAN_FRONTEND=noninteractive apt-get install tox: 9
mkdir -p "artifacts CUSTOM_PATH_DIR: 13
cp -r .tox CUSTOM_PATH_DIR .tox CUSTOM_PATH_DIR "artifacts CUSTOM_PATH_DIR: 9
if [ -f .tox CUSTOM_PATH_DIR ]; then CONTAINERS=$(docker create $(tail -1 .tox CUSTOM_PATH_DIR CUSTOM_PATH_DIR || true); fi: 9
if [ -n "ENV_VAR" ]; then for CONTAINER in ENV_VAR; do for ARTIFACT in CUSTOM_PATH_DIR do docker cp ENV_VAR:ENV_VAR artifacts CUSTOM_PATH_DIR && HAVE_LOG=1; done; if [ -n "ENV_VAR" ]; then break; fi; done; fi: 9
npm run package:linux: 8
echo "Check we are starting with clean git checkout": 9
if [ -n "$(git status -uno -s)" ]; then echo "git status is not clean"; false; fi: 9
echo "Trying to strip out notebooks": 9
echo "Check that strip out was unnecessary": 9
git status -s # display the status to see which nbs need cleaning up: 9
if [ -n "$(git status -uno -s)" ]; then echo -e "!!! Detected unstripped out notebooks\n!!!Remember to run nbdev_install_git_hooks"; false; fi: 8
zig version: 9
chmod +x . CUSTOM_PATH_DIR matrix.variant }} CUSTOM_PATH_FILE: 9
FLAG docker-builds CUSTOM_PATH_FILE \: 19
FLAG type=inline \: 20
FLAG metasfresh CUSTOM_PATH_DIR needs.init.outputs.tag-floating }} \: 25
FLAG id=mvn-settings,src=docker-builds CUSTOM_PATH_FILE \: 6
FLAG metasfresh CUSTOM_PATH_DIR needs.init.outputs.tag-fixed }} \: 13
echo '* metasfresh CUSTOM_PATH_DIR needs.init.outputs.tag-fixed }}' >> ENV_VAR: 6
FLAG REFNAME=${{ needs.init.outputs.tag-fixed }} \: 14
FLAG metasfresh CUSTOM_PATH_DIR needs.init.outputs.tag-floating }}-compat \: 10
USES: ./.github/actions/prepare_cpath_environment: 14
chdir $env:GITHUB_WORKSPACE\\build: 12
mkdir ~ CUSTOM_PATH_DIR && cd ~ CUSTOM_PATH_DIR: 7
printf '%s\n' "ENV_VAR[@]}": 8
cmake "ENV_VAR[@]}": 8
make FLAG 4: 8
bash prebuild.sh: 6
case "ENV_VAR" in: 18
macOs) brew install direnv ;;: 6
Linux) sudo apt-get install FLAG direnv ;;: 6
pnpm run docs:vite-build: 9
pnpm cpx "docs CUSTOM_PATH_DIR dist CUSTOM_PATH_DIR: 165
pnpm cpx "docs CUSTOM_PATH_DIR dist: 10
python -m pip install FLAG pip setuptools==59.4.0 wheel: 7
echo ${{ github.event.number }}              > . CUSTOM_PATH_FILE: 7
echo ${{ github.event.pull_request.merged }} > . CUSTOM_PATH_FILE: 7
echo ${{ github.event.action }}              > . CUSTOM_PATH_FILE: 7
date -u > . CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 11
gem install danger: 6
mkdir build-static: 6
cd build-static: 8
cd backend/: 9
python -m pip install FLAG hatch: 6
openssl req -x509 -keyout test CUSTOM_PATH_FILE -out test CUSTOM_PATH_FILE -config test CUSTOM_PATH_FILE -days 365: 10
ifconfig: 6
rm ' CUSTOM_PATH_DIR: 6
minikube start FLAG=docker: 13
bundle exec ruby test CUSTOM_PATH_FILE: 6
pnpm run generate: 11
git commit -a -m 'Automated dotnet-format update': 14
USES: ./.github/actions/test-network-setup: 13
git config FLAG user.name 'CI': 7
USES: contributor-assistant/github-action/: 6
curl URL | bash -s -- -b ENV_VAR CUSTOM_PATH_DIR: 6
echo "line_number=$(grep -n "project" .fossa.yml | cut -f1 -d:)" >> ENV_VAR: 6
sed -i "${line_number}s|.*|  project: git:ENV_VAR.git|" .fossa.yml: 7
cat .fossa.yml: 8
aws s3 rm "${{ env.S3_BUCKET }} CUSTOM_PATH_DIR FLAG: 9
npm run nightly: 11
mv leapp-team ..: 30
npm run enable-team-features-prod: 18
TAG_VERSION=$(cat nightly-version): 35
rm ". CUSTOM_PATH_FILE" ||:: 7
powershell "Compress-Archive '. CUSTOM_PATH_DIR Setup ENV_VAR.exe' '. CUSTOM_PATH_FILE'": 9
echo "::set-output name=TAG_VERSION::ENV_VAR": 10
zip ". CUSTOM_PATH_FILE" ". CUSTOM_PATH_FILE": 22
USES: ./.github/actions/setup-server: 10
USES: ./.github/actions/fetch-test-config: 9
aqueduct install s3: 6
python3 -m pip install kll: 16
USES: ./.github/actions/docker/build: 6
USES: signcl/docsearch-scraper-action: 6
. CUSTOM_PATH_FILE}} FLAG FLAG="$out_dir" FLAG="$out_dir CUSTOM_PATH_FILE" FLAG="$out_dir CUSTOM_PATH_FILE" -c=FLAG=${{matrix.compiler}} ${{env.args}} ${{matrix.args}}: 12
cp . CUSTOM_PATH_FILE ENV_VAR: 7
export VERSION=$(. CUSTOM_PATH_DIR -q -Dexec.executable=echo -Dexec.args='${project.version}' FLAG exec:exec): 7
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv onnxruntime: 6
docker build . FLAG Dockerfile FLAG ENV_VAR FLAG "runnumber=ENV_VAR": 7
sed -i "s+ENV_VAR CUSTOM_PATH_DIR coverage.xml: 6
eatmydata -- go run test.go -skip-build -keep-data=false -docker=false -print-log -follow -tag upgrade_downgrade_query_serving_schema: 6
php -r "file_exists('.env') || copy('.env.ci', '.env');": 6
sudo -E apt-get -qq install squashfs-tools $(curl -fsSL git.io CUSTOM_PATH_DIR: 8
echo "OPENWRT_ROOT_PATH=ENV_VAR" >> ENV_VAR: 7
echo "::set-output name=OPENWRT_ROOT_PATH::$(echo ENV_VAR)": 7
echo -e "\nCONFIG_ALL=y" >> ENV_VAR CUSTOM_PATH_DIR: 8
echo -e "\nCONFIG_ALL_NONSHARED=y" >> ENV_VAR CUSTOM_PATH_DIR: 8
echo "::set-output name=CURRENT_BRANCH::$(echo ENV_VAR)": 8
export SOURCE_OWNER="$(echo ENV_VAR | awk -F ' CUSTOM_PATH_DIR '{print $(NF-1)}')": 8
echo "SOURCE_OWNER=ENV_VAR" >> ENV_VAR: 8
echo "::set-output name=SOURCE_OWNER::$(echo ENV_VAR)": 8
echo "::set-output name=SOURCE_REPO::$(echo ENV_VAR)": 8
echo "::set-output name=DEVICE_TARGET::$(echo ENV_VAR)": 7
echo "::set-output name=DEVICE_SUBTARGET::$(echo ENV_VAR)": 7
export DEVICE_PLATFORM=$(cat .config | grep CONFIG_TARGET_ARCH_PACKAGES | awk -F '"' '{print $2}'): 7
echo "DEVICE_PLATFORM=ENV_VAR" >> ENV_VAR: 7
echo "::set-output name=DEVICE_PLATFORM::$(echo ENV_VAR)": 7
export TOOLCHAIN_IMAGE="toolchain-ENV_VAR-ENV_VAR-ENV_VAR-ENV_VAR-ENV_VAR": 8
echo "::set-output name=TOOLCHAIN_IMAGE::$(echo ENV_VAR)": 8
echo "CURRENT_BRANCH=$(echo '${{needs.Toolchain.outputs.CURRENT_BRANCH}}')" >> ENV_VAR: 16
echo "OPENWRT_ROOT_PATH=$(echo '${{needs.Toolchain.outputs.OPENWRT_ROOT_PATH}}')" >> ENV_VAR: 14
echo "SOURCE_OWNER=$(echo '${{needs.Toolchain.outputs.SOURCE_OWNER}}')" >> ENV_VAR: 16
echo "SOURCE_REPO=$(echo '${{needs.Toolchain.outputs.SOURCE_REPO}}')" >> ENV_VAR: 16
echo "DEVICE_PLATFORM=$(echo '${{needs.Toolchain.outputs.DEVICE_PLATFORM}}')" >> ENV_VAR: 14
echo "DEVICE_TARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_TARGET}}')" >> ENV_VAR: 14
echo "DEVICE_SUBTARGET=$(echo '${{needs.Toolchain.outputs.DEVICE_SUBTARGET}}')" >> ENV_VAR: 14
echo "TOOLCHAIN_IMAGE=$(echo '${{needs.Toolchain.outputs.TOOLCHAIN_IMAGE}}')" >> ENV_VAR: 16
sudo -E apt-get -qq install rdate squashfs-tools $(curl -fsSL git.io CUSTOM_PATH_DIR: 9
chmod 777 ENV_VAR CUSTOM_PATH_DIR: 8
sudo mount -B ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 8
make download -j64: 9
make diffconfig buildversion feedsversion: 9
zip -r ENV_VAR-ENV_VAR.zip bin: 9
echo 'lsblk -f': 7
echo 'df -h': 7
echo 'btrfs filesystem usage': 7
sudo -E apt-get -qq install zip unzip rsync: 8
unzip ENV_VAR-ENV_VAR.zip: 8
export BUILD_DATE=$(date +"%Y-%m-%d"): 7
echo "${{ secrets.HOSTHATCH_PRIVATEKEY }}" > ~ CUSTOM_PATH_DIR: 7
sudo wget -q -O CUSTOM_PATH_DIR URL: 8
b2 authorize-account ENV_VAR2_APPLICATION_KEY_ID ENV_VAR2_APPLICATION_KEY: 7
b2 sync FLAG FLAG 32 FLAG 7 FLAG ENV_VAR ENV_VAR: 7
git config FLAG user.email "${{ secrets.NBDROID_EMAIL }}": 6
git config FLAG user.name "${{ secrets.NBDROID_NAME }}": 6
cd nosqlbench-build-docs: 6
wget -q "URL: 6
export CCACHE_COMPRESS=1: 6
export CCACHE_COMPRESSLEVEL=10: 6
echo "::set-output name=date::$(TZ=":America CUSTOM_PATH_DIR date -Iseconds)": 6
echo "::set-output name=date::$(git show FLAG FLAG FLAG='%cI' ENV_VAR)": 6
DATE_TIME=$(cat CUSTOM_PATH_DIR: 6
pip install pyarrow pybind11 numpy: 7
source scripts CUSTOM_PATH_FILE;: 22
pacman -Sy: 6
USES: ./.github/meson_actions: 11
npm set CUSTOM_PATH_FILE CUSTOM_PATH_DIR ENV_VAR: 8
cmake ENV_VAR -DCMAKE_BUILD_TYPE=ENV_VAR ENV_VAR: 8
cmake FLAG . FLAG ENV_VAR -j 2: 12
pip install FLAG numpy: 17
-e RUN_LOCAL=true \: 14
-e TEST_CASE_RUN=true \: 7
-e ANSIBLE_DIRECTORY=.automation CUSTOM_PATH_DIR \: 7
-e ACTIONS_RUNNER_DEBUG=true \: 14
-e ERROR_ON_MISSING_EXEC_BIT=true \: 14
-e OUTPUT_DETAILS=detailed \: 7
USES: ./.github/actions/pnpm-cache: 14
npm link  CUSTOM_PATH_DIR: 6
curl FLAG '=https' FLAG.2 -fsSL URL | bash -: 21
echo "ENV_VAR CUSTOM_PATH_DIR | tee -a ENV_VAR: 21
pkill -f pantsd: 21
${{ github.event.inputs.extra_env }} pants version: 21
${{ github.event.inputs.extra_env }} pants tailor FLAG update-build-files FLAG ::: 13
${{ github.event.inputs.extra_env }} pants lint check ::: 14
${{ github.event.inputs.extra_env }} pants test ::: 15
${{ github.event.inputs.extra_env }} pants package ::: 18
docker build . FLAG Dockerfile FLAG production FLAG COMMIT_HASH=ENV_VAR FLAG PROPRIETARY_MODE=${{ secrets.PROPRIETARY_MODE }} FLAG STRIPE_PUBLIC_API_KEY=${{ secrets.STRIPE_PUBLIC_API_KEY }} FLAG TEXTERIFY_PAYMENT_SERVER=${{ secrets.TEXTERIFY_PAYMENT_SERVER }} FLAG SENTRY_DSN_FRONTEND=${{ secrets.SENTRY_DSN_FRONTEND }} FLAG chrztoph CUSTOM_PATH_DIR: 7
docker tag chrztoph CUSTOM_PATH_DIR chrztoph CUSTOM_PATH_DIR: 14
docker push chrztoph CUSTOM_PATH_DIR: 28
docker tag chrztoph CUSTOM_PATH_DIR chrztoph CUSTOM_PATH_DIR env.RELEASE_VERSION }}: 11
docker push chrztoph CUSTOM_PATH_DIR env.RELEASE_VERSION }}: 11
exec .github CUSTOM_PATH_FILE: 11
flutter test FLAG chrome FLAG FLAG random: 6
FLAG .: 8
echo "image_name=ENV_VAR" >> ENV_VAR: 6
USES: justincy/github-action-npm-release: 6
sudo service postgresql start: 10
echo "NUDGE_VERSION=$( CUSTOM_PATH_DIR . CUSTOM_PATH_FILE)" >> ENV_VAR: 7
echo ENV_VAR##* CUSTOM_PATH_DIR: 6
cp -r docs CUSTOM_PATH_DIR gh-pages CUSTOM_PATH_DIR: 6
cargo hack test FLAG FLAG: 10
dart test FLAG=random -p chrome: 8
USES: home-assistant/actions/helpers/version: 12
cd custom_components CUSTOM_PATH_DIR: 10
curl -I URL: 9
USES: DevExpress/testcafe-action: 10
npm install -g appium: 7
USES: JagandeepBrar/LunaSea/.github/actions/prepare_for_deployment: 8
Build CUSTOM_PATH_FILE -p ${{ matrix.php }} -s composerUpdate: 6
docker image list: 7
python utils CUSTOM_PATH_FILE >> ENV_VAR: 8
dnf -y update: 6
echo "GOVERSION=$(cat Dockerfile|grep golang | awk ' { print $2 } ' | cut -d '@' -f 1 | cut -d ':' -f 2 | uniq)" >> ENV_VAR: 16
. setup.env: 6
echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version FLAG generic)" >> ENV_VAR: 8
. CUSTOM_PATH_DIR ${{ github.workspace }}: 8
yarn lint FLAG=0: 7
yarn exec nyc report -t .nyc_output FLAG .coverage FLAG=lcov: 6
jq FLAG \: 6
FLAG icon_url "URL \: 6
'{"username":$username,"icon_url": $icon_url, "text": $text }' > CUSTOM_PATH_FILE: 6
rustup target add aarch64-linux-android: 24
rustup target add x86_64-linux-android: 18
rustup target add i686-linux-android: 16
echo "Cirrus CI ${{ github.event.check_suite.conclusion }} on ${{ github.event.check_suite.head_branch }} branch!": 6
echo "SHA ${{ github.event.check_suite.head_sha }}": 7
echo "##[error]See ENV_VAR for details" && false: 6
python3 -m pip install FLAG "tox>=4.0.0": 8
${{ matrix.runIde }}: 6
sudo apt-key adv FLAG hkp: CUSTOM_PATH_FILE:80 FLAG 8919F6BD2B48D754: 6
sudo chmod -R 777 CUSTOM_PATH_DIR: 13
sudo chmod 777 CUSTOM_PATH_FILE: 6
ls -lrth: 6
sudo du -sh CUSTOM_PATH_DIR: 48
rush switch-flavor:${{ matrix.flavor }}: 15
node . CUSTOM_PATH_FILE ${{ matrix.flavor }}: 9
rush update:stable: 9
rush build -t .: 9
cd ol CUSTOM_PATH_DIR && MODE_0L=test cargo test: 6
USES: tpm2-software/ci/runCI: 14
google-chrome-stable FLAG FLAG FLAG=9222 URL &: 6
python -m venv .env: 7
;;: 13
make pythoninfo: 15
USES: ./.github/actions/go/lint: 8
pip install FLAG flake8: 10
tar -zxvf eigen-3.4.0.tar.gz: 6
rm eigen-3.4.0.tar.gz: 6
mv eigen-* include: 6
tar -zxvf v0.4.1.tar.gz: 6
mv EigenRand-0.4.1 CUSTOM_PATH_DIR include/: 6
tar -zxvf v1.1.3.tar.gz: 6
mv variant-1.1.3 CUSTOM_PATH_DIR include/: 6
export MACOSX_DEPLOYMENT_TARGET=10.9: 8
FLAG $(pwd) CUSTOM_PATH_DIR \: 6
yarn global add node-gyp && yarn install FLAG: 7
dapr uninstall FLAG: 9
cd dapr: 8
cp dist CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 10
docker stop dapr_placement: 9
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR FLAG: 7
USES: rust-lang/simpleinfra/github-actions/upload-docker-image: 6
export TERM=xterm: 6
 CUSTOM_PATH_DIR install: 9
 CUSTOM_PATH_DIR &: 10
npm run-script test-windows: 6
sudo gem install apt-spy2: 6
yarn dist: 18
export REGISTRY=test: 6
sudo ln -sf CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 7
tail -300 ~ CUSTOM_PATH_FILE: 6
grep "<FATAL>:" ~ CUSTOM_PATH_FILE && exit 1 || true: 8
...: 7
php artisan storage:link: 7
php artisan migrate:fresh FLAG: 6
USES: lovasoa/upload-release-asset: 11
${{ github.event.head_commit.message }}: 7
USES: randomairborne/r2-release: 9
yarn run test:unit FLAG: 6
mv coverage coverage-${{ matrix.neo4j-version }}: 6
npm install -g ts-node typescript: 6
lowercase_instance=${{ matrix.aura-instance }}: 10
echo "AURA_URI_SECRET=AURA_${lowercase_instance^^}_URI" >>"ENV_VAR": 10
echo "AURA_PASSWORD_SECRET=AURA_${lowercase_instance^^}_PASSWORD" >>"ENV_VAR": 10
ts-node tests CUSTOM_PATH_FILE: 6
USES: ./.github/actions/report-code-coverage: 13
echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> ENV_VAR: 9
echo ${{ github.sha }} > changedetectionio CUSTOM_PATH_FILE: 7
echo ${{ github.ref }} > changedetectionio CUSTOM_PATH_FILE: 7
echo step SHA ${{ steps.vars.outputs.sha_short }} tag ${{steps.vars.outputs.tag}} branch ${{steps.vars.outputs.branch}} digest ${{ steps.docker_build.outputs.digest }}: 7
pip install FLAG pytest: 6
echo "CC=mpicc" >> ENV_VAR: 7
docker run FLAG mplatform CUSTOM_PATH_DIR ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}: 6
USES: HighwayThree/jira-extract-issue-keys: 7
USES: HighwayThree/jira-upload-deployment-info: 9
conda activate curr_py: 27
bin CUSTOM_PATH_DIR lint: 6
USES: batect/batect-wrapper-validation-action: 7
curl -L -o CUSTOM_PATH_FILE URL: 6
USES: ./.github/actions/install/gtest: 11
USES: ./.github/actions/badge: 8
sudo apt-get install -y yarn: 9
echo ==========: 10
docker exec -i my_container bash -c "poetry run coverage run -a test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE": 8
_EOF_: 6
	exit 1: 6
	fi: 6
python -Im pip install tox: 13
sudo python3 -m pip install FLAG virtualenv: 6
sudo python3 -m pip install FLAG setuptools: 6
USES: paulhatch/semantic-version: 8
npm install -g eslint: 10
$env:Path = '..\..;' + $env:Path: 19
.\tom.exe migrate:status FLAG=tinyorm_tom_mysql FLAG: 10
.\tom.exe migrate:status FLAG=tinyorm_tom_postgres FLAG: 10
.\tom.exe migrate:status FLAG=tinyorm_tom_sqlite FLAG: 8
cargo +nightly fmt FLAG FLAG: 12
git push FLAG origin master: 9
USES: workflow/nix-shell-action: 6
tox -e style: 7
python3 build CUSTOM_PATH_FILE fetch FLAG openssl: 8
python3 build CUSTOM_PATH_FILE build FLAG openssl: 8
sudo apt-get install alien: 6
node lib CUSTOM_PATH_DIR install ffmpeg: 7
Install-WindowsFeature Server-Media-Foundation: 7
etc CUSTOM_PATH_FILE: 13
sudo apt-get install -q xsel postgresql-client: 45
mkdir -p .kube CUSTOM_PATH_DIR: 10
kubectl create ns kubeflow: 8
. CUSTOM_PATH_DIR FLAG=fatal FLAG: 7
. CUSTOM_PATH_DIR generate_coverage gcc: 32
sudo apt-get FLAG install -y lcov: 9
sudo apt-get -qy update && sudo apt-get install -y libssl-dev libssl1.1: 6
make test-sim-multi-seed-short: 13
. CUSTOM_PATH_DIR jvmTest: 6
bin CUSTOM_PATH_DIR db:test:prepare: 6
rm -rf deps: 8
ln -s ${{ env.DEPS_ROOT }} deps: 8
USES: armbian/actions/runner-clean: 35
rm -rf userpatches.repo: 66
mkdir -pv userpatches: 33
rsync -av userpatches.repo CUSTOM_PATH_FILE_DIR}} CUSTOM_PATH_DIR userpatches/: 33
bash . CUSTOM_PATH_FILE ${{ matrix.invocation }} SHARE_LOG=yes ${{env.EXTRA_PARAMS_ALL_BUILDS}}: 17
rm -rfv output CUSTOM_PATH_DIR userpatches CUSTOM_PATH_DIR output CUSTOM_PATH_DIR output CUSTOM_PATH_DIR: 16
bash . CUSTOM_PATH_FILE ${{ matrix.invocation }} SHARE_LOG=yes MAKE_FOLDERS="archive" IMAGE_VERSION=${{ needs.matrix_prep.outputs.version }} ${{env.EXTRA_PARAMS_IMAGE}} ${{env.EXTRA_PARAMS_ALL_BUILDS}}: 16
echo ${{ secrets.GPG_PASSPHRASE1 }} | gpg FLAG 0 FLAG FLAG FLAG loopback FLAG FLAG output CUSTOM_PATH_FILE: 16
rm -rfv output CUSTOM_PATH_DIR userpatches CUSTOM_PATH_DIR: 16
. scripts CUSTOM_PATH_DIR: 10
echo "$(go env GOPATH) CUSTOM_PATH_DIR >> "ENV_VAR": 7
ENV_VARrrorActionPreference = 'Stop': 16
npm run types && npm run build: 9
npm run test:deno: 6
npx  CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_DIR -B -ntp clean test: 6
echo "Clone Pyomo-model-libraries...": 13
echo "Install PyUtilib...": 9
echo "Install Pyomo...": 15
ENV_VAR setup.py develop ${{matrix.setup_options}}: 8
echo "Set custom PYOMO_CONFIG_DIR": 10
echo "PYOMO_CONFIG_DIR=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 10
pyomo download-extensions: 7
pyomo help FLAG || exit 1: 18
cat >> comment.md <<EOF: 10
USES: ./actions/needs-more-info-closer: 8
echo "" >> image-digest CUSTOM_PATH_FILE: 8
echo "datew=$(date '+%Y-%V')" >> ENV_VAR: 16
yarn common:sync: 14
${{github.workspace}}\.github\scripts\UpgradeSmokeTest.ps1 ${{ matrix.reactNativeWindowsVersion }} -Force ${{ format('${0}', contains(matrix.reactNativeWindowsVersion, 'canary')) }}: 6
. CUSTOM_PATH_DIR publish -Pbuild=ENV_VAR -PtaboolibUsername=ENV_VAR -PtaboolibPassword=ENV_VAR: 14
echo "${{ secrets.RELEASE_KEYSTORE }}" > .sign CUSTOM_PATH_FILE: 7
gpg -d FLAG "${{ secrets.PASSPHRASE }}" FLAG .sign CUSTOM_PATH_FILE > .sign CUSTOM_PATH_FILE: 15
echo "${{ secrets.RELEASE_KEYSTORE_PROPERTIES }}" > .sign CUSTOM_PATH_FILE: 7
brew install sunnycase CUSTOM_PATH_DIR: 7
pip install pytz: 7
sed -i 's CUSTOM_PATH_DIR tt-rss-plugins CUSTOM_PATH_DIR: 6
cp devtools CUSTOM_PATH_FILE .. CUSTOM_PATH_DIR: 6
echo "BRANCH_NAME=$(echo ENV_VAR | sed "s CUSTOM_PATH_DIR >> ENV_VAR: 7
.github CUSTOM_PATH_FILE ENV_VAR ENV_VAR: 20
sudo ninja install: 11
sudo apt install -y xorg-dev: 11
nvcc -V: 8
(git diff FLAG origin CUSTOM_PATH_DIR HEAD | grep -E "[src|tests] CUSTOM_PATH_FILE") && echo "::set-output name=output::1" || echo "::set-output name=output::0": 6
python -m pip install *.whl: 16
USES: ./.github/actions/install-runtime-dependencies: 15
make test-cov CI=1 TEST_TARGET="tests CUSTOM_PATH_DIR: 8
curl -L -o release CUSTOM_PATH_FILE "URL: 8
GO111MODULE="off" go get github.com CUSTOM_PATH_DIR: 24
USES: johnwbyrd/update-release: 7
rustup default ENV_VAR: 8
npx prettier 'src CUSTOM_PATH_FILE*' FLAG: 6
npx prettier 'build CUSTOM_PATH_FILE' FLAG: 6
USES: ./.github/actions/set-python: 13
USES: ./.github/actions/create-venv-for-tests: 6
mkdir .nyc_output: 10
pip install FLAG -r requirements CUSTOM_PATH_FILE: 9
make ci-sweep: 71
echo "CUR_DIR=ENV_VAR" >> ENV_VAR: 6
. CUSTOM_PATH_DIR FLAG .: 13
cd spec CUSTOM_PATH_DIR: 6
sed -i 's CUSTOM_PATH_DIR requirements.txt: 6
gosec . CUSTOM_PATH_DIR: 23
USES: elastic/assign-one-project-github-action: 8
OUTNAME="ENV_VAR_${{matrix.basename}}_${{env.basename}}": 6
cd CommonUI && npm install FLAG: 11
gawk FLAG: 6
c++ FLAG: 11
pushd scripts && go build -o setup_tool && popd: 10
make linkcheck: 27
git config FLAG user.name 'Github Actions': 6
npm audit FLAG=critical: 6
jq -r '.url' asset.txt > url.txt: 7
jq -r '.name' asset.txt > name.txt: 6
wget -i url.txt: 6
echo "JAR_FILENAME=$(cat name.txt)" >> ENV_VAR: 6
make -j$(sysctl -n hw.ncpu): 12
USES: aormsby/Fork-Sync-With-Upstream-action: 8
export TAG=latest: 18
export TAG=$(cat releasing CUSTOM_PATH_DIR: 17
dotnet build -p:PackageVersion=${{steps.tag.outputs.tag}} FLAG Release . CUSTOM_PATH_FILE: 7
npx react-native run-windows FLAG FLAG FLAG FLAG ${{ matrix.architecture }} ${{ startsWith(matrix.architecture, 'ARM') && 'FLAG' || '' }} ${{ matrix.configuration == 'Release' && 'FLAG' || '' }} FLAG PackageCertificateKeyFile=${{github.workspace}}\GitHubActionsWorkflow.pfx: 10
yarn test:parallel __tests__ CUSTOM_PATH_DIR FLAG FLAG .coverage CUSTOM_PATH_DIR github.job }}: 16
test -e . CUSTOM_PATH_FILE && echo "::set-output name=exists::true" || echo "::set-output name=exists::false": 8
python3 -c "import os; os.makedirs('artifacts', exist_ok=True)": 15
tar xvf ${{ inputs.package-name }}-${{ inputs.salt-version }}-onedir-${{ inputs.platform }}-${{ inputs.arch }}.tar.xz: 12
tools FLAG vm create FLAG "ENV_VAR" FLAG=2 ${{ inputs.distro-slug }}: 7
tools FLAG vm ssh ${{ inputs.distro-slug }} -- df -h || true: 7
tools FLAG vm rsync ${{ inputs.distro-slug }}: 7
rm -rf artifacts CUSTOM_PATH_DIR: 8
tree -a artifacts: 15
sudo chown -R "$(id -un)" .: 9
python3 -m pip install 'nox==${{ inputs.nox-version }}': 12
mkdir deps: 6
vcpkg CUSTOM_PATH_DIR integrate install: 6
make examples: 16
git pull origin: 8
echo "new_version=ENV_VAR" >> ENV_VAR: 6
USES: ./.github/actions/build-package: 127
git clean -f 3rdparty: 8
git clean -f vendor: 8
git clean -f vendor-bin: 6
go build -ldflags "-s -w" -trimpath: 11
cd code CUSTOM_PATH_DIR: 7
USES: Kitchen/RE-thirdparty-actions/actions/vault: 6
. CUSTOM_PATH_DIR dependencies: 7
USES: apache/rocketmq-test-tool: 19
cd Builder/: 6
python -m pip install -e .[quality,test]: 10
echo "************************************************************": 8
platformio upgrade FLAG: 69
 CUSTOM_PATH_DIR version: 10
msys2 -c '. CUSTOM_PATH_FILE x86_64': 6
conda deactivate: 10
USES: ./.github/actions/setup-js: 11
cd tools/ && . CUSTOM_PATH_FILE && cd ..: 6
sed -i 's CUSTOM_PATH_DIR examples CUSTOM_PATH_FILE: 7
docker-compose -f examples CUSTOM_PATH_FILE up -d: 7
sudo swapoff FLAG: 6
sudo rm FLAG CUSTOM_PATH_DIR: 6
cat <<EOF > ~ CUSTOM_PATH_FILE: 6
node FLAG && npm FLAG: 11
npm cache clean FLAG: 13
python -m pip install Pillow==6.2.2: 15
python -m pip install mmcv-full -f URL: 13
python -m pip install mmdet: 14
python setup.py check -m -s: 20
coverage run FLAG FLAG mmdet3d -m pytest tests/: 10
python -m pip install pip FLAG FLAG: 8
yarn run bundlewatch: 7
yarn npm publish: 16
security delete-keychain signing_temp.keychain || true: 7
. CUSTOM_PATH_FILE check: 13
USES: DiligentGraphics/github-action/run-core-gpu-tests: 9
npm run install-react-16: 6
yarn -s ts-node scripts CUSTOM_PATH_DIR FLAG ${{ matrix.os }} FLAG ${{ matrix.node-version }} FLAG ENV_VAR: 6
yarn -s build: 9
pytest -x: 7
dotnet pack . CUSTOM_PATH_FILE FLAG ${{ env.ciOutputFolder }} FLAG ${{ env.dotnetBuildConfiguration }} FLAG ${{ env.dotnetVerbosity }} CUSTOM_PATH_DIR env.dotnetBuildConfiguration }} CUSTOM_PATH_DIR env.sourceRepositoryBranch }} CUSTOM_PATH_DIR env.sourceRepositoryCommit }} CUSTOM_PATH_DIR: 7
dotnet pack . CUSTOM_PATH_FILE FLAG ${{ env.releaseOutputFolder }} FLAG ${{ env.dotnetBuildConfiguration }} FLAG ${{ env.dotnetVerbosity }} CUSTOM_PATH_DIR env.dotnetBuildConfiguration }} CUSTOM_PATH_DIR env.sourceRepositoryBranch }} CUSTOM_PATH_DIR env.sourceRepositoryCommit }}: 7
cd client CUSTOM_PATH_DIR: 9
gh release create FLAG ${{ github.ref_name }} || true: 6
make test-examples: 12
SDKMANAGER=ENV_VAR CUSTOM_PATH_DIR: 9
echo "y" | ENV_VAR "ndk;21.4.7075529": 9
export LDFLAGS="-static -Wno-unused-command-line-argument": 7
source init.sh: 14
USES: docker://ubuntu:20.04: 9
USES: docker://ubuntu:18.04: 9
USES: docker://debian:buster: 8
USES: docker://redhat/ubi8: 8
USES: docker://opensuse/leap:15.3: 8
USES: docker://debian:testing: 8
USES: docker://debian:latest: 8
echo "GO_VERSION=ENV_VAR" >> ENV_VAR: 6
if test -x "synctestdata.sh"; then . CUSTOM_PATH_FILE; fi: 16
tests CUSTOM_PATH_FILE ${{ matrix.configure_options }}: 15
sudo add-apt-repository universe &&: 9
ENV_VAR test: 13
make archive: 9
(. CUSTOM_PATH_FILE && make tests test-installation): 8
pyroscope_ffi CUSTOM_PATH_FILE: 8
share CUSTOM_PATH_FILE: 20
share CUSTOM_PATH_FILE latest ENV_VAR: 16
export KUBECONFIG="ENV_VAR CUSTOM_PATH_DIR: 7
echo "environment-kubeconfig:" ENV_VAR: 15
docker build . FLAG Dockerfile FLAG localbuild CUSTOM_PATH_DIR: 7
.github CUSTOM_PATH_FILE install CUSTOM_PATH_FILE: 8
mv llvm-mingw ENV_VAR: 6
cmake FLAG out: 7
unzip .. CUSTOM_PATH_FILE: 7
yarn workspace  CUSTOM_PATH_DIR typecheck: 8
gem install github_changelog_generator: 6
USES: deka0106/upload-to-dropbox: 16
just ci-test: 6
cd platforms CUSTOM_PATH_DIR: 23
pip install -r requirements.txt FLAG: 9
docker push unifyai CUSTOM_PATH_DIR: 7
USES: fauguste/auto-cancellation-running-action: 12
vagrant plugin install vagrant-vbguest vagrant-disksize vagrant-reload: 6
cd lte CUSTOM_PATH_DIR: 21
export MAGMA_DEV_CPUS=3: 6
export MAGMA_DEV_MEMORY_MB=9216: 6
fab get-test-summaries FLAG: 6
cd build ; ctest -j 10 -C Debug FLAG "test-unicode" FLAG: 6
REQUEST_ID=$(sed -n -e 's CUSTOM_PATH_DIR *Request ID: *\(.*\)$ CUSTOM_PATH_DIR output): 6
echo "REQUEST_ID: ENV_VAR": 6
docker build . FLAG sdkTag=5.0 FLAG runtimeTag=5.0 -t tailwindtraders CUSTOM_PATH_DIR github.sha }} -t latest: 6
rm ${{ github.workspace }} CUSTOM_PATH_FILE: 7
npm version ENV_VAR FLAG=false: 6
npm run devenv:deploy-krypton -- -d: 10
npm run devenv:logs-krypton -- FLAG &> docker-compose-logs.txt &: 10
npm run devenv:stop-krypton: 10
pre-commit run FLAG FLAG FLAG: 8
sudo apt-get install -y xorriso squashfs-tools mtools: 6
make create_vm_from_iso_efi: 10
make test-installer-efi: 10
sudo apt-get install -y ovmf qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi: 12
export PKR_VAR_build=$(cos_version): 20
sudo apt-get remove -y apparmor*: 14
sudo apt-get install -y qemu-system-arm qemu-efi-aarch64 qemu-system qemu-efi vagrant make libvirt-daemon-system bridge-utils ovmf: 12
echo "allow all" | sudo tee -a CUSTOM_PATH_FILE: 18
sudo chmod u+r CUSTOM_PATH_FILE: 18
sudo chmod u+s $(find CUSTOM_PATH_DIR -name qemu-bridge-helper -print -quit|xargs): 18
sudo virsh net-update default add ip-dhcp-host "<host mac='52:54:00:00:00:01' name='jojo' ip='192.168.122.50' CUSTOM_PATH_DIR FLAG FLAG: 16
sudo sed -i "s|<serial type='pty'>|<serial type='file'><source path='ENV_VAR CUSTOM_PATH_FILE' CUSTOM_PATH_DIR $(sudo find CUSTOM_PATH_DIR -name "domain.xml.erb" -print -quit|xargs): 16
R -e "IRkernel::installspec()": 7
brew install python@${{ env.MACOS_PYTHON_VERSION }} && brew unlink python@${{ env.MACOS_PYTHON_VERSION }} && brew link FLAG python@${{ env.MACOS_PYTHON_VERSION }}: 8
pip3 install FLAG pip && python3 -m pip install FLAG setuptools: 8
pushd tutorials CUSTOM_PATH_DIR: 7
USES: reviewdog/action-languagetool: 8
npm install FLAG FLAG FLAG FLAG: 9
sudo -H python3 -m pip install -U .: 8
USES: xt0rted/block-autosquash-commits-action: 8
rustfmt FLAG: 6
. CUSTOM_PATH_FILE .. CUSTOM_PATH_DIR package: 7
. CUSTOM_PATH_FILE 2.5.0 . CUSTOM_PATH_DIR: 8
git diff FLAG && git diff FLAG FLAG || git commit -m "COMMIT_MSG": 7
python -m pip install sync_addon_metadata_translations/: 6
sync-addon-metadata-translations: 6
make test_provider: 10
helm repo add stable URL: 8
make -C ~ CUSTOM_PATH_DIR install: 10
build-wrapper-linux-x86-64 FLAG ${{ env.BUILD_WRAPPER_OUT_DIR }} make clean all: 6
dotnet build Build.csproj -c Release CUSTOM_PATH_DIR: 7
cl CUSTOM_PATH_FILE \: 18
vendor CUSTOM_PATH_DIR fix src FLAG FLAG: 6
ssh -i ssh-key -p2222 user "ps aux | grep accel- &&  sudo dmesg": 6
sudo insmod build CUSTOM_PATH_FILE: 8
USES: ./.github/actions/setup-composite: 9
echo "success!": 9
cd .. CUSTOM_PATH_DIR && cargo publish: 9
kubectl get services -o wide: 6
make CC=ENV_VAR CXX=ENV_VAR: 8
echo "version=ENV_VAR" >> "ENV_VAR": 8
USES: sonarsource/sonarcloud-github-c-cpp: 9
mvn verify: 14
wget 'URL: 11
ccache FLAG=compression=true: 13
yarn upgrade: 7
curl -O -L -s URL: 7
sudo apt install -y . CUSTOM_PATH_FILE: 14
echo -n ${{ steps.changes.outputs.filesChanged == 'false' }} > . CUSTOM_PATH_DIR: 6
make bins: 6
pip install jupyterlab: 8
pip3 install jaseci_core/: 13
jsctl: 7
USES: ./.github/actions/project-build: 14
sed 's CUSTOM_PATH_DIR gradle CUSTOM_PATH_FILE > gradle CUSTOM_PATH_FILE; cp gradle CUSTOM_PATH_FILE gradle CUSTOM_PATH_FILE: 20
docker load -i ~ CUSTOM_PATH_FILE: 6
python devscripts CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_DIR runner.os }}.sh: 6
echo CACHIX_NAME="$(echo ENV_VAR-install-tests | tr "[A-Z] CUSTOM_PATH_DIR "[a-z]-")" >> ENV_VAR: 7
nix-instantiate -E 'builtins.currentTime' FLAG: 9
echo "GIT_COMMIT=ENV_VAR" >> ENV_VAR: 6
echo "GIT_BRANCH=ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 8
dotnet build FLAG FLAG Release CUSTOM_PATH_DIR: 6
composer lint -- FLAG | cs2pr: 6
singularity exec ${{github.workspace}} CUSTOM_PATH_FILE \: 11
echo "deb URL buster-backports main" >> CUSTOM_PATH_FILE: 7
apt-get install -y git CUSTOM_PATH_DIR: 7
echo -e "\033[38;2;95;215;0m\033[1mAll tests successfully passed": 8
pip install FLAG off .[optional]: 13
conan install .. -o webready=True FLAG missing: 16
sudo make clean && make debug: 8
sudo make clean && make test: 8
sudo make clean && make release: 8
sudo make clean && sudo make install: 8
sudo make package: 8
sudo make uninstall && sudo make clean: 8
echo "primary.example.com" > expected: 6
USES: actionite/publish-unit-test-result-action: 8
cd `find . CUSTOM_PATH_DIR -type d -name "tce-linux-amd64-*" | xargs -n1 echo -n`: 7
cd maven: 7
npm run install-deps: 9
flutter analyze lib: 7
USES: ./.github/actions/rust-toolchain: 17
sudo tar -C ${{ github.workspace }} CUSTOM_PATH_DIR -cvzf ${{ github.workspace }} CUSTOM_PATH_FILE docker-compose.log data acme-sh: 7
chmod 600 id_rsa: 6
python3 -m pip install cibuildwheel==2.11.4: 10
echo "Verify Cluster": 10
echo "Current system info": 10
sudo CUSTOM_PATH_DIR cri socket: 10
sudo CUSTOM_PATH_DIR cri cgroup-driver FLAG: 10
echo "Current Cluster info": 10
sudo cat CUSTOM_PATH_FILE | grep CUSTOM_PATH_FILE: 10
sudo cat CUSTOM_PATH_FILE | grep systemd: 10
sudo cat CUSTOM_PATH_FILE | grep 100.64.0.0 CUSTOM_PATH_DIR: 8
tests CUSTOM_PATH_FILE configure: 11
USES: ./.github/actions/waypoint-deploy: 7
IMAGE_ID=ghcr.io CUSTOM_PATH_DIR: 8
echo "NPROC=$(nproc)" >> ENV_VAR: 8
cp LICENSE.txt target: 6
cp target CUSTOM_PATH_FILE target CUSTOM_PATH_DIR: 6
pip3 install tox: 6
cat config.log || true: 14
cd applications CUSTOM_PATH_DIR: 16
. CUSTOM_PATH_DIR initprovider: 7
iscc "ENV_VAR" .\windows-installer\sftpgo.iss: 6
call %USERPROFILE%\venv\Scripts\activate: 14
python -m venv ENV_VAR CUSTOM_PATH_DIR: 9
export CC=gcc: 64
kubectl apply -f policy-controller-e2e.yaml: 7
 CUSTOM_PATH_DIR -v: 15
echo "::set-output name=URL::ENV_VAR": 6
echo "VERSION=$(. CUSTOM_PATH_DIR help:evaluate -Dexpression=project.version -q -DforceStdout)" >> ENV_VAR: 14
go install mynewt.apache.org CUSTOM_PATH_DIR: 10
newt new build: 10
cp -f .github CUSTOM_PATH_FILE build CUSTOM_PATH_FILE: 10
newt upgrade FLAG=1: 10
rm -rf targets: 7
rm -rf repos CUSTOM_PATH_DIR: 11
git clone .. repos CUSTOM_PATH_DIR: 10
sudo apt-get install -y dos2unix: 16
bash update_action.sh && bash update_README.sh: 10
git config FLAG user.email ${{ secrets.MYEMAIL }}: 13
git config FLAG user.name ${{ secrets.MYUSERNAME }}: 13
python -c "print('TORCH_URL=URL + str('test CUSTOM_PATH_FILE' if '${{matrix.release}}' == 'pre' else 'cpu CUSTOM_PATH_FILE'))" >> ENV_VAR: 6
export NEOMUTT_TEST_DIR=ENV_VAR CUSTOM_PATH_DIR: 7
docker pull "${{ needs.tenzircloud-cli.outputs.cached-img }}": 6
docker tag "${{ needs.tenzircloud-cli.outputs.cached-img }}" tenzir CUSTOM_PATH_DIR: 6
echo -n ENV_VAR | md5sum: 8
npm start &: 14
echo "NPROCS=$((`nproc FLAG 2> CUSTOM_PATH_DIR || sysctl -n hw.ncpu` * 2))" | tee ENV_VAR: 6
echo ::set-output name=dir::$(pip cache dir): 19
unzip TestSuite.zip -d TestSuite: 18
python3 misc CUSTOM_PATH_FILE TestSuite 15 8: 10
rm -rf TestSuite: 16
python3 misc CUSTOM_PATH_FILE TestSuite 13 8: 6
ref=$( git show -s FLAG='format:%H'): 6
USES: doitian/available-space: 7
npm install-test: 8
echo "===1best===": 6
USES: miurahr/install-linuxdeploy-action: 6
cd "${{ env.CMAKE_BUILD_DIR }}": 6
export INSTALL_DIR=$(pwd): 6
. CUSTOM_PATH_DIR upload-dif -o opengisch -p qfield ${{ env.CMAKE_BUILD_DIR }}: 6
pnpm run build:all: 6
conda install -y anaconda-client conda-build: 6
pip install scikit-learn==${{ matrix.scikit-learn }}: 6
python -m pip install FLAG pip && pip install nox: 11
cd meteor: 6
USES: ./.github/buildenv: 15
USES: DevExpress/testcafe-build-system/actions/read-artifacts: 9
echo ENV_VAR \: 6
PYTHONPATH=. python3 . CUSTOM_PATH_FILE: 12
PYTHONPATH=. pytest-3: 9
node_modules CUSTOM_PATH_DIR try:one ENV_VAR: 6
USES: ./.github/actions/run-in-docker-action: 12
cat tests.log || true: 12
cat noverify_tests.log || true: 12
cat exhaustive_tests.log || true: 12
cat ctime_tests.log || true: 12
cat bench.log || true: 12
cat test_env.log || true: 12
make -C "upx with space" CUSTOM_PATH_DIR test: 8
echo ::set-output name=tag_name::ENV_VAR: 11
mv linux-amd64 CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
tox -- FLAG: 6
cd agent CUSTOM_PATH_DIR: 6
USES: jumpserver/action-issues-alert: 6
cat pubspec.yaml: 10
USES: christian-draeger/write-properties: 9
USES: devcontainers/action: 9
curl -sSf URL | sh -s -- -y: 12
git fetch FLAG; git tag; git log -n1; bash -x . CUSTOM_PATH_FILE: 6
echo "value=ENV_VAR" >> ENV_VAR: 20
USES: updatecli/updatecli-action: 8
USES: marcelklehr/get-github-handles-from-website-action: 6
USES: marcelklehr/pr-feedback-action: 6
flutter test integration_test: 9
sudo apt install -y clang-format cppcheck: 6
sudo yum install -y gcc gcc-c++: 6
USES: felixfontein/ansible-test-gh-action: 6
python3 . CUSTOM_PATH_FILE || true: 6
pip install -U 'numpy<1.24': 7
pipdeptree -fl: 7
sudo apt-get install graphviz swig: 6
pip install FLAG FLAG eager ${{matrix.setup-target}}: 6
USES: stackrox/kube-linter-action: 9
IMAGE_NAME=ENV_VAR: 10
conda activate examples CUSTOM_PATH_DIR: 8
pip install -r requirements.txt -r requirements_dev.txt: 8
USES: ./.github/actions/python-only: 7
python scripts CUSTOM_PATH_FILE modin CUSTOM_PATH_DIR: 11
rm pkg CUSTOM_PATH_FILE: 6
echo "VIRTUAL ENV:" ENV_VAR: 9
cmake -S ${{ github.workspace }} -B ${{ github.workspace }} CUSTOM_PATH_DIR -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release: 6
ls -la dist: 7
USES: bflad/action-milestone-comment: 8
echo ' CUSTOM_PATH_DIR | sudo tee CUSTOM_PATH_DIR: 11
USES: bots-house/ghcr-delete-image-action: 13
USES: thinca/action-setup-vim: 7
go test -c . CUSTOM_PATH_DIR: 6
make bench: 29
echo "Configure AWSCLI Profile and Credentials from Git Secrets and Pull Temp Kubernetes Config File": 18
echo "Install Vault": 8
rake "cluster:vault:install[${app_env}, ${app_region}, deploy CUSTOM_PATH_DIR ${kmskey}, ${aws_role}]": 8
node-gyp install: 9
AAAAXY_BUILD_USE_VERSION_FILE=true make: 6
yarn release:build: 7
USES: ./.github/actions/checkout: 11
echo ::set-output name=GITDATE::"$(date +%d-%m-%Y)": 12
echo ::set-output name=GITVERSION::$(jq -r .version . CUSTOM_PATH_FILE): 12
echo ::set-output name=GITCOMMIT::"ENV_VAR": 12
git config user.name "$(git log -1 FLAG=format:%an)": 6
git config user.email "$(git log -1 FLAG=format:%ae)": 6
git remote add upstream URL github.repository }}: 6
mix deps.get FLAG ENV_VAR: 11
mix deps.compile FLAG: 14
mix ecto.create: 11
sed -i 's CUSTOM_PATH_DIR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 7
sed -i 's|#baseurl=URL CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 7
cd iverilog: 6
twine upload dist CUSTOM_PATH_DIR dist CUSTOM_PATH_DIR: 10
. CUSTOM_PATH_FILE pd gcc || true: 6
pip install FLAG git+URL: 18
git push -f origin gh-pages:gh-pages: 7
apt-get update && apt-get install -y software-properties-common: 15
docker run -v $(pwd): CUSTOM_PATH_DIR seahorn_container CUSTOM_PATH_DIR -c "cd seahorn CUSTOM_PATH_DIR && lit -a FLAG FLAG=1200 test CUSTOM_PATH_DIR: 8
USES: ./.github/actions/upload: 7
cmake FLAG build FLAG ${{matrix.BUILD_TYPE}}: 6
fuzzing CUSTOM_PATH_DIR -max_total_time=30: 7
jupyter-nbconvert FLAG.timeout=600 FLAG notebook FLAG examples CUSTOM_PATH_FILE: 15
pip install FLAG "pip-tools<=7.1.0": 8
pip freeze > installed-requirements-dev.txt: 8
cat installed-requirements-dev.txt: 8
pip install ansible: 10
ctest -C ${{matrix.build_type}}: 10
CI CUSTOM_PATH_FILE: 6
python ENV_VAR CUSTOM_PATH_FILE ENV_VAR: 16
echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%": 20
chmod 600 CUSTOM_PATH_FILE: 6
VER=$(cat . CUSTOM_PATH_FILE): 8
echo "VERSION=${{ env.VERSION }}": 8
echo "PYTHON_VERSION_CODE=${{ matrix.PYTHON_VERSION_CODE }}": 8
docker run FLAG FLAG multiarch CUSTOM_PATH_DIR FLAG -p yes FLAG yes: 10
mvn -ntp clean install: 7
mvn -ntp versions:set -DnewVersion="ENV_VAR" -DgenerateBackupPoms=false -DprocessAllModules=true: 10
cd plugins: 9
pip3 install "pyyaml<5.4" && pip3 install FLAG pip awsebcli: 6
yarn build && yarn build:umd: 12
rm -f  ENV_VAR CUSTOM_PATH_FILE: 45
rm -fr ENV_VAR CUSTOM_PATH_DIR: 17
pip install pystemmer==2.0.0: 6
python setup.py nosetests FLAG FLAG=ENV_VAR: 6
composer require squizlabs CUSTOM_PATH_DIR matrix.phpcs_version }}" FLAG FLAG FLAG: 6
composer run-tests: 6
cp . CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 28
-v "ENV_VAR: CUSTOM_PATH_DIR \: 12
pip3 install setuptools: 13
cd docs && bash build.sh: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv bazel: 6
mix deps.get 1> CUSTOM_PATH_DIR: 6
just download-data: 6
USES: OneKeyHQ/actions/dotenv-action: 7
cd ruby CUSTOM_PATH_DIR: 12
rake package: 7
pipenv requirements FLAG > requirements.txt: 10
USES: ./.github/workflows/actions/use-substrate: 8
git clone FLAG ${{ env.BASE_BRANCH }} URL FLAG=1: 8
cp -r benchmark duckdb/: 8
python scripts CUSTOM_PATH_FILE FLAG FLAG=duckdb CUSTOM_PATH_DIR FLAG=build CUSTOM_PATH_DIR FLAG=.github CUSTOM_PATH_FILE FLAG=2: 22
TORCH_CUDA_ARCH_LIST=7.0 pip install .: 9
echo "::error::Code update without version change" && exit 1: 7
USES: dolthub/upload-release-asset: 7
json=$(echo '${{ toJSON(env) }}' | jq -c): 6
echo "out=$json" >> ENV_VAR: 7
echo "ImageVersion=ENV_VARmageVersion"  >> ENV_VAR: 22
echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH: 7
python -m pip install codecov: 7
cargo test FLAG FLAG ENV_VAR: 6
echo "Pushing to tag ENV_VAR": 6
FLAG_version=${{ inputs.coordinator_tag }} \: 8
FLAG_env=AWS_ACCESS_KEY_ID \: 8
FLAG_env=AWS_SECRET_ACCESS_KEY \: 8
FLAG_env=AWS_SESSION_TOKEN \: 8
FLAG_env=AWS_DEFAULT_REGION: 7
command -v xrootd: 10
command -v xrdcp: 10
python3 FLAG FLAG: 13
python3 -m pip show xrootd: 13
python3 -c 'import XRootD; print(XRootD)': 12
python3 -c 'import pyxrootd; print(pyxrootd)': 12
python3 -c 'from XRootD import client; print(client.FileSystem("root: CUSTOM_PATH_DIR: 13
docker compose restart: 9
mvn -B -Dlogback-access-spring-boot-starter.version=${{ env.PROJECT_VERSION }} clean install: 7
python -m pip install -U pip setuptools wheel build: 7
echo EDGEDBCLI_GIT_REV=$(cat .tmp CUSTOM_PATH_FILE) >> ENV_VAR: 14
echo POSTGRES_GIT_REV=$(cat .tmp CUSTOM_PATH_FILE) >> ENV_VAR: 14
echo STOLON_GIT_REV=$(cat .tmp CUSTOM_PATH_FILE) >> ENV_VAR: 14
echo BUILD_LIB=$(python setup.py -q ci_helper FLAG build_lib) >> ENV_VAR: 14
echo BUILD_TEMP=$(python setup.py -q ci_helper FLAG build_temp) >> ENV_VAR: 15
echo ::error::Cannot retrieve build cache.: 10
cp -v build CUSTOM_PATH_DIR edb CUSTOM_PATH_DIR: 10
rsync -av . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 30
rsync -av ENV_VAR CUSTOM_PATH_FILE-info/ . CUSTOM_PATH_FILE-info/: 10
mkdir -p cmd CUSTOM_PATH_DIR: 8
touch cmd CUSTOM_PATH_FILE: 12
sudo apt-get update && sudo apt-get install -y ffmpeg libturbojpeg: 7
make pull-latest-peer: 6
cd tap: 8
pip install pydocstyle: 9
pip install .[dev,preview] langdetect transformers[torch,sentencepiece]==4.32.1 'sentence-transformers>=2.2.0' pypdf openai-whisper tika 'azure-ai-formrecognizer>=3.2.0b2': 8
GOPATH=ENV_VAR go get github.com CUSTOM_PATH_DIR: 6
USES: 123FLO321/github-docker-temp: 6
export $(cat .github CUSTOM_PATH_FILE | xargs): 13
echo "::set-output name=major_version::ENV_VAR": 6
cp instances CUSTOM_PATH_FILE artifacts CUSTOM_PATH_FILE: 8
USES: JackMcKew/pyinstaller-action-windows: 9
target=${{ steps.target.outputs.target }}: 16
version=${{ needs.create_release.outputs.version }}: 13
USES: ./.github/actions/publish_binary: 7
build-tool CUSTOM_PATH_DIR matrix.arch }}-linux-gnu-objcopy FLAG=zlib-gnu . CUSTOM_PATH_DIR: 6
gunicorn -c setting.py app:app: 9
python3 task.py &: 9
USES: ./deploy-cloudrun: 8
npm run e2e-tests: 14
USES: ./.github/actions/setup-helmit: 10
tox -e ${{ matrix.toxenv }} FLAG: 6
cp ${{github.workspace}} CUSTOM_PATH_FILE "C: CUSTOM_PATH_DIR Files CUSTOM_PATH_DIR GPU Computing Toolkit CUSTOM_PATH_DIR: 6
cp distro CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
cp . CUSTOM_PATH_DIR .: 6
USES: ./.github/workflows/composite/docker-builder: 7
sudo apt-get install -y FLAG intel-mkl-64bit-2020.0-088: 11
EXPANDED_BAZEL_CACHE_PATH="ENV_VAR CUSTOM_PATH_DIR: 9
echo "Using ENV_VAR as Bazel's cache path": 9
echo "build FLAG_cache=ENV_VAR" >> ENV_VAR CUSTOM_PATH_DIR: 9
USES: ./.github/actions/perf-check: 9
mv ${{ steps.perf-check.outputs.compare-csv }} ${{env.report-dir}}: 9
echo "test-reports-dir=ENV_VAR CUSTOM_PATH_FILE-dir}}" >> ENV_VAR: 9
echo "Current host supports ${{env.host_jobs}} parallel jobs": 6
sudo apt-get install -y redis-tools redis-server: 6
bundle install FLAG || bundle install: 16
dart scripts CUSTOM_PATH_FILE en: 12
bash setup.sh: 11
php -i: 8
export PATH=ENV_VAR:~ CUSTOM_PATH_DIR: 30
echo "ENV_VAR" | base64 -d >> checksums.txt: 6
rm -Rf tests CUSTOM_PATH_DIR: 6
tests CUSTOM_PATH_DIR cache:clear FLAG: 17
sudo apt-get install moreutils: 6
npm install FLAG FLAG  CUSTOM_PATH_DIR: 7
USES: peter-evans/close-pull: 8
sleep 1 # give server time to start: 9
kill -SIGTERM $!: 7
ls -alh: 6
python -m pip install FLAG virtualenv tox tox-gh-actions: 10
echo "RELEASE_VERSION=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 9
echo "RELEASE_VERSION=canary" >> ENV_VAR: 6
USES: ./.github/actions/xcode-select: 6
sudo chmod -R g+ws `pwd` CUSTOM_PATH_DIR: 8
sudo chmod -R 777 `pwd` CUSTOM_PATH_DIR: 7
cd website/: 9
make license: 6
cmake -B ${{ github.workspace }} CUSTOM_PATH_DIR -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}: 6
coverage run -m pytest -v: 6
sudo python3 -m pip install meson==0.55.0: 6
ninja -C build -v: 10
meson test -C build FLAG $(meson test -C build FLAG | grep -v emul): 6
kubectl FLAG coreweave rollout restart deployment CUSTOM_PATH_DIR: 6
docker run -d -p 7700:7700 getmeili CUSTOM_PATH_DIR meilisearch FLAG=masterKey FLAG: 6
git push -f -q URL secrets.github_token }} CUSTOM_PATH_DIR github.repository }} HEAD:gh-pages: 7
echo COMPOSER_CACHE="$(composer config cache-files-dir)" >> "ENV_VAR": 6
FLAG=true \: 11
FLAG=${{ steps.setup-php.outputs.php-version }}: 6
USES: icrawl/action-eslint: 9
mkdocs gh-deploy FLAG FLAG: 7
mkdir CUSTOM_PATH_FILE: 8
make -C examples CUSTOM_PATH_DIR fmt: 6
make -C examples CUSTOM_PATH_DIR all: 6
echo "=== Retrieve cluster state ===": 15
echo '' >>  ENV_VAR: 15
sudo apt-get -qqq update: 17
make libc6install: 8
version=`cat VERSION`: 8
sudo apt-get install ninja-build gcc-multilib g++-multilib: 6
sudo apt-get install curl jq: 6
USES: peter-evans/autopep8: 10
composer i FLAG: 6
git fetch FLAG=1: 9
rake build: 18
CUDA_EXT=1 pip install -v .: 9
touch Dockerfile: 9
echo '' > Dockerfile: 9
echo "FROM mcr.microsoft.com CUSTOM_PATH_DIR AS base" >> Dockerfile: 9
echo "WORKDIR CUSTOM_PATH_DIR >> Dockerfile: 9
echo "COPY . CUSTOM_PATH_DIR >> Dockerfile: 9
echo "build image": 9
echo "Login to registry": 9
echo "${{ secrets.DOCKER_API_KEY }}" | docker login -u ENV_VAR FLAG     : 9
VERSION=$(date +%s): 9
sudo apt-get update && sudo apt-get install -y \: 7
echo "Done ": 24
rm -rf Pods CUSTOM_PATH_DIR: 6
bundle exec fastlane point_dependencies_to_related_branches: 6
USES: NejcZdovc/comment-pr: 12
import platform: 7
cargo test ${{ matrix.features }}: 18
file="${{ needs.gather_facts.outputs.project_go_path }}": 6
version="${{ needs.gather_facts.outputs.version }}": 6
echo "PY=python${{ matrix.python-version }}" >> ENV_VAR: 17
echo "PANTS_PYTHON_INTERPRETER_CONSTRAINTS=['==${{ matrix.python-version }}.*']" >> ENV_VAR: 17
tests CUSTOM_PATH_FILE FLAG: 17
eval "$( CUSTOM_PATH_FILE CUSTOM_PATH_DIR shellenv)": 14
mkdocs FLAG: 6
cmake .. -DCMAKE_BUILD_TYPE=Release -DLIBRAPID_BUILD_EXAMPLES=on -DLIBRAPID_BUILD_TESTS=on -DLIBRAPID_USE_MULTIPREC=on: 6
version=$(. CUSTOM_PATH_FILE): 12
echo "Generated version number: $version": 11
cd nuget_staging: 6
ls downloaded_nugets: 7
cd nuget CUSTOM_PATH_DIR: 8
echo "StrictHostKeyChecking no" >> ~ CUSTOM_PATH_DIR: 13
USES: christianvuerings/add-labels: 13
sudo dpkg -i . CUSTOM_PATH_FILE: 35
ENV_VAR=$env:BUILD_TYPE: 7
$env:path=$env:NEW_PATH: 8
vendor CUSTOM_PATH_DIR  FLAG=github FLAG FLAG: 6
echo "list=$component_list" >> ENV_VAR: 6
IMAGE_NAME=$(jq FLAG FLAG data "ENV_VAR" -n '$data."${{ needs.init_build.outputs.current_branch }}".components."${{ matrix.build }}".login'): 8
export ITER8=$(pwd): 67
ENV_VAR8 CUSTOM_PATH_FILE: 16
kubectl apply -f ENV_VAR8 CUSTOM_PATH_FILE: 38
kubectl wait experiment ENV_VAR FLAG=condition=Completed FLAG=300s: 7
kubectl get experiment ENV_VAR -o yaml: 8
kubectl wait FLAG=condition=Ready ksvc CUSTOM_PATH_DIR FLAG=240s: 9
source ENV_VAR8 CUSTOM_PATH_FILE: 10
ENV_VAR CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR: 26
choco install sccache: 11
python -m pip install wheel mako: 6
sudo apt-get install libopencv-dev: 10
echo "::set-output name=changed_packages::$(node . CUSTOM_PATH_FILE CUSTOM_PATH_DIR changed -p | wc -l | xargs)": 8
echo "no changes detected by lerna": 7
cd "${{ github.workspace }}": 10
USES: keithweaver/aws-s3-github-action: 8
flake8 . FLAG FLAG FLAG=50 FLAG=127 FLAG: 10
pytest FLAG=alerta tests CUSTOM_PATH_FILE: 7
make package_build: 6
npm run build:clean: 6
sudo pip3 install meson ninja: 11
flutter pub add -- 'photo_manager:{"path":".."}': 6
ambuild: 7
nmake %OPTS%: 18
IF %errorlevel% NEQ 0 EXIT 1: 18
USES: ./actions/code-review-chat: 6
composer show: 9
Remove-Item artifacts CUSTOM_PATH_DIR -Recurse -Force -ErrorAction Ignore: 6
cd xdsl: 6
make pull-images &: 9
curl -sfL URL | INSTALL_K3S_VERSION=v1.18.8+k3s1 INSTALL_K3S_CHANNEL=stable INSTALL_K3S_EXEC=FLAG K3S_KUBECONFIG_MODE=644 sh - &: 9
until stat CUSTOM_PATH_FILE ; do sleep 10s ; done: 9
cat CUSTOM_PATH_FILE | sed "s CUSTOM_PATH_DIR > ~ CUSTOM_PATH_DIR: 9
echo "- name: fake_token_user" >> ~ CUSTOM_PATH_DIR: 9
echo "  user:" >> ~ CUSTOM_PATH_DIR: 9
echo "    token: xxxxxx" >> ~ CUSTOM_PATH_DIR: 9
make logs 2>&1 > CUSTOM_PATH_FILE &: 9
sudo apt-get install -y avahi-daemon cppcheck libavahi-client-dev libcups2-dev libcupsimage2-dev libgnutls28-dev libjpeg-dev libpam-dev libpng-dev libusb-1.0-0-dev zlib1g-dev: 6
USES: dyladan/component-owners: 6
npm run openvsx:publish "ENV_VAR": 7
python -m pip install -U coverage: 7
USES: tzkhan/pr-update-action: 6
USES: appleboy/lambda-action: 15
echo "filename=ENV_VAR" >> ENV_VAR: 11
USES: ./.github/workflows/get-changed-apps: 9
USES: ./.github/workflows/init-data-repo: 6
USES: yuzutech/annotations-action: 7
echo "NETWORK=ENV_VAR,,}" >> "ENV_VAR": 6
mkdir src: 6
yarn lerna run prepare FLAG: 6
echo "GIT_BRANCH=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 8
echo "GIT_HASH=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 12
echo "GIT_TAG=$(git describe FLAG FLAG=0)" >> ENV_VAR: 11
. CUSTOM_PATH_DIR build publish FLAG: 7
USES: ./.devcontainer: 6
USES: lightninglabs/gh-actions/build-push-action: 6
pip install -ve .: 6
yarn publish:ci: 6
cosign sign ENV_VAR: 9
USES: oxsecurity/megalinter: 14
yarn prerelease: 9
yamllint -v && \: 10
cat ~ CUSTOM_PATH_FILE >> ~ CUSTOM_PATH_DIR: 10
rm -f editors CUSTOM_PATH_FILE: 6
cd vs: 6
VERSION=$(git describe FLAG=4): 6
NEWEST_TAG=$(git describe FLAG=0): 6
git log "ENV_VAR..HEAD" > changelog-ENV_VAR.txt: 6
source VERSION: 6
ls nugetpkgs: 6
GIT_BRANCH=ENV_VAR:-ENV_VAR#refs CUSTOM_PATH_DIR: 10
GIT_BRANCH=ENV_VAR#refs CUSTOM_PATH_DIR: 8
USES: newrelic/fargate-runner-action: 8
tests CUSTOM_PATH_FILE ocsp: 10
USES: danielpalme/ReportGenerator-GitHub-Action: 11
echo ${{ env.BRANCH_NAME }}: 12
make checkdeps OUTPUT_FILEPATH=woodwork CUSTOM_PATH_FILE: 9
cat woodwork CUSTOM_PATH_FILE: 14
bundle exec rspec FLAG: 10
python -m pip install pipenv==${{ matrix.pipenv-version }} poetry: 6
npm install -g serverless@${{ matrix.sls-version }}: 6
npm update FLAG FLAG: 24
cargo install cargo-binutils rustfilt: 6
bundle config set without 'uart': 6
bundle install FLAG 3: 11
make -f android-release.mk android-apk V=1 -j2: 25
git tag -f Pre-release: 6
git push -f origin Pre-release: 6
USES: kohlerdominik/docker-run-action: 10
echo "$(go env GOPATH)\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append: 6
bash scripts CUSTOM_PATH_FILE FLAG "${{ github.event.inputs.version }}" FLAG: 31
EOF": 16
mkdir -p ~ CUSTOM_PATH_DIR ; cp .github CUSTOM_PATH_FILE ~ CUSTOM_PATH_DIR: 6
USES: ./.github/actions/setup-runner: 20
USES: ./.github/actions/e2e-deploy-vald: 15
mvn -B install -DskipTests: 7
echo "GOPATH=ENV_VAR" >> ENV_VAR: 15
pip3 install FLAG setuptools pip: 6
shopt -s dotglob: 10
apt-get update -y -qq: 6
echo "latest tag:": 6
bash .. CUSTOM_PATH_FILE -n milvusdb CUSTOM_PATH_DIR -t master-latest -f master- -F -L -q: 6
kubectl port-forward service CUSTOM_PATH_DIR env.RELEASE }}-milvus 19530 -n chaos-testing > CUSTOM_PATH_DIR 2>&1 &: 19
pytest -s -v testcases CUSTOM_PATH_FILE FLAG 127.0.0.1 FLAG=INFO FLAG=no: 14
sed -i "s CUSTOM_PATH_DIR =.* CUSTOM_PATH_DIR = \'${{ env.RELEASE }}\' CUSTOM_PATH_DIR constants.py: 6
timeout 14m pytest -s -v test_chaos.py FLAG 127.0.0.1 FLAG=INFO FLAG=no || echo "chaos test failed": 6
echo "result analysis": 6
cat ${{ env.RELEASE }}.log || echo "no log file": 6
kubectl get pod -n chaos-testing: 17
kubectl wait FLAG=condition=Ready pod -l app.kubernetes.io CUSTOM_PATH_DIR env.RELEASE }} -n chaos-testing FLAG=360s: 10
kubectl wait FLAG=condition=Ready pod -l release=${{ env.RELEASE }} -n chaos-testing FLAG=360s: 10
bash .. CUSTOM_PATH_FILE chaos-testing ${{ env.RELEASE }} k8s_logs CUSTOM_PATH_DIR: 10
chmod -R +x ENV_VAR CUSTOM_PATH_DIR: 7
sudo -E apt-get -qq update -y: 6
source ENV_VAR CUSTOM_PATH_FILE && Diy_menu2: 7
source ENV_VAR CUSTOM_PATH_FILE && Diy_xinxi: 7
sudo cp CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
kind load docker-image FLAG=kind quay.io CUSTOM_PATH_DIR: 31
. CUSTOM_PATH_DIR FLAG ENV_VAR: 6
BRANCH=release CUSTOM_PATH_DIR: 8
git add config CUSTOM_PATH_FILE: 7
sed -n " CUSTOM_PATH_DIR ENV_VAR:10} CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CHANGELOG.md > . CUSTOM_PATH_DIR: 7
dotnet test FLAG FLAG normal src CUSTOM_PATH_FILE1 CUSTOM_PATH_DIR: 9
sudo apt-get -y install jq: 8
choco install docfx -y: 9
pip3 install meson ninja: 10
USES: ./.github/workflows/build_linux_wheel: 8
sudo apt install python3-pip: 8
yarn format-check: 13
sed -i ' CUSTOM_PATH_DIR .* CUSTOM_PATH_DIR ${{github.workspace}} CUSTOM_PATH_FILE: 31
node common CUSTOM_PATH_FILE pack-integration-deps: 12
cd packages CUSTOM_PATH_DIR && node .. CUSTOM_PATH_FILE integration CUSTOM_PATH_DIR -v: 11
sudo apt-get install -y clang-format: 10
USES: weseek/ghaction-slack-notification: 16
cd Scripts: 11
cd Distribution: 8
ls -lha: 15
cargo build FLAG ${{ matrix.target }} FLAG zeroize: 6
bash -e -x . CUSTOM_PATH_FILE: 6
echo on: 7
echo ""                                                               >> "ENV_VAR": 8
conda install anaconda-client: 7
sudo apt-get install -y s3cmd: 6
Pop-Location: 6
cd Packages CUSTOM_PATH_DIR: 6
npm run unit: 12
FROM scratch: 12
COPY encl.bin /: 8
COPY encl.ss /: 8
ENTRYPOINT [\"dummy\"]: 8
PREFIX= CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 8
USES: stepchowfun/toast/.github/actions/toast: 7
DESTDIR= CUSTOM_PATH_DIR ninja -C build install: 8
mvn FLAG clean verify: 7
echo "VERSION_NUMBER=${{ github.sha }}" >> ENV_VAR: 7
echo "RELEASE_CHANNEL=development" >> ENV_VAR: 7
echo "VERSION_NUMBER=${{ github.ref_name }}" >> ENV_VAR: 7
echo "RELEASE_CHANNEL=stable" >> ENV_VAR: 7
echo "[DEFAULT]" > version.ini: 6
echo "version_number=${{ env.VERSION_NUMBER }}" >> version.ini: 6
echo "release_channel=${{ env.RELEASE_CHANNEL }}" >> version.ini: 6
echo "upstream=${{ github.repository }}" >> version.ini: 6
USES: jdno/setup-butler: 6
poetry run PyInstaller Clangen.spec: 6
docker exec pki pki-server create -v: 6
docker exec pki pki-server stop FLAG -v: 6
docker exec pki pki-server remove -v: 6
bundle exec rake ${{ matrix.test_targets }}: 6
USES: nirinchev/cache: 28
cd shadow: 15
echo "month=$( CUSTOM_PATH_DIR -u "+%Y%m")" >> ENV_VAR: 6
tail -n 200 shadow CUSTOM_PATH_FILE: 6
tar -cJf shadow CUSTOM_PATH_FILE, CUSTOM_PATH_DIR: 6
for f in shadow CUSTOM_PATH_FILE; do tar -cJf "$f.tar.xz" "$f CUSTOM_PATH_DIR done: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv numpy: 6
yarn test:all: 17
yarn workspace  CUSTOM_PATH_DIR npm publish FLAG public: 11
USES: Fooji/create-aws-profile-action: 12
sops -d ops CUSTOM_PATH_FILE > ops CUSTOM_PATH_FILE: 10
terraform plan -var-file=tfvars.json: 10
terraform apply -var-file=tfvars.json -auto-approve: 10
USES: ./.github/actions/conditional: 7
USES: ./.github/actions/status-check: 6
mkdir -p .cargo: 17
cargo login ${{ secrets.CRATES_TOKEN }}: 12
tar xf workspace.tar: 7
tar cf - .m2 | (cd ~ && tar xf -): 7
echo `pwd`: 7
make pack: 6
USES: MarceloPrado/has-changed-path: 12
npm run build-examples: 6
npx cdk-assets publish FLAG cdk.out CUSTOM_PATH_FILE FLAG: 9
> docs CUSTOM_PATH_FILE: 8
sudo mkdir -m 777 -p CUSTOM_PATH_DIR: 6
docker images | grep -v REPOSITORY | awk '{print $3}' | xargs docker rmi FLAG: 6
patch -p1 < ENV_VAR CUSTOM_PATH_FILE: 6
echo "::group::Download OpenGFX": 10
curl -L URL -o opengfx-all.zip: 10
echo "::group::Unpack OpenGFX": 12
unzip opengfx-all.zip: 10
rm -f opengfx-all.zip: 9
curl FLAG FLAG FLAG "URL: 8
chmod a+x kustomize_kustomize.v3.2.3_linux_amd64: 8
sudo mv kustomize_kustomize.v3.2.3_linux_amd64 CUSTOM_PATH_DIR: 8
kustomize build overlays CUSTOM_PATH_DIR: 8
cargo install FLAG URL: 8
USES: ./.github/actions/cancel-workflow-runs: 10
echo "release_tag=$(cat ${{ env.build_dir }} CUSTOM_PATH_FILE)" >> ENV_VAR: 6
echo "release_title=$(cat ${{ env.build_dir }} CUSTOM_PATH_FILE)" >> ENV_VAR: 6
${{ matrix.with_icu }}: 6
bash qbittorrent-nox-static.sh ${{ matrix.qt_with_icu }} qtbase: 6
echo "BUILD_TYPE=Release" >> ENV_VAR: 6
USES: ./.github/actions/install-node-and-deps: 11
cd typegraph CUSTOM_PATH_DIR: 6
USES: kewisch/action-web-ext: 12
USES: wip/action: 8
cd CUSTOM_PATH_DIR && tar -xvf apache-jmeter.tgz: 6
echo "jmeter.save.saveservice.output_format=xml" >> CUSTOM_PATH_FILE: 6
echo "jmeter.save.saveservice.response_data.on_error=true" >> CUSTOM_PATH_FILE: 6
wget -O " CUSTOM_PATH_FILE" URL: 12
sudo chmod 644 CUSTOM_PATH_FILE: 6
CURRENT_DATE=$(date +"%Y%m%d-%H%M%S"): 6
git config FLAG user.email "flamekat54": 6
git config FLAG user.name "TWLBot": 6
git clone FLAG 1 URL secrets.TWLBOT_TOKEN }} CUSTOM_PATH_FILE: 6
cp ${{ github.workspace }} CUSTOM_PATH_DIR .: 6
git stage .: 6
curl -o send.sh URL: 12
chmod +x send.sh: 12
. CUSTOM_PATH_FILE success ${{ secrets.WEBHOOK_URL }}: 6
. CUSTOM_PATH_FILE failure ${{ secrets.WEBHOOK_URL }}: 6
echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}: 9
dotnet test '. CUSTOM_PATH_FILE' FLAG -c Release: 10
sudo DEBIAN_FRONTEND=noninteractive apt-get install $(build CUSTOM_PATH_DIR debian _bootstrap): 8
python -m pip install build twine check-wheel-contents: 7
check-wheel-contents dist CUSTOM_PATH_FILE: 12
cargo +nightly update -Z minimal-versions: 8
echo "inner_container_image=$(cat . CUSTOM_PATH_FILE)" >> ENV_VAR: 6
mkdir test-results: 6
sudo vendor CUSTOM_PATH_DIR: 11
php bin CUSTOM_PATH_DIR: 10
python -m pip install pytest psutil: 7
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:galactic-ros-base: 6
chmod +x build.sh: 10
poetry run py.test: 7
export VK_ICD_FILENAMES="ENV_VAR CUSTOM_PATH_FILE": 6
sudo apt-get install -y gcc-multilib g++-multilib: 7
pip install FLAG virtualenv: 6
pip install FLAG pipenv: 9
USES: ./.github/actions/label-when-approved-action: 7
rm -rf build/: 13
bin CUSTOM_PATH_DIR assets:precompile: 7
rm -f . CUSTOM_PATH_DIR: 6
pip install pip FLAG && pip install wheel: 10
cp . CUSTOM_PATH_FILE ~ CUSTOM_PATH_DIR: 11
rm requirements.txt: 6
USES: go-feature-flag/gofeatureflag-lint-action: 13
npm run site:build: 8
gcloud auth configure-docker -q: 8
docfx docs CUSTOM_PATH_FILE: 6
python -m pip install -r woodwork CUSTOM_PATH_FILE: 18
sudo apt-get install -y libseccomp-dev: 6
. CUSTOM_PATH_DIR maintenance:install FLAG FLAG=oci FLAG=XE FLAG=127.0.0.1 FLAG=ENV_VAR FLAG=autotest FLAG=owncloud FLAG admin FLAG admin: 8
if ${{ needs.phpunit-oci.result != 'success' }}; then exit 1; fi: 6
cmake FLAG build FLAG tests: 8
cmake -H. -Bout CUSTOM_PATH_DIR ENV_VAR: 8
ninja -Cout CUSTOM_PATH_DIR: 16
xvfb-run -a . CUSTOM_PATH_DIR matrix.config }} CUSTOM_PATH_DIR -hidden -noEventLoop: 6
. CUSTOM_PATH_DIR matrix.config }} CUSTOM_PATH_DIR: 8
. CUSTOM_PATH_FILE ${{inputs.version}}: 6
docker run FLAG FLAG FLAG $(pwd): CUSTOM_PATH_DIR ghcr.io CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 8
make -C docs test: 6
cd SampleProjects CUSTOM_PATH_DIR: 7
bundle exec arduino_ci.rb: 7
cd hi-ml-azure: 9
make pip_local: 11
cd hi-ml: 7
cd ${{ matrix.folder }}: 8
USES: ./.github/actions/download_package_artifacts: 12
USES: osy/actions-cache: 6
echo ENV_VAR | base64 FLAG -o ~ CUSTOM_PATH_DIR Profiles CUSTOM_PATH_FILE: 6
fonttools ttLib.woff2 compress dist CUSTOM_PATH_FILE: 13
yarn lerna run FLAG  CUSTOM_PATH_DIR build: 11
rm -r *: 6
cmake FLAG . FLAG ${{ env.BUILD_TYPE }} -j 8: 7
cmake FLAG ${{ env.BUILD_DIR }}: 11
cd ${{ env.INSTALL_DIR }}: 9
cmake FLAG ${{ env.BUILD_DIR }} FLAG ${{ env.INSTALL_PORTABLE_DIR }} FLAG portable: 8
. . CUSTOM_PATH_FILE FLAG: 7
cp .github CUSTOM_PATH_FILE .env: 7
make html SPHINXOPTS="-W FLAG": 8
sudo apt install -y libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers: 7
pip install ENV_VAR CUSTOM_PATH_FILE: 6
ci-scripts CUSTOM_PATH_FILE: 14
git tag -f nightly: 6
USES: samin/mysql-action: 6
php FLAG mongodb: 10
make cs: 7
sudo sed -i "s CUSTOM_PATH_DIR  CUSTOM_PATH_FILE: 8
sudo systemctl start nginx: 10
sudo ls -l CUSTOM_PATH_DIR: 21
USES: ./.github/actions/sanity-check: 6
sudo cmake -DCMAKE_BUILD_TYPE=Release ..: 8
coverage run FLAG FLAG mmocr -m pytest tests/: 9
python -m pip install librosa soundfile: 6
last_dist=$(ls -t dist CUSTOM_PATH_FILE | head -n 1): 9
dotnet clean -c Release && dotnet nuget locals all FLAG: 9
set -o pipefail; EXTRA_DOCKER_BUILD_ARGS="FLAG USE_MAKEFLAGS=\"-k V=0 SAGE_NUM_THREADS=3\"" tox -e ENV_VAR -- ENV_VAR 2>&1 | sed " CUSTOM_PATH_DIR notice: CUSTOM_PATH_DIR file=artifacts CUSTOM_PATH_FILE::|; CUSTOM_PATH_DIR warning: CUSTOM_PATH_DIR file=artifacts CUSTOM_PATH_FILE::|; CUSTOM_PATH_DIR error: CUSTOM_PATH_DIR file=artifacts CUSTOM_PATH_FILE::|;": 7
MAKE="make -j12" tox -e ENV_VAR -- SAGE_NUM_THREADS=4 ENV_VAR: 8
USES: stefanprodan/kube-tools: 6
echo "Y\n" | . CUSTOM_PATH_FILE: 8
python -m pip install transformers: 6
.github CUSTOM_PATH_FILE 14: 8
tox -e py38: 6
dart pub global activate coverage 1.2.0: 9
if . CUSTOM_PATH_FILE '^test|^src CUSTOM_PATH_DIR ; then echo GO=1 >> ENV_VAR ; fi: 6
if . CUSTOM_PATH_FILE "^src|examples CUSTOM_PATH_DIR ; then echo GO=1 >> ENV_VAR ; fi: 8
sudo apt -y update; sudo apt -y install gcc-arm-none-eabi: 8
make -C examples CUSTOM_PATH_DIR test VCON_API_KEY=${{secrets.VCON_API_KEY}}: 15
make -C examples CUSTOM_PATH_DIR clean: 6
npm i && npm run build: 9
make bindata: 6
find . -type d -not -perm CUSTOM_PATH_DIR -exec chmod u+w '{}' \;: 10
echo ::set-env name=REPOSITORY_NAME::$(echo "ENV_VAR" | awk -F / '{print $2}'): 6
export CC=gcc-9: 12
export TARGET=all: 12
cd deps: 9
cd deps CUSTOM_PATH_DIR: 6
cd pykanidm: 7
echo 0 | sudo tee CUSTOM_PATH_DIR: 9
pip install -r build_requirements.txt: 12
pip install pytest pytest-xdist hypothesis typing_extensions: 8
npm test -- FLAG=false FLAG=ChromeHeadless: 6
curl URL | gpg FLAG FLAG: 6
gpg FLAG codecov.SHA256SUM.sig codecov.SHA256SUM: 9
nix flake check FLAG FLAG: 7
test_config_file= CUSTOM_PATH_FILE: 6
git add index.yaml: 7
composer run phpcs: 7
ctest -C Debug  -LE explicitonly  FLAG: 6
git diff origin CUSTOM_PATH_DIR github.base_ref }}.. -- website CUSTOM_PATH_FILE: 12
OUTPUT=$(git diff origin CUSTOM_PATH_DIR github.base_ref }}.. -- website CUSTOM_PATH_FILE): 10
export CXX=g++: 63
version="ENV_VAR##* CUSTOM_PATH_DIR: 20
dbt debug: 6
USES: toptal/davinci-github-actions/yarn-install: 9
cargo fmt: 9
libgtk-3-dev \: 10
sudo truncate -s 0 $(docker inspect FLAG='{{.LogPath}}' acme2certifier_acme-srv_1): 11
ninja -C _build: 10
flake8 . FLAG FLAG=E9,F63,F7 FLAG FLAG: 6
mkdir -p electronics CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_FILE electronics CUSTOM_PATH_FILE: 25
cp electronics CUSTOM_PATH_FILE electronics CUSTOM_PATH_FILE: 52
. CUSTOM_PATH_FILE electronics CUSTOM_PATH_FILE_pcb: 31
cp -r electronics CUSTOM_PATH_DIR electronics CUSTOM_PATH_DIR: 17
aws s3 sync electronics CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR FLAG FLAG public-read FLAG max-age=0,no-cache: 7
python -m poetry install FLAG: 9
echo '${{ steps.changed-files.outputs.all_changed_files }}': 7
echo "KUBECONFIG=FLAG= CUSTOM_PATH_FILE" >> ENV_VAR: 8
kubectl "${{ env.KUBECONFIG }}" taint nodes FLAG node.cloudprovider.kubernetes.io CUSTOM_PATH_DIR: 8
kubectl "${{ env.KUBECONFIG }}" get nodes: 8
kubectl "${{ env.KUBECONFIG }}" get pods -A: 15
kubectl "${{ env.KUBECONFIG }}" apply -f . CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_FILE "${{ env.KUBECONFIG }}": 24
USES: actions/npm: 6
docker build . FLAG Dockerfile FLAG wiseoldman CUSTOM_PATH_DIR: 7
node js CUSTOM_PATH_FILE: 6
cd Python: 6
brew install swiftformat: 6
cd ${{ env.working-directory }} CUSTOM_PATH_DIR: 9
cp src CUSTOM_PATH_FILE target CUSTOM_PATH_DIR &&: 6
cp src CUSTOM_PATH_DIR target CUSTOM_PATH_DIR &&: 8
cp CONTRIBUTING.md target CUSTOM_PATH_DIR &&: 6
sudo apt-get install -y nsis p7zip-full: 8
cp yarn.lock packages CUSTOM_PATH_DIR: 15
yarn FLAG FLAG FLAG 1000000: 9
helm lint . CUSTOM_PATH_DIR: 10
php -v | head -n 1 | awk '{ print $2 }' > .php-version: 6
rm py-polars CUSTOM_PATH_FILE: 21
cp README.md py-polars CUSTOM_PATH_FILE: 21
USES: FuelLabs/github-actions/setups/node: 8
USES: artiomtr/jest-coverage-report-action: 6
cd external: 6
bash install-and-set-up-conda.sh: 10
bash configure-conda.sh: 10
python -m pip install -Ue "src[dev]": 10
samples CUSTOM_PATH_FILE: 11
flutter create boinc: 6
cd boinc/: 7
echo "LD_LIBRARY_PATH=ENV_VAR:$(pwd) CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "version=ENV_VAR#v}" >> ENV_VAR: 8
echo "Git ref: $(git rev-parse HEAD)": 10
npm run build:cloud: 10
sudo apt-get install graphviz graphviz-dev: 15
dotnet test FLAG FLAG normal FLAG trx Source CUSTOM_PATH_FILE: 7
echo "current-context:" $(kubectl config current-context): 16
#Never cache local artifacts: 10
echo ">>> mvn ENV_VAR ENV_VAR -B": 15
mvn ENV_VAR ENV_VAR -B: 15
echo "date=$( CUSTOM_PATH_DIR -u "+%Y-%m")" >> ENV_VAR: 7
USES: jamesgeorge007/github-activity-readme: 7
cd nature: 6
helm install -n kube-system atomix-sidecar-controller . CUSTOM_PATH_DIR FLAG image.pullPolicy=Never FLAG: 8
make -j2 check: 6
-Dsonar.host.url=URL \: 11
yarn playwright install: 7
make PREFIX= CUSTOM_PATH_DIR LIBDIR= CUSTOM_PATH_DIR DESTDIR= CUSTOM_PATH_DIR EFIDIR=test ENABLE_HTTPBOOT=true ENABLE_SHIM_HASH=true install: 7
mv Kiwi CUSTOM_PATH_FILE model CUSTOM_PATH_DIR: 20
export PATH=${{github.workspace}} CUSTOM_PATH_DIR: 6
qmake LibreVNA-GUI.pro: 6
cp build CUSTOM_PATH_FILE .. CUSTOM_PATH_DIR: 7
IMAGE_ID=ghcr.io CUSTOM_PATH_DIR github.repository_owner }} CUSTOM_PATH_DIR steps.vars.outputs.IMAGE_NAME }}: 20
make install requirements: 21
ionic build: 7
sudo apt-get install openssl: 8
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG ${{matrix.mode}}: 20
npm run build:web: 9
echo "Checksum is: ": 6
docker pull ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} || CUSTOM_PATH_DIR build -t ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }} -f build CUSTOM_PATH_DIR github.job }} .: 12
docker push ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}: 12
 CUSTOM_PATH_DIR run -v ${{ github.workspace }}: CUSTOM_PATH_DIR ${{ env.cr_image }}-${{ github.job }}:${{ env.cr_image_version }}: 10
python -m pip uninstall -y gssapi requests-gssapi: 6
echo "${{ secrets.NAGSTAMON_REPO_KEY_WEB }}" >  ~ CUSTOM_PATH_DIR: 6
chmod -R go-rwx ~ CUSTOM_PATH_DIR: 6
git clone git:HenriWahl CUSTOM_PATH_FILE: 6
git config FLAG user.email "repo" && git config FLAG user.name "Nagstamon Repository": 6
git config user.email github-actions[bot]: 9
jf rt build-publish: 6
echo ::group::update docs CUSTOM_PATH_DIR: 7
echo docs CUSTOM_PATH_DIR >> paths.txt: 11
mv -v ENV_VAR CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 7
mv . CUSTOM_PATH_DIR .. CUSTOM_PATH_DIR: 6
mkdir vendor: 6
USES: elastic/apm-pipeline-library/.github/actions/snapshoty-simple: 8
summary="${summary CUSTOM_PATH_DIR: 9
kubectl get events -A: 9
dotnet publish -c Release -o '. CUSTOM_PATH_DIR env.API_PACKAGE_PATH }}': 11
sleep 25: 6
cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}: 7
apt-get update && apt-get install -y rsync: 10
doxygen FLAG: 13
. CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR: 19
..: 8
USES: ./.github/actions/setup-poetry-env: 9
rustup toolchain install $(cat rust-toolchain) FLAG minimal: 7
swift CUSTOM_PATH_FILE FLAG: 8
cargo install cargo-deny: 15
cargo deny check licenses: 8
USES: ./.github/actions/upload-blob-report: 34
mkdir build;: 8
cd build;: 8
gsutil -h "Content-Type:application CUSTOM_PATH_DIR -m cp dist CUSTOM_PATH_FILE ${{ env.PACKAGE_BUCKET }}/: 10
rm app CUSTOM_PATH_FILE-integrity: 6
yarn run docs: 6
npm run bootstrap-pkg FLAG=streamr-client: 9
USES: inlife/actiord-action: 9
php vendor CUSTOM_PATH_DIR FLAG: 8
echo "::set-output name=repo_name::${{ fromJson(steps.request.outputs.data).head.repo.full_name }}": 6
echo "::set-output name=repo_clone_url::${{ fromJson(steps.request.outputs.data).head.repo.clone_url }}": 6
echo "::set-output name=repo_ssh_url::${{ fromJson(steps.request.outputs.data).head.repo.ssh_url }}": 6
tests CUSTOM_PATH_FILE test: 10
USES: tinact/docker.image-retag: 18
pnpm config set registry URL: 6
npx keycloakify: 6
echo "Files changed: ENV_VAR": 9
echo "CI test files changed: ENV_VAR": 9
echo "Python code changed: ENV_VAR": 9
echo "Requirement changes: ENV_VAR": 9
echo "Documentation changes: ENV_VAR": 9
cd . CUSTOM_PATH_DIR || exit 1: 7
export labelName=${{ github.event.label.name }}: 8
cd frontend CUSTOM_PATH_DIR: 10
sed -i 's CUSTOM_PATH_DIR = \[ CUSTOM_PATH_DIR = \[\n    "-Dwarnings", CUSTOM_PATH_DIR .cargo CUSTOM_PATH_FILE: 6
"URL: 34
npm run package:browser: 7
USES: Homebrew/actions/dismiss-approvals: 6
yq -i '.version += strenv(GITHUB_RUN_NUMBER)' pubspec.yaml: 8
echo '${{ secrets.DOTENV_NIGHTLY }}' > .env: 8
USES: alandefreitas/cpp-actions/cmake-workflow: 6
sudo cp -r -L CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 8
sudo chown -R runner . CUSTOM_PATH_DIR: 7
USES: finnp/create-file-action: 11
vendor CUSTOM_PATH_DIR detect FLAG: 6
${{ steps.check.outputs.isSuccess }}: 6
echo "TIMEOUT=ENV_VAR": 6
echo "LOW_TIMEOUT=ENV_VAR": 6
echo "DRIVER=ENV_VAR": 6
echo "REDIS_BRANCH=ENV_VAR": 6
USES: crypto-org-chain/actions-pull-request-add-comment: 7
go test -v -short . CUSTOM_PATH_DIR: 8
cmake FLAG build FLAG Release FLAG 2: 6
pip3 install pygithub: 6
sudo add-apt-repository ppa:git-core CUSTOM_PATH_DIR -y && sudo apt update -y && sudo apt install -y FLAG git: 6
sudo apt-get install openssl libssl-dev: 9
ctest -C ${{matrix.mode}} -j 1 -V: 15
sudo apt-get install libprotobuf-dev protobuf-compiler libprotoc-dev: 6
cd focalboard CUSTOM_PATH_DIR npm ci FLAG: 9
python FLAG && cmake FLAG: 6
make -C vendor CUSTOM_PATH_FILE}} info CUSTOM_PATH_DIR: 10
semvar="${version:1}": 10
git config FLAG user.email "polkadot-wiki-deploy": 6
git config FLAG user.name "Polkadot Wiki CI": 6
echo "machine github.com login w3fdeploy password ${{ secrets.ACCESS_KEY }}" > ~ CUSTOM_PATH_DIR: 6
USES: alessandrofama/action-release: 8
bash scripts CUSTOM_PATH_FILE FLAG ${{ github.event.inputs.version }} FLAG: 10
USES: fwal/setup-swift: 14
sh tools CUSTOM_PATH_FILE: 10
kubectl apply -f ENV_VAR CUSTOM_PATH_FILE -n playground: 8
python -m pytest -v: 14
sudo apt-get update -qqy: 8
pip3 install flake8: 6
cmake FLAG . FLAG test: 7
". CUSTOM_PATH_FILE" \: 8
docker compose logs storefront: 7
docker compose logs php-fpm: 7
Compress-Archive -Path .publish CUSTOM_PATH_DIR -DestinationPath .publish CUSTOM_PATH_FILE: 7
tar xf dist CUSTOM_PATH_FILE FLAG=1: 10
npm run coverage:report: 9
nuget sources add -name LocalFeed -source D:\a\Kuriimu2\Kuriimu2\nuget -verbosity detailed: 7
dotnet pack . CUSTOM_PATH_FILE FLAG Release FLAG normal: 30
dotnet build . CUSTOM_PATH_FILE FLAG . CUSTOM_PATH_DIR FLAG Release: 164
openssl dgst -sha512 -sign privatekey.pem -out . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 11
mv -Force . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 17
cd ${{ matrix.project }} CUSTOM_PATH_DIR: 7
pip install docutils: 6
#echo ::set-output name=RELEASE_VERSION::$(echo ENV_VAR:10}): 9
echo ::set-output name=RELEASE_VERSION::$(echo ENV_VAR:19}): 6
echo ::set-output name=IMAGE_NAME::knifehub: 6
FLAG src CUSTOM_PATH_FILE-full \: 6
VERSION=${{ steps.vars.outputs.RELEASE_VERSION }}: 8
USES: ./.github/common-actions/install: 6
pip install meson==${{ env.MESON_VERSION }}: 7
USES: informalsystems/gosec: 6
composer update ${{ env.COMPOSER_FLAGS }}: 6
mkdir -p pkg CUSTOM_PATH_DIR: 30
cp -r bpf CUSTOM_PATH_DIR pkg CUSTOM_PATH_DIR: 6
USES: whywaita/setup-lxd: 6
CURL_OPTS=(FLAG 20 FLAG 5 FLAG 3 FLAG): 6
curl ENV_VAR[@]} URL: 12
export TG_DEBUG_REF=1: 6
cp -rvf . CUSTOM_PATH_DIR  . CUSTOM_PATH_DIR: 10
cp -rvf . CUSTOM_PATH_DIR      . CUSTOM_PATH_DIR: 10
python -m pip install FLAG FLAG pip setuptools wheel: 7
export ONNX_ML=1: 6
cmake FLAG build FLAG build CUSTOM_PATH_DIR: 13
cd Il2cppHook: 6
chmod +x kaiteki.AppDir CUSTOM_PATH_DIR: 6
wget URL -O kaiteki.AppDir CUSTOM_PATH_FILE: 6
wget URL -O kaiteki.AppDir CUSTOM_PATH_DIR: 6
make build-windows: 6
pkgs FLAG: 7
USES: Joshua-Ashton/arch-mingw-github-action: 11
cp -r 7zfile/ TWiLightMenu/: 11
rm -rf TWiLightMenu CUSTOM_PATH_DIR -\ CFW\ users: 12
rm -rf TWiLightMenu CUSTOM_PATH_DIR -\ SD\ card\ users: 6
rm -rf TWiLightMenu CUSTOM_PATH_DIR users: 6
rm -rf TWiLightMenu: 9
mkdir -p 7zfile CUSTOM_PATH_DIR: 14
mv nds-bootstrap CUSTOM_PATH_FILE 7zfile CUSTOM_PATH_DIR: 10
cd TWiLightMenu: 6
rm -rf DSi\ -\ CFW\ users: 6
rm -rf DSi\&3DS\ -\ SD\ card\ users: 6
rm -rf 3DS\ -\ CFW\ users: 6
rm -rf Flashcard\ users: 6
cd packages CUSTOM_PATH_DIR && npm publish: 8
dotnet publish -c Release -o ${{env.DOTNET_ROOT}} CUSTOM_PATH_DIR: 8
set BOOST_ROOT=%CD%\boost: 7
set PATH=%BOOST_ROOT%;%PATH%: 7
echo "FLUTTER_VERSION=ENV_VAR" >> ENV_VAR: 17
git fetch origin develop: 6
USES: Label305/AutoRebase: 6
cp . CUSTOM_PATH_FILE dist CUSTOM_PATH_FILE: 6
python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)": 8
python -c "import platform; print(platform.machine()); print(platform.release())": 8
python -m pip install FLAG pip poetry tox: 6
gcloud auth configure-docker us-west1-docker.pkg.dev FLAG: 6
docker logs -f looker-sdk-codegen-ci FLAG=30s &: 6
echo "Free space:": 20
USES: ./.github/actions/checkout-and-setup: 9
USES: terraformtesting/acceptance-tests: 23
lein -v: 7
make publish-github: 6
export VERSION=$(git name-rev FLAG FLAG $(git rev-parse HEAD)): 6
ls -lh CUSTOM_PATH_DIR: 11
cp CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
USES: ./.github/actions/submit-job: 26
USES: ./.github/actions/setup-env-vars: 8
composer config FLAG FLAG: 7
composer update FLAG FLAG;: 6
composer show;: 10
echo -e "" >> src CUSTOM_PATH_FILE: 6
cp test-db CUSTOM_PATH_FILE3 CUSTOM_PATH_FILE3: 7
chmod +rw CUSTOM_PATH_FILE3: 7
invoke migrate: 12
sudo echo "127.0.0.1 bs-local.com" | sudo tee -a CUSTOM_PATH_DIR: 8
npm run development & echo "starting integration app": 8
git status | cat: 7
git diff -w | cat: 6
git diff-index -w FLAG HEAD --: 7
USES: canonical/has-signed-canonical-cla: 13
VERSION=$(git describe FLAG FLAG=8 FLAG): 7
mkdir -p External CUSTOM_PATH_DIR: 8
git fetch FLAG 1 origin 0c400f67fcf305869c5fb113dd296eca266c9725: 8
ctest FLAG &&: 6
pushd toolkit: 13
sudo apt-get install -y ghostscript: 6
cmake -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}" -DBUILD_SHARED_LIBS=${{ matrix.shared }} -DBUILD_EXAMPLES=OFF -B "${{github.workspace}} CUSTOM_PATH_DIR: 9
bundle exec rake compile -- --${{matrix.sys}}-system-libraries: 12
. CUSTOM_PATH_DIR gems --${{matrix.sys}}-system-libraries: 7
vendor CUSTOM_PATH_DIR ${{ matrix.phpunit-flags }}: 12
php -r 'file_put_contents("composer-require-checker.phar", file_get_contents("URL: 7
php composer-require-checker.phar check composer.json FLAG ENV_VAR CUSTOM_PATH_FILE: 7
flutter build apk FLAG android-arm64: 10
echo 'Running in MSYS2!': 8
echo "Alias srs-cloud to srs-terraform": 6
docker tag ossrs CUSTOM_PATH_DIR registry.cn-hangzhou.aliyuncs.com CUSTOM_PATH_DIR: 12
echo "major_version=ENV_VAR" >> ENV_VAR: 9
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG lz4: 7
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG zlib: 6
python3 build CUSTOM_PATH_FILE FLAG fetch FLAG rust-shed: 7
USES: ./actions/version-tag: 12
cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}" -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo: 9
export GOARCH=amd64: 7
go build -gcflags='all=-N -l' -o bin CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 6
echo "GIT_REF=$(git symbolic-ref -q FLAG HEAD || git describe FLAG FLAG)" >> ENV_VAR: 7
curl -L URL | tar -xz -C CUSTOM_PATH_DIR: 10
VERSION=$(echo ENV_VAR|cut -c 2-): 6
git config user.name 'QMK Bot': 6
git config user.email 'hello': 7
echo "A" | softwareupdate FLAG || true: 10
brew install go lz4 automake autoconf libtool: 16
ninja -C builddir: 13
task setup: 7
latestTag=$(git describe FLAG `git rev-list FLAG FLAG=1`): 7
git checkout $latestTag: 8
cd cicd CUSTOM_PATH_DIR || true: 6
USES: ./.github/actions/manager-image: 9
USES: ./.github/actions/test-release: 10
rm -f CUSTOM_PATH_FILE CUSTOM_PATH_DIR matrix.name }} CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_DIR -testEidos: 6
pip install -U hatch: 8
git update-index FLAG VERSION: 9
powershell: 9
. CUSTOM_PATH_DIR shutdown: 10
cd headless: 8
cd fancy: 6
docker build -t ENV_VAR CUSTOM_PATH_DIR -f api CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 9
docker run FLAG -v ${{ github.workspace }}: CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR \: 9
source .env CUSTOM_PATH_DIR && \: 6
deactivate': 6
export wheel_file="${wheel_files[0]}": 8
echo Installing ${wheel_file}...: 7
echo ${{ steps.semantic.outputs.new_release_version }}: 10
echo ${{ steps.semantic.outputs.new_release_major_version }}: 10
echo ${{ steps.semantic.outputs.new_release_minor_version }}: 10
echo ${{ steps.semantic.outputs.new_release_patch_version }}: 10
pyright: 6
ARCH=$(uname -m): 7
docker image tag tracee:latest aquasec CUSTOM_PATH_DIR: 11
docker image push aquasec CUSTOM_PATH_DIR: 11
echo "BRANCH_NAME=$(echo ENV_VAR)" >> ENV_VAR: 8
pip install ccm: 7
echo "::set-output name=RELEASE_VERSION::ENV_VAR": 6
USES: actions/docker/cli: 10
find frei0r-bin CUSTOM_PATH_DIR    -type f -name '*.so' -exec cp {} $dst CUSTOM_PATH_DIR    \;: 6
pnpm install -r: 9
echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})": 12
echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')": 13
echo "CCACHE_COMPILER_CHECK=${{ env.ccache_compilercheck }}" >> ENV_VAR: 10
echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> ENV_VAR: 11
echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> ENV_VAR: 11
echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> ENV_VAR: 11
echo "CCACHE_DIR=${{ env.ccache_dir }}" >> ENV_VAR: 11
echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> ENV_VAR: 11
ccache -s # Print current cache stats: 22
ccache -z # Zero cache entry: 11
Expand-Archive -Force mkl.zip ${{ github.workspace }}\mkl: 6
curl -o CUSTOM_PATH_FILE -L URL: 10
python pwb.py version: 9
curl URL FLAG get-pip.py: 7
make cppcheck: 6
arm-none-eabi-gcc -v: 9
cmake FLAG . CUSTOM_PATH_DIR FLAG clean: 7
. CUSTOM_PATH_DIR testDebugUnitTest FLAG: 8
echo "RESULT=$(node . CUSTOM_PATH_FILE)" >> "ENV_VAR": 7
echo "${{steps.skip-ci.outputs.RESULT}}": 7
export GRADLE_ENTERPRISE_CACHE_USERNAME="ENV_VAR": 17
export GRADLE_ENTERPRISE_CACHE_PASSWORD="ENV_VAR": 17
export GRADLE_ENTERPRISE_ACCESS_KEY="ENV_VAR": 17
rm -f .github CUSTOM_PATH_FILE: 7
git restore FLAG master -- .github CUSTOM_PATH_FILE: 7
git add -A && git commit -m "COMMIT_MSG": 7
USES: dcarbone/install-jq-action: 7
cd armadillo-code: 7
sudo cmake .: 7
cd carma: 8
sudo cmake -DCARMA_INSTALL_LIB=ON ..: 6
mkdir -p data: 10
curl -XGET URL > data CUSTOM_PATH_FILE: 43
git clone -b ENV_VAR URL: 8
cd BanditPAM: 9
npm install -g grunt-cli: 13
gpg FLAG FLAG FLAG FLAG FLAG="ENV_VAR" \: 6
python -m tox -e coverage FLAG false: 6
echo "SKIP_TESTS_OPT=-DskipTests" >> ENV_VAR: 9
. CUSTOM_PATH_DIR clean verify -Pnative -Dmrm=false -B -ntp -e ENV_VAR: 6
mkdir out CUSTOM_PATH_DIR: 10
git clone FLAG 1 URL ENV_VAR CUSTOM_PATH_DIR: 35
cat ViSP-third-party.txt: 12
ctest -j$(nproc) FLAG: 7
dotnet cake FLAG=Build: 7
USES: ORCID/git-checkout-ref-action: 7
USES: ORCID/version-bump-action: 7
sed -i "s CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 9
cmake . ${{ matrix.additional_arguments }}: 13
make install-build-deps: 7
sleep 600: 11
sh -x scripts CUSTOM_PATH_FILE: 9
src CUSTOM_PATH_DIR FLAG: 7
cd clients CUSTOM_PATH_DIR: 16
npm version: 6
isort . FLAG black FLAG: 12
buildozer FLAG: 8
gem install bundler rake: 6
tag="${{ env.COS_VERSION }}": 8
export P_VERSION="${tag CUSTOM_PATH_DIR: 10
tag="latest": 8
P_VERSION="${tag CUSTOM_PATH_DIR: 6
sfdx force:data:tree:import FLAG . CUSTOM_PATH_FILE: 6
dotnet build exercises CUSTOM_PATH_DIR FLAG Release: 8
make local: 9
ln -s CUSTOM_PATH_DIR .: 9
Copy-Item . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 13
bundle exec hatchet ci:setup: 6
git checkout ${{ github.event.workflow_run.head_branch }}: 6
ENV_VAR . CUSTOM_PATH_DIR: 9
export PYTHONPATH=ENV_VAR:ENV_VAR CUSTOM_PATH_DIR: 6
cargo test FLAG FLAG alloc: 9
echo ::set-output name=tag::ENV_VAR##* CUSTOM_PATH_DIR: 6
pip install FLAG wheel pip setuptools twine: 6
composer require FLAG nextcloud CUSTOM_PATH_DIR: 6
USES: docker://ghcr.io/ponylang/release-bot-action:0.6.3: 11
USES: dopplerhq/cli-action: 13
USES: ./.github/actions/install-nix: 21
pip install torch torchvision: 14
coverage run -m FLAG ". CUSTOM_PATH_FILE" unittest tests CUSTOM_PATH_FILE -v: 11
coverage report -i FLAG FLAG ENV_VARlD: 11
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv cmake:apt: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv deepstream: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv gstreamer: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv huggingface_hub: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv jupyterlab: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv l4t-ml: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv l4t-tensorflow:tf1: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv nemo: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv numba: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv opencv: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv opencv_builder: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv protobuf:cpp: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv pycuda: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv realsense: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:foxy-desktop: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:foxy-ros-base: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:foxy-ros-core: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:galactic-desktop: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:galactic-ros-core: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:humble-desktop: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:iron-ros-base: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:iron-ros-core: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv ros:noetic-ros-core: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv rust: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv tensorflow2: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv torch2trt: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv torchvision: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv transformers: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv tritonserver: 6
. CUSTOM_PATH_FILE FLAG=runner/ FLAG=dustynv zed: 6
pip install cpplint: 12
pytest -v .: 6
cp build CUSTOM_PATH_DIR artifacts/: 32
docker build -f ${{ github.workspace }} CUSTOM_PATH_DIR env.DOCKER_FILE_NAME }}.dockerfile -t ${{ env.REPO_NAME }}:${{ env.REPO_TAG }} .: 7
USES: baetyl/run-on-arch-action: 12
echo ::set-output name=path::$(pwd) CUSTOM_PATH_DIR: 10
gotip download: 7
echo "GOROOT=ENV_VAR CUSTOM_PATH_DIR >> "ENV_VAR": 6
echo "GOPATH=ENV_VAR CUSTOM_PATH_DIR >> "ENV_VAR": 6
dotnet build -c Release -f net6.0: 6
version=${tag#v}: 7
USES: ./.github/actions/npm: 6
pnpm graphql:generate: 6
echo timestamp=`date +"%Y-%m-%d-%H;%M;%S"` >> ENV_VAR: 7
minikube tunnel &> CUSTOM_PATH_DIR &: 10
find . -mindepth 1 -delete: 10
pip install tensorflow_model_optimization: 10
wget \: 7
echo "arch=$(uname -m)" >> ENV_VAR: 7
bin CUSTOM_PATH_FILE FLAG: 14
cat cover.out.tmp | grep -v "proto" | grep -v "main"  > cover.out: 10
go tool cover -html=cover.out -o cover.html: 12
go test -v -coverpkg=. CUSTOM_PATH_DIR -coverprofile coverage CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 6
yarn publish FLAG: 6
pipx install "poetry==1.6.1": 9
docker load FLAG . CUSTOM_PATH_FILE: 20
venv\Scripts\activate: 9
mim install 'mmcv >= 2.0.0rc4': 11
pip3 install Cheetah3: 8
pip3 install six: 9
python -m compileall -l . -r 10 -q: 7
-H "Authorization: Bearer ${{secrets.GHA_ACCESS_TOKEN}}" \: 6
-d '{"ref": "dev"}': 6
yarn test:types: 6
pytest -s pymeshlab: 7
curl -L -o CUSTOM_PATH_DIR URL: 7
ln -s CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 7
poetry run pip install -r requirements.txt: 7
FLAG src CUSTOM_PATH_FILE CUSTOM_PATH_DIR \: 18
FLAG ENV_VAR:ENV_VAR \: 11
pnpm -r i: 6
Set-ExecutionPolicy RemoteSigned -scope CurrentUser: 6
yarn eslint:ci: 6
yarn pretest: 7
. CUSTOM_PATH_DIR env.test-case }}: 8
echo "name=$name" >> ENV_VAR: 8
echo "path=artifacts CUSTOM_PATH_DIR >> ENV_VAR: 6
USES: actboy168/setup-luamake: 16
echo ENV_VAR | base64 -di > app CUSTOM_PATH_FILE: 6
if (-not $?) { throw "dotnet help returned exit code: ENV_VAR" }: 6
cmake FLAG ${{env.BUILD_DIR}} FLAG ${{env.BUILD_TYPE}}: 8
echo "GIT_BRANCH=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 8
dart analyze FLAG FLAG: 12
flutter test -r expanded: 6
. CUSTOM_PATH_DIR > "ENV_VAR": 6
pip install Pillow==6.2.2: 10
mkdir -p appdir CUSTOM_PATH_DIR: 8
str="$(jq '.head_commit.message' ENV_VAR)"    # get the head_commit message: 7
echo ::set-output name=title::${str%%\\n*} | tr -d '"': 7
USES: docker://node:lts-slim: 6
cat > payload.json << 'EOF': 7
${{ toJson(github.event) }}: 9
python3 setup.py install FLAG: 6
sudo ldconfig CUSTOM_PATH_DIR: 7
sed -i -e "s,placeholder_rudder_key,${{ secrets.RUDDER_DEV_KEY }},g" ${{ github.workspace }} CUSTOM_PATH_FILE: 15
bundle binstubs FLAG: 7
dotnet restore "src CUSTOM_PATH_DIR: 7
dotnet pack "src CUSTOM_PATH_DIR Controls CUSTOM_PATH_FILE" FLAG Release: 15
threads=`nproc`: 7
cmake ENV_VAR -DCMAKE_BUILD_TYPE=${{matrix.build_type}}: 7
sudo apt-get update -y && sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev build-essential pkg-config: 7
. CUSTOM_PATH_DIR :extensions:tokenizers:compileJNI: 6
aws s3 sync extensions CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR: 14
cmake FLAG build FLAG examples: 8
echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} FLAG: 6
npm install -g wavedrom-cli: 6
yarn FLAG packages CUSTOM_PATH_DIR build: 8
tasks CUSTOM_PATH_FILE packages CUSTOM_PATH_DIR latest: 8
USES: protocolbuffers/protobuf-ci/bazel-docker: 14
USES: protocolbuffers/protobuf-ci/cross-compile-protoc: 6
-X 'github.com CUSTOM_PATH_FILE=${{ steps.date.outputs.date }}'" \: 9
echo "********************************************************************************": 14
python -m pip install twine build: 6
version=$(awk -F'[ ="]+' '$1 == "channel" { print $2 }' scripts CUSTOM_PATH_FILE): 9
echo "TOOLCHAIN=${version}" >> ENV_VAR: 6
export KURL_UTIL_IMAGE=replicated CUSTOM_PATH_DIR: 9
export KURL_BIN_UTILS_FILE=kurl-bin-utils-ENV_VAR.tar.gz: 6
make release-notes: 6
pip install httpx: 6
xvfb-run -a .. CUSTOM_PATH_DIR: 8
USES: ovirt/checkout-action: 10
sudo add-apt-repository ppa:mhier CUSTOM_PATH_DIR: 7
make dist ENV_VAR TESTING=true -j 1: 12
echo "ReleaseTag=ENV_VAR:10}": 6
git checkout "ENV_VAR:11}": 10
make test-release: 7
make proto-check-breaking: 6
USES: ui-router/publish-scripts/actions/upgrade: 6
npm publish packages CUSTOM_PATH_DIR: 8
export DEBIAN_FRONTEND="noninteractive": 7
mkdir -p dist bin: 7
curl -L URL | tar -zxC dist: 7
mv dist CUSTOM_PATH_DIR bin/: 7
shasum -a 256 build CUSTOM_PATH_FILE: 9
${{ toJSON(github.event) }} : 7
composer require FLAG laravel CUSTOM_PATH_DIR matrix.laravel }}: 6
dotnet restore ${{ env.solutionName }}: 8
dotnet build ${{ env.solutionName }} FLAG -c Release: 6
dotnet test ${{ env.solutionName }} FLAG FLAG normal -c Release CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 7
dotnet publish ${{ env.solutionName }} FLAG FLAG FLAG normal -c Release: 6
dotnet pack ${{ env.solutionName }} FLAG FLAG FLAG normal -c Release: 6
dotnet nuget push "*.nupkg" FLAG -s URL -k ${{ secrets.PUBLISH_GH_TOKEN }}: 7
git clean -xfdf: 7
meson test -v -C _build: 6
if (-not $?) { exit 1 }: 13
USES: ./.github/actions/setup-cli-deps: 9
VERSION=$(git tag -l FLAG=-v:refname | head -n 1 | tr -d v): 6
RELEASE=$(git describe FLAG | cut -f2 -d-): 6
echo "build_version=ENV_VAR" >> ENV_VAR: 7
echo "build_release=ENV_VAR" >> ENV_VAR: 6
git config FLAG user.name "CI": 6
cd conda: 6
echo "dir=$(composer config cache-dir)" >> ENV_VAR: 6
tidy -i -m -w 120 -utf8 -ashtml docs CUSTOM_PATH_FILE: 6
. install-all.sh: 8
cp -rf src CUSTOM_PATH_DIR ./: 6
npm install -g serverless: 7
. CUSTOM_PATH_FILE FLAG ${{ env.RELEASE_VERSION }} FLAG notes-${{ env.RELEASE_VERSION }}.md: 7
make -j $(($(nproc) / 2)): 6
mv frame_trajectory.txt .. CUSTOM_PATH_FILE: 14
mv track_times.txt .. CUSTOM_PATH_FILE: 14
python bin CUSTOM_PATH_FILE: 7
yarn global add turbo: 18
curl -o apache-zookeeper-3.6.3-bin.tar.gz -L URL: 6
bash apache-zookeeper-3.6.3-bin CUSTOM_PATH_FILE start apache-zookeeper-3.6.3-bin CUSTOM_PATH_FILE: 8
sed -i 's|<version>${{ env.projectSpringBootVersion }}< CUSTOM_PATH_DIR matrix.springBootVersion }}< CUSTOM_PATH_DIR sermant-integration-tests CUSTOM_PATH_FILE: 8
bash . CUSTOM_PATH_FILE URL 60: 10
nohup java -javaagent:sermant-agent-1.0.0 CUSTOM_PATH_FILE=appName=default -jar \: 17
bash . CUSTOM_PATH_FILE URL 120: 16
touch . CUSTOM_PATH_DIR: 9
USES: InseeFrLab/onyxia: 12
ls releases: 9
ESCAPED=`python3 -c 'import json,os,urllib.parse; print(urllib.parse.quote(json.dumps(os.environ["COMMIT_MESSAGE"])))'`: 7
tar xzf xnvme-src.tar.gz FLAG 1: 10
rm xnvme-src.tar.gz: 8
echo "::set-output name=release_version::ENV_VAR": 7
cd docker CUSTOM_PATH_DIR && mvn -B package FLAG pom.xml: 6
npx lerna run build FLAG= CUSTOM_PATH_DIR: 9
echo "current version is ${{ steps.package-version.outputs.version }}": 6
USES: ./.github/actions/setup-arc-e2e: 15
USES: ./.github/actions/execute-assert-arc-e2e: 15
echo "ENV_VAR" > VERSION: 7
USES: ./.github/actions/gradle-opts: 6
npm run compile:prod: 7
cd ImageMagick-Windows6\VisualMagick\configure: 6
arch="${{ matrix.arch }}": 9
echo "PLATFORM=${arch%% *}" >> "ENV_VAR": 6
echo "ARCH=${arch##* }" >> "ENV_VAR": 6
python -m pip install tox sphinx: 6
dotnet build aspnet-core CUSTOM_PATH_FILE: 6
echo "VERSION = \"${{ env.TAG }}\"" > version.py: 9
pipenv install FLAG ${{ env.PYTHON_VERSION }}: 9
pipenv run build: 12
mv cloudpilot-server ${{ env.SERVER_DIRECTORY }}: 9
bin CUSTOM_PATH_DIR db:create: 8
go test -bench=JS$ . CUSTOM_PATH_DIR: 6
package_cloud push golang-migrate CUSTOM_PATH_DIR dist CUSTOM_PATH_FILE: 9
json -I -f package.json -e "this.version=\"ENV_VAR\"": 6
${{ matrix.setupCl }}: 6
USES: Syer10/Fedora-Java17-Action: 8
cp -r plugins ENV_VAR: 6
tar -czf ENV_VAR.tar.gz ENV_VAR: 7
curl URL | gpg FLAG FLAG trustedkeys.gpg FLAG: 6
from hashlib import sha512: 9
from sys import version: 9
hash = sha512(version.encode()).hexdigest(): 9
print(f'::set-output name=py-hash-key::{hash}'): 7
docker buildx inspect: 10
dotnet clean: 8
sudo apt install build-essential ffmpeg libsm6 libxext6 libsndfile1 -y: 6
USES: ./.github/actions/setup-repo: 7
bash docker CUSTOM_PATH_FILE: 6
USES: ./.github/actions/timeout: 7
USES: ./.github/actions/build-keycloak: 6
USES: ./.github/actions/build_micro_service: 11
gh release upload "ENV_VAR#refs CUSTOM_PATH_DIR "bundles CUSTOM_PATH_FILE" FLAG: 9
mkdir -p nexus CUSTOM_PATH_DIR: 10
cd nexus CUSTOM_PATH_DIR: 10
wget FLAG="ENV_VAR" FLAG="ENV_VAR" ENV_VAR CUSTOM_PATH_FILE: 17
pip install FLAG maturin: 6
maturin build FLAG -o dist: 6
pip install pypandoc==1.7.2: 6
pip3 install codemagic-cli-tools==0.46.0: 10
echo "ENV_VAR" | docker login FLAG "${{ secrets.DOCKER_USERNAME }}" FLAG: 7
.github CUSTOM_PATH_DIR __init: 7
pio lib FLAG update: 6
-u ${{ secrets.carvel_bot_access_token }} \: 6
gh pr merge FLAG FLAG FLAG: 6
flutter analyze FLAG FLAG: 7
npm run ts-proto: 13
python -m unittest  'tests CUSTOM_PATH_FILE': 14
cargo run -- FLAG sample CUSTOM_PATH_FILE FLAG sample::main: 6
pip install -e ./: 7
echo "IMAGE_TAG_PREFIX=${{ github.ref_name }}"|sed 's|=main$|=latest|' >> ENV_VAR: 7
echo "IMAGE_TAG=$(git rev-list FLAG HEAD)" >> ENV_VAR: 7
. CUSTOM_PATH_FILE apt-get update: 15
. CUSTOM_PATH_FILE apt-get install -y -qq ENV_VAR ENV_VAR: 15
. CUSTOM_PATH_FILE importdb ragnarok ragnarok ragnarok ENV_VAR: 14
. CUSTOM_PATH_FILE getplugins || true: 14
. CUSTOM_PATH_FILE build ENV_VAR: 14
. CUSTOM_PATH_FILE test ragnarok ragnarok ragnarok ENV_VAR: 10
. CUSTOM_PATH_FILE extratest: 11
cd . CUSTOM_PATH_DIR && chmod +x . CUSTOM_PATH_DIR && . CUSTOM_PATH_DIR clean assembleDebug -Ptype=debug -Pgroup=com.github.alibaba.GaiaX -Pversion=dev-SNAPSHOT -xtest -xlint publishToMavenLocal: 7
echo Hello World: 11
php vendor CUSTOM_PATH_DIR FLAG FLAG node_modules FLAG vendor .: 6
cargo build ${{ matrix.features }}: 14
USES: cake-build/cake-action: 15
echo "### Version: $version" >> ENV_VAR: 10
pip install tox==3.27.1: 6
set -e -v: 10
PATH="ENV_VAR CUSTOM_PATH_DIR: 6
yarn FLAG FLAG 180000: 10
USES: ./.github/actions/testagent/start: 54
USES: ./.github/actions/testagent/logs: 53
USES: zricethezav/gitleaks-action: 8
curl -Lf URL | tar -xz FLAG=. CUSTOM_PATH_DIR: 7
bash test-scripts CUSTOM_PATH_FILE: 9
python3 test-scripts CUSTOM_PATH_FILE: 8
echo ${{ steps.extract_branch.outputs.branch }}: 8
git config FLAG user.email "pre-commit-bot": 7
git config FLAG user.name "PyMedPhys Pre-Commit Bot": 7
Get-Content -Path $env:GITHUB_PATH: 6
poetry install -E user -E tests -E docs: 6
echo "::set-output name=dir::$(poetry run python -c 'import pymedphys._config as cf; print(str(cf.get_config_dir()))')": 6
cd binary: 8
poetry run pymedphys dev tests -v FLAG: 10
npx rimraf "build CUSTOM_PATH_FILE)": 6
gem install bundler:1.17.3: 7
rm rust-toolchain.toml: 6
cd mirrord CUSTOM_PATH_DIR: 25
docker build -t ENV_VAR CUSTOM_PATH_DIR -f verifier CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 6
make check-generate: 8
mkdir ${{ github.event.repository.name }}: 6
USES: ./.github/actions/install-npm-deps: 7
sudo apt-get install -y FLAG git make gcc: 6
echo "no build required": 8
docker build . FLAG Dockerfile FLAG production FLAG COMMIT_HASH=ENV_VAR FLAG chrztoph CUSTOM_PATH_DIR: 7
USES: ./.github/actions/git-dirty-check: 9
sudo apt-get install libavutil-dev libavformat-dev libeb16-dev: 6
sudo apt install libxapian-dev: 7
mv bin CUSTOM_PATH_DIR bin CUSTOM_PATH_DIR: 14
npm run test:all: 11
sudo mkdir -p CUSTOM_PATH_DIR env.DIY_WORK }}: 6
sudo chown ENV_VAR:ENV_VAR CUSTOM_PATH_DIR env.DIY_WORK }}: 6
ln -sf CUSTOM_PATH_DIR env.DIY_WORK }} CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 6
cp -Rf ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 6
source ENV_VAR CUSTOM_PATH_FILE && Diy_menu3: 6
source ENV_VAR CUSTOM_PATH_FILE && Diy_menu4: 6
source ENV_VAR CUSTOM_PATH_FILE && Diy_menu5: 6
source ENV_VAR CUSTOM_PATH_FILE && Diy_menu6: 6
USES: ophub/delete-releases-workflows: 6
sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev: 6
cat VERSION | grep ENV_VAR || exit 1: 10
sed -i "s CUSTOM_PATH_DIR ENV_VAR: 6
spin test -- numpy CUSTOM_PATH_DIR: 9
spin build -- -Ddisable-optimization=true: 6
go install cuelang.org CUSTOM_PATH_DIR: 8
cue version: 6
yarn test:client: 6
mvn clean verify -DskipTests: 6
cmake FLAG build -v: 6
sudo apt-get install -qq libconfig-dev: 10
git config FLAG user.email "Haaroon": 6
git config FLAG user.name "Haaroon": 6
yarn test FLAG FLAG FLAG=2: 11
sudo modprobe zfs: 7
bin CUSTOM_PATH_DIR db:migrate: 10
rustup toolchain install ENV_VAR FLAG minimal: 6
sudo rm -rf CUSTOM_PATH_DIR # release about 10 GB: 8
sudo rm -rf CUSTOM_PATH_DIR # release about 20GB: 8
sudo apt install FLAG protobuf-compiler: 8
choco install llvm: 7
cp -rf .. CUSTOM_PATH_DIR .: 9
rm -f "ENV_VAR CUSTOM_PATH_FILE": 9
CHANGES=ENV_VAR CUSTOM_PATH_DIR: 10
rosdep install FLAG . FLAG -r -y: 6
pyinstaller -F . CUSTOM_PATH_FILE: 8
del dist: 6
del *.spec: 6
r="${r CUSTOM_PATH_DIR: 9
supabase link FLAG ENV_VAR: 6
supabase db push: 6
echo $(cd ci CUSTOM_PATH_DIR pwd) >> ENV_VAR: 6
unset CI: 8
dart pub get FLAG 'packages CUSTOM_PATH_DIR: 6
gcloud compute ssh ${{ inputs.test_id }}-${{ env.GITHUB_REF_SLUG_URL }}-${{ env.GITHUB_SHA_SHORT }} \: 8
FLAG ${{ vars.GCP_ZONE }} \: 8
FLAG="-o ConnectionAttempts=20" \: 8
FLAG="-o ConnectTimeout=5" \: 8
FLAG=' \: 8
python -m pip install FLAG numpy pyarrow cmake conan==1.60.1: 6
pip install cibuildwheel twine: 11
unzip artifact.zip: 7
python -m pip install FLAG off FLAG pip setuptools: 8
pip install -r requirements.d CUSTOM_PATH_FILE: 7
python -m pytest -rA tests CUSTOM_PATH_DIR -n auto FLAG=pypots FLAG FLAG=loadgroup FLAG=.coveragerc: 7
cd test/: 11
echo "Found ENV_VAR": 8
git fetch FLAG FLAG FLAG=5 origin main: 7
USES: ./.github/actions/setup_env: 9
USES: ./.github/actions/after-checkout-prep: 6
bin CUSTOM_PATH_DIR ci: 8
bin CUSTOM_PATH_DIR js:routes:typescript: 6
sudo apt-get install FLAG docker.io containerd runc: 7
sudo systemctl unmask docker && sudo systemctl start docker: 9
. script CUSTOM_PATH_DIR: 10
. ENV_VAR CUSTOM_PATH_DIR: 15
cp ${{ env.MSYS2_PREFIX }} CUSTOM_PATH_FILE $site_packages/: 19
ctest -V -C ${{ matrix.build-type }}: 6
echo '::set-output name=dir::$(yarn cache dir)': 6
yarn lerna run test FLAG: 7
sudo curl -L URL -o . CUSTOM_PATH_DIR: 6
USES: mfem/github-actions/build-hypre: 6
python -m pip install \: 8
FLAG FLAG \: 6
git+URL \: 15
USES: ./.github/actions/cached-install: 10
python -m pip install FLAG ${{ matrix.ansible-version }}: 20
~ CUSTOM_PATH_DIR sanity FLAG FLAG FLAG FLAG "${{ matrix.python-version }}" -vvv: 8
[[ ! -d 'tests CUSTOM_PATH_DIR ]] && echo This collection does not have unit tests. Skipping... || \: 8
sudo apt-get update && sudo apt-get install -y mysql-client git curl libssl-dev default-jdk build-essential: 6
echo "${{ secrets.KEYSTORE_FILE }}" > keystore.asc: 7
gpg -d FLAG "${{ secrets.KEYSTORE_FILE_PSWD }}" FLAG keystore.asc > keystore: 7
echo "${{ secrets.API_KEY_FILE }}" > fastlane-api.json.asc: 6
gpg -d FLAG "${{ secrets.API_KEY_FILE_PSWD }}" FLAG fastlane-api.json.asc > fastlane-api.json: 6
fastlane deployInternal: 6
make && make test: 7
git fetch FLAG URL secrets.GITHUB_TOKEN }} CUSTOM_PATH_DIR github.repository }}.git "+refs CUSTOM_PATH_DIR: 8
arch=$(go env GOARCH): 6
os=$(go env GOOS): 6
sudo wget URL: 17
sudo usermod FLAG FLAG lxd ENV_VAR: 6
sudo microk8s status FLAG: 8
sudo -E bash scripts CUSTOM_PATH_FILE -o: 8
test -z "$(git status FLAG)" || (echo "please run 'go mod tidy && go mod vendor', and submit your changes"; exit 1): 6
USES: jannekem/run-python-script-action: 12
python benchmarks CUSTOM_PATH_FILE: 14
flutter pub pub upgrade: 10
wget -q -O - "URL | tar -xz -C " CUSTOM_PATH_DIR: 7
echo '#! CUSTOM_PATH_DIR >> CUSTOM_PATH_DIR: 7
echo 'mono CUSTOM_PATH_FILE $@' >> CUSTOM_PATH_DIR: 7
gradle clean build publish: 33
sudo apt install rsync: 7
echo "version: $version": 9
git -c protocol.version=2 submodule update FLAG FLAG FLAG FLAG=1: 19
env HOMEBREW_NO_AUTO_UPDATE=1 brew install lcov: 8
env HOMEBREW_NO_AUTO_UPDATE=1 brew install clang-format: 8
. CUSTOM_PATH_FILE FLAG inconsistent: 6
cd benchmarks/: 8
USES: ./.github/actions/pipdeptree: 10
dotnet test . CUSTOM_PATH_FILE FLAG normal: 10
echo "PARALLELISM=${{ github.event.inputs.parallelism || '3' }}" >> ENV_VAR: 68
sed -i 's#FROM $baseimage:$tag#FROM nethermind:test-${{ github.sha }}#g' hive CUSTOM_PATH_DIR: 69
. CUSTOM_PATH_DIR FLAG nethermind FLAG ethereum CUSTOM_PATH_DIR FLAG.limit CUSTOM_PATH_DIR FLAG.parallelism ENV_VAR: 870
chmod +x nethermind CUSTOM_PATH_FILE: 69
nethermind CUSTOM_PATH_FILE "hive CUSTOM_PATH_FILE": 69
echo "PATH=ENV_VAR": 6
echo "ver=$(make version)" >> ENV_VAR: 7
node scripts CUSTOM_PATH_DIR: 7
yarn cypress run FLAG "cypress CUSTOM_PATH_FILE": 6
USES: ./.github/actions/setup_env_vars: 10
echo "Terminating Submitted AWS Batch Job: "${{ env.Batch_JobID }}"": 10
aws batch terminate-job FLAG "${{ env.Batch_JobID }}" FLAG "Job terminated by cancelled workflow": 10
git show-ref # useful for debugging: 7
poetry install -E docs: 7
echo "Tag: ENV_VAR": 6
echo "update github pr status": 9
curl -i -X POST \: 27
-H "Authorization: Bearer ENV_VAR" \: 28
export SCCACHE_DIR= CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 7
export RUSTC_WRAPPER=sccache: 7
objcopy FLAG=zlib-gnu . CUSTOM_PATH_DIR: 8
mkdir -p distro: 6
cp target CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 9
cp docker CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 8
export CARGO_HOME=" CUSTOM_PATH_FILE": 18
export CARGO_TARGET_DIR=" CUSTOM_PATH_DIR: 18
USES: bitwarden/gh-actions/get-keyvault-secrets: 10
PATH C:\Strawberry\perl\bin;%PATH%: 7
echo "Pull Request Number - ${{ steps.cpr.outputs.pr_number }}": 10
curl -sSfL URL -s`_`uname -m`.tar.gz | tar -C ~ CUSTOM_PATH_DIR -zxv nfpm: 6
tar -xzf package.tar.gz: 9
SKIP_SUBMODULE_DEPS=1 yarn FLAG: 7
docker load -i e2e CUSTOM_PATH_FILE: 16
chmod +x e2e CUSTOM_PATH_DIR: 16
USES: ./.github/actions/kots-e2e: 16
USES: replicatedhq/replicated-actions/create-cluster: 15
kubectl create ns "ENV_VAR": 14
kubectl create secret docker-registry kotsadm-dockerhub FLAG index.docker.io FLAG "${{ secrets.E2E_DOCKERHUB_USERNAME }}" FLAG "${{ secrets.E2E_DOCKERHUB_PASSWORD }}" FLAG "ENV_VAR": 14
USES: ./.github/actions/generate-support-bundle: 15
USES: replicatedhq/replicated-actions/remove-cluster: 18
npx depcheck: 10
echo "BRANCH=$(echo ENV_VAR##* CUSTOM_PATH_DIR >> ENV_VAR: 6
. CUSTOM_PATH_FILE && . CUSTOM_PATH_DIR FLAG || (cat config.log && false): 10
export PATH=" CUSTOM_PATH_DIR && make check -j4 VERBOSE=1: 6
make check VERBOSE=yes: 6
go test -v -race -cover -tags=debug -coverpkg=. CUSTOM_PATH_DIR -coverprofile=. CUSTOM_PATH_FILE -covermode=atomic . CUSTOM_PATH_DIR: 12
cd " CUSTOM_PATH_DIR &&: 18
cmake FLAG . FLAG install FLAG: 8
echo systemProp.org.gradle.internal.http.connectionTimeout=60000 >> gradle.properties: 6
echo systemProp.org.gradle.internal.http.socketTimeout=60000 >> gradle.properties: 6
echo systemProp.org.gradle.internal.repository.max.retries=10 >> gradle.properties: 6
echo systemProp.org.gradle.internal.repository.initial.backoff=500 >> gradle.properties: 6
chmod -R +x . CUSTOM_PATH_FILE: 6
pylint . CUSTOM_PATH_DIR: 6
cd ${{ env.RESC_VCS_SCRAPER_DIR }}: 7
pdm venv create FLAG FLAG ENV_VAR: 8
USES: nwtgck/actions-comment-run: 7
rushx package: 15
. CUSTOM_PATH_FILE docker-release: 13
(cd . CUSTOM_PATH_DIR: 10
sha256sum . CUSTOM_PATH_FILE > . CUSTOM_PATH_FILE256): 10
sudo mkdir CUSTOM_PATH_FILE: 6
rake compile: 9
unzip dist.zip: 6
CC=gcc-12 . CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR FLAG FLAG FLAG FLAG || (cat config.log; exit 1): 6
command -V firejail && firejail FLAG: 7
New-Item -ItemType Directory -Path C:\builtfiles -Force > $null: 13
yarn prettier FLAG .: 11
CONTENT=$(cat . CUSTOM_PATH_FILE): 11
TARGET_TAG_NAME=$(echo "ENV_VAR" | perl -wnE"say for CUSTOM_PATH_DIR: 8
NEW_TAG_NAME=$(echo "ENV_VAR" | perl -wnE"say for CUSTOM_PATH_DIR: 8
echo "target-tag-name=ENV_VAR": 8
echo "new-tag-name=ENV_VAR": 8
echo "target-tag-name=ENV_VAR" >> ENV_VAR: 8
echo "new-tag-name=ENV_VAR" >> ENV_VAR: 8
git checkout ${{ steps.release.outputs.target-tag-name }}: 7
7z x appPackage.7z: 6
Invoke-WebRequest "URL -OutFIle "C:\WindowsApplicationDriver_1.2.1.msi": 9
Start-Process msiexec -ArgumentList " CUSTOM_PATH_DIR -Verb runAs -Wait: 9
Start-Process msiexec -ArgumentList " CUSTOM_PATH_FILE" -Verb runAs -Wait: 9
Start-Process PowerShell -ArgumentList "yarn test:appium": 9
Start-Sleep -s 10: 12
docker pull ENV_VAR CUSTOM_PATH_DIR: 14
ENV_VAR hack CUSTOM_PATH_FILE: 8
cat .versions >> ENV_VAR: 15
npm config set cache ${{ github.workspace }} CUSTOM_PATH_DIR: 7
yarn config set cache-folder ${{ github.workspace }} CUSTOM_PATH_DIR: 7
git config user.name '${{ github.actor }}': 7
git config user.email '${{ github.actor }}': 7
apt-get update && apt-get install libsndfile1-dev libgl1 -y: 9
go run main.go migrate apply FLAG file: CUSTOM_PATH_DIR FLAG sqlite: CUSTOM_PATH_DIR: 6
make docker-build-push-multi-arch: 30
USES: ./.github/actions/ses-email-action: 10
cd fixture: 6
cd xnvme: 8
echo backend all-in-one development image build is starting with version: ${{ env.RELEASE_VERSION }}: 9
flake8 FLAG FLAG FLAG: 7
export NOSTATUSBAR=1: 7
export DACE_cache=single: 8
export PYTHON_BINARY="coverage run FLAG=dace FLAG": 6
npm install . CUSTOM_PATH_DIR: 14
USES: gr2m/get-json-paths-action: 9
echo "${{ secrets.GPG_PRIVATE_KEY }}" > gpg.asc: 9
echo "${{ secrets.GPG_PASSPHRASE }}" | gpg FLAG FLAG FLAG 0 FLAG gpg.asc: 9
test "$(git status -s | wc -l)" -eq 0: 6
USES: lucasmotta/pull-request-sticky-header: 7
.\python.bat -m test.pythoninfo: 6
echo "::group::Download SemVer Binary": 6
echo "::group::Change SemVer Binary Permissions": 6
sudo chmod -v +x CUSTOM_PATH_DIR: 8
echo "::group::Show SemVer Binary Version Info": 6
semver FLAG: 6
echo "ENV_VAR" | docker login -u ENV_VAR FLAG: 6
spack compiler find: 6
python -m mkdocs build: 8
aws s3 cp FLAG build CUSTOM_PATH_FILE s3: CUSTOM_PATH_DIR secrets.PREVIEW_S3_BUCKET }} CUSTOM_PATH_DIR github.event.client_payload.folder }}/: 8
FLAG 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \: 12
FLAG 'Accept: application CUSTOM_PATH_FILE3+json' \: 13
cp assets CUSTOM_PATH_FILE AppDir CUSTOM_PATH_FILE: 6
docker run -v "ENV_VAR: CUSTOM_PATH_DIR -u 0:0 bash -c "rm -rf CUSTOM_PATH_DIR: 41
USES: ./.github/actions/breeze: 14
breeze ci fix-ownership: 18
until curl FLAG -f -lSL "URL github.repository_owner }} CUSTOM_PATH_DIR steps.vars.outputs.tag }} CUSTOM_PATH_DIR &> CUSTOM_PATH_DIR do sleep 45s; done: 6
github_ref="${github_ref CUSTOM_PATH_DIR: 21
echo '$github_ref='$github_ref: 7
echo "GITHUB_TAG=$github_ref" >> ENV_VAR: 7
eval "$(node -e 'const v=require(". CUSTOM_PATH_FILE; console.log("pkg_version="+v)')": 7
echo '$pkg_version='$pkg_version: 7
echo "PKG_VERSION=$pkg_version" >> ENV_VAR: 8
artifacts_url="ENV_VAR CUSTOM_PATH_DIR: 7
echo "ARTIFACTS_URL=$artifacts_url" >> ENV_VAR: 7
sudo CUSTOM_PATH_DIR -V dist-upgrade -y: 6
ninja -C . CUSTOM_PATH_DIR: 9
USES: ./.github/actions/setup-php: 6
sudo chown $(id -u):$(id -g) ENV_VAR CUSTOM_PATH_DIR: 6
python -m pip install -U twine: 6
node . CUSTOM_PATH_FILE web: 8
pnpm i || pnpm i || pnpm i: 8
echo "*" > .dockerignore: 8
echo "!web CUSTOM_PATH_DIR >> .dockerignore: 16
docker build . -f web CUSTOM_PATH_DIR -t agoraflat CUSTOM_PATH_DIR -t agoraflat CUSTOM_PATH_DIR -t ENV_VAR CUSTOM_PATH_DIR -t ENV_VAR CUSTOM_PATH_DIR: 8
docker push agoraflat CUSTOM_PATH_DIR: 16
export CHART=. CUSTOM_PATH_FILE: 8
sed -i "s CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR ENV_VAR: 8
export VALUE=. CUSTOM_PATH_FILE: 8
sed -i "s|DOCKER_IMAGE_NAME|ENV_VAR|" ENV_VAR: 8
sed -i "s|DOCKER_IMAGE_TAG|ENV_VAR|" ENV_VAR: 8
USES: ./.github/composite/rust: 25
gradle build: 16
sed -i 's CUSTOM_PATH_DIR wp-tests-config.php: 7
echo "issue_close=true" >> ENV_VAR: 8
bash ops CUSTOM_PATH_FILE: 11
crictl pull docker.io CUSTOM_PATH_DIR: 8
USES: ./terraform-validate: 7
echo "PYFLUENT_VERSION=$(python -c "from ansys.fluent.core import __version__; print(); print(__version__)" | tail -1)" >> ENV_VAR: 8
echo "PYFLUENT version is: $(python -c "from ansys.fluent.core import __version__; print(); print(__version__)" | tail -1)": 8
make install > CUSTOM_PATH_DIR: 6
make version-info: 6
meson setup builddir/: 6
export PATH=$(readlink -f . CUSTOM_PATH_DIR: 6
sudo apt install libboost-all-dev: 7
cd cpp: 8
USES: abelfodil/protoc-action: 6
apt -y update: 6
USES: anchore/sbom-action/publish-sbom: 9
cp buildres CUSTOM_PATH_FILE src CUSTOM_PATH_DIR: 6
mvn -N install: 7
pip install -e . FLAG FLAG: 6
pytest tests CUSTOM_PATH_DIR ${{ env.PYTEST_FLAGS }}: 9
echo ENV_VAR | base64 -di > android CUSTOM_PATH_FILE: 6
yarn dev: 6
poetry run pytest -v: 6
make github: 7
task go:build: 6
USES: keep-network/ci/actions/load-env-variables: 11
USES: keep-network/ci/actions/upstream-builds-query: 7
USES: keep-network/ci/actions/notify-workflow-completed: 9
' > Dockerfile: 6
make build FLAG=target FLAG -j$(nproc): 6
make env FLAG=target FLAG: 6
git config FLAG user.name 'Dokku Bot': 7
git config FLAG user.email no-reply: 7
cd net CUSTOM_PATH_DIR: 8
USES: frenck/action-yamllint: 10
sudo make check: 7
. ENV_VAR; install_cxx_compiler ENV_VAR: 10
. ENV_VAR; cd fbgemm_gpu; prepare_fbgemm_gpu_build ENV_VAR: 20
. ENV_VAR: 6
pwd; ls -la .: 6
pushd src/: 7
USES: kamilkisiela/graphql-inspector: 9
USES: ./.github/actions/main: 10
python scripts CUSTOM_PATH_FILE FLAG ${{ secrets.WORKFLOW_GITHUB_TOKEN }}: 6
echo "Adding GNU tar to PATH": 15
cp $(k3d get-kubeconfig FLAG='k3s-default') ~ CUSTOM_PATH_DIR: 7
USES: bcomnes/cleanup-xvfb: 7
USES: ./.github/actions/ortdocker: 12
USES: ./.github/actions/build_ci: 7
rm -rf ${{ env.TMPDIR }} CUSTOM_PATH_DIR: 16
USES: ./kie-tools/.github/actions/deploy-openshift: 9
USES: DuckSoft/extract-7z-action: 20
tests CUSTOM_PATH_FILE tks: 8
mv .. CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 6
pnpm run format:check: 7
git submodule update  FLAG FLAG: 9
docker run -t \: 7
FLAG "type=bind,source= CUSTOM_PATH_FILE" \: 7
FLAG "type=bind,source=$(git rev-parse FLAG),destination= CUSTOM_PATH_DIR \: 7
FLAG EBPF_NET_SRC_ROOT= CUSTOM_PATH_DIR \: 9
ENV_VAR \: 12
brew install podman: 7
USES: OpenDataPlane/action-clean-up: 20
sudo docker run -i -v `pwd`: CUSTOM_PATH_DIR FLAG FLAG 8g -e CC="${{matrix.cc}}" -e CONF="${{matrix.conf}}" ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 7
USES: ./.github/actions/build-failure-log: 20
USES: ./.github/actions/run-failure-log: 27
sudo docker run -i -v `pwd`: CUSTOM_PATH_DIR FLAG FLAG 8g -e CC="ENV_VAR" -e ARCH="ENV_VAR" -e CONF="ENV_VAR" -e ODP_CONFIG_FILE= CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 8
sudo docker run -i -v `pwd`: CUSTOM_PATH_DIR FLAG FLAG 8g -e CC="ENV_VAR" -e ARCH="ENV_VAR" -e CONF="ENV_VAR" ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_FILE: 6
USES: getsentry/action-setup-venv: 6
USES: ./.github/actions/setup-dotnet: 8
chmod +x k0sctl: 9
make -C build CUSTOM_PATH_DIR test: 25
docker run FLAG -idt -p 5000:5000 rigetti CUSTOM_PATH_DIR -S: 7
docker run FLAG -idt -p 5555:5555 rigetti CUSTOM_PATH_DIR -R: 7
echo "envs=$(tox -l | grep '^${{ github.job }}\-' | . CUSTOM_PATH_FILE)" >> ENV_VAR: 16
tox -vv -e ${{ steps.get-envs.outputs.envs }} -p auto: 15
git FLAG diff FLAG=always: 9
If ($lastexitcode -ne 0) { Exit $lastexitcode }: 9
make -C build CUSTOM_PATH_DIR build CUSTOM_PATH_DIR: 10
mkdir -p web CUSTOM_PATH_DIR: 14
. CUSTOM_PATH_FILE CUSTOM_PATH_DIR install-deps: 6
cd desmume CUSTOM_PATH_DIR: 6
mvn docker:build: 16
docker push moxi CUSTOM_PATH_DIR: 10
cpack -G DragNDrop: 9
python chaos CUSTOM_PATH_FILE FLAG 127.0.0.1: 8
&& sudo apt-get install -y \: 6
tar -xzf depends.tar.gz: 10
tar -xzf veil-*.tar.gz FLAG=1: 7
strip ENV_VAR CUSTOM_PATH_DIR: 9
mv ENV_VAR CUSTOM_PATH_DIR ENV_VAR: 8
sudo update-alternatives FLAG x86_64-w64-mingw32-gcc CUSTOM_PATH_DIR: 6
wasm-pack test FLAG FLAG . CUSTOM_PATH_DIR: 6
USES: NejcZdovc/bundle-size-diff: 6
sudo cp CUSTOM_PATH_DIR ENV_VAR/: 6
Rscript -e 'pkgdown::deploy_to_branch(new_process = FALSE)': 7
pip install git+URL FLAG: 11
echo "version=$(rustc FLAG)" >> ENV_VAR: 9
${{steps.get-checksums-from-draft-release.outputs.result}}: 7
$sha = (git rev-parse FLAG HEAD): 6
mv -f . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 15
USES: gerbal/always-cache: 7
npx nx-cloud start-ci-run: 7
echo "::set-output name=job_id::$(echo $response | sed 's CUSTOM_PATH_DIR ID: \([^ ]*\).* CUSTOM_PATH_DIR: 8
bundle install FLAG docker FLAG opennebula ec2 windows vagrant: 78
curl -f -k FLAG 10 FLAG FLAG 30 FLAG 30 URL: 6
(( $(curl -f -k FLAG 5 FLAG FLAG 30 FLAG 30 URL | wc FLAG) > 100 )): 7
git config FLAG user.email ${{ secrets.USER_EMAIL }}: 6
cat ENV_VAR | jq '.pull_request' > pull_request_payload.json: 9
wget URL -P ~ CUSTOM_PATH_DIR: 8
go install fyne.io CUSTOM_PATH_DIR: 6
hugo: 11
sudo apt install -y bison build-essential cmake flex git libedit-dev \: 10
export MINIKUBE_STARTED=TRUE: 6
ps axjf: 6
export RUST_BACKTRACE=1: 12
set MAVEN_OPTS="-Xms6000m -Xmx8000m": 14
sleep 150s: 13
USES: cedx/setup-dart: 19
terraform apply -input=false -auto-approve: 7
nohup java -javaagent:sermant-agent-1.0.0 CUSTOM_PATH_FILE=appName=dubbo-integration-provider -jar \: 9
USES: ./.github/actions/setup-nodejs: 11
git submodule update FLAG -- lib CUSTOM_PATH_DIR: 7
echo "BRANCH=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 13
echo "MAILU_VERSION=pr-ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 10
echo "PINNED_MAILU_VERSION=pr-ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 10
echo "DOCKER_ORG_DERIVED=${{ env.DOCKER_ORG }}" >> ENV_VAR: 6
echo "DEPLOY=true" >> ENV_VAR: 12
echo "RELEASE=false" >> ENV_VAR: 11
echo "MAILU_VERSION=${{ env.BRANCH }}" >> ENV_VAR: 13
version=$( git tag FLAG=version:refname FLAG "${{ env.MAILU_VERSION }}.*" | tail -1  );root_version=${version%.*};patch_version=${version##*.};if [ "$patch_version" == "" ]; then pinned_version=${{ env.MAILU_VERSION }}.0; else pinned_version=$root_version.$(expr $patch_version + 1); fi;echo "PINNED_MAILU_VERSION=$pinned_version" >> ENV_VAR: 12
echo "RELEASE=true" >> ENV_VAR: 7
echo "PINNED_MAILU_VERSION=ENV_VAR" >> ENV_VAR: 11
npm run build-all: 6
gpg FLAG 4449039C FLAG . CUSTOM_PATH_FILE FLAG . CUSTOM_PATH_DIR: 9
gpg FLAG 4449039C FLAG . CUSTOM_PATH_FILE FLAG . CUSTOM_PATH_FILE: 6
pycodestyle .: 9
source .github CUSTOM_PATH_DIR matrix.before_script }}.sh: 6
wget -c URL -O - | tar -xz: 6
chmod +x cross && sudo mv cross CUSTOM_PATH_DIR: 6
cd rust CUSTOM_PATH_DIR: 10
cross build FLAG FLAG=${{ matrix.target }}: 6
mkdir cubestore-archive: 6
mkdir cubestore-archive CUSTOM_PATH_DIR: 6
mv rust CUSTOM_PATH_DIR matrix.target }} CUSTOM_PATH_DIR matrix.executable_name }} cubestore-archive CUSTOM_PATH_DIR matrix.executable_name }}: 6
cd cubestore-archive: 6
docker push epmlsop CUSTOM_PATH_DIR: 7
pushd $(mktemp -d) &> CUSTOM_PATH_DIR: 8
git clone FLAG FLAG 1 "URL && cd .github CUSTOM_PATH_DIR: 8
kubectl create configmap cilium-cli-kubeconfig -n kube-system FLAG kubeconfig: 8
kubectl -n kube-system wait job CUSTOM_PATH_DIR FLAG=condition=complete FLAG=${{ env.timeout }} &: 12
complete_pid=$!: 12
(kubectl -n kube-system wait job CUSTOM_PATH_DIR FLAG=condition=failed FLAG=${{ env.timeout }} && exit 1) &: 12
failed_pid=$!: 12
wait -n $complete_pid $failed_pid: 12
kubectl logs FLAG -n kube-system job CUSTOM_PATH_DIR: 12
kubectl create configmap cilium-cli-test-script -n kube-system FLAG=in-cluster-test-script.sh=.github CUSTOM_PATH_FILE: 8
echo "=== Install latest stable CLI ===": 8
curl -sSL FLAG URL: 9
cd packages CUSTOM_PATH_DIR && pnpm publish FLAG public FLAG FLAG ENV_VAR: 6
security create-keychain -p "ENV_VAR" ENV_VAR || true: 10
python ci.py: 6
echo "::set-output name=cache::$(go env GOCACHE)": 18
dpkg FLAG | grep compiler: 6
USES: ./.github/workflows/composite/setup: 8
sudo buildah push ENV_VAR:ENV_VAR-amd64: 7
sudo buildah push ENV_VAR:ENV_VAR-arm64: 7
sudo buildah manifest create ENV_VAR:ENV_VAR: 7
sudo buildah manifest add ENV_VAR:ENV_VAR docker: CUSTOM_PATH_DIR: 14
sudo buildah manifest push FLAG ENV_VAR:ENV_VAR docker: CUSTOM_PATH_DIR: 7
export PYTHONUNBUFFERED=1: 6
changelog=$(npm run changelog:last FLAG): 7
.  . CUSTOM_PATH_FILE1: 11
yarn test-unit: 10
GOBIN= CUSTOM_PATH_DIR go install github.com CUSTOM_PATH_DIR: 9
iter8 k launch \: 10
iter8 k assert -c completed -c nofailure FLAG 60s: 6
git config user.name "SecHub release job (github-actions)": 8
git config user.email github-actions-sechub: 8
git commit -am "SPDX headers added by SecHub release job " || true: 8
COMMITS=`git log FLAG FLAG FLAG FLAG`: 8
echo "commits=ENV_VAR" >> ENV_VAR: 9
echo "Pull Request Number - ${{ steps.pr_spdx_headers.outputs.pull-request-number }}": 8
echo "Pull Request URL - ${{ steps.pr_spdx_headers.outputs.pull-request-url }}": 8
git status > build CUSTOM_PATH_FILE: 9
. CUSTOM_PATH_DIR assertReleaseable: 9
echo "Pull Request Number - ${{ steps.pr_master_to_develop.outputs.pr_number }}": 8
echo "Pull Request URL - ${{ steps.pr_master_to_develop.outputs.pr_url }}": 8
mv ENV_VAR ENV_VAR: 11
cmake -B . CUSTOM_PATH_DIR: 15
USES: edgedb/action-release/validate-pr: 6
wget URL -O - | bash: 6
echo "${{ secrets.ENV }}" | base64 FLAG > .env: 7
sed -i 's CUSTOM_PATH_DIR github.event.inputs.version }}+${{ github.event.inputs.number }} CUSTOM_PATH_DIR pubspec.yaml: 6
mkdir releases: 9
npm run generate:assets FLAG: 6
echo ${{ secrets.DOCKER_TESTING_PASSWORD }} | sudo -E docker login -u ${{ secrets.DOCKER_TESTING_USERNAME }} FLAG quay.io: 6
sudo apt-get update && sudo apt-get install -y upx && sudo -E env "PATH=ENV_VAR" make deps: 9
sudo make build: 7
apt-get update &&: 7
apt-get install -y git make: 6
docker load FLAG kube-ovn.tar: 14
make kubectl-ko-log: 11
sh -x dist CUSTOM_PATH_FILE: 8
sudo .github CUSTOM_PATH_FILE ${{ matrix.arch }}: 6
~ CUSTOM_PATH_DIR relay add "wss: CUSTOM_PATH_FILE": 44
sudo apt install libgmp-dev: 9
cd mcl/: 8
rm -rf app CUSTOM_PATH_DIR: 14
echo "* -text" > .git CUSTOM_PATH_DIR: 6
USES: andrewiggins/tachometer-reporter-action: 11
vs where release: 6
USES: miloserdow/capistrano-deploy: 6
echo "BRANCH=${{ inputs.branch }}" >> ENV_VAR: 6
echo "MAILU_VERSION=${{ inputs.mailu_version }}" >> ENV_VAR: 7
echo "PINNED_MAILU_VERSION=${{ inputs.pinned_mailu_version }}" >> ENV_VAR: 7
echo "DOCKER_ORG=${{ inputs.docker_org }}" >> ENV_VAR: 6
sudo -- sh -c 'mkdir -p CUSTOM_PATH_DIR && cp -r tests CUSTOM_PATH_DIR CUSTOM_PATH_DIR && chmod 600 CUSTOM_PATH_DIR: 7
ant -noinput -buildfile build.xml: 7
pip install torch==${{matrix.torch}}+${{matrix.platform}} torchvision==${{matrix.torchvision}}+${{matrix.platform}} -f URL: 8
gpg FLAG FLAG FLAG=ENV_VAR . CUSTOM_PATH_FILE: 7
sudo apt install git: 6
. CUSTOM_PATH_DIR -v -p CUSTOM_PATH_DIR FLAG: 6
dev_tag=dev-$(git describe FLAG): 10
echo "Dev tag is: " $dev_tag: 10
export dev_tag=$dev_tag: 10
USES: ./.github/actions/generate-matrix: 10
USES: chainguard-dev/actions/matrix-extra-inputs: 6
version="$(basename ENV_VAR)": 7
cmake FLAG _build FLAG: 7
cmake FLAG _build FLAG ENV_VAR CUSTOM_PATH_DIR: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR labels -f centerofci CUSTOM_PATH_DIR -t centerofci CUSTOM_PATH_DIR -d: 9
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR milestones -f centerofci CUSTOM_PATH_DIR -t centerofci CUSTOM_PATH_DIR -s open: 9
pnpm FLAG website build: 6
echo "DEPTHAI_PYTHON_DOCSTRINGS_INPUT=ENV_VAR CUSTOM_PATH_FILE" >> ENV_VAR: 6
php FLAG swoole: 9
yarn hardhat compile: 7
. CUSTOM_PATH_FILE 5.5.0 . CUSTOM_PATH_DIR: 8
USES: joerick/pr-labels-action: 9
apt-get install git -y : 17
cd EzPC CUSTOM_PATH_DIR: 11
python examples CUSTOM_PATH_FILE FLAG=1: 8
USES: scality/action-artifacts: 18
mkdir -p CUSTOM_PATH_DIR github.job }}: 8
rm Cargo.toml: 8
USES: ggriffiths/github-cherry-pick-action: 6
.. CUSTOM_PATH_DIR build: 6
USES: peiffer-innovations/actions-flutter-validate: 8
cd build_debug: 10
mkdir userver CUSTOM_PATH_DIR || :: 6
cd userver CUSTOM_PATH_DIR: 6
make -C build CUSTOM_PATH_DIR clean publish CUSTOM_PATH_DIR AGENT_VERSION=${{env.TAG}}: 12
USES: OrbitalOwen/desktop-screenshot-action: 8
cp tests CUSTOM_PATH_FILE system CUSTOM_PATH_DIR: 6
php -S localhost:8888 &: 8
touch frontend CUSTOM_PATH_FILE: 9
USES: layer5io/meshery-smp-action: 6
yes | CUSTOM_PATH_DIR FLAG: 8
mkdir npm-cache && npm config set cache . CUSTOM_PATH_DIR FLAG: 6
yarn install-addons: 7
rm '.github CUSTOM_PATH_FILE' && '.github CUSTOM_PATH_FILE': 12
git diff FLAG '.github CUSTOM_PATH_FILE': 12
USES: ./.github/actions/after-job: 17
USES: ./.github/actions/cache-konan: 6
cp -r .. CUSTOM_PATH_DIR include/: 7
erbb configure && erbb build && erbb build simulator && erbb build hardware: 6
cp ${{ env.EXULT_SNAPSHOT_PATH }} CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 7
sudo mkdir -p "$(pwd) CUSTOM_PATH_DIR: 12
docker exec -i acme-sh acme.sh FLAG URL  FLAG FLAG 'acme-sh' FLAG ec-256 FLAG 2: 27
docker exec -i acme-sh acme.sh FLAG URL  FLAG FLAG 'acme-sh' FLAG ec-256 FLAG FLAG 2: 19
docker exec -i acme-sh acme.sh FLAG URL FLAG FLAG 'acme-sh' FLAG FLAG: 16
docker run -i FLAG FLAG certbot FLAG acme -v "$(pwd) CUSTOM_PATH_DIR certbot CUSTOM_PATH_DIR register FLAG -m 'certbot' FLAG URL FLAG: 8
docker run -i FLAG FLAG certbot FLAG acme -v "$(pwd) CUSTOM_PATH_DIR certbot CUSTOM_PATH_DIR certonly FLAG URL FLAG FLAG http -d certbot.acme FLAG certbot: 8
sudo openssl verify -CAfile examples CUSTOM_PATH_FILE -untrusted examples CUSTOM_PATH_FILE examples CUSTOM_PATH_FILE: 8
sudo cp CUSTOM_PATH_FILE ${{ github.workspace }} CUSTOM_PATH_DIR: 8
docker exec mariadbsrv mariadb -u root FLAG=foobar -e"CREATE DATABASE acme2certifier CHARACTER SET UTF8;": 6
docker exec mariadbsrv mariadb -u root FLAG=foobar -e"GRANT ALL PRIVILEGES ON acme2certifier.* TO 'acme2certifier'@'%' IDENTIFIED BY '1mmSvDFl';": 6
docker exec mariadbsrv mariadb -u root FLAG=foobar -e"FLUSH PRIVILEGES;": 6
sudo sed -i "s CUSTOM_PATH_DIR examples CUSTOM_PATH_FILE: 8
git config FLAG user.name "rpm update": 8
git add examples CUSTOM_PATH_DIR: 8
git commit -a -m "rpm update": 8
sudo cp examples CUSTOM_PATH_FILE data CUSTOM_PATH_FILE: 9
docker exec -i acme-sh acme.sh FLAG URL FLAG 'acme-sh' FLAG -d acme-sh.acme FLAG FLAG FLAG 3 FLAG FLAG FLAG: 11
sudo openssl verify -CAfile data CUSTOM_PATH_FILE -untrusted data CUSTOM_PATH_FILE certbot CUSTOM_PATH_FILE: 15
docker stop acme-sh: 10
sudo sed -i "s CUSTOM_PATH_DIR = True CUSTOM_PATH_DIR = False CUSTOM_PATH_DIR data CUSTOM_PATH_FILE: 6
cp Crashlytics CUSTOM_PATH_DIR quickstart-ios CUSTOM_PATH_DIR: 8
cd Project CUSTOM_PATH_DIR: 21
cd ENV_VAR && . CUSTOM_PATH_FILE: 8
USES: ./.github/actions/setup_build_env: 9
echo '${{ secrets.DOTENV_RELEASE }}' > .env: 8
spack install: 11
wget URL -O paperclip CUSTOM_PATH_FILE: 10
mvn paper-nms:init -pl nms CUSTOM_PATH_DIR: 22
USES: microsoft/infersharpaction: 9
sudo cp .github CUSTOM_PATH_FILE data: 13
sudo chmod -R 777 data CUSTOM_PATH_FILE: 13
sudo microk8s.kubectl apply -f data CUSTOM_PATH_FILE: 15
sudo microk8s.kubectl get pods -n cert-manager-acme: 10
sudo microk8s.kubectl describe ClusterIssuer acme2certifier: 12
sudo microk8s.kubectl describe challenge: 12
sudo microk8s.kubectl describe issuer acme2certifier -n cert-manager-acme: 6
sudo microk8s.kubectl describe challenge -n cert-manager-acme: 8
npm install -g ganache-cli: 10
echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> ENV_VAR: 10
timeout 10s pip FLAG || rm -rf .venv: 11
ls -la . CUSTOM_PATH_FILE: 19
echo "Job information": 6
echo "Trigger: ${{ github.event_name }}": 7
echo "Host: ${{ runner.os }}": 6
echo "Repository: ${{ github.repository }}": 6
echo "Branch: ${{ github.ref }}": 6
USES: BubbleProd/discord-webhook-notify: 10
USES: ./.github/actions/setup-dependencies: 7
noscl relay add wss: CUSTOM_PATH_FILE: 7
rm -r bin CUSTOM_PATH_DIR: 11
git submodule update FLAG applications CUSTOM_PATH_DIR: 10
VERSION=$(cat package.json | jq .version): 8
export VERSION=$(echo ENV_VAR:1:${#VERSION}-2}): 8
echo -n ${{ secrets.OCI_CFG_DATA }} | base64 FLAG FLAG config: 6
echo -n ${{ secrets.OCI_KEY_DATA }} | base64 FLAG FLAG oraclekey.cer: 6
oci os object bulk-delete FLAG ${{ secrets.OCI_OS_BUCKET }} FLAG ${{ secrets.OCI_OS_NAMESPACE }} FLAG FLAG distribution CUSTOM_PATH_DIR: 6
echo "${docker_password}" | sudo docker login FLAG="${docker_username}" ${{ env.REGISTRY }} FLAG: 16
sudo docker tag graphscope CUSTOM_PATH_DIR ${{ env.REGISTRY }} CUSTOM_PATH_DIR: 43
sudo docker push ${{ env.REGISTRY }} CUSTOM_PATH_DIR: 45
sudo docker rmi -f graphscope CUSTOM_PATH_DIR || true: 17
sudo docker rmi -f ${{ env.REGISTRY }} CUSTOM_PATH_DIR || true: 23
dotnet restore ${{ env.SOLUTION }}: 7
make -j$(nproc) check: 6
call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64: 12
pip install rest_api/: 8
pip install ui/: 7
sudo apt-get install FLAG -y libxml2-utils: 6
diff -B . CUSTOM_PATH_FILE <(xmllint FLAG ". CUSTOM_PATH_FILE"): 11
composer require palantirnet CUSTOM_PATH_DIR FLAG: 7
cp vendor CUSTOM_PATH_FILE .: 11
cp -r vendor CUSTOM_PATH_DIR web CUSTOM_PATH_DIR: 10
vendor CUSTOM_PATH_DIR process web CUSTOM_PATH_DIR: 7
make docker-build-unstable: 18
cp test CUSTOM_PATH_FILE docker CUSTOM_PATH_FILE: 18
BG=${{matrix.beer-garden-local}} docker-compose up -d beer-garden: 12
BG=${{matrix.beer-garden-local}} docker-compose logs FLAG 100 beer-garden: 30
pip${{ matrix.python-version }} install brewtils==${{matrix.brewtils}}: 18
pip${{ matrix.python-version }} install brewtils: 6
pip${{ matrix.python-version }} install -r requirements.txt: 18
BG=${{matrix.beer-garden-local}} RELEASE=${{matrix.child-garden}} docker-compose up -d beer-garden-child: 6
BG=${{matrix.beer-garden-local}} RELEASE=${{matrix.child-garden}} docker-compose logs FLAG 100 beer-garden-child: 12
docker-compose logs FLAG 100 beer-garden: 6
USES: ./.github/actions/setup-pnpm: 22
USES: ./.github/actions/nhost-cli: 7
rm -rf sub CUSTOM_PATH_DIR: 6
git config FLAG credential.helper cache: 13
USES: Der-Henning/actions-set-secret: 7
git add dist -f: 7
kubectl logs -n connaisseur -lapp.kubernetes.io CUSTOM_PATH_DIR FLAG=true: 6
rm -f "ENV_VAR": 8
pytest -n auto: 7
mvn -B -Dmaven.javadoc.skip=true -DskipTests=true -DskipITs=true -ntp -P '!test' install: 14
mvn -B -DskipTests=true -DskipITs=true -ntp -P docker deploy: 14
make check-markdown: 6
cmake FLAG build FLAG ${{env.BUILD_TYPE}} -j 2: 6
ctest -C ${{env.BUILD_TYPE}} -j 2 FLAG: 6
mkdir acme-sh: 6
USES: redhat-actions/openshift-tools-installer: 11
mkdir -p builds: 9
curl "URL: 11
USES: docker://debian:bullseye: 6
USES: docker://fedora:37: 6
USES: docker://fedora:33: 6
USES: docker://fedora:29: 6
USES: docker://opensuse/leap:15.4: 6
USES: docker://fedora:latest: 6
mim install 'mmdet>=3.0.0': 8
mkdir -p download CUSTOM_PATH_DIR: 8
terraform apply FLAG: 7
cargo xtask submodule: 8
ln -s .. CUSTOM_PATH_FILE .: 6
mkdir -p usr CUSTOM_PATH_DIR: 7
USES: ./.github/actions/install-deps-unix: 8
echo "CC=$(brew FLAG llvm) CUSTOM_PATH_DIR >> ENV_VAR: 8
echo "CXX=$(brew FLAG llvm) CUSTOM_PATH_DIR >> ENV_VAR: 8
rm -rf C: CUSTOM_PATH_DIR: 6
call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat": 6
docker login -u $env:DOCKER_USERNAME -p $env:DOCKER_PASSWORD: 6
.dockerfiles CUSTOM_PATH_FILE1: 6
echo "is push event? ${{ github.event_name == 'push' }}": 11
echo "is pull request event? ${{ github.event_name == 'pull_request' }}": 11
echo "pull_request.head.ref is: ${{ github.event.pull_request.head.ref }}": 8
echo "github.ref_name is: ${{ github.ref_name }}": 8
echo "github.ref is: ${{ github.ref }}": 8
echo "github.head_ref is: ${{ github.head_ref }}": 8
echo "should publish in dispatch mode? ${{ github.event.inputs.should-publish }}": 8
ci CUSTOM_PATH_FILE FLAG: 8
ls -l target CUSTOM_PATH_DIR: 6
tar -zxvf ENV_VAR CUSTOM_PATH_FILE -C ENV_VAR: 7
USES: alteryx/minimum-dependency-generator: 21
echo "NPM_CACHE=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
echo "GIT_BRANCH_NAME=$(git rev-parse FLAG HEAD)" >> ENV_VAR: 7
FLAG_sha=ENV_VAR: 11
javac -version: 7
poetry install -E gateway -E solver -E aws -E azure -E gcp: 6
poetry run pip install -r requirements-dev.txt: 11
USES: s3krit/Matrix-Message: 10
cd julia_module_test: 6
julia JuliaModuleTest.jl: 6
mkdir cmake.bld: 6
cd cmake.bld: 15
ctest FLAG FLAG .: 6
make gtest-bootstrap: 6
docker run FLAG XTENSA_TOOLS_VERSION=RI-2020.4-linux FLAG -v `pwd`: CUSTOM_PATH_DIR ghcr.io CUSTOM_PATH_DIR \: 8
echo ${{ join(steps.stale.outputs.*, ',') }}: 16
gpgkey=file: CUSTOM_PATH_DIR: 9
curl -o get-pip.py URL: 6
USES: cmyr/bloat-cmp/get-sizes: 6
rustup component add llvm-tools: 12
USES: ./.github/actions/ubuntu-prerequisites: 19
cd rlayers-npm-tests CUSTOM_PATH_DIR: 11
npm i rlayers@${{ github.event.inputs.version }} ol: 11
docker logs corda_network2_partya_1: 7
cp remote-network-config.json.template remote-network-config.json: 6
cat weaver CUSTOM_PATH_FILE: 16
cd studio CUSTOM_PATH_DIR: 9
docker pull bde2020 CUSTOM_PATH_DIR: 6
flutter pub global activate pana: 9
conan config set general.revisions_enabled=1: 10
USES: ./.github/actions/cmake-configure: 7
USES: ./.github/actions/cmake-build: 10
SHA=ENV_VAR::8}: 8
TAG=$(git tag FLAG HEAD): 8
echo "HOF_FMT_VERSION=ENV_VAR" >> ENV_VAR: 8
if [ -z ENV_VAR ]; then: 8
	TAG=ENV_VAR: 8
echo "HOF_SHA=ENV_VAR" >> ENV_VAR: 8
echo "HOF_TAG=ENV_VAR" >> ENV_VAR: 8
chmod +x scripts CUSTOM_PATH_FILE && . CUSTOM_PATH_FILE: 6
wget "ENV_VAR CUSTOM_PATH_FILE": 10
wget "ENV_VAR CUSTOM_PATH_FILE1": 8
sudo apt install FLAG . CUSTOM_PATH_FILE: 6
tree packages CUSTOM_PATH_DIR: 8
echo "compile . CUSTOM_PATH_FILE": 15
${{ matrix.compiler }} -v: 18
echo "ls . CUSTOM_PATH_FILE": 14
python . CUSTOM_PATH_FILE requirements CUSTOM_PATH_FILE ${{ matrix.pytorch-version }}: 6
cmake ENV_VAR -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}: 8
make -C build CUSTOM_PATH_DIR: 13
USES: rust-build/rust-build.action: 7
yarn lint:types: 6
curl -L -o src CUSTOM_PATH_FILE 'URL: 6
echo "cache-dir=$(ccache FLAG cache_dir)" >> ENV_VAR: 6
hg clone URL gmp: 6
cd gmp/: 6
strip .libs CUSTOM_PATH_FILE: 10
docker tag "ENV_VAR:latest" "ENV_VAR:ENV_VAR": 7
. CUSTOM_PATH_DIR FLAG=generic DVB_API_VERSION=5: 8
build CUSTOM_PATH_FILE FLAG: 8
docker tag consoleme consoleme CUSTOM_PATH_DIR: 6
choco install vcpython27 -f -y: 7
brew doctor: 6
sed -n 2p unityresults.xml | grep 'result="Passed"': 9
sed -i '.bak' 's:{TESTING_ACCESS_KEY_HERE}:${{secrets.PV_VALID_ACCESS_KEY}}:' Assets CUSTOM_PATH_FILE: 6
make -j ${{env.proc_num}}: 17
sudo apt-get install libibverbs-dev: 6
USES: ./.github/actions/scrt: 13
npm run ts-node -- . CUSTOM_PATH_FILE: 83
kubectl -n kustomize-system wait kustomizations CUSTOM_PATH_DIR FLAG=condition=ready FLAG=4m: 6
brew install fftw: 7
echo "::set-output name=date::$(date +'%Y-%m-%d' FLAG)": 7
cd e2e CUSTOM_PATH_DIR: 9
brew install hdf5: 6
python3 build.py -c examples CUSTOM_PATH_DIR -m learn -p -r ENV_VAR : 8
python3 build.py -c examples CUSTOM_PATH_DIR -m test -p -r ENV_VAR : 8
python3 build.py -c examples CUSTOM_PATH_DIR -m vanilla -p -r ENV_VAR : 8
regctl image copy kubearmor CUSTOM_PATH_DIR kubearmor CUSTOM_PATH_DIR FLAG: 10
token='X-Webhook-Token: ${{ secrets.WEBHOOK_SECRET }}': 6
brew install gmp && brew install snappy && brew install lz4 && brew install zstd: 7
dotnet test -c ${{ env.BUILD_CONFIG }} ENV_VAR src CUSTOM_PATH_FILE: 112
-f extensions CUSTOM_PATH_FILE \: 14
echo "GOPATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
polytracker CUSTOM_PATH_FILE \: 6
make clean; make -j4 allall: 6
make simple-test: 6
make unit_tests: 7
USES: richb-hanover/cargo: 8
kubectl FLAG do-sfo2-k8s-ever rollout restart deployment CUSTOM_PATH_DIR: 10
poetry install FLAG py39-dev: 7
poetry export -f requirements.txt FLAG=py39-dev FLAG FLAG requirements.txt: 6
cd agent: 9
nox -s pybamm-requires: 6
USES: ./.github/actions/pnpm-setup: 14
echo "::set-output name=message::$(git log FLAG=%B -n 1 ${{ github.event.after }} | tr '\n' ' ')": 6
echo "message=\"$(git log FLAG=%B -n 1 ${{ github.event.after }} | tr '\n' ' ')\"" >> ENV_VAR: 6
npm run license-check: 6
make server: 7
script CUSTOM_PATH_DIR check: 6
npm install -g azurite: 7
USES: marp-team/actions: 8
python build_tools CUSTOM_PATH_FILE: 8
mkdir -p .actions CUSTOM_PATH_DIR: 6
cd .actions CUSTOM_PATH_DIR: 6
USES: ./.actions/nose-report-action: 6
cd coverage: 6
TAG=$(git tag FLAG ENV_VAR): 6
echo "::set-output name=VALID_TAG::ENV_VAR": 6
sudo rm -r -f docs CUSTOM_PATH_DIR: 8
git clone FLAG "ENV_VAR" && cd `basename "ENV_VAR"`: 6
git remote set-url FLAG origin "ENV_VAR": 6
git fetch -p origin: 6
git for-each-ref FLAG 'delete %(refname)' refs CUSTOM_PATH_DIR | git update-ref FLAG: 6
pip install ${wheel_file}: 6
cd uac: 25
Invoke-WebRequest -Uri "URL -OutFile "libogg.zip": 6
Expand-Archive -Path libogg.zip -DestinationPath . CUSTOM_PATH_DIR: 6
Rename-Item . CUSTOM_PATH_DIR libogg: 6
Invoke-WebRequest -Uri "URL -OutFile "libvorbis.zip": 7
Expand-Archive -Path libvorbis.zip -DestinationPath . CUSTOM_PATH_DIR: 7
Rename-Item . CUSTOM_PATH_DIR libvorbis: 7
Invoke-WebRequest -Uri "URL -OutFile "GLEW.zip": 6
Expand-Archive -Path GLEW.zip -DestinationPath . CUSTOM_PATH_DIR: 6
Rename-Item . CUSTOM_PATH_DIR glew: 6
Invoke-WebRequest -Uri "URL -OutFile "SDL2.zip": 6
Expand-Archive -Path SDL2.zip -DestinationPath . CUSTOM_PATH_DIR: 6
move . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 8
npm install FLAG verbose: 8
tar -zcvf ENV_VAR lib include bin: 11
export TENSORRT_ROOT_DIR= CUSTOM_PATH_DIR: 6
export CUDNN_ROOT_DIR= CUSTOM_PATH_DIR: 6
USES: ianbelcher/eks-kubectl-action: 8
kubectl apply -f ENV_VAR CUSTOM_PATH_FILE: 9
python util CUSTOM_PATH_FILE: 6
cat libnetcdf.settings: 17
cd ${{github.workspace }} CUSTOM_PATH_DIR: 15
kustomize build . | kubectl apply -f -: 17
kustomize edit set image app=ghcr.io CUSTOM_PATH_DIR github.event.release.tag_name }}: 10
aws s3 cp s3: CUSTOM_PATH_DIR needs.compute-metadata.outputs.smp-version }} CUSTOM_PATH_DIR ${{ runner.temp }} CUSTOM_PATH_DIR: 9
go test -race -cover -coverprofile=preset-cover.txt -coverpkg=. CUSTOM_PATH_DIR -v . CUSTOM_PATH_DIR: 17
cat preset-cover.txt server-cover.txt > coverage.txt: 18
zip -r ENV_VAR.zip ENV_VAR: 8
pytest tests CUSTOM_PATH_FILE : 7
pip uninstall django-spirit -y: 6
pip install FLAG Django==${{ matrix.django }}: 6
python . CUSTOM_PATH_FILE startproject project: 6
export PYTHONWARNINGS="default": 6
sudo apt-get install -yq libpq-dev: 6
date -u "+::set-output name=date::%FT%T": 8
cmake FLAG build FLAG pytest: 7
set +e; source CUSTOM_PATH_FILE; set -e: 12
backport-assistant backport -automerge: 8
USES: ./.github/actions/setup-cached-python: 8
ls -lh wheelhouse: 6
echo "CLOUDFLARE_ACCOUNT_ID=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" >> ENV_VAR: 7
echo "CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}" >> ENV_VAR: 7
USES: ./.github/actions/last-workflow-status: 8
make docker-image: 6
echo "======================================================================================================================": 6
brew install upx: 8
chmod a+w -R .: 12
conda activate build: 7
echo Docker Hub Description Skipped: 10
copy "${{ env.Qt6_DIR }} CUSTOM_PATH_FILE" upload: 7
copy "${{ env.Qt6_DIR }} CUSTOM_PATH_FILE" upload CUSTOM_PATH_DIR: 7
helm dependency update charts CUSTOM_PATH_DIR: 6
md unity\general\Bin: 6
cd unity\general\vs2013: 6
nuget restore Puerts.sln: 6
nuget install NUnit.Runners -Version 3.2.0 -OutputDirectory testrunner -ExcludeVersion: 6
msbuild CUSTOM_PATH_DIR Puerts.sln: 6
USES: ros-tooling/action-cloudwatch-metrics: 18
CFLAGS="ENV_VAR" . CUSTOM_PATH_DIR: 10
cd product-mini CUSTOM_PATH_DIR: 33
npm i -g npm@^9.5.0 FLAG=URL: 13
 CUSTOM_PATH_DIR config FLAG user.email actions: 6
 CUSTOM_PATH_DIR config FLAG user.name 'GitHub Actions Release Tagger': 6
dotnet build FLAG Release FLAG . CUSTOM_PATH_DIR: 10
echo "SHA=$(cat CUSTOM_PATH_DIR >> ENV_VAR: 13
call "%dir%..\Dependencies\cpython\PCbuild\amd64\python.exe" -m setup bdist_wheel FLAG win_amd64 FLAG D: CUSTOM_PATH_DIR: 6
sudo tar -C ${{ github.workspace }} CUSTOM_PATH_DIR -cvzf ${{ github.workspace }} CUSTOM_PATH_FILE docker-compose.log data lego: 13
mkdir target: 7
tar -xzf premake.tar.gz: 6
python -m pip install vcstool -q: 6
set PATH=%PATH%;%GITHUB_WORKSPACE%\vcpkg\installed\x64-windows-release\bin: 6
vcs import FLAG "${{ github.workspace }} CUSTOM_PATH_FILE" src/: 6
if %ERRORLEVEL% GEQ 1 exit 1: 15
cd fbgemm_gpu: 7
cat release-notes.md: 6
e2e-network CUSTOM_PATH_FILE: 8
cat > example_single_file.cpp <<'EOF': 14
#define IMGUI_IMPLEMENTATION: 14
#include "misc CUSTOM_PATH_FILE": 14
#include "examples CUSTOM_PATH_FILE": 14
"%MSBUILD_PATH%\MSBuild.exe" examples CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 21
g++ -I. -std=c++11 -Wall -Wformat -o example_single_file example_single_file.cpp: 8
emcc FLAG: 6
cd duckdb-wasm: 6
go mod edit -modfile=go.mod -require=github.com CUSTOM_PATH_DIR: 33
go mod edit -modfile=go.mod -replace=github.com CUSTOM_PATH_DIR github.workspace }} CUSTOM_PATH_DIR: 28
go mod tidy -modfile=go.mod: 28
sed -i.bak ' CUSTOM_PATH_DIR ignore CUSTOM_PATH_DIR asm.go: 6
"ghcr.io CUSTOM_PATH_DIR: 8
docker exec pki certutil -K -d CUSTOM_PATH_FILE CUSTOM_PATH_DIR | tee output: 8
diff actual expected: 29
docker exec pki certutil -L -d CUSTOM_PATH_FILE CUSTOM_PATH_DIR | tee output: 10
sed -n 's CUSTOM_PATH_DIR Flags:\s*\(\S\+\)\s*$ CUSTOM_PATH_DIR output > actual: 6
echo "u,u,u" > expected: 6
cmake -DCMAKE_BUILD_TYPE=Debug .: 6
arduino-cli compile FLAG . FLAG all -b ${{ matrix.board }} "examples CUSTOM_PATH_FILE": 10
platformio ci "examples CUSTOM_PATH_FILE" -l '.' -b ${{ matrix.board }}: 10
USES: trymbill/cypress-slack-video-upload-action: 6
pip install -r ci CUSTOM_PATH_FILE: 7
echo "CHECKOUT_REF=${{ github.ref }}" >> ENV_VAR: 8
USES: DimensionDev/github-token-action: 8
git config FLAG url."URL git: 8
USES: guyarb/golang-test-annoations: 8
cd gui CUSTOM_PATH_DIR: 9
pytest -s -rxX -v test: 8
. CUSTOM_PATH_DIR thread: 7
. CUSTOM_PATH_DIR http: 7
sudo apt-get install -yq cppcheck asciidoc-base w3m libchromaprint-dev doxygen graphviz: 9
USES: ./.github/actions/setup-job: 6
pnpm test:ember: 9
dart test FLAG chrome: 6
git config FLAG protocol.file.allow always: 7
USES: ./actions/installer: 10
export RUNTIME_CODE_SHASUM=`scripts CUSTOM_PATH_FILE`: 6
pnpm tsc FLAG: 6
ctest FLAG "${{ github.workspace }} CUSTOM_PATH_DIR FLAG FLAG "Debug": 6
owner=$(echo '${{github.event.inputs.pr}}' | cut -d " CUSTOM_PATH_DIR -f 4): 9
repo=$(echo '${{github.event.inputs.pr}}' | cut -d " CUSTOM_PATH_DIR -f 5): 9
pr_number=$(echo '${{github.event.inputs.pr}}' | cut -d " CUSTOM_PATH_DIR -f 7): 9
mv CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 15
unset CONDARC  # Interferes with tests: 8
echo pg_rev=$(git rev-parse HEAD:vendor CUSTOM_PATH_DIR >> ENV_VAR: 8
crane tag 369495373322.dkr.ecr.eu-central-1.amazonaws.com CUSTOM_PATH_FILE-tag}} latest: 8
crane copy 369495373322.dkr.ecr.eu-central-1.amazonaws.com CUSTOM_PATH_FILE-tag}} 093970136003.dkr.ecr.eu-central-1.amazonaws.com CUSTOM_PATH_DIR: 8
crane tag neondatabase CUSTOM_PATH_FILE-tag}} latest: 8
. CUSTOM_PATH_FILE . CUSTOM_PATH_FILE ENV_VAR: 9
pip install -r utils CUSTOM_PATH_FILE: 9
. install CUSTOM_PATH_FILE: 7
. CUSTOM_PATH_DIR clean FLAG: 6
test ! -d . CUSTOM_PATH_DIR: 6
make workspace-init: 6
docker manifest push quay.io CUSTOM_PATH_DIR: 6
sudo apt-get install git -y: 6
cp target CUSTOM_PATH_FILE package/: 6
kubectl cluster-info FLAG kind-kind: 8
sudo apt-get -yq FLAG FLAG install lld: 6
ctest -VV -S ${{github.workspace}} CUSTOM_PATH_FILE: 12
brew install SDL2: 8
sed -i 's CUSTOM_PATH_DIR configs CUSTOM_PATH_DIR: 7
poetry run coverage report: 9
USES: sfackler/actions/rustup: 12
rm -rf package: 6
USES: ./.github/actions/setup_flutter: 6
invoke import-records -f data.json: 6
python3 -m pip install -Iv maturin==0.9.4: 12
maturin build FLAG FLAG off FLAG ${{ matrix.python-version }}-wheels: 11
sed -i 's CUSTOM_PATH_DIR "Cargo.toml": 6
cargo clean && cargo build: 14
ls -l CUSTOM_PATH_DIR || true: 6
cd %GITHUB_WORKSPACE%\rust_package\brainflow: 9
cmake FLAG . FLAG Release -j 2 FLAG 2: 6
python -m tox -e "pyENV_VAR CUSTOM_PATH_DIR: 6
yarn test __tests__ CUSTOM_PATH_FILE: 20
USES: dakanji/lock-threads: 14
export CFLAGS="-Wno-deprecated-declarations": 9
cat <<EOD: 6
python -m pip install cibuildwheel==2.3.1: 10
echo '${{ steps.srtool_build.outputs.json }}' | jq > ${{ matrix.chain }}-srtool-digest.json: 7
subwasm info ${{ steps.srtool_build.outputs.wasm }}: 8
subwasm info ${{ steps.srtool_build.outputs.wasm_compressed }}: 8
subwasm FLAG info ${{ steps.srtool_build.outputs.wasm }} > ${{ matrix.chain }}-info.json: 7
subwasm meta ${{ steps.srtool_build.outputs.wasm }}: 8
subwasm FLAG meta ${{ steps.srtool_build.outputs.wasm }} > ${{ matrix.chain }}-metadata.json: 7
r=$r$'\n': 6
USES: mugi111/tweet-trigger-release: 6
sed -i 's CUSTOM_PATH_DIR mmtk CUSTOM_PATH_FILE: 8
pip3 install -r requirements-presence.txt: 7
USES: ./.github/workflows/integration-test-config-latest-k8s: 21
tests CUSTOM_PATH_FILE collect_udev_logs_in_background: 13
export DEVICE_FILTER=$(lsblk|awk ' CUSTOM_PATH_DIR {print $1}'| head -1): 28
export LOG_DIR=" CUSTOM_PATH_DIR: 21
export CLUSTER_NAMESPACE="smoke-ns": 6
export OPERATOR_NAMESPACE="smoke-ns-system": 6
python3 -m pip install -r ${{ env.OPENVINO_REPO }} CUSTOM_PATH_FILE: 37
python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }} CUSTOM_PATH_FILE: 19
export PYTHONPATH=${{ env.OPENVINO_REPO }} CUSTOM_PATH_DIR env.LAYER_TESTS_INSTALL_DIR }}:ENV_VAR: 7
USES: philschmid/philschmid-ec2-github-runner: 16
python3 -m pip install FLAG -r scripts CUSTOM_PATH_FILE: 9
C:\msys64\usr\bin\wget.exe URL: 7
FLAG buildres CUSTOM_PATH_FILE \: 12
FLAG buildres CUSTOM_PATH_DIR \: 8
FLAG JabRef \: 12
FLAG FLAG: 7
USES: ./.github/workflows/setup: 12
ls -l ${{ github.workspace }} CUSTOM_PATH_DIR: 9
ls .: 6
export PYTHONIOENCODING=utf8: 6
USES: microsoft/store-submission: 6
echo "::set-output name=result::${body}": 6
sudo apt-get update && sudo apt-get install -y curl: 7
sudo curl -fsSL URL | sudo CUSTOM_PATH_DIR -: 6
sudo npm install -g yarn: 7
pip install uvloop: 7
covalent purge: 6
covalent start: 6
covalent stop: 6
cd build.paho: 10
cp -rf . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 6
USES: ./.github/actions/setup-localstack: 6
USES: ./.github/actions/check-diskspace: 10
USES: ./.github/actions/teardown-localstack: 8
meson test -C build -v: 9
poetry install -E gateway -E solver -E aws -E azure -E gcp -E ibm: 6
poetry run skyplane config set usage_stats false: 12
poetry run skyplane config set gcp_service_account_name ${{ env.STRATEGY_UUID }}: 9
make package CUSTOM_PATH_DIR V=s: 7
cd .tests/: 51
wget -O "ENV_VAR CUSTOM_PATH_DIR "ENV_VAR": 13
tar -xf "ENV_VAR CUSTOM_PATH_DIR -C "ENV_VAR CUSTOM_PATH_DIR: 11
& curl -L "$env:BOOT_JDK_URL" -o "ENV_VAR CUSTOM_PATH_DIR: 8
New-Item -Force -ItemType directory -Path "ENV_VAR\cygwin": 8
& curl -L "URL -o "ENV_VAR CUSTOM_PATH_FILE": 8
ls -R -l: 6
git fetch origin ENV_VAR FLAG 1: 6
cd OpenBLAS: 27
git reset FLAG d909f9f3d4fc4ccff36d69f178558df154ba1002: 6
dir src CUSTOM_PATH_DIR: 9
npm run lerna:publish: 6
echo "PG_DATABASE_URL=postgres: CUSTOM_PATH_DIR >> ENV_VAR: 6
cargo +stable clippy FLAG FLAG examples CUSTOM_PATH_FILE: 16
make generate_local: 6
USES: hirnidrin/free-disk-space: 7
junit2html _build CUSTOM_PATH_FILE junit CUSTOM_PATH_FILE: 7
cp CUSTOM_PATH_FILE ENV_VAR CUSTOM_PATH_DIR: 13
tar xvf result.tar usr CUSTOM_PATH_DIR: 9
yarn codecov: 8
yarn extract: 6
python -W ignore -m pip install FLAG pip: 7
USES: ./.github/actions/quick_cmake: 47
cd mobile && . CUSTOM_PATH_FILE: 14
ctest FLAG -j 4: 7
. CUSTOM_PATH_DIR generateChangelog build publish curseforge github publishModrinth FLAG FLAG -PlastTag="${{ steps.previous-tag.outputs.tag }}" -PcurrentTag="${{ steps.current-tag.outputs.tag }}": 8
cd tools && bash .ci CUSTOM_PATH_FILE ${{ github.base_ref }}: 7
USES: srt32/git-actions: 6
npx nyc FLAG=lcov npm run test-integration: 13
cp . CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 8
USES: snyk/release-notes-preview: 9
docker run -i -v ENV_VAR CUSTOM_PATH_FILE/ FLAG FLAG lego FLAG acme goacme CUSTOM_PATH_DIR -s URL -a FLAG ${{ matrix.keylength }} FLAG "lego" -d lego.acme revoke: 10
flutter format FLAG lib: 7
docker build -t consul-envoy:target-version FLAG CONSUL_IMAGE=${{ env.CONSUL_LATEST_IMAGE_NAME }}:local FLAG ENVOY_VERSION=${{ env.ENVOY_VERSION }} -f . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 6
cargo check FLAG FLAG FLAG FLAG=test: 44
cd proxysql/: 6
curl -L URL -o go1.16.5.linux-arm64.tar.gz: 6
sudo rm -rf CUSTOM_PATH_DIR && sudo tar -C CUSTOM_PATH_DIR -xzf go1.16.5.linux-arm64.tar.gz: 6
sudo -E MAKEISO_ARGS="FLAG cOS-Seed-green-${{ env.COS_VERSION }}-arm64" MANIFEST=manifest.yaml.remote make local-iso: 6
sudo -E YQ= CUSTOM_PATH_DIR MAKEISO_ARGS="FLAG cOS-Seed-green-${{ env.COS_VERSION }}-arm64" make iso: 6
brew search hello: 6
cp "C: CUSTOM_PATH_FILE" .: 6
echo "${{ env.IMPORT_TEXT }} '${{ env.NPM_MODULE_NAME }}'" > index.js: 8
cat dist CUSTOM_PATH_FILE: 6
sudo apt-get install libudev-dev: 12
python3 -m pip install -r requirements_test.txt: 9
cd onnx: 7
docker tag cvat CUSTOM_PATH_DIR cvat CUSTOM_PATH_DIR: 11
echo "Failed to restore Python virtual environment from cache": 23
git clean -fdx wasmtime build: 6
cd _dist: 6
echo "${{needs.job1.outputs.tag_version}}": 6
openssl sha256 dist CUSTOM_PATH_DIR: 6
python FLAG 2>&1 | grep 'Python 3\.8': 8
python -m pip install -r src CUSTOM_PATH_FILE: 6
yarn run setup: 7
USES: ./.github/actions/prepare-install: 16
USES: ./.github/actions/prepare-build: 35
USES: ./.github/actions/buildContainer: 10
USES: mackerelio/mackerel-create-release-pull-request-action: 8
cd detection-rules: 9
echo "PACKAGE=npm" >> ENV_VAR: 6
xmlstarlet ed -L -N N="URL -u " CUSTOM_PATH_FILE" -v ${{ github.event.inputs.newMasterVersion }} examples CUSTOM_PATH_FILE: 6
node main.js &: 11
gitactions CUSTOM_PATH_FILE: 8
sed -i'.old' -e "s CUSTOM_PATH_DIR strict[\"|'] CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 6
export MOODLE_DOCKER_WWWROOT=ENV_VAR CUSTOM_PATH_DIR: 6
export VERSION=$(echo ENV_VAR | sed 's:refs CUSTOM_PATH_DIR: 10
USES: ./.github/actions/setup-tests: 7
pytest FLAG pynetdicom FLAG=pynetdicom CUSTOM_PATH_DIR: 9
echo "prev_tag=$previousTag" >> ENV_VAR: 6
echo "curr_tag=$(git tag FLAG=-creatordate | grep "^v" | sed -n 1p)" >> ENV_VAR: 6
echo "sha_short=$(git rev-parse FLAG=8 HEAD)"     >> ENV_VAR: 6
echo "release_date=$(date +'%Y%m%d')"     >> ENV_VAR: 6
echo "release_time=$(date +'%H%M%S')"   >> ENV_VAR: 6
echo "release_time_clock=$(date +'%H:%M:%S')"    >> ENV_VAR: 6
set -exuo pipefail: 10
sudo apt-get update; sudo apt-get install zsh: 8
make run_tests: 17
. CUSTOM_PATH_DIR "~[quality]": 13
sudo apt install -y mpich libmpich-dev: 9
chmod -R 755 ${{ env.NEKRS_HOME }}: 8
USES: ./.github/util/initialize: 22
node scripts CUSTOM_PATH_FILE FLAG='${{ env.BUILD_OVERRIDES }}': 8
ctest -C ${{matrix.mode}} -j 1 `nproc` -V: 6
docker build . -t ghcr.io CUSTOM_PATH_DIR: 6
echo "SRS_VERSION=${{ needs.envs.outputs.SRS_VERSION }}" >> ENV_VAR: 8
mv CUSTOM_PATH_DIR ENV_VAR &&: 8
yarn test __tests__ CUSTOM_PATH_FILE FLAG FLAG .coverage CUSTOM_PATH_DIR github.job }}: 20
npm cache clean FLAG && npm run init: 6
USES: nyaa8/package-version: 6
echo >> system-certs.primary: 9
echo >> system-certs.secondary: 9
choco install FLAG cygwin: 6
bash -x . CUSTOM_PATH_FILE release . CUSTOM_PATH_DIR: 17
choco install yq FLAG 4.15.1 -y: 7
npm i -g node-gyp: 7
node-gyp install FLAG="C:\Users\runneradmin\.electron-gyp" FLAG=$(jq -r .devDependencies.electron package.json) FLAG="URL: 7
npm ci FLAG_fips='': 8
rename 's CUSTOM_PATH_DIR . CUSTOM_PATH_DIR -r .version package.json) CUSTOM_PATH_DIR: 6
for i in `ls . CUSTOM_PATH_DIR -r .version package.json) CUSTOM_PATH_DIR ; do echo "- [$i](URL -r .version package.json) CUSTOM_PATH_DIR ; done >> . CUSTOM_PATH_FILE: 6
docker exec $inclavare_dev bash -c "cat >Dockerfile <<-EOF: 6
cd CUSTOM_PATH_DIR matrix.tag }};: 8
docker save -o skeleton-enclave.tar skeleton-enclave": 6
docker exec $inclavare_test bash -c "cd CUSTOM_PATH_DIR matrix.tag }};: 6
docker load -i skeleton-enclave.tar;: 6
rm -f skeleton-enclave.tar": 6
docker exec $inclavare_test bash -c "docker run -i FLAG FLAG=rune -e ENCLAVE_TYPE=intelSgx -e ENCLAVE_RUNTIME_PATH= CUSTOM_PATH_FILE -e ENCLAVE_RUNTIME_ARGS=debug -e ENCLAVE_RUNTIME_LOGLEVEL="info" skeleton-enclave": 6
docker exec $inclavare_test bash -c "mkdir rootfs;: 6
docker create FLAG skeleton-enclave skeleton-enclave;: 6
docker export skeleton-enclave | tar -C rootfs -xvf -;: 6
echo "VISP_INPUT_IMAGE_PATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 9
USES: github/combine-prs: 7
git config FLAG user.name "github-actions-bot": 6
C:\msys64\usr\bin\wget.exe -nv URL: 15
docker pull mcr.microsoft.com CUSTOM_PATH_DIR: 6
curl URL | sudo tee CUSTOM_PATH_FILE: 6
USES: jiro4989/build-deb-action: 7
. CUSTOM_PATH_DIR FLAG && make -j2: 7
git config FLAG user.email "no-reply": 7
if (-not $?) {throw "Failed"}: 18
$os_tag=$(Get-Content -Path .\build.json | ConvertFrom-Json).'os-windows'.'${{ matrix.os }}': 6
$tags_array=$( "${{ steps.meta.outputs.tags }}".Split("`r`n") ): 6
$digest=$(docker inspect $tags_array[0] FLAG "{{ index .RepoDigests 0}}").Split('@')[-1]: 6
echo $digest: 6
dotnet pack FLAG: 7
ls target CUSTOM_PATH_DIR: 10
USES: docker://ghcr.io/nfrechette/toolchain-amd64-xenial:v1: 34
USES: docker://ghcr.io/nfrechette/toolchain-amd64-bionic:v1: 34
USES: docker://ghcr.io/nfrechette/toolchain-amd64-focal:v1: 37
python -m pip install -r doc CUSTOM_PATH_FILE: 8
cp . CUSTOM_PATH_DIR matrix.version }} CUSTOM_PATH_DIR matrix.format }} . CUSTOM_PATH_DIR matrix.format }}: 9
cp . CUSTOM_PATH_DIR matrix.version }} CUSTOM_PATH_FILE . CUSTOM_PATH_DIR matrix.version }} CUSTOM_PATH_FILE: 23
dotnet build . CUSTOM_PATH_DIR matrix.version }} CUSTOM_PATH_FILE: 23
gh FLAG: 9
if (ENV_VAR -ne 0) { throw "Exit code is ENV_VAR" }: 7
echo "::set-output name=tag_name::ENV_VAR": 7
if [[ -n ENV_VAR ]]; then echo "::set-output name=has_credentials::true"; fi: 8
ln -s ~ CUSTOM_PATH_DIR bin: 6
echo "⚓️ 📤 Checking out candi CUSTOM_PATH_FILE from ENV_VAR...": 6
git checkout FLAG "ENV_VAR" -- candi CUSTOM_PATH_FILE: 6
echo "⚓️ 🏎 Running CVE tests on ENV_VAR...": 6
rm bin: 6
pytest -s -v -rxXs FLAG=0 . CUSTOM_PATH_DIR: 6
echo "NVMRC=$(cat . CUSTOM_PATH_DIR >> ENV_VAR: 6
for file in build CUSTOM_PATH_FILE*; do gpg FLAG -ab FLAG $file; done || true: 6
cargo install bpf-linker: 6
USES: runforesight/foresight-workflow-kit-action: 7
git submodule status: 8
git config FLAG user.email MLCompetitionHub: 6
git config FLAG user.name MLCompetitionHubGithubAction: 6
sudo mv premake5 CUSTOM_PATH_DIR: 10
USES: apache/pulsar-test-infra/setup-maven: 22
mvn clean install -DskipTests -pl pulsar-broker -am: 8
make runTest: 8
cp target CUSTOM_PATH_DIR ENV_VAR: 18
rustup install ${{ matrix.rust }} FLAG minimal: 7
rustup component add FLAG ${{ matrix.rust }} rustfmt clippy: 7
cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}" -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DDISABLE_VCPKG=ON -DOPENSSL_ROOT_DIR=ENV_VAR: 6
python -c "import torch; print('PyTorch:', torch.__version__)": 8
make install-req: 7
docker push ENV_VAR CUSTOM_PATH_FILE:ENV_VAR: 23
npx playwright install-deps chromium: 7
export CCACHE_SLOPPINESS=clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros: 11
export CCACHE_FILECLONE=true: 11
export CCACHE_DEPEND=true: 11
export CCACHE_INODECACHE=true: 11
. CUSTOM_PATH_DIR build examples CUSTOM_PATH_DIR -debug: 19
twine upload ${{ github.workspace }} CUSTOM_PATH_FILE: 6
cd repo CUSTOM_PATH_DIR: 7
dotnet msbuild src CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR -m:1: 10
export COVERAGE_RCFILE=`pwd` CUSTOM_PATH_DIR: 7
cd zip-check CUSTOM_PATH_DIR github.event.inputs.version_number }} CUSTOM_PATH_DIR: 7
cd current: 8
echo "inclavare_test=$inclavare_test" >> ENV_VAR: 6
git add docs/: 6
build-scripts CUSTOM_PATH_DIR: 13
USES: ./tools/pipeline-linter: 6
 CUSTOM_PATH_DIR -e "$(curl -fsSL URL: 6
docker push registry.cn-shenzhen.aliyuncs.com CUSTOM_PATH_DIR: 10
sudo apt-get update -q && sudo apt-get install -qy ocl-icd-opencl-dev libpocl2: 7
pip install FLAG "server CUSTOM_PATH_DIR: 8
git add . && git commit -m "COMMIT_MSG" || echo "No changes.": 8
PROJECT_PATH=ENV_VAR: 8
echo "ENTRYPOINT [ \"dotnet\",\"ENV_VAR\" ]" >> Dockerfile: 8
npm install conventional-changelog-conventionalcommits: 9
yarn turbo run build: 6
kubectl apply -f .ci CUSTOM_PATH_FILE: 13
pnpm run type-check: 7
sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache libmpc-dev: 6
wget FLAG URL && tar -xvf xpdf-tools-linux-4.04.tar.gz && sudo cp xpdf-tools-linux-4.04 CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
USES: ./.github/actions/install-rust-toolchain: 6
USES: ./.github/actions/setup-base: 6
echo "version=$(. CUSTOM_PATH_FILE long)" >> ENV_VAR: 7
USES: ./.github/actions/setup-cli: 10
echo "::add-mask::${{ secrets.STADIA_MAPS_API_KEY }}": 9
npm i react react-dom react-test-renderer  CUSTOM_PATH_DIR  CUSTOM_PATH_DIR  CUSTOM_PATH_DIR: 6
echo "##[set-output name=branch;]ENV_VAR": 13
release CUSTOM_PATH_FILE ${{ secrets.ENCRYPT_KEY }}: 10
release CUSTOM_PATH_FILE: 15
docker build . FLAG ENV_VAR: 6
USES: ./.github/actions/set-build-image-var: 7
cd tests && make clean || true: 6
echo -e "::group::${{ env.stepName }}": 27
rm -f CUSTOM_PATH_DIR || :: 10
mkdir llvm: 10
echo LLVM_HOME=%GITHUB_WORKSPACE%\llvm>> %GITHUB_ENV%: 8
echo ISPC_HOME=%GITHUB_WORKSPACE%>> %GITHUB_ENV%: 8
cd alloy_results* && type alloy_build.log: 6
cd llvm: 16
7z.exe a -t7z %TAR_BASE_NAME%.tar.7z %TAR_BASE_NAME%.tar: 6
USES: ./terraform-version: 23
USES: lowlighter/metrics: 136
USES: ./.github/actions/node/oldest: 49
yarn test:appsec:plugins:ci: 17
npm run test:esm FLAG=packages CUSTOM_PATH_DIR: 6
python otherfile CUSTOM_PATH_FILE: 6
echo "TAG=${{ github.event.inputs.ref == '' && needs.build_auto_setup_job.outputs.build_tag || github.event.inputs.ref }}" >> ENV_VAR: 8
echo "VERSION_PRE_RELEASE=${{ github.event.inputs.ref == '' && needs.build_auto_setup_job.outputs.build_number || 'OFF' }}" >> ENV_VAR: 8
CI_TAG=ENV_VAR ci CUSTOM_PATH_FILE: 6
mkdir -p docs: 6
cat $(find ../ -name test-suite.log) || true: 8
npm run link FLAG: 9
mv artifacts CUSTOM_PATH_FILE dist/: 6
export TEST_OUTPUT_FILE=ENV_VAR CUSTOM_PATH_FILE: 7
echo "TEST_OUTPUT_FILE=ENV_VAR" >> ENV_VAR: 7
ls -l ${{ env.ARTIFACT_DIR }}: 6
USES: Noelware/docker-manifest-action: 18
yarn up FLAG graphql@${{ matrix.graphql-version }}: 8
sudo apt-get install webp: 7
cd target CUSTOM_PATH_DIR matrix.platform.target }} CUSTOM_PATH_DIR: 6
chihaya FLAG=. CUSTOM_PATH_FILE FLAG &: 8
chihaya e2e FLAG: 8
flake8 . CUSTOM_PATH_DIR FLAG FLAG FLAG=10 FLAG=127 FLAG: 6
echo "VERSION=`cat ${{github.workspace}} CUSTOM_PATH_DIR >> ENV_VAR: 19
echo ${{ env.REF_TAG }}: 10
docker push -a ${{ env.IMAGE_NAME }}: 7
cmake FLAG build CUSTOM_PATH_DIR FLAG FLAG: 6
corepack yarn: 8
cd "${{ github.workspace }} CUSTOM_PATH_DIR: 12
echo "GOPATH=$(go env GOPATH):ENV_VAR" >> ENV_VAR: 6
echo Disk usage: 6
echo Memory: 6
USES: leroy-merlin-br/action-s3-cache: 11
set -v: 26
du -sh .: 10
yarn lint:hbs: 6
git config FLAG FLAG: 6
npm exec electron-builder -- FLAG always FLAG FLAG FLAG: 6
USES: ./.github/actions/setup-solana/: 13
USES: ./.github/actions/upload-heapdumps: 15
USES: ./.github/actions/archive-surefire-reports: 16
USES: ./.github/actions/integration-test-setup: 13
USES: ./.github/actions/upload-flaky-tests: 11
apt-get install build-essential -y: 8
USES: ./actions/run-many: 6
TAG1=$(gcloud compute firewall-rules list FLAG="name~^gke-${{ env.clusterName1 }}-[0-9a-z]*-all$" FLAG="value(name)"): 6
TAG2=$(gcloud compute firewall-rules list FLAG="name~^gke-${{ env.clusterName2 }}-[0-9a-z]*-all$" FLAG="value(name)"): 6
gcloud compute firewall-rules describe ENV_VAR1: 6
gcloud compute firewall-rules describe ENV_VAR2: 6
gcloud compute firewall-rules create ${{ env.firewallRuleName }} FLAG tcp,udp,icmp,sctp,esp,ah FLAG=999 FLAG=10.0.0.0 CUSTOM_PATH_DIR FLAG=ENV_VAR1 CUSTOM_PATH_DIR: 6
gcloud compute firewall-rules describe ${{ env.firewallRuleName }}: 6
aws s3 cp . CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR FLAG: 6
sudo cp CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
python -u ci_scripts CUSTOM_PATH_FILE: 7
echo "RELEASE_TAG=$(echo ENV_VAR:10})" >> ENV_VAR: 6
rm -rf default.etcd: 10
USES: ./.github/actions/python_cache/: 8
python -m build -w: 6
npm FLAG . CUSTOM_PATH_DIR ci . CUSTOM_PATH_DIR: 8
USES: ./.github/actions/docker-build-push: 15
wget -q -O- URL matrix.mold_version }} CUSTOM_PATH_DIR matrix.mold_version }}-x86_64-linux.tar.gz | tar -xz: 10
mv mold-${{ matrix.mold_version }}-x86_64-linux CUSTOM_PATH_DIR  CUSTOM_PATH_DIR: 10
echo '::set-output name=version::${{steps.last_release.outputs.tag}}-${{steps.short-sha.outputs.sha}}': 7
echo "VERSION=${{ github.event.inputs.version }}" >> ENV_VAR: 7
docker push gcr.io CUSTOM_PATH_DIR: 14
psql -h ENV_VAR -p ENV_VAR -U postgres -d test -f tests CUSTOM_PATH_FILE: 6
npm run test:desktop: 7
npm run build:desktop -- FLAG=never: 6
npm run test:e2e:desktop: 6
USES: CycloneDX/gh-node-module-generatebom: 16
download_url="URL: 8
source src CUSTOM_PATH_FILE: 85
pip install -e ".[tensorflow-cpu,tests]" FLAG off FLAG: 6
sed -i "s CUSTOM_PATH_FILE\" CUSTOM_PATH_DIR .env: 6
shellcheck -s bash -x scripts CUSTOM_PATH_FILE: 8
USES: ./.github/actions/set-up-android-bazel-build-environment: 6
git clone URL git-secret: 6
cd git-secret && make build: 6
PREFIX="ENV_VAR CUSTOM_PATH_DIR make install: 6
gpg FLAG . CUSTOM_PATH_FILE: 6
git secret reveal: 7
chmod ugo+x bin CUSTOM_PATH_DIR: 6
sudo ln -s $(pwd) CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 12
PACKAGES="python39 python39-pip": 30
choco install ENV_VAR FLAG cygwin: 74
C:\\tools\\cygwin\\bin\\bash -l -x -c 'python3.8 -m pip install tox': 32
C:\\tools\\cygwin\\bin\\bash -l -x -c 'cd $(cygpath -u "ENV_VAR") && PREFIX="${{ env.SAGE_LOCAL }}" tox -e local-cygwin-choco-${{ matrix.pkgs }} -- ENV_VAR': 32
mkdir -p "artifacts CUSTOM_PATH_DIR for a in "${{ env.SAGE_LOCAL }}" CUSTOM_PATH_DIR do if [ -d "$a" ]; then tar -c FLAG -f "artifacts CUSTOM_PATH_DIR "$a").tar" "$a"; fi; done; cp -r logs CUSTOM_PATH_DIR  "artifacts CUSTOM_PATH_DIR: 30
C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "ENV_VAR") && rm -f "${{ env.SAGE_LOCAL }}" CUSTOM_PATH_DIR tar -cf CUSTOM_PATH_DIR env.STAGE }}.tar FLAG "${{ env.SAGE_LOCAL }}"': 6
C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "ENV_VAR") && rm -f "${{ env.SAGE_LOCAL }}" CUSTOM_PATH_DIR tar -cf CUSTOM_PATH_DIR env.STAGE }}.tar FLAG= CUSTOM_PATH_FILE "${{ env.SAGE_LOCAL }}"': 26
cp FLAG .github CUSTOM_PATH_FILE CUSTOM_PATH_DIR && CUSTOM_PATH_FILE: 6
echo "FOUNDRY_SOLC_VERSION=ENV_VAR" >> ENV_VAR: 6
echo "::set-output name=path::ENV_VAR CUSTOM_PATH_DIR: 6
yarn _requires_python: 8
yarn install FLAG FLAG .ycache: 8
yarn install-ext: 8
yarn build-main: 9
yarn build-e2e: 9
echo Branch ${{ github.ref }} ${{ github.head_ref }}: 6
echo "VERSION=$(echo ${{ github.event.release.tag_name }} | cut -c 2-)" >> ENV_VAR: 6
rm -f "ENV_VAR CUSTOM_PATH_DIR: 6
git submodule status > git_submodule_status.txt: 9
[ -f duckdb.patch ] && cd submodules CUSTOM_PATH_DIR && git apply .. CUSTOM_PATH_FILE || echo "No patching needed": 7
yarn workspace  CUSTOM_PATH_DIR build:release: 6
USES: ./.github/actions/devcontainer_run_command: 20
bundle exec rake bundle:clean: 6
bundle exec rake bundle:install: 6
semgrep FLAG FLAG .ci CUSTOM_PATH_FILE: 6
semgrep ENV_VAR FLAG .ci CUSTOM_PATH_FILE: 6
. cmake CUSTOM_PATH_FILE: 17
mkdir exitstatus: 7
cp shared CUSTOM_PATH_FILE shared CUSTOM_PATH_FILE: 12
npm install -g npm@${{ matrix.npm }}: 7
pytest -vv tests CUSTOM_PATH_DIR: 10
cargo hack FLAG FLAG: 9
USES: salesforcecli/github-workflows/.github/actions/yarnInstallWithRetries: 9
npm run test:browser -w= CUSTOM_PATH_DIR: 10
cp -af ENV_VAR CUSTOM_PATH_FILE sysroot CUSTOM_PATH_DIR: 9
gsed -E s CUSTOM_PATH_DIR < ENV_VAR CUSTOM_PATH_FILE > sysroot CUSTOM_PATH_FILE: 7
mkdir -p stage CUSTOM_PATH_DIR: 15
make -j$(nproc) install DESTDIR=${{ env.DESTDIR }}: 6
ctest -C Release -VV: 6
cd testing-framework CUSTOM_PATH_DIR && make build: 7
aws secretsmanager get-secret-value FLAG us-west-2 FLAG "ENV_VAR" | jq -r ".SecretString" > pkg_sign_private.key: 8
md5sum pkg_sign_private.key: 8
gpg FLAG pkg_sign_private.key: 8
shred -fuvz pkg_sign_private.key: 8
gpg FLAG FLAG aws-otel-collector grep "^fpr" | sed -n 's CUSTOM_PATH_DIR | xargs gpg FLAG FLAG FLAG: 8
export TF_VAR_aoc_version=${{ needs.e2etest-preparation.outputs.version }}: 6
cd testing-framework CUSTOM_PATH_DIR: 11
cd demo: 6
source tools CUSTOM_PATH_DIR: 15
eval $(perl -I ~ CUSTOM_PATH_DIR -Mlocal::lib): 9
python3 -m pip install -U pip setuptools wheel: 9
python3 `which scons` test show_long_tests=yes verbose_tests=yes FLAG=time: 6
go install -v ENV_VAR . CUSTOM_PATH_DIR: 8
npm run setup:patch: 15
pip install *.whl: 7
.. CUSTOM_PATH_FILE && chmod u-w samples CUSTOM_PATH_FILE5: 8
sed -i "s CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_FILE: 11
( cd server; dart run bin CUSTOM_PATH_FILE ) &: 8
chmod u+x CUSTOM_PATH_DIR: 11
pnpm FLAG  CUSTOM_PATH_DIR run test: 9
docker network create FLAG=192.168.56.0 CUSTOM_PATH_DIR ursim_net: 6
npm run install-ci: 11
image=${{ matrix.distribution }}: 7
container_name="$(basename "${image}" | sed -E 's CUSTOM_PATH_DIR: 7
cd java: 11
sudo eatmydata apt-get remove FLAG -y aspnetcore-* dotnet-* libmono-* mono-* msbuild php-* php7* ghc-* zulu-*: 8
echo "::set-env name=GOPATH::ENV_VAR": 8
git clone FLAG FLAG ENV_VAR8S_VERSION URL ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
pushd ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 16
make WHAT="test CUSTOM_PATH_FILE vendor CUSTOM_PATH_FILE CUSTOM_PATH_DIR cmd CUSTOM_PATH_DIR: 6
export KUBECONFIG=ENV_VAR CUSTOM_PATH_FILE: 6
mkdir -p CUSTOM_PATH_DIR : 6
python -c 'import polars': 6
USES: Gustl22/flutter-action: 11
BUTTERFLY_VERSION_REGEX="version:\s(.+)\+(.+)": 6
[[ $(grep -E "ENV_VAR" app CUSTOM_PATH_FILE) =~ ENV_VAR ]]: 6
BUTTERFLY_VERSION="ENV_VAR[1]}": 6
echo "BUTTERFLY_VERSION=ENV_VAR" >> ENV_VAR: 8
BUTTERFLY_BUILD_NUMBER="ENV_VAR[2]}": 6
echo "BUTTERFLY_BUILD_NUMBER=ENV_VAR" >> ENV_VAR: 8
git config FLAG user.name "Linwood CI": 6
changes="${changes CUSTOM_PATH_DIR: 6
python -m pip uninstall -y scenedetect: 6
. CUSTOM_PATH_FILE image CUSTOM_PATH_DIR models CUSTOM_PATH_FILE: 12
echo "REF_TAG=latest" >> ENV_VAR: 9
echo "REF_TAG=develop" >> ENV_VAR: 6
docker push -a ns1labs CUSTOM_PATH_DIR: 18
chcp 65001: 8
. CUSTOM_PATH_DIR FLAG FLAG test CUSTOM_PATH_FILE             create -c . CUSTOM_PATH_FILE             -d . CUSTOM_PATH_DIR FLAG: 24
ajv validate -s test CUSTOM_PATH_FILE -d test CUSTOM_PATH_FILE: 108
. CUSTOM_PATH_DIR -v create -c . CUSTOM_PATH_FILE -d . CUSTOM_PATH_DIR: 36
docker build -f . CUSTOM_PATH_DIR -t testapp . CUSTOM_PATH_DIR: 48
docker tag testapp host.minikube.internal:5001 CUSTOM_PATH_DIR: 36
docker push host.minikube.internal:5001 CUSTOM_PATH_DIR: 36
echo 'Curling host.minikube.internal test app images from minikube': 36
minikube ssh "curl URL: 36
kubectl rollout status deployment CUSTOM_PATH_DIR FLAG=2m: 36
kubectl get po -o json: 36
kubectl get svc -o json: 36
kubectl get deploy -o json: 36
echo 'Starting minikube tunnel': 36
minikube tunnel  > CUSTOM_PATH_DIR 2>&1 & tunnelPID=$!: 36
SERVICEIP=$(kubectl get svc -o jsonpath={'.items[1].status.loadBalancer.ingress[0].ip'}): 36
echo "SERVICEIP: ENV_VAR": 36
echo 'Curling service IP': 36
curl -m 3 ENV_VAR:80: 33
kill $tunnelPID: 36
. CUSTOM_PATH_DIR -b main -v generate-workflow -d . CUSTOM_PATH_DIR -c someAksCluster -r someRegistry -g someResourceGroup FLAG someContainer FLAG helm FLAG .: 12
find .github CUSTOM_PATH_DIR -type f \( -iname \*.yaml -o -iname \*.yml \)             | xargs -I {} action-validator FLAG {}: 36
. CUSTOM_PATH_DIR FLAG FLAG test CUSTOM_PATH_FILE update -d . CUSTOM_PATH_DIR -a webapp_routing FLAG ingress-tls-cert-keyvault-uri=test.cert.keyvault.uri FLAG ingress-use-osm-mtls=true FLAG ingress-host=host1  : 36
. CUSTOM_PATH_DIR -v update -d . CUSTOM_PATH_DIR -a webapp_routing FLAG ingress-tls-cert-keyvault-uri=test.cert.keyvault.uri FLAG ingress-use-osm-mtls=true FLAG ingress-host=host1: 36
kubectl get po: 36
exit 6: 48
. CUSTOM_PATH_DIR FLAG FLAG test CUSTOM_PATH_FILE           create -c . CUSTOM_PATH_FILE           -d . CUSTOM_PATH_DIR FLAG: 12
. CUSTOM_PATH_DIR -v generate-workflow -b main -d . CUSTOM_PATH_DIR -c someAksCluster -r someRegistry -g someResourceGroup FLAG someContainer FLAG kustomize FLAG .: 12
sudo echo "127.0.0.1 docker.local" | sudo tee -a CUSTOM_PATH_DIR: 12
. CUSTOM_PATH_DIR -v generate-workflow -d . CUSTOM_PATH_DIR -b main -c someAksCluster -r localhost -g someResourceGroup FLAG testapp FLAG manifests FLAG .: 12
echo -n verifying images:: 12
tar -czf ${{ github.job }}.tar.gz test CUSTOM_PATH_DIR: 6
make -C documentation CUSTOM_PATH_DIR: 6
mypy src CUSTOM_PATH_DIR: 7
USES: fernandopasik/actions/setup-node: 14
python -c 'import math; print(math.factorial(5))': 16
git clean -ffdx && git reset FLAG HEAD: 6
export CLUSTER_NAMESPACE="upgrade": 6
export OPERATOR_NAMESPACE="upgrade-system": 6
dotnet test . CUSTOM_PATH_FILE -c "${{ env.Configuration }}": 6
New-Item -ItemType Directory -Path ${env:PublishFilePath} -Force > $null: 15
npm install -g autocannon: 22
php scripts CUSTOM_PATH_FILE clang: 20
USES: actions-hub/kubectl: 8
dotnet build UndertaleModCli FLAG: 6
cp . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR matrix.os }}/: 6
sudo apt update && sudo apt install -y libaec-dev zlib1g-dev automake autoconf libcurl4-openssl-dev libjpeg-dev wget curl bzip2 m4 flex bison cmake libzip-dev: 10
make install -j: 13
echo "CFLAGS=-IENV_VAR CUSTOM_PATH_DIR matrix.hdf5 }} CUSTOM_PATH_DIR >> ENV_VAR: 8
echo "LDFLAGS=-LENV_VAR CUSTOM_PATH_DIR matrix.hdf5 }} CUSTOM_PATH_DIR >> ENV_VAR: 8
echo "LD_LIBRARY_PATH=ENV_VAR CUSTOM_PATH_DIR matrix.hdf5 }} CUSTOM_PATH_DIR >> ENV_VAR: 15
ls ENV_VAR CUSTOM_PATH_DIR && ls ENV_VAR CUSTOM_PATH_DIR matrix.hdf5 }} && ls ENV_VAR CUSTOM_PATH_DIR matrix.hdf5}} CUSTOM_PATH_DIR: 14
CFLAGS=ENV_VAR LDFLAGS=ENV_VAR LD_LIBRARY_PATH=ENV_VAR make -j: 7
CFLAGS=ENV_VAR LDFLAGS=ENV_VAR LD_LIBRARY_PATH=ENV_VAR make check TESTS="" -j: 7
CFLAGS=ENV_VAR LDFLAGS=ENV_VAR LD_LIBRARY_PATH=ENV_VAR make check -j: 7
cd libOTe_Tests CUSTOM_PATH_DIR: 15
cmake FLAG out/: 12
rm -rf out/: 15
pnpm FLAG ${{ env.WORKSPACE }} run build: 6
sh tool CUSTOM_PATH_FILE: 24
PREFECT_API_URL="URL . CUSTOM_PATH_FILE: 6
USES: jgillis/delete-release-assets: 7
USES: casadi/mockups: 6
echo "`cat ${{github.workspace}} CUSTOM_PATH_DIR env.REF_TAG }}" > VERSION: 7
sudo apt update && sudo apt install -y build-essential jq: 12
echo "Current directory: ENV_VAR": 12
echo "GITHUB_PR_ISSUE_NUMBER=$(jq FLAG .pull_request.number "ENV_VAR")" >> ENV_VAR: 12
gocov convert . CUSTOM_PATH_FILE | gocov-xml > . CUSTOM_PATH_FILE: 12
echo ${{ needs.prebuild.outputs.VERSION }} > VERSION: 30
ESCAPED_REPLACE_LINE1_NEW=$(printf '%s\n' "pvOptions = append(pvOptions, \"FLAG\", \"${{ secrets.CRASHPAD_TOKEN }}\")" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE2_NEW=$(printf '%s\n' "pvOptions = append(pvOptions, \"FLAG\", \"${{ secrets.CRASHPAD_URL }}\")" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE3_NEW=$(printf '%s\n' "pvOptions = append(pvOptions, \"FLAG\", \" CUSTOM_PATH_DIR | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE4_NEW=$(printf '%s\n' "pvOptions = append(pvOptions, \"FLAG\", \" CUSTOM_PATH_FILE\")" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE5_NEW=$(printf '%s\n' "pvOptions = append(pvOptions, \"FLAG\", \" CUSTOM_PATH_FILE\")" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE6_NEW=$(printf '%s\n' "pvOptions = append(pvOptions, \"FLAG\", \" CUSTOM_PATH_FILE\")" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE1_OLD=$(printf '%s\n' " CUSTOM_PATH_DIR pvOptions = append(pvOptions, \"FLAG\", PKTVISOR_CP_TOKEN)" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE2_OLD=$(printf '%s\n' " CUSTOM_PATH_DIR pvOptions = append(pvOptions, \"FLAG\", PKTVISOR_CP_URL)" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE3_OLD=$(printf '%s\n' " CUSTOM_PATH_DIR pvOptions = append(pvOptions, \"FLAG\", PKTVISOR_CP_PATH)" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE4_OLD=$(printf '%s\n' " CUSTOM_PATH_DIR pvOptions = append(pvOptions, \"FLAG\", \" CUSTOM_PATH_FILE\")" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE5_OLD=$(printf '%s\n' " CUSTOM_PATH_DIR pvOptions = append(pvOptions, \"FLAG\", \" CUSTOM_PATH_FILE\")" | sed -e 's CUSTOM_PATH_DIR: 7
ESCAPED_REPLACE_LINE6_OLD=$(printf '%s\n' " CUSTOM_PATH_DIR pvOptions = append(pvOptions, \"FLAG\", \" CUSTOM_PATH_FILE\")" | sed -e 's CUSTOM_PATH_DIR: 7
sed -i -e "s CUSTOM_PATH_DIR agent CUSTOM_PATH_FILE      : 7
sed -i -e "s CUSTOM_PATH_DIR agent CUSTOM_PATH_FILE : 7
sed -i -e "s CUSTOM_PATH_DIR agent CUSTOM_PATH_FILE: 28
docker push -a orbcommunity CUSTOM_PATH_DIR: 27
git config FLAG user.email "${{secrets.GH_ORB_EMAIL}}": 8
git config FLAG user.name "${{secrets.GH_ORB_USER}}": 8
ENV_VAR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath): 7
Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=ENV_VAR\VC\Tools\LLVM\x64\bin`n": 7
mv ffmpeg-* CUSTOM_PATH_DIR ffmpeg/: 7
Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n": 7
Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n": 7
sudo apt-get remove -y azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel: 10
pacman FLAG FLAG -Syuu: 6
cp ENV_VAR CUSTOM_PATH_FILE release: 44
cp -r CUSTOM_PATH_FILE release CUSTOM_PATH_DIR: 8
USES: nk-o/action-wordpress-plugin-deploy: 9
docker tag antrea CUSTOM_PATH_DIR antrea CUSTOM_PATH_DIR: 8
docker push antrea CUSTOM_PATH_DIR: 13
wget URL -P test CUSTOM_PATH_DIR: 68
wget URL -P test: 12
unzip test CUSTOM_PATH_FILE -d test: 12
USES: ./.github/actions/push_to_mrt: 6
cargo clippy FLAG FLAG FLAG FLAG -- -D clippy::all: 7
New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force: 6
sudo apt-get install -y redis-server: 7
python -m unittest discover -p '*_test.py' FLAG -v: 16
python run.py deps: 8
python run.py ci-driver: 7
$manifest.Package.Identity.Version = "${{ env.GitBuildVersionSimple }}.0": 6
$appsettings= get-content ".\src\DesktopClient\PresenceLight\appsettings.json" -raw | ConvertFrom-Json: 9
$appsettings | ConvertTo-Json -depth 32| set-content '.\src\DesktopClient\PresenceLight\appsettings.json': 9
$badge.svg.g[1].text[2].InnerText = "${{ env.GitBuildVersionSimple }}.0": 6
$badge.svg.g[1].text[3].InnerText = "${{ env.GitBuildVersionSimple }}.0": 6
dotnet restore .\src\DesktopClient\PresenceLight\PresenceLight.csproj: 6
dotnet publish .\src\DesktopClient\PresenceLight\PresenceLight.csproj -c ${{ env.BuildConfiguration }} CUSTOM_PATH_FILE: 8
make check-install: 13
sudo xcode-select -switch CUSTOM_PATH_DIR matrix.xcode }}.app: 7
poetry config installer.parallel false: 7
python3 scripts CUSTOM_PATH_FILE ${{steps.device.outputs.flipper}}: 13
USES: ./.github/actions/numpy_vers: 7
node common CUSTOM_PATH_DIR: 6
mv .git ..: 8
rm -rf .??*: 8
python -m pip install -e .[tests]: 7
pip install torch torchvision torchaudio FLAG URL: 9
USES: SusanDoggie/swift-action: 6
cd packages CUSTOM_PATH_DIR && pnpm test: 14
if [[ ! -z "$cid" ]]; then docker stop $cid && docker rm $cid; fi: 14
USES: ./.github/actions/tests/slack-summary-on-release/slack-blocks: 6
python -m pip install -U wheel setuptools: 7
bash -x -e tests CUSTOM_PATH_FILE: 18
python -m pytest -s -v tests CUSTOM_PATH_FILE: 10
mkdir ${{ github.job }}-artifacts: 25
find . -path "** CUSTOM_PATH_DIR -or -path "** CUSTOM_PATH_DIR > artifacts.list: 25
rsync -R FLAG=artifacts.list . ${{ github.job }}-artifacts: 25
cd backends CUSTOM_PATH_DIR: 15
micromamba activate test_and_build: 8
apt update && apt install -y clang llvm cmake build-essential: 11
wget -O ENV_VAR CUSTOM_PATH_FILE ${{ matrix.jdk }}: 6
go run . FLAG: 10
sudo install -m 755 age CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
. CUSTOM_PATH_FILE -configuration release -architecture x64: 6
dotnet tool install FLAG . CUSTOM_PATH_DIR sign FLAG 0.9.0-beta.23063.3: 6
composer update FLAG magento CUSTOM_PATH_DIR laminas CUSTOM_PATH_DIR: 8
docker tag discourse CUSTOM_PATH_DIR discourse CUSTOM_PATH_DIR: 6
docker push discourse CUSTOM_PATH_DIR: 9
.. CUSTOM_PATH_DIR -c phpunit.xml: 15
export MOODLE_DOCKER_DB="${{ matrix.database }}": 9
export SUITE="${{ matrix.suite }}": 9
USES: ./terraform-new-workspace: 21
USES: ./terraform-destroy-workspace: 20
USES: ./.github/actions/LinuxEnvironmentSetup: 36
USES: ./.github/actions/BuildTestInstall: 36
USES: ./.github/actions/WindowsEnvironmentSetup: 24
head -n 3 CUSTOM_PATH_FILE: 6
platformio run -e tasmota: 6
platformio run -e tasmota-minimal: 6
curl -s URL: 10
${{ steps.script-extract.outputs.script }}: 8
python tools CUSTOM_PATH_FILE multiprecision: 10
echo "using ENV_VAR : : ${{ matrix.compiler }} : <cxxflags>-std=${{ matrix.standard }} ;" > ~ CUSTOM_PATH_FILE: 9
.. CUSTOM_PATH_DIR print_config_info print_math_info toolset=ENV_VAR: 6
cat bin.v2 CUSTOM_PATH_FILE: 10
npm run test -- FLAG=${{ matrix.browser }}: 6
USES: docker://homeassistant/home-assistant:beta: 6
yarn workspace  CUSTOM_PATH_DIR test-fuzz: 8
chmod a+x scripts CUSTOM_PATH_FILE: 6
sleep $sleep_period: 7
docker stop $container_id: 7
kubectl scale FLAG=0 deployments CUSTOM_PATH_DIR: 6
python -c "import torch; print(torch.__version__); print('{} of GPUs available'.format(torch.cuda.device_count()))": 7
mv ${{ env.RELEASE_ADDS }} . CUSTOM_PATH_DIR: 7
npx lerna add  CUSTOM_PATH_DIR FLAG= CUSTOM_PATH_DIR: 6
git clone FLAG=2 URL: 6
cd libkvmi: 6
bin CUSTOM_PATH_DIR -c 100 -t 2 -d 10s URL: 9
sleep 300s: 7
echo "if expression should not have evaluated true": 10
git rebase master: 8
USES: ./.github/actions/basic-meson: 8
mkdir -p test-sdist: 8
cd test-sdist: 8
python -m venv venv-sdist: 8
venv-sdist CUSTOM_PATH_DIR -m pip install .. CUSTOM_PATH_FILE: 8
nix profile install nixpkgs#go_1_20: 9
go tool covdata textfmt -i=coverage -o profile.txt: 9
composer require doctrine CUSTOM_PATH_DIR ^${{ matrix.dbal-version }} FLAG: 6
.\mvnretry.bat de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -U -P ci: 6
mvn -T 1C -B verify FLAG pom.xml -U -P ci -Dgpg.skip=true -Dmaven.wagon.http.retryHandler.count=3: 8
mvn -T 1C -B verify FLAG pom.xml -U -P ci '-Dgpg.skip=true' '-Dmaven.wagon.http.retryHandler.count=3': 7
mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -U -P ci || mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies -U -P ci: 9
mvn -f sniffy-compatibility-tests CUSTOM_PATH_FILE test: 6
echo "`pwd` CUSTOM_PATH_DIR > ENV_VAR: 6
ref=$(head -n 1 artifact CUSTOM_PATH_FILE): 9
repo=$(head -n 1 artifact CUSTOM_PATH_FILE): 9
pr=$(head -n 1 artifact CUSTOM_PATH_FILE): 6
git submodule update FLAG lib CUSTOM_PATH_DIR lib CUSTOM_PATH_DIR: 6
source activate accelerate: 20
pip uninstall comet_ml -y: 6
USES: decentraland/set-rollout-action: 7
cd jaseci_ai_kit CUSTOM_PATH_DIR: 12
docker build . FLAG docker-conf CUSTOM_PATH_DIR FLAG ${{ secrets.DOCKER_REGISTRY }} CUSTOM_PATH_DIR: 6
echo "::set-output name=godot_version::$(cat godot_version CUSTOM_PATH_FILE)": 7
echo "::set-output name=godot_kotlin_jvm_version::$(cat godot_kotlin_jvm_version CUSTOM_PATH_FILE)": 7
mkdir -p docker-config CUSTOM_PATH_DIR: 8
USES: ./.github/actions/setup-android-build: 6
sudo rm -rf  lego CUSTOM_PATH_DIR: 6
sudo rm -rf  acme-sh CUSTOM_PATH_DIR: 6
sudo rm -rf  certbot CUSTOM_PATH_DIR: 6
USES: jaywcjlove/github-action-modify-file-content: 6
npm run test-all: 6
export QT_INSTALL_CMAKE_PATH=${{ github.workspace }} CUSTOM_PATH_DIR: 12
export QT_ROOT=${{ github.workspace }} CUSTOM_PATH_DIR: 12
ls bundle-Release CUSTOM_PATH_FILE: 6
docker tag inclavarecontainers CUSTOM_PATH_DIR inclavare-dev:centos8.2;: 6
docker tag inclavarecontainers CUSTOM_PATH_DIR inclavare-dev:ubuntu18.04;: 6
docker exec $inclavare_dev bash -c "cd CUSTOM_PATH_DIR: 10
cat >ENV_VAR CUSTOM_PATH_DIR <<-EOF: 8
USES: ./.github/actions/report: 7
[ -d ~ CUSTOM_PATH_DIR ] && sudo cp ~ CUSTOM_PATH_DIR CUSTOM_PATH_DIR || mkdir -p ~ CUSTOM_PATH_DIR: 6
USES: firebuild/firebuild-action: 7
cp CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 8
sudo apt-get install -f . CUSTOM_PATH_FILE: 12
python -m pip install timm: 6
sudo chmod +x . CUSTOM_PATH_FILE: 10
docker system prune FLAG FLAG FLAG: 12
helm upgrade FLAG \: 8
make protos: 6
bundle exec fastlane build: 6
nbdev_read_nbs: 6
nbdev_clean_nbs: 6
if [ -n "$(nbdev_diff_nbs)" ]; then echo -e "!!! Detected difference between the notebooks and the library"; false; fi: 6
git fetch FLAG origin +refs CUSTOM_PATH_DIR: 7
pip install -r ${{ github.event.inputs.repository }} CUSTOM_PATH_FILE: 10
echo "CMAKE_PREFIX_PATH=ENV_VAR CUSTOM_PATH_DIR matrix.hdf5 }} CUSTOM_PATH_DIR >> ENV_VAR: 7
LD_LIBRARY_PATH=ENV_VAR make -j 12: 7
LD_LIBRARY_PATH=ENV_VAR ctest FLAG -j 12 .: 7
LD_LIBRARY_PATH=ENV_VAR ctest -j 12 FLAG FLAG -VV: 7
echo "ENABLE_HDF5=FLAG" >> ENV_VAR: 6
echo "ENABLE_DAP=FLAG" >> ENV_VAR: 6
echo "ENABLE_NCZARR=FLAG" >> ENV_VAR: 6
USES: ./.github/actions/build-cache: 13
echo "PROJECT_VERSION=$(mvn org.apache.maven.plugins:maven-help-plugin:evaluate -Dexpression=project.version -B | grep -v '\[')" >> ENV_VAR: 6
which nvcc: 6
echo "NAME=ENV_VAR" >> ENV_VAR: 7
cmake FLAG ${{github.workspace}} CUSTOM_PATH_DIR FLAG ${{matrix.build_type}} FLAG$(nproc): 6
LDFLAGS="-static" CC=ENV_VAR QEMU_SYS=ENV_VAR make clean check: 7
USES: freecodecamp/crowdin-action: 23
test -f ENV_VAR CUSTOM_PATH_DIR: 6
python -u -m pip install FLAG pip && pip install semver==2.13.0: 7
mvn -B package -DskipTests=true: 25
go build -v github.com CUSTOM_PATH_DIR: 6
ldd tool CUSTOM_PATH_DIR | grep libcrypto.so: 6
ldd lib CUSTOM_PATH_FILE | grep libcrypto.so: 6
ldd ykcs11 CUSTOM_PATH_FILE | grep libcrypto.so: 8
. CUSTOM_PATH_DIR FLAG | grep "Usage: yubico-piv-tool": 6
pkcs11-tool FLAG ykcs11 CUSTOM_PATH_FILE FLAG | grep Yubico: 7
LIBDIR=$(cmake -L | sed -n "s CUSTOM_PATH_DIR: 8
yubico-piv-tool FLAG | grep "Usage: yubico-piv-tool": 11
objdump -T ENV_VAR CUSTOM_PATH_FILE | grep C_Sign: 6
rm -rf build; mkdir build; cd build: 12
apt-get install git -y: 6
sed -n -e "s CUSTOM_PATH_DIR -e "s CUSTOM_PATH_DIR Algorithm:\s*\(.*\)$ CUSTOM_PATH_DIR output | uniq > actual: 30
rm -rf daft: 6
USES: ./.github/actions/setupEnvironment: 6
USES: xt0rted/stylelint-problem-matcher: 6
USES: fmulero/labeler: 10
${{ matrix.binPath }} FLAG=examples CUSTOM_PATH_FILE build: 7
python misc CUSTOM_PATH_FILE: 7
export TAICHI_REPO_DIR=`pwd`: 6
USES: ./.github/actions/build-rust: 8
$(go env GOPATH) CUSTOM_PATH_DIR -test=false: 7
cd ${{ github.workspace }} CUSTOM_PATH_FILE CUSTOM_PATH_DIR github.repository }} CUSTOM_PATH_DIR: 15
cd ${{ github.workspace }} CUSTOM_PATH_FILE CUSTOM_PATH_DIR github.repository }}: 15
echo "::set-output name=GONEOVIM_VERSION::$(git describe FLAG)": 7
pip install -U -r dev-requirements.txt: 6
bash . CUSTOM_PATH_FILE ${{ matrix.compiler }} v${{ matrix.version }}: 7
brew install autoconf automake libtool pkg-config curl git cmake gcc gperf texinfo yasm nasm bison autogen wget meson ninja: 6
cp .ci CUSTOM_PATH_FILE weid-http-service CUSTOM_PATH_DIR: 6
dart run build_runner build: 9
USES: edgedb/setup-edgedb: 8
dart pub global activate multipack: 6
git config FLAG user.email "info": 14
pip install -q -e .[tensorflow,jax,models,tests]: 8
cd baselines CUSTOM_PATH_DIR: 7
yarn run prettier:check: 9
python3 codalab_service.py build services FLAG ENV_VAR FLAG: 9
python3 test_runner.py FLAG ENV_VAR ENV_VAR: 10
for c in $(docker ps -a FLAG="{{.Names}}"); do docker logs $c > CUSTOM_PATH_FILE 2> CUSTOM_PATH_FILE; done: 9
sudo chmod a+rwx CUSTOM_PATH_DIR: 8
pip install click python-decouple scrapinghub: 6
USES: ./terraform-output: 8
USES: ./terraform-check: 8
echo "git_hash=$(git rev-parse FLAG=7 "ENV_VAR")" >> ENV_VAR: 6
echo "branch=$(echo ENV_VAR#refs CUSTOM_PATH_DIR | sed 's CUSTOM_PATH_DIR >> ENV_VAR: 6
mkdir -p . CUSTOM_PATH_DIR steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}: 6
mv . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }} CUSTOM_PATH_DIR: 24
mv . CUSTOM_PATH_DIR Dynex-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}: 6
curl FLAG '=https' FLAG.2 -sSf URL | sh -s -- -y FLAG=stable FLAG=minimal: 7
python blocks CUSTOM_PATH_FILE: 17
corepack prepare FLAG pnpm: 6
helm test test FLAG name=test-counter-v1: 6
helm test test FLAG name=test-map-v1: 6
echo "kubectl get pods": 6
echo "kubectl get pods -n kube-system": 7
echo "kubectl get storageprofiles": 6
kubectl get storageprofiles: 6
echo "kubectl get datastores": 6
kubectl get datastores: 6
USES: microsoft/react-native-test-app/.github/actions/setup-toolchain: 8
${{ github.event.inputs.packageManager }} install: 8
python tools CUSTOM_PATH_FILE FLAG_args "FLAG 3" ENV_VAR: 9
. CUSTOM_PATH_DIR dependencyUpdates: 8
rd -r ".\buildtrees\" -ErrorAction SilentlyContinue: 8
rd -r ".\downloads\" -ErrorAction SilentlyContinue: 8
${{env.APT_SET_CONF}}: 6
${{env.CCACHE_SETTINGS}}: 6
sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev mpv libmpv-dev dpkg-dev p7zip-full p7zip-rar: 7
kubectl wait FLAG=condition=available FLAG=300s deployment CUSTOM_PATH_DIR: 28
kubectl wait FLAG=condition=ready FLAG=300s pod CUSTOM_PATH_DIR: 8
mkdir dist CUSTOM_PATH_DIR && mv dist CUSTOM_PATH_DIR dist CUSTOM_PATH_DIR: 8
git pull origin ${{ needs.get_target_branch.outputs.target }} FLAG FLAG: 6
sed -i '' 's#YOUR_DOMAIN_URI_PREFIX";#URL quickstart-ios CUSTOM_PATH_FILE: 10
unzip protoc-3.19.4-linux-x86_64.zip -d protoc: 8
make download-licenses : 6
make FINCH_OS_IMAGE_LOCATION_ROOT= CUSTOM_PATH_DIR: 6
echo 'y' | sudo bash CUSTOM_PATH_FILE: 12
nose2 -v: 6
sed -i -e 's CUSTOM_PATH_FILE\ CUSTOM_PATH_DIR inputs.git_commit_id }}" CUSTOM_PATH_DIR env CUSTOM_PATH_DIR env.folder_env }} CUSTOM_PATH_FILE: 6
sed -i "s CUSTOM_PATH_DIR distfeeds.conf: 6
USES: crossplane-contrib/xpkg-action: 8
echo ${{ github.token }} | docker login ghcr.io -u ${{ github.actor }} FLAG: 7
SHA=$(git rev-parse FLAG HEAD) && sed -i 's CUSTOM_PATH_DIR src CUSTOM_PATH_FILE: 6
USES: ./.github/actions/inflate-secrets: 6
ENV_VAR -q FLAG: 6
. CUSTOM_PATH_DIR FLAG clean package -DskipTests -Pagent > CUSTOM_PATH_DIR: 18
. CUSTOM_PATH_DIR FLAG -f test CUSTOM_PATH_FILE clean package -DskipTests docker:build -DBUILD_NO=local > CUSTOM_PATH_DIR: 18
echo "CERT_ID: ENV_VAR": 7
CERT_ID=$(cat cert.id): 12
export PATH=ENV_VAR{GITHUB_WORKSPACE}:ENV_VAR: 18
threads=`sysctl -n hw.logicalcpu`: 7
pushd package CUSTOM_PATH_DIR: 21
. CUSTOM_PATH_DIR prepare-dist FLAG ${{needs.configure.outputs.version}} FLAG info: 6
quarto FLAG: 6
pushd package\src\: 6
USES: ./.github/workflows/actions/keychain: 7
build CUSTOM_PATH_DIR FLAG: 7
. CUSTOM_PATH_FILE deepjavalibrary CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR ${{ matrix.arch }} \: 8
msys2 -c 'cp CUSTOM_PATH_FILE vangers CUSTOM_PATH_DIR: 26
cp build CUSTOM_PATH_FILE vangers CUSTOM_PATH_DIR: 10
`go env GOPATH` CUSTOM_PATH_DIR -exclude-dir=internal . CUSTOM_PATH_DIR: 19
make CFLAGS="${{ env.CFLAGS }}": 6
cat CUSTOM_PATH_DIR || :: 6
echo "::set-output name=CTF_OUTPUT_SIZE::$(stat FLAG="%s" output.json)": 6
source $(brew FLAG asdf) CUSTOM_PATH_FILE: 8
USES: ./.github/actions/to-integration-tests: 10
echo "PATH=ENV_VAR CUSTOM_PATH_DIR >> "ENV_VAR": 9
npx unbroken FLAG: 6
USES: ./.github/actions/run-application: 11
USES: porter-dev/porter-cli-action: 9
echo "${{ secrets.DockerHubToken }}" | docker login FLAG ENV_VAR FLAG: 6
USES: ./tools/github-actions/setup-deps: 9
chmod 777 -R . CUSTOM_PATH_DIR: 8
npm install -g yarn  CUSTOM_PATH_DIR: 7
echo "BUILD_VERSION=ENV_VAR#refs CUSTOM_PATH_DIR >> ENV_VAR: 6
kubectl apply -f deployments CUSTOM_PATH_FILE: 6
USES: MetaMask/action-npm-publish: 6
USES: ./.github/actions/check-changes: 7
cmake FLAG ENV_VAR: 7
cmake FLAG build_examples -j: 6
cd build_examples CUSTOM_PATH_DIR && . CUSTOM_PATH_DIR: 6
make -C FreeRTOS CUSTOM_PATH_DIR clean: 6
dotnet test src CUSTOM_PATH_FILE -c ${{ env.BUILD_CONFIG }}: 59
export CUDA_VISIBLE_DEVICES=$(python -m tests.utils | tail -n 1): 6
trap 'if pgrep python; then pkill python; fi;' ERR: 6
python -c $'import torch\na,b=torch.zeros(1,device="cuda:0"),torch.zeros(1,device="cuda:1");\nwhile True:print(a,b)' > CUSTOM_PATH_DIR &: 6
coverage xml FLAG: 6
if pgrep python; then pkill python; fi: 6
cd android CUSTOM_PATH_DIR: 10
cp ${{github.workspace}} CUSTOM_PATH_FILE ${{github.workspace}} CUSTOM_PATH_DIR: 6
USES: srfrnk/current-time: 9
sudo -u build -H bash -c .github CUSTOM_PATH_FILE: 6
mv build CUSTOM_PATH_FILE "Half-Life Asset Manager": 6
dist_path=`cat s3-dist-path.txt`: 6
curl -sSfLO URL: 6
dart pub global run coverage:test_with_coverage: 7
wget -O release CUSTOM_PATH_FILE "URL: 6
kubectl -n helm-system wait helmreleases CUSTOM_PATH_DIR FLAG=condition=ready FLAG=4m: 7
REPO_DIR=`pwd`: 6
EXAMPLE_DIR="ENV_VAR CUSTOM_PATH_DIR: 6
__PROJECT_PATH=`pwd`: 6
IDF_PATH="ENV_VAR CUSTOM_PATH_DIR: 6
echo "IDF_PATH=ENV_VAR" >> ENV_VAR: 7
echo "__PROJECT_EXAMPLE_DIR=ENV_VAR" >> ENV_VAR: 6
echo "======================================";\: 14
az storage blob service-properties update  FLAG ${{ steps.infrastructure.outputs.storageAccountName }}  FLAG   FLAG index.html  FLAG index.html: 8
az storage blob upload-batch  -d '$web'  FLAG ${{ steps.infrastructure.outputs.storageAccountName }}  -s . CUSTOM_PATH_DIR: 8
USES: ./.github/actions/setup-ci: 13
sleep 64s: 6
wget ${source} CUSTOM_PATH_DIR -O ${benchmark_dir} CUSTOM_PATH_DIR: 6
cp bin CUSTOM_PATH_FILE package CUSTOM_PATH_DIR: 12
rm . CUSTOM_PATH_FILE*: 6
DISCORD_KEY=${{secrets.DISCORD_KEY}}: 6
DISCORD_CID=${{secrets.DISCORD_CID}}: 6
FEEDBACK_ENDPOINT=${{secrets.FEEDBACK_ENDPOINT}}: 6
DOCKER_BUILDKIT=1 docker build . -t gcr.io CUSTOM_PATH_DIR -f . CUSTOM_PATH_FILE: 6
make buf-web: 6
echo "::set-output name=enable::${{ steps.script.outputs.result }}": 6
mv "${{ github.workspace }} CUSTOM_PATH_FILE" . CUSTOM_PATH_FILE: 6
python3 -m pip install tox tox-gh-actions: 6
. .env: 6
python -c "import mmcv": 8
curl -s -O -L URL: 7
docker run FLAG linux CUSTOM_PATH_DIR FLAG -v "ENV_VAR: CUSTOM_PATH_DIR -w CUSTOM_PATH_DIR node . CUSTOM_PATH_FILE: 6
. prebuild CUSTOM_PATH_FILE: 6
cd CUSTOM_PATH_DIR && make uninstall: 6
. CUSTOM_PATH_DIR :extensions:sentencepiece:compileJNI: 8
poetry install -E aws -E azure -E gcp: 6
xvfb-run -a yarn test: 6
docker-compose logs FLAG=2500 lakefs: 6
cp tests CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 6
ctest -R UnitTests FLAG: 6
npm run electron:publish: 6
echo GIT_VERSION="$(git describe FLAG | sed 's CUSTOM_PATH_DIR >> ENV_VAR: 6
. CUSTOM_PATH_FILE '${{ steps.setup-python.outputs.python-path }}': 10
if [ ${{ matrix.xcode_version_factor }} != default ]; then sudo xcode-select -s CUSTOM_PATH_DIR matrix.xcode_version_factor }}.app; fi: 6
cd ${{env.WIN_BUILD_DIR}}: 8
sudo add-apt-repository FLAG ppa:ubuntu-toolchain-r CUSTOM_PATH_DIR: 6
php -f . CUSTOM_PATH_FILE: 6
npm run electron:build -- FLAG: 7
minikube image load local CUSTOM_PATH_DIR: 9
extras CUSTOM_PATH_FILE ${{ matrix.config.test }}: 6
yarn workspace  CUSTOM_PATH_DIR exe scripts CUSTOM_PATH_FILE: 9
nosetests3 tests CUSTOM_PATH_FILE: 6
FLAG=aac \: 6
command hblock -v: 15
cp tests CUSTOM_PATH_FILE ~ CUSTOM_PATH_DIR: 10
git fetch FLAG -p origin: 6
${{env.DOCKER_PATH}} CUSTOM_PATH_FILE}}" >> ENV_VAR: 6
echo "    s3: CUSTOM_PATH_FILE": 6
docker exec ${{ env.CONTAINER_NAME }} \: 18
bash -c "cd CUSTOM_PATH_FILE CUSTOM_PATH_DIR \: 15
aws s3 cp ENV_VAR s3: CUSTOM_PATH_DIR FLAG us-west-2 FLAG public-read: 6
make -j4 VERBOSE=1: 7
USES: ./.github/actions/redis: 6
USES: MobSF/mobsfscan: 6
npm run vsce:bump "latest" "toBeCreated": 6
touch config.ini: 6
echo "[telemetry]" >> config.ini: 6
echo "track = False" >> config.ini: 6
dotnet pack src CUSTOM_PATH_FILE FLAG Release -p:PackageVersion=${{ github.event.inputs.tag }} -p:Version=${{ github.event.inputs.tag }}: 10
mm.py . CUSTOM_PATH_FILE: 13
tar -xzvf data CUSTOM_PATH_FILE -C data: 14
npm ci && npm link: 9
USES: joshgummersall/base64-encode: 8
mvn verify -B: 6
make configure CMAKE_INSTALL_PREFIX=openmldb-linux: 13
make SQL_JAVASDK_ENABLE=ON && make SQL_JAVASDK_ENABLE=ON install: 13
tar -zcvf openmldb-linux.tar.gz openmldb-linux: 12
echo "openmldb-pkg:": 12
sudo apt update && sudo apt install -y FLAG httpie: 6
ENV_VAR CUSTOM_PATH_DIR builtin: 6
cd testingDataset: 6
pip install .[jax_cpu]: 12
pip install .[pytorch_cpu]: 12
pytest -vx tests CUSTOM_PATH_FILE: 9
cp dist CUSTOM_PATH_FILE Cryptomator.AppDir CUSTOM_PATH_FILE: 26
ln -s usr CUSTOM_PATH_FILE Cryptomator.AppDir CUSTOM_PATH_FILE: 9
cd kie-tools: 12
cp -RL .. CUSTOM_PATH_DIR dev CUSTOM_PATH_DIR: 6
pip install aligo==v5.0.1: 8
python3 -mpip install wheel: 6
BUILD_VERSION=0.2.0 python3 setup.py bdist_wheel: 6
ENV_VARempDir = "$env:RUNNER_WORKSPACE\temp": 9
New-Item -Path "ENV_VARempDir" -ItemType Directory -ea 0: 9
cp -af output CUSTOM_PATH_DIR pkg CUSTOM_PATH_DIR: 8
cp -af config CUSTOM_PATH_FILE pkg CUSTOM_PATH_DIR: 8
cp -af config CUSTOM_PATH_FILE pkg CUSTOM_PATH_FILE: 8
cp -af pkg CUSTOM_PATH_FILE pkg CUSTOM_PATH_DIR: 8
sed -i "s CUSTOM_PATH_DIR 1.0-${{ env.IMAGE_TAG }} CUSTOM_PATH_DIR pkg CUSTOM_PATH_DIR: 8
ossutil cp -rf agent CUSTOM_PATH_FILE oss: CUSTOM_PATH_DIR env.IMAGE_TAG_PREFIX }} CUSTOM_PATH_FILE: 8
ossutil cp -rf agent CUSTOM_PATH_FILE oss: CUSTOM_PATH_FILE: 8
7z a Dust3D-win32-x86_64.zip ENV_VAR CUSTOM_PATH_FILE: 6
docker buildx imagetools create standardnotes CUSTOM_PATH_DIR FLAG standardnotes CUSTOM_PATH_DIR: 9
dotnet test FLAG "Category=${{ matrix.provider }}&(Category=BVT|Category=SlowBVT|Category=Functional)" FLAG 10m FLAG "trx" -- -parallel none -noshadow: 7
dotnet build FLAG Release FLAG URL src CUSTOM_PATH_FILE: 12
dotnet build FLAG Release FLAG URL tests CUSTOM_PATH_FILE: 9
dotnet test tests CUSTOM_PATH_FILE FLAG "Category=all|Category=1x|Category=2x" FLAG: 6
cp License.txt .. CUSTOM_PATH_DIR: 9
mkdir thirdparty CUSTOM_PATH_DIR: 9
curl -L -o thirdparty CUSTOM_PATH_FILE URL: 7
chmod a+x .. CUSTOM_PATH_FILE: 6
## ref: URL: 6
rm -rf thirdparty CUSTOM_PATH_DIR: 8
chmod a+x thirdparty CUSTOM_PATH_FILE: 8
cmake -DLLVM_CONFIG= CUSTOM_PATH_DIR . && make && make tests: 8
bash utils CUSTOM_PATH_FILE -q -V: 22
ls ~ CUSTOM_PATH_DIR | grep .so && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1): 6
USES: ./.github/actions/create-conda-env: 41
conda activate ${{ env.conda-env-name-no-time }}-$(date FLAG "${{ env.workflow-timestamp }}" +%Y%m%d)-riscv-tools: 6
USES: ./.github/actions/prepare-rtl: 7
USES: ./.github/actions/merge-repo: 6
tox -e ${{ matrix.test-tox-env }}: 6
ls -1 dist: 6
echo "url => ${{ steps.preview_step.outputs.preview_url }}": 7
if grep -Fxq "devel" cmd CUSTOM_PATH_FILE;then echo "GO2TV_VERSION=$(cat cmd CUSTOM_PATH_FILE)";else echo "GO2TV_VERSION=v$(cat cmd CUSTOM_PATH_FILE)";fi  >> ENV_VAR: 6
 CUSTOM_PATH_DIR FLAG ENV_VAR CUSTOM_PATH_FILE FLAG runtime FLAG -s "ESPRESSIF SYSTEMS (SHANGHAI) CO., LTD. (QWXF6GB4AV)" ENV_VAR CUSTOM_PATH_FILE -v: 9
 CUSTOM_PATH_DIR -v -vvv FLAG ENV_VAR CUSTOM_PATH_FILE: 12
Remove-Item . CUSTOM_PATH_DIR -Recurse -Force -ErrorAction Ignore: 24
Remove-Item . CUSTOM_PATH_DIR -ErrorAction Ignore: 24
Remove-Item . CUSTOM_PATH_FILE -ErrorAction Ignore: 36
. CUSTOM_PATH_FILE -v create -c . CUSTOM_PATH_FILE -d . CUSTOM_PATH_DIR: 24
Remove-Item . CUSTOM_PATH_FILE -Recurse -Force -ErrorAction Ignore: 12
. CUSTOM_PATH_FILE -v update -d . CUSTOM_PATH_DIR -a webapp_routing FLAG ingress-tls-cert-keyvault-uri=test.cert.keyvault.uri FLAG ingress-use-osm-mtls=true FLAG ingress-host=host1: 24
yarn link .. CUSTOM_PATH_DIR: 6
appimage-builder FLAG: 10
pip3 install -U python-dotenv: 6
pytest test CUSTOM_PATH_FILE -rap: 7
npm link && npm link qawolf: 6
docker login FLAG=_ FLAG=ENV_VAR registry.heroku.com: 6
USES: ./.github/actions/setup-linux: 7
util CUSTOM_PATH_DIR: 7
USES: aktions/codeclimate-test-reporter: 7
ccache FLAG=cache_dir="ENV_VAR CUSTOM_PATH_DIR: 7
FLAG jdk.compiler CUSTOM_PATH_FILE=ALL-UNNAMED: 10
docker tag $(docker images|awk ' CUSTOM_PATH_DIR {print $1}') rook CUSTOM_PATH_DIR: 8
weechat FLAG: 10
cd ${{ matrix.build-dir || '.' }}: 9
yarn build:syncing-server: 8
TARGET=${{ matrix.target }} sh . CUSTOM_PATH_FILE: 7
LIBC_CI=1 sh . CUSTOM_PATH_FILE ${{ matrix.target }}: 7
curl -X POST URL github.event.client_payload.sha }} \: 6
-H 'Authorization: token ${{ secrets.AGE_STATUS_ACCESS_TOKEN }}' \: 6
USES: ./.github/actions/check-skip-acceptance-tests: 7
USES: pmacik/action-download-multiple-artifacts: 8
USES: ./.github/actions/collect-kube-resources: 6
testspace [${{ env.TEST_RUN }}]${{ env.TEST_RESULTS }} CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_DIR get_thread_wireshark: 6
script CUSTOM_PATH_DIR combine_coverage: 6
USES: ./.github/actions/ci-incr-build-cache-prepare: 9
USES: ./.github/actions/ci-incr-build-cache-save: 7
cd src && python3 -m unittest discover -s test CUSTOM_PATH_DIR: 7
npm run figmagic: 6
wget -O bins CUSTOM_PATH_DIR URL && zip . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR && rm . CUSTOM_PATH_DIR: 6
wget -O bins CUSTOM_PATH_FILE URL: 8
npm run build:desktop -- FLAG FLAG always: 6
find . -name "*.log" -exec cat '{}' \; -print: 6
C:\msys64\usr\bin\bash.exe -lc 'pacman FLAG FLAG -Syuu': 8
npm publish ${{env.WORKING_DIR}} CUSTOM_PATH_DIR FLAG: 6
transformers-cli add-new-model FLAG FLAG_file=templates CUSTOM_PATH_FILE FLAG=templates CUSTOM_PATH_DIR: 8
npm run enable-team-features-dev: 12
. CUSTOM_PATH_FILE ${{ matrix.version }}: 6
.. CUSTOM_PATH_DIR test: 6
CFLAGS="-g" LDFLAGS="-rdynamic" . CUSTOM_PATH_DIR: 8
git clone FLAG FLAG openh264v2.1.0 URL: 6
cd openh264 && make && sudo make install && sudo ldconfig: 6
cd samples CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE: 7
tar -xvf CUSTOM_PATH_FILE ./: 6
export GOARCH=${{ matrix.arch }}: 6
echo "FATENAME=fate_$(go env GOOS)_$(go env GOARCH)" >> ENV_VAR: 6
echo "$(go env GOOS) $(go env GOARCH)": 6
go build -o fate_$(go env GOOS)_$(go env GOARCH) -v . CUSTOM_PATH_DIR: 6
echo "compress": 10
tar -zcvf fate_$(go env GOOS)_$(go env GOARCH).tar.gz . CUSTOM_PATH_DIR env GOOS)_$(go env GOARCH): 6
coverage run -m pytest tests CUSTOM_PATH_FILE "ENV_VAR[@]}": 13
sed -i -e "s CUSTOM_PATH_DIR user_data.sh: 7
ESCAPED_REPLACE_KEY_ID=$(printf '%s\n' "${{ secrets.AWS_ACCESS_KEY_ID }}" | sed -e 's CUSTOM_PATH_DIR: 6
sed -i -e "s CUSTOM_PATH_DIR vars.tf: 15
ESCAPED_REPLACE_ACCESS_KEY=$(printf '%s\n' "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sed -e 's CUSTOM_PATH_DIR: 6
gpg -d FLAG "${{ secrets.SECRET_PASSWORD }}" FLAG google-services.json.asc > android CUSTOM_PATH_FILE: 10
ulimit -c unlimited     # Enable core dumps to be captured (must be in same run block): 8
ls -ld CUSTOM_PATH_DIR: 8
CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "ENV_VAR" ; mkdir -p "ENV_VAR" ; cd "ENV_VAR": 13
tar -xzf SourceCode CUSTOM_PATH_FILE: 10
USES: ./.github/actions/aws-sam-cli-develop: 7
samdev FLAG: 7
pytest -n auto -vvv ${{ matrix.file }}: 6
. CUSTOM_PATH_DIR help:evaluate -Dexpression=project.modules -q -DforceStdout -pl :seatunnel-connector-v2-e2e >> CUSTOM_PATH_FILE: 7
sub_modules=`python tools CUSTOM_PATH_FILE sub CUSTOM_PATH_FILE`: 7
. CUSTOM_PATH_DIR -B -T 1C verify -DskipUT=true -DskipIT=false -D"license.skipAddThirdParty"=true FLAG -pl $run_it_modules -am -Pci: 7
gem install asciidoctor: 8
echo """: 6
sudo git pull: 6
sudo touch . CUSTOM_PATH_FILE: 6
sudo bash -c "cat . CUSTOM_PATH_FILE >> . CUSTOM_PATH_FILE": 18
sudo git rev-parse HEAD | sudo tee . CUSTOM_PATH_FILE -a: 6
sudo cp -v -R . CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 9
sudo git add .: 7
sudo git commit -m "COMMIT_MSG": 8
sudo rm -rf . CUSTOM_PATH_FILE: 6
sudo cp -v -R CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 8
sudo apt-get install -y ca-certificates curl: 7
aws configure<<EOF: 7
${{ secrets.AWS_ACCESSKEY_ID }}: 7
${{ secrets.AWS_SECRETACCESS_KEY }}: 7
json: 7
sed -i 's CUSTOM_PATH_DIR github.event.pull_request.number }} CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_FILE: 8
git reset FLAG ${{ needs.docker_image_build.outputs.commit_id }}: 6
sudo apt-get install git vim net-tools mysql-client openjdk-8-jdk sysbench bc pip -y: 6
sudo pip3 install PyYAML==6.0: 6
sudo pip3 install shyaml==0.6.2: 6
set -uo pipefail: 20
echo 'Start Prepare Data of 10-tables-100000-per-table': 12
. CUSTOM_PATH_FILE -m SYSBENCH -n 10 -s 100000 -t 1 | tee report CUSTOM_PATH_FILE: 8
sed -i ' CUSTOM_PATH_DIR props_10.mo: 16
. CUSTOM_PATH_FILE props_10.mo | tee report CUSTOM_PATH_FILE: 8
mkdir -p ENV_VAR CUSTOM_PATH_DIR && cp -r ENV_VAR CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 13
sed -i "s CUSTOM_PATH_DIR src CUSTOM_PATH_FILE: 7
make ci-test-unit: 9
ARCH="amd64": 8
Network_TYPE="calico": 6
echo "ARCH=ENV_VAR,,}" >> ENV_VAR: 10
echo "Network_TYPE=ENV_VARetwork_TYPE,,}" >> ENV_VAR: 10
echo "GAP_TYPE=ENV_VAR,,}" >> ENV_VAR: 10
GAP_TYPE="ONLINE": 6
echo "OS_TYPE=ENV_VAR,,}" >> ENV_VAR: 9
export runner_name=${{ runner.name }}: 7
export CFLAGS="-O0 -Werror -Wno-unused-result -Wno-stringop-truncation": 8
sudo apt-get FLAG install python3-wheel python3-setuptools cabextract gperf: 6
pip install r2pipe: 9
export R2R_SKIP_ARCHOS=1: 11
export LD_PRELOAD= CUSTOM_PATH_FILE.5: 8
pip install ninja r2pipe wget: 6
make -f Makefile-manual: 6
rm -rf build install: 6
mkdir examples CUSTOM_PATH_DIR: 42
cp -r .. CUSTOM_PATH_DIR examples CUSTOM_PATH_DIR: 18
echo > . CUSTOM_PATH_FILE: 12
USES: ./.github/actions/prepare_breeze_and_image: 19
USES: ./.github/actions/post_tests_success: 11
USES: ./.github/actions/post_tests_failure: 11
breeze testing tests FLAG: 7
breeze down: 6
USES: distrho/dpf-makefile-action: 14
cp -r -v . CUSTOM_PATH_DIR .: 15
PACKAGES=$(sed 's CUSTOM_PATH_DIR . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE): 21
C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH= CUSTOM_PATH_DIR && cd $(cygpath -u "ENV_VAR") && env && . CUSTOM_PATH_DIR: 21
PACKAGES=$(sed 's CUSTOM_PATH_DIR . CUSTOM_PATH_FILE): 21
C:\\tools\\cygwin\\bin\\bash -l -c 'export PATH= CUSTOM_PATH_DIR && cd $(cygpath -u "ENV_VAR") && . CUSTOM_PATH_DIR ENV_VAR': 21
C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH= CUSTOM_PATH_DIR && cd $(cygpath -u "ENV_VAR") && make -k -w V=0 base-toolchain && make -k -w V=0 ENV_VAR': 11
mkdir -p "artifacts CUSTOM_PATH_DIR for a in local CUSTOM_PATH_DIR do if [ -d $a ]; then tar -c FLAG -f "artifacts CUSTOM_PATH_DIR $a).tar" $a; fi; done; cp -r logs CUSTOM_PATH_DIR  "artifacts CUSTOM_PATH_DIR: 21
C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "ENV_VAR") && rm -f local CUSTOM_PATH_DIR tar -cf sage-local-${{ env.STAGE }}.tar local': 9
C:\\tools\\cygwin\\bin\\bash -l -x -c 'export PATH= CUSTOM_PATH_DIR && cd $(cygpath -u "ENV_VAR") && make -k -w V=0 ENV_VAR': 10
USES: martijnhols/actions-cache/restore: 13
npm i -g grunt-cli: 6
dart format -o none FLAG .: 6
rm -rf TWiLightMenu CUSTOM_PATH_FILE: 8
python -m pip install -U pip tox: 8
tar cf build-status CUSTOM_PATH_DIR matrix.target_arch }}-${{ github.sha }}.tar . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 10
tar xf build-status CUSTOM_PATH_DIR matrix.target_arch }}-${{ github.sha }}.tar: 10
rm -f build-status CUSTOM_PATH_DIR matrix.target_arch }}-${{ github.sha }}.tar: 10
docker push localhost:5000 CUSTOM_PATH_DIR: 10
USES: ./.github/actions/cleanup: 6
cmake .. -G Ninja -DEVE_OPTIONS="${{ matrix.cfg.opts }}" -DCMAKE_TOOLCHAIN_FILE=.. CUSTOM_PATH_DIR matrix.cfg.comp }}.${{ matrix.cfg.arch }}.cmake: 8
FLUTTER_VERSION=$(cat .. CUSTOM_PATH_DIR: 7
7z a -r .. CUSTOM_PATH_FILE *: 6
USES: babel/actions/create-comment: 7
find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -: 8
pip install FLAG tox setuptools: 10
xcross FLAG ${{ matrix.target }} run . CUSTOM_PATH_DIR: 6
cd ${{ env.KUBERNETES_INFRA_DIR }}: 7
make deploy diff="ENV_VAR" production=1: 6
WRAP=python PERF=. CUSTOM_PATH_FILE NORES=1 . CUSTOM_PATH_DIR: 9
TAG_VERSION=${{ needs.tag-validation.outputs.tag-version }}: 18
ENV_VAR8 CUSTOM_PATH_FILE contour: 9
URL_VALUE=$(kubectl get ksvc sample-app -o json | jq .status.address.url): 10
sed "s+URL_VALUE+ENV_VAR+g" ENV_VAR8 CUSTOM_PATH_FILE | kubectl apply -f -: 8
pod_name=$(kubectl get pods FLAG=job-name=fortio -o jsonpath='{.items[*].metadata.name}'): 7
kubectl wait FLAG=condition=Ready pods CUSTOM_PATH_DIR FLAG=240s: 6
sleep 150.0: 9
USES: ./.github/actions/cargo-llvm-cov: 7
df -m || true: 8
du -hd1 CUSTOM_PATH_DIR CUSTOM_PATH_DIR || true: 8
pip install . -v: 6
. CUSTOM_PATH_DIR testDebug FLAG: 6
7z x -aoa compiled-libs.zip: 7
cp target CUSTOM_PATH_FILE artifact/: 6
avocado run examples CUSTOM_PATH_FILE: 6
export AS_SPID="00000000000000000000000000000000" &&: 7
export AS_KEY="00000000000000000000000000000000" &&: 7
export AS_ALGO="sgx_epid" &&: 7
export AS_URL="URL &&: 7
. ~ CUSTOM_PATH_DIR &&: 8
docker-compose exec -T php composer require oxid-esales CUSTOM_PATH_FILE FLAG: 9
pub run build_runner test: 6
scripts CUSTOM_PATH_FILE make-concurrent: 7
echo ">>> Started chrome-driver": 14
echo ">>> Started xvfb": 15
if [[ ! -d ENV_VAR CUSTOM_PATH_DIR ]]; then mkdir -p ENV_VAR CUSTOM_PATH_DIR ; fi: 10
docker run -d FLAG -v ENV_VAR CUSTOM_PATH_DIR -e MOCK_REPO_DIR= CUSTOM_PATH_DIR -p 8080:8080 eccube CUSTOM_PATH_DIR: 10
php -S 127.0.0.1:8000 codeception CUSTOM_PATH_FILE &: 8
docker run -i FLAG FLAG certbot FLAG acme -v ENV_VAR CUSTOM_PATH_DIR certbot CUSTOM_PATH_DIR certonly FLAG ${{ matrix.keylength }} FLAG URL FLAG FLAG http -d certbot.acme FLAG certbot: 10
sudo openssl verify -CAfile examples CUSTOM_PATH_FILE -untrusted examples CUSTOM_PATH_FILE certbot CUSTOM_PATH_FILE: 30
docker run -i FLAG FLAG certbot FLAG acme -v ENV_VAR CUSTOM_PATH_DIR certbot CUSTOM_PATH_DIR certonly FLAG ${{ matrix.keylength }} FLAG URL FLAG FLAG http -d certbot.acme -d certbot. FLAG certbot: 8
cargo build FLAG ${{ matrix.target }} FLAG FLAG FLAG pem: 6
USES: phonito/phonito-scanner-action: 6
MSBuild.exe CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
pip install -r references CUSTOM_PATH_FILE: 8
docker pull demyx CUSTOM_PATH_DIR: 7
python -m pip install FLAG pip 'poetry==1.6.1': 11
"c: CUSTOM_PATH_DIR Files CUSTOM_PATH_DIR -i "s CUSTOM_PATH_DIR . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 8
value=`cat dev_tag`: 6
echo "::set-output name=DOCKER_DEV_TAG::$value": 6
value=`cat prod_tag_dated`: 6
echo "::set-output name=DOCKER_PROD_TAG_DATED::$value": 6
value=`cat repository_owner`: 6
echo "::set-output name=REPO_OWNER::$value": 6
echo "TAG is $value": 8
chmod 777 . CUSTOM_PATH_FILE: 9
set -xe -o nounset: 32
python -m tox -a -vv: 12
PIP_PRE=1 python -m tox -v -e ${{ matrix.tox-envs }} -- -v FLAG=yes: 12
python -c "import torch; print('CUDA:', torch.version.cuda)": 7
USES: autero1/action-gotestsum: 10
build_py_project_in_conda_env: 14
test_py_project: 6
. ci-support-v0: 11
REVIEW_CONTENT="ENV_VAR CUSTOM_PATH_DIR: 6
echo "::set-output name=content::ENV_VAR": 7
export CFLAGS="-m32": 10
export CXXFLAGS="-m32": 7
cd googletest-release-1.8.0 CUSTOM_PATH_DIR: 6
pytest FLAG=5 -m "document_store and integration" test CUSTOM_PATH_FILE: 9
sed -i "s CUSTOM_PATH_DIR CUSTOM_PATH_DIR Cargo.toml: 11
du -hs target: 6
rm -rf _nds CUSTOM_PATH_FILE: 8
chmod +x pyoxidizer: 6
. CUSTOM_PATH_DIR init-config-file myapp: 6
. CUSTOM_PATH_DIR build FLAG myapp: 6
move build CUSTOM_PATH_FILE .: 8
dotnet pack -c Release FLAG -o . CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 23
rustwasmc build: 7
node node CUSTOM_PATH_FILE: 10
rustwasmc clean: 17
rustwasmc build FLAG: 8
chmod +x end-to-end-tests CUSTOM_PATH_FILE: 7
git clone URL test CUSTOM_PATH_DIR: 6
xvfb-run FLAG FLAG="-screen 0 1280x960x24" -- npm run ctest: 7
copy ${{github.workspace}} CUSTOM_PATH_FILE ${{github.workspace}} CUSTOM_PATH_FILE: 22
sudo patch -l ENV_VAR CUSTOM_PATH_FILE < patch CUSTOM_PATH_FILE;: 22
git submodule update FLAG .. CUSTOM_PATH_DIR: 7
echo -en '\n' >> release_note.txt: 6
hof flow  CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 10
wget URL -P ENV_VAR: 8
sudo npm install typescript node-gyp npm -g: 6
gotestsum FLAG short-verbose . CUSTOM_PATH_DIR: 6
mv Cargo.toml Cargo.toml.orig: 6
sed "s CUSTOM_PATH_DIR Cargo.toml.orig >Cargo.toml: 6
mv Cargo.lock Cargo.lock.orig: 6
sed "s CUSTOM_PATH_DIR Cargo.lock.orig >Cargo.lock: 6
pushd _build > CUSTOM_PATH_DIR: 7
echo ::set-output name=filename::ENV_VAR-ENV_VAR: 14
rm -rf src CUSTOM_PATH_DIR src CUSTOM_PATH_FILE: 6
lerna run build:prod FLAG= CUSTOM_PATH_DIR FLAG FLAG: 8
USES: ./kogito-tooling/.github/actions/setup-env: 6
build-bin CUSTOM_PATH_DIR openzipkin CUSTOM_PATH_DIR &&: 8
build-bin CUSTOM_PATH_DIR openzipkin CUSTOM_PATH_DIR: 8
FLAG 2G \: 8
USES: ./.github/actions/tg: 8
docker run FLAG FLAG seccomp=unconfined FLAG apparmor=unconfined FLAG CUSTOM_PATH_DIR \: 20
docker run FLAG FLAG \: 6
USES: nanoufo/action-upload-artifacts-and-release-assets: 8
rm -rf . CUSTOM_PATH_DIR examples CUSTOM_PATH_DIR examples CUSTOM_PATH_FILE: 9
echo "::group::GitHub context": 11
cat <<'END': 22
echo "::group::GitHub needs": 11
${{ toJson(needs) }}: 11
if test ENV_VAR = llvm: 6
then CC= CUSTOM_PATH_DIR: 6
else CC=ENV_VAR: 6
echo >>ENV_VAR HOME=ENV_VAR: 6
cmake -B build -DCMAKE_TOOLCHAIN_FILE=ENV_VAR CUSTOM_PATH_FILE -DCMAKE_BUILD_TYPE=${{ env.BuildType }} -GNinja ENV_VAR -DTESTING=$(      test "$skip_testing" = skip_testing && echo OFF || echo ON ) -DBENCHMARKING=$( test "$skip_testing" = skip_testing && echo OFF || echo ON ) -DPACKAGE_DEB=ON: 8
cmake FLAG build FLAG ${{ env.BuildType }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}'): 8
echo ::notice::"$(. CUSTOM_PATH_DIR FLAG)": 8
cc=$(echo ENV_VAR | sed -Ee's,[- CUSTOM_PATH_DIR ): 10
build_type=$(echo ENV_VARuildType | tr A-Z a-z | sed -E -es,debug,dbg, -es,release,rel, ): 10
test $build_type = dbg -o $build_type = rel: 10
uses=$(echo "$features" | tr ' ' - | tr A-Z a-z): 10
_os=ENV_VAR:+-ENV_VAR  _cc=${cc:+-$cc}  _build_type=${build_type:+-$build_type}  _uses=${uses:+-$uses}: 10
echo >>ENV_VAR  ARTIFACT_SUFFIX=ENV_VARosENV_VARccENV_VARbuild_typeENV_VARuses: 10
echo >>ENV_VAR  _uses_suffix=ENV_VARuses: 10
echo >>ENV_VAR  _compiler_suffix=$(test $cc != gcc9 && echo ENV_VARcc): 10
echo >>ENV_VAR  _debug_suffix=$(test "$build_type" = dbg && echo -debug || true): 10
yarn install FLAG 1 FLAG: 8
echo "==> Testing Search": 7
gq \: 7
-l \: 7
FLAG="ENV_VAR CUSTOM_PATH_FILE" \: 7
FLAG="ENV_VAR CUSTOM_PATH_FILE": 7
go test -mod=readonly -timeout 30m -coverprofile=coverage.out -covermode=atomic -tags='norace ledger test_ledger_mock rocksdb_build' . CUSTOM_PATH_DIR: 22
cd x CUSTOM_PATH_DIR: 9
coverage run FLAG FLAG mmdet -m pytest tests/: 7
echo "$lines_changed lines changed.": 9
echo ::set-output name=lines_changed::$lines_changed: 9
. CUSTOM_PATH_FILE FLAG FLAG inconsistent: 6
mkdir appDir CUSTOM_PATH_DIR: 9
rm -rf apps CUSTOM_PATH_DIR: 9
poetry run python -m pytest test CUSTOM_PATH_FILE: 7
docker exec -i my_container bash -c "python test CUSTOM_PATH_FILE test CUSTOM_PATH_FILE": 8
docker exec -i my_container bash -c "tree": 10
docker rm -f my_container: 10
echo "REF=$ref" >> ENV_VAR: 8
echo "REPO=$repo" >> ENV_VAR: 8
pip install FLAG FLAG FLAG .: 9
cd ${{ env.RESC_VCS_SCANNER_DIR }}: 6
cd pymnn CUSTOM_PATH_DIR: 6
export CFG_COMMIT_HASH=`git log FLAG=format:'%h' -n 1`: 6
export CFG_COMMIT_DATE=`git log FLAG="%ci" -n 1`: 6
mv target CUSTOM_PATH_DIR matrix.target }} CUSTOM_PATH_DIR leaf-${{ matrix.target }}: 6
python -c "import wradlib; print(wradlib.show_versions())": 9
python -m ruff FLAG: 6
packages CUSTOM_PATH_FILE ${{ runner.os }} test-cache: 6
packages CUSTOM_PATH_FILE ${{ runner.os }} ~ CUSTOM_PATH_DIR: 6
export CXXFLAGS="-IENV_VAR CUSTOM_PATH_DIR: 6
ENV_VAR FLAG=x86_64 FLAG="ENV_VAR CUSTOM_PATH_DIR sunspider-js: 6
inv ci-autoconf: 6
inv install-clang-runtime: 7
inv generate-coverage-info CUSTOM_PATH_DIR ENV_VAR: 7
make -C test install-kind: 6
kind export logs FLAG ENV_VAR FLAG=debug CUSTOM_PATH_DIR: 7
pytest -v -s test CUSTOM_PATH_FILE: 18
tesseract  FLAG FLAG .. CUSTOM_PATH_DIR: 9
cd libvmi CUSTOM_PATH_DIR: 10
sudo apt install -f . CUSTOM_PATH_FILE: 10
tar xvf .. CUSTOM_PATH_FILE: 7
pip install "tox<4": 6
chmod -R a+rx ENV_VAR CUSTOM_PATH_DIR: 7
echo "logsuffix=`echo ${{ matrix.test }} | sed -e 's! CUSTOM_PATH_DIR -e 's! !_!'g`" >> ENV_VAR: 6
mkdir -p "ENV_VAR\bootjdk\$env:BOOT_JDK_VERSION": 7
ENV_VARileHash = Get-FileHash -Algorithm SHA256 "ENV_VAR CUSTOM_PATH_DIR: 8
ENV_VARileHash.Hash -eq $env:BOOT_JDK_SHA256: 7
Get-ChildItem "ENV_VAR\bootjdk\$env:BOOT_JDK_VERSION\*\*" | Move-Item -Destination "ENV_VAR\bootjdk\$env:BOOT_JDK_VERSION": 7
export CC=gcc-11: 6
export CXX=g++-11: 6
. CUSTOM_PATH_DIR serve test CUSTOM_PATH_FILE &: 12
bin CUSTOM_PATH_DIR -c 10 -n 100 -o ci-cd URL: 6
killall -r zot-*: 8
dotnet-coverage collect -s tools CUSTOM_PATH_FILE -f cobertura -o coverage CUSTOM_PATH_FILE pytest tests CUSTOM_PATH_DIR FLAG FLAG=test_results CUSTOM_PATH_FILE: 6
TAG_NAME=$(. CUSTOM_PATH_FILE): 7
.github CUSTOM_PATH_FILE 12: 13
sh test CUSTOM_PATH_FILE ${{ github.event.inputs.JAVA_SDK_VERSION }} ${{ github.event.inputs.OPENMLDB_SERVER_VERSION }} ${{ github.event.inputs.PYTHON_SDK_VERSION }} ${{ github.event.inputs.BATCH_VERSION }} ${{ github.event.inputs.DIFF_VERSIONS }}: 7
make activate_utils: 7
qmake qskinny.pro: 9
pytest -m "not dependencies" tests CUSTOM_PATH_FILE FLAG: 11
sudo apt-get install -y postgresql-client: 6
flutter pub global activate derry: 7
derry build_runner: 8
kubectl scale FLAG=0 deployments CUSTOM_PATH_DIR FLAG=claudie: 7
CC=${{ matrix.compiler.CC }}: 9
CXX=${{ matrix.compiler.CXX }}: 9
echo "CC: ENV_VAR": 7
echo "CXX: ENV_VAR": 7
dart test FLAG -t presubmit-only test CUSTOM_PATH_FILE: 10
docker load FLAG . CUSTOM_PATH_DIR: 8
docker tag certpl CUSTOM_PATH_DIR certpl CUSTOM_PATH_DIR: 7
gosec -exclude-dir=internal . CUSTOM_PATH_DIR: 10
cargo nextest run s3: 7
curl -T ENV_VAR -u ${{ secrets.CODING_ARTIFACTS_USER }}:${{ secrets.CODING_ARTIFACTS_PASS }} "URL FLAG 5: 9
curl -T ENV_VAR64_BINARY} -u ${{ secrets.CODING_ARTIFACTS_USER }}:${{ secrets.CODING_ARTIFACTS_PASS }} "URL FLAG 5: 6
cmake -S ${{ env.CMAKE_SOURCE_PREFIX }} -B ${{ env.CMAKE_BINARY_PREFIX }} -D CMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -D CMAKE_CXX_STANDARD=${{ matrix.standard }} -D CMAKE_INSTALL_PREFIX=${{ env.CMAKE_INSTALL_PREFIX }} -D CPPTERMINAL_ENABLE_DOCS=OFF: 6
cmake FLAG ${{ env.CMAKE_BINARY_PREFIX }} FLAG ${{ env.CMAKE_BUILD_TYPE }} FLAG ${{ env.CMAKE_NUMBER_JOBS }}: 11
ctest FLAG ${{ env.CMAKE_BINARY_PREFIX }} -C ${{ env.CMAKE_BUILD_TYPE }} FLAG: 11
cmake FLAG ${{ env.CMAKE_BINARY_PREFIX }} FLAG ${{ env.CMAKE_INSTALL_PREFIX }} FLAG ${{ env.CMAKE_BUILD_TYPE }}: 11
mkdir oss_temp_file CUSTOM_PATH_DIR: 7
Testing CUSTOM_PATH_FILE memcheck: 6
echo "Install Cert-Manager": 8
rake "cluster:certmanager:install[]": 8
make -f examples CUSTOM_PATH_DIR: 6
VERBOSE=1 make -f examples CUSTOM_PATH_DIR check: 6
. CUSTOM_PATH_DIR prepare_coredump_upload: 7
CRASHED=$(. CUSTOM_PATH_DIR check_crash | tail -1): 8
[[ ENV_VAR -eq "1" ]] && echo "Crashed!" || echo "Not crashed.": 8
arm64_set_path_and_python_version 3.9.7: 8
aws s3 sync dist CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR FLAG public-read FLAG max-age=ENV_VAR: 6
brew install autoconf automake libtool pkg-config curl git doxygen nasm cmake gcc gperf texinfo yasm bison autogen wget gettext meson ninja ragel groff gtk-doc libtasn1 FLAG: 6
mkdir -p ~ CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 7
npm run cms:test: 11
echo "::set-output name=file::build CUSTOM_PATH_FILE2": 17
. CUSTOM_PATH_DIR tarTestLogs: 17
echo "BUILD_JAVA_VERSION=8" >> ENV_VAR: 11
echo 'Acquire::Retries "ENV_VAR";' | sudo tee -a CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 9
curl FLAG ENV_VAR -O -L URL: 6
tar xf cmake-ENV_VAR-Linux-x86_64.tar.gz: 10
echo "cmake-ENV_VAR-Linux-x86_64 CUSTOM_PATH_DIR >> ENV_VAR: 10
sudo apt-get FLAG install mosquitto: 6
. CUSTOM_PATH_DIR build -Pbtdebug FLAG=plain FLAG FLAG: 6
cp src CUSTOM_PATH_FILE src CUSTOM_PATH_FILE-version}} CUSTOM_PATH_DIR: 6
ENV_VARrrorActionPreference = "SilentlyContinue": 11
tesseract FLAG: 8
flutter test integration_test CUSTOM_PATH_FILE FLAG USE_LOCAL_SERVER=true: 6
cmake FLAG . FLAG ${{ matrix.type }}: 6
. CUSTOM_PATH_DIR cert_suite . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 6
TAGS="docker.io CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
elif [[ ENV_VAR == refs CUSTOM_PATH_DIR ]]; then: 8
ln -s .. CUSTOM_PATH_DIR client CUSTOM_PATH_DIR: 16
npm clean-install FLAG=false FLAG: 8
CGO_ENABLED=0 go build . CUSTOM_PATH_DIR: 15
USES: ./.github/actions/run-action: 6
python -m pytest tests CUSTOM_PATH_FILE: 7
DIFF="ENV_VAR CUSTOM_PATH_DIR: 6
echo ::set-output name=IMAGE_NAME::qqbothub: 6
docker load -i antrea-ubuntu CUSTOM_PATH_FILE: 7
builder . CUSTOM_PATH_DIR crates CUSTOM_PATH_FILE: 20
. CUSTOM_PATH_FILE1 "${{matrix.options.framework}}": 9
. CUSTOM_PATH_FILE1 "${{matrix.options.os}}" "${{matrix.options.framework}}" "${{matrix.options.runtime}}" "${{matrix.options.codecov}}": 9
cmake FLAG "ENV_VAR" -j: 13
yarn ember build -prod: 7
cargo install mdbook-linkcheck: 7
dotnet restore profiler CUSTOM_PATH_FILE CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
dotnet build -c Release profiler CUSTOM_PATH_FILE -p:Platform=x64 -p:CheckEolTargetFramework=false: 6
USES: ansible-community/ansible-lint-action: 12
npm install -g bower: 6
cd build-${{ matrix.cfg.name }}: 6
echo "" >> release-body.md: 6
cd integrations CUSTOM_PATH_DIR matrix.img }}: 9
pip install poetry~=1.2.0: 8
USES: ./.github/actions/pack-build: 8
out CUSTOM_PATH_DIR: 10
cd seqan-build: 7
USES: ./.github/actions/check-dirty-git: 17
curl -Lo sdcc.tar.gz URL: 8
cd gbdk-2020: 9
composer exec phpunit -- FLAG Elasticsearch,Elastica: 6
cd misc/: 6
cargo +beta build: 10
bin CUSTOM_PATH_FILE -p -r -t python repotests CUSTOM_PATH_DIR -o bomresults CUSTOM_PATH_FILE FLAG: 6
bin CUSTOM_PATH_FILE FLAG -p -r -t python repotests CUSTOM_PATH_DIR -o bomresults CUSTOM_PATH_FILE FLAG: 6
diff -wu wcfsetup CUSTOM_PATH_FILE node_modules CUSTOM_PATH_FILE: 9
echo "only docs modified, no need to trigger CI": 9
source pass.sh: 10
sudo mv . CUSTOM_PATH_DIR CUSTOM_PATH_DIR && sudo chmod a+x CUSTOM_PATH_DIR: 6
cd ${{ matrix.stack.name }}: 8
USES: ./.github/actions/sysbench: 6
rm -rf unity CUSTOM_PATH_DIR: 8
sed -E "s~(\\\$db = new.+Persistence\\\\Sql)\(.+\);~\\1('ENV_VAR', 'ENV_VAR', 'ENV_VAR');~g" -i demos CUSTOM_PATH_FILE: 10
vendor CUSTOM_PATH_DIR -vv FLAG behat.yml.dist: 6
cd ui CUSTOM_PATH_DIR: 8
climetlab versions: 7
pip install -r requirements_py CUSTOM_PATH_FILE: 7
composer require illuminate CUSTOM_PATH_DIR matrix.laravel-version }} FLAG FLAG FLAG: 6
coverage run FLAG FLAG mmseg -m pytest tests/: 6
USES: ./.github/workflows/maven-goal: 9
meson test -C builddir FLAG=ci FLAG FLAG: 7
echo 🏅: 9
USES: ./.github/templates/run_in_venv: 10
sudo -E CUSTOM_PATH_DIR uninstall: 6
ln -s ENV_VAR ENV_VAR CUSTOM_PATH_DIR: 7
cd laravel && php artisan badaso:setup FLAG && php artisan badaso-test:setup && php artisan db:wipe && php artisan migrate && php artisan db:seed FLAG="Database\Seeders\Badaso\BadasoSeeder": 6
cd laravel && php artisan test: 6
UEFITOOL_VER=$(cat .. CUSTOM_PATH_FILE | grep PROGRAM_VERSION | cut -d'"' -f2 | sed 's CUSTOM_PATH_DIR alpha CUSTOM_PATH_DIR ; \: 6
7z rn "$zip_path" publish $env:ProjectName: 7
msbuild win-build\Yuescript.sln CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
node-gyp install $(node -v): 6
cd selene: 6
USES: ./.docker/php-7.2: 10
USES: ./.docker/php-7.3: 8
USES: ./.docker/php-7.3-with-xdebug: 11
. CUSTOM_PATH_DIR -p example_files CUSTOM_PATH_DIR > CUSTOM_PATH_DIR: 6
mv build CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 6
USES: miniscruff/changie-action: 8
curl FLAG -u ENV_VAR:ENV_VAR -X POST -F file= CUSTOM_PATH_FILE URL: 6
cd toonz: 6
-executable=OpenToonz.app CUSTOM_PATH_DIR \: 12
bench="${bench CUSTOM_PATH_DIR: 6
dart analyze FLAG lib test: 9
flutter analyze FLAG lib: 6
USES: vaind/download-artifact: 7
USES: ./.github/actions/handle-tagged-build: 10
mkdir -p plugins CUSTOM_PATH_DIR: 6
go build FLAG=plugin -o plugins CUSTOM_PATH_FILE extensions CUSTOM_PATH_FILE: 8
npm install -g mustache: 6
tox -e "pyENV_VAR CUSTOM_PATH_DIR: 7
npx  CUSTOM_PATH_DIR install chrome: 6
dart test -p firefox: 28
dart run build_runner test FLAG -- -p chrome,firefox: 6
USES: Icalinguaplusplus/node-pm-action: 10
USES: ./.github/actions/install_toolchain: 7
USES: openziti/ziti-ci: 9
sudo -H python3 ENV_VAR CUSTOM_PATH_FILE: 15
git diff FLAG -- .: 7
npm i -g cordova: 9
pip uninstall -y doc-builder: 6
cd doc-builder: 6
echo URL env.branch-name }} CUSTOM_PATH_FILE: 6
Copy-Item -Path . CUSTOM_PATH_DIR -Recurse -Destination . CUSTOM_PATH_DIR: 6
USES: ./.github/actions/dev-ipfs-pin: 6
sh ENV_VAR CUSTOM_PATH_FILE: 12
cd galata: 6
pip install -r haupt CUSTOM_PATH_FILE: 7
USES: wangsijie/feishu-bot: 6
echo "ARCHIVE_PATH=$(pwd) CUSTOM_PATH_FILE" >> ENV_VAR: 8
dart run realm_dart archive FLAG $(pwd) CUSTOM_PATH_DIR FLAG ENV_VAR: 8
bash wait_for_local_port.bash 8000 40: 7
set -ex -o pipefail;: 6
cp target CUSTOM_PATH_DIR env.target_ext }} crates CUSTOM_PATH_DIR env.target_arch }}${{ env.target_ext }}: 6
docker login -u '${{ secrets.DOCKER_USER }}' -p '${{ secrets.DOCKER_PASS }}': 9
#make -C cmake.output CUSTOM_PATH_DIR cmake_pch.hxx.pch: 8
ts-node . CUSTOM_PATH_FILE: 8
docker exec node-parachain cat CUSTOM_PATH_FILE: 12
cd swig-3.0.12: 6
cd micro-manager: 6
if echo >> ~ CUSTOM_PATH_DIR && grep -qE ".wasmedge CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR then echo "Failed: Source Lines found" && cat ~ CUSTOM_PATH_DIR && exit 1;else echo "Pass: Source Lines Removed"; fi;: 6
ls ~ CUSTOM_PATH_DIR | grep libwasmedgePluginWasiNN.so && echo "Pass: Plugins found" || (echo "Fail: Plugins not found" && exit 1): 8
mkdir -p . CUSTOM_PATH_DIR && cp . CUSTOM_PATH_FILE . CUSTOM_PATH_DIR: 7
mv examples CUSTOM_PATH_FILE examples CUSTOM_PATH_FILE: 25
USES: dashanji/kubernetes-log-export-action: 10
hadoop fs -put ENV_VAR CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 6
cmd CUSTOM_PATH_DIR matrix.config.build_type }} CUSTOM_PATH_DIR: 6
git submodule update FLAG FLAG . CUSTOM_PATH_DIR: 6
cd . CUSTOM_PATH_DIR && make -j2: 6
make gcov: 6
rush build -o server: 6
make hosts stats index: 27
find "ENV_VAR CUSTOM_PATH_DIR -name "Firebase*latest.zip" -exec unzip -d "ENV_VAR" CUSTOM_PATH_DIR {} +: 11
([ -z $plist_secret ] || scripts CUSTOM_PATH_FILE scripts CUSTOM_PATH_FILE "ENV_VAR"): 10
mv out CUSTOM_PATH_DIR .: 7
export DISPLAY=:0.0 : 7
echo "icestudio_version=${version}" >> ENV_VAR: 6
git submodule update FLAG FLAG FLAG 1 \: 9
FreeRTOS CUSTOM_PATH_DIR \: 9
FreeRTOS-Plus CUSTOM_PATH_DIR \: 92
FreeRTOS-Plus CUSTOM_PATH_DIR: 9
git -C FreeRTOS-Plus CUSTOM_PATH_DIR submodule update FLAG FLAG FLAG 1 source CUSTOM_PATH_DIR: 9
echo -e "${{ env.bashPass }} ${{ env.stepName }} ${{ env.bashEnd }} ": 26
USES: FreeRTOS/CI-CD-GitHub-Actions/executable-monitor: 25
echo "::group::${{ env.stepName }}": 6
curl -sSf -u "${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }}" -H "Content-Type: multipart CUSTOM_PATH_DIR FLAG " CUSTOM_PATH_DIR matrix.arch }}.deb" "${{ secrets.NEXUS_URL }} CUSTOM_PATH_DIR: 14
if [[ "${{ contains(github.event.pull_request.labels.*.name, 'size CUSTOM_PATH_DIR }}" == "true" ]]; then LABELS+="\"size CUSTOM_PATH_DIR "; fi: 12
echo '{ "exec-opts": ["native.cgroupdriver=systemd"] }' | sudo tee CUSTOM_PATH_FILE: 22
ENV_VAR $index && ENV_VAR -d && ENV_VAR $index -u: 8
ENV_VAR $index: 6
ENV_VAR $index -u: 6
export TORCH_PATH=$(dirname $(python -c "import torch; print(torch.__file__)")): 6
cmake .. -DTorch_DIR=ENV_VAR CUSTOM_PATH_DIR: 6
USES: ./.github/actions/restore-python: 9
go test -race -coverprofile=.. CUSTOM_PATH_FILE -covermode=atomic -v: 6
cd '${{github.workspace}}': 6
## Install `rust` toolchain: 7
rustup toolchain install stable FLAG -c rustfmt FLAG minimal: 6
bundle exec jekyll build -s sandbox -d sandbox CUSTOM_PATH_DIR FLAG: 6
dart run build_runner test FLAG FLAG -- -p chrome,firefox: 10
sed 's CUSTOM_PATH_DIR >> "ENV_VAR": 6
echo "version=$(yarn node -p "require('. CUSTOM_PATH_FILE")" >> ENV_VAR: 6
curl -fsSL URL env.hcloudctl_version }} CUSTOM_PATH_FILE | tar -xzv hcloud ; mv hcloud hack CUSTOM_PATH_DIR: 6
go mod edit -replace github.com CUSTOM_PATH_FILE CUSTOM_PATH_DIR steps.get-latest-commit.outputs.sha }}: 14
yarn global add jest mocha || \: 14
yarn workspace  CUSTOM_PATH_DIR test-pw: 9
poetry run pip install setuptools==59.5.0: 12
CI_BRANCH_PUSH=${{ github.event.ref }}: 9
CI_BRANCH_PUSH=ENV_VAR CUSTOM_PATH_DIR: 9
CI_BRANCH_WORKFLOW_RUN=${{ github.event.workflow_run.head_branch }}: 9
CI_SHA_PUSH=${{ github.event.head_commit.id }}: 9
CI_SHA_WORKFLOW_RUN=${{ github.event.workflow_run.head_sha }}: 9
[[ ! -z "ENV_VAR" ]] && echo "CI_BRANCH=ENV_VAR" >> ENV_VAR || echo "CI_BRANCH=ENV_VAR" >> ENV_VAR: 9
[[ ! -z "ENV_VAR" ]] && echo "CI_SHA=ENV_VAR" >> ENV_VAR || echo "CI_SHA=ENV_VAR" >> ENV_VAR: 9
echo "env.CI_BRANCH = ${{ env.CI_BRANCH }}": 11
echo "env.CI_SHA = ${{ env.CI_SHA }}": 11
echo "original branch = $(git branch FLAG)": 9
git fetch && git checkout ${{ env.CI_BRANCH }}: 9
echo "updated branch = $(git branch FLAG)": 9
git checkout ${{ env.CI_SHA }}: 9
echo "log = $(git log -n 1)": 9
echo "HAXEPATH=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 14
haxelib install hxcpp 4.2.1 FLAG: 11
haxelib install format FLAG: 11
haxelib install hxp FLAG: 11
echo "HXCPP_COMPILE_CACHE=~ CUSTOM_PATH_DIR >> ENV_VAR: 9
haxelib dev lime ENV_VAR: 6
haxelib run lime rebuild tools -nocolor -verbose -nocffi: 6
haxelib run lime setup -alias -y -nocffi: 16
haxelib git lime-samples URL FLAG: 10
haxelib dev lime lime-haxelib: 10
lime create HelloWorld -verbose -nocolor: 10
lime create SimpleImage -verbose -nocolor: 10
lime create SimpleAudio -verbose -nocolor: 10
cat ~ CUSTOM_PATH_FILE >>  ~ CUSTOM_PATH_FILE: 6
cp -r ~ CUSTOM_PATH_DIR ~ CUSTOM_PATH_DIR: 9
python3 misc CUSTOM_PATH_FILE compress build CUSTOM_PATH_DIR -o build CUSTOM_PATH_FILE: 9
curl -sS -w " -> ENV_VAR CUSTOM_PATH_FILE \n" FLAG PUT FLAG "AccessKey: ENV_VAR" FLAG "Content-Type: image CUSTOM_PATH_DIR FLAG ENV_VAR CUSTOM_PATH_FILE FLAG  CUSTOM_PATH_FILE: 6
build CUSTOM_PATH_DIR FLAG build CUSTOM_PATH_FILE FLAG build CUSTOM_PATH_FILE FLAG 3: 6
sudo echo "" >> data CUSTOM_PATH_FILE: 6
sudo echo "[Directory]" >> data CUSTOM_PATH_FILE: 6
sudo echo "url_prefix: CUSTOM_PATH_DIR >> data CUSTOM_PATH_FILE: 6
OPENBLAS_NUM_THREADS=2 qemu-riscv64 . CUSTOM_PATH_DIR: 8
OPENBLAS_NUM_THREADS=2 qemu-riscv64 . CUSTOM_PATH_DIR < . CUSTOM_PATH_DIR: 8
OPENBLAS_NUM_THREADS=1 OMP_NUM_THREADS=1 qemu-riscv64 . CUSTOM_PATH_DIR < . CUSTOM_PATH_FILE: 8
OPENBLAS_NUM_THREADS=2 qemu-riscv64 . CUSTOM_PATH_DIR < . CUSTOM_PATH_FILE: 8
conda activate tmbuild: 9
cd swayfx: 10
python scripts CUSTOM_PATH_FILE FLAG=duckdb CUSTOM_PATH_DIR FLAG=build CUSTOM_PATH_DIR FLAG=.github CUSTOM_PATH_FILE FLAG FLAG=2: 7
spack bootstrap disable github-actions-v0.5: 6
spack bootstrap disable github-actions-v0.4: 8
toolchain=$(. CUSTOM_PATH_FILE gotoolchain | sed 's CUSTOM_PATH_DIR: 12
echo "GOVERSION=${toolchain}" >> ENV_VAR: 12
echo "::set-output name=toolchain_version::nightly-$(date +%Y-%m-%d)": 8
USES: CQLabs/setup-dcm: 7
gcloud storage cp "ENV_VAR CUSTOM_PATH_DIR "ENV_VAR CUSTOM_PATH_DIR: 9
kubectl get -f ENV_VAR CUSTOM_PATH_FILE: 9
kubectl describe -f ENV_VAR CUSTOM_PATH_FILE: 9
kubectl wait FLAG=condition=Ready pod CUSTOM_PATH_DIR FLAG=300s || true: 7
echo show pvc: 7
echo show pv: 7
kubectl get pv -o wide: 11
echo show svc: 7
echo show sts: 7
echo show po: 7
echo describe po: 7
echo describe pvc: 7
kubectl wait FLAG=condition=Ready pod CUSTOM_PATH_DIR FLAG=0s: 9
script -e -c "npm test": 6
cp . CUSTOM_PATH_FILE D: CUSTOM_PATH_DIR: 6
composer install FLAG FLAG -o FLAG: 10
EXECUTABLE=ENV_VAR%%-*}  # remove any -* suffixe: 6
cd . CUSTOM_PATH_DIR ; zip -r .. CUSTOM_PATH_FILE *: 6
conan cache clean "*" -sbd: 6
sudo apt-get update && sudo apt-get install binfmt-support qemu-user-static: 6
python tools CUSTOM_PATH_FILE math: 7
yarn build ENV_VAR: 7
USES: ./.github/actions/build-cache-download: 7
cd ultra: 16
scl scenario build-all ultra CUSTOM_PATH_DIR: 8
sudo . CUSTOM_PATH_DIR generic CUSTOM_PATH_DIR: 127
sudo apt-fast install -y postgresql-client: 8
psql eccube_db -h 127.0.0.1 -U postgres -c "update dtb_base_info set authentication_key='test';": 8
mysql -h 127.0.0.1 -u root -ppassword eccube_db -e "update dtb_base_info set authentication_key='test';": 8
vendor CUSTOM_PATH_DIR -vvv run acceptance FLAG chrome,github_action EA10PluginCest:ENV_VAR: 8
GOARCH=arm GOOS=linux go get -t .: 6
GOARCH=amd64 GOOS=linux go get -t .: 6
GOARCH=amd64 GOOS=darwin go get -t .: 6
GOARCH=arm GOOS=linux go build . : 6
GOARCH=amd64 GOOS=linux go build .: 6
GOARCH=amd64 GOOS=darwin go build .: 6
go build -tags=${{ matrix.tags }}: 6
cd daemon: 8
ls -al ENV_VAR: 13
C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "ENV_VAR") && rm -f local CUSTOM_PATH_DIR tar -cf CUSTOM_PATH_DIR env.STAGE }}.tar FLAG local': 12
C:\\tools\\cygwin\\bin\\bash -l -c 'cd $(cygpath -u "ENV_VAR") && .github CUSTOM_PATH_FILE CUSTOM_PATH_DIR env.PREVIOUS_STAGES }}.tar': 9
rm download CUSTOM_PATH_FILE: 6
mv download CUSTOM_PATH_FILE.* dist CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_DIR publishToMavenLocal -x javadoc: 6
. CUSTOM_PATH_DIR build FLAG .. CUSTOM_PATH_FILE${{ inputs.no-build-cache && ' FLAG' || '' }}: 6
echo "VERSION=$(echo ${{ github.ref }} | awk -F/ '{print $3}')" >> ENV_VAR: 8
docker push sifchain CUSTOM_PATH_DIR: 10
python3 -m pip install FLAG eager FLAG indexed_gzip pgzip: 7
## Run it: 6
deno run -A _tasks CUSTOM_PATH_FILE: 6
. CUSTOM_PATH_FILE ${{ inputs.type }} ENV_VAR ${{ inputs.version }}: 11
npx markuplint InvenTree CUSTOM_PATH_FILE: 8
dotnet build src CUSTOM_PATH_FILE/ -c Release FLAG -p:RepositoryBranch=ENV_VAR -p:ContinuousIntegrationBuild=true -p:DeterministicSourcePaths=true CUSTOM_PATH_DIR: 9
sudo apt install libaec0 libaec-dev: 12
npm run clear: 6
[[ "${{ steps.node-modules.outputs.success }}" != "false" ]] || exit 1: 12
npm run vsce:bump "dev" "toBeCreated": 6
mkdir ${{ github.job }}: 6
tar -zxf openmldb-linux.tar.gz -C ${{ github.job }}/: 6
bash ${{ github.job }} CUSTOM_PATH_DIR env.E_VERSION }}-linux CUSTOM_PATH_FILE: 25
mkdir mvnrepo: 6
export MAVEN_OPTS="-Dmaven.repo.local=$(pwd) CUSTOM_PATH_DIR: 6
tar -zcvf surefire-reports.tar.gz test CUSTOM_PATH_DIR: 11
mkdir log: 14
rm -f  ~ CUSTOM_PATH_FILE: 10
docker pull ${{ vars.GAR_BASE }} CUSTOM_PATH_DIR vars.CI_IMAGE_NAME }}:sha-${{ env.GITHUB_SHA_SHORT }}: 7
pip3 install -r requirements_packaging.txt: 6
lipo -create -output x86_64-apple-darwin CUSTOM_PATH_FILE x86_64-apple-darwin CUSTOM_PATH_FILE .. CUSTOM_PATH_FILE: 6
pip3 install pytest nbmake wheel FLAG setuptools: 13
go test -race -count=1 . CUSTOM_PATH_DIR: 8
tar -czf log.tar.gz log: 15
USES: jruby/jruby-ci-build: 13
FLAG src CUSTOM_PATH_FILE-chrome \: 12
bin CUSTOM_PATH_DIR run &: 7
bin CUSTOM_PATH_DIR healthcheck: 7
cd CUSTOM_PATH_DIR && xvfb-run -a bin CUSTOM_PATH_DIR FLAG_filter=${{ env.GTEST_FILTER_STRING }}: 46
cd CUSTOM_PATH_DIR && xvfb-run -a bin CUSTOM_PATH_DIR FLAG_impl=plain FLAG_min_samples=1 FLAG_force_samples=1 FLAG_verify_sanity FLAG_unstable=1 FLAG_filter=${{ env.GTEST_FILTER_STRING }}: 25
gem install cookstyle: 13
cookstyle . CUSTOM_PATH_DIR: 7
rpmbuild -ba .. CUSTOM_PATH_FILE: 17
cd . CUSTOM_PATH_DIR && \: 7
make download_wheels && \: 6
docker login -u ${{ secrets.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_PASSWORD }} docker.io && \: 6
cd `pwd` CUSTOM_PATH_DIR: 6
dotnet test test CUSTOM_PATH_FILE FLAG FLAG TestCategory!=OPTIONAL-TEST CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE" CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_FILE': 6
echo "[workspace]" > Cargo.toml: 6
echo "members = [" >> Cargo.toml: 6
echo "]" >> Cargo.toml: 6
echo "" >> Cargo.toml: 6
make test-slow: 8
export FALLBACK_DOWNLOAD_PATH=URL: 6
echo "sha256:" >> checksums.txt: 12
echo "FLAG" >> checksums.txt: 36
shasum * >> checksums.txt: 12
echo "openssl-sha256:" >> checksums.txt: 12
sha256sum * >> checksums.txt: 10
tar -cvzf .. CUSTOM_PATH_DIR needs.get-version.outputs.version }}.tar.gz *: 10
PV_ACCESS_KEY=${{secrets.PV_VALID_ACCESS_KEY}} cargo test FLAG: 6
USES: Totto16/setup-gcc: 7
python xarray CUSTOM_PATH_FILE: 9
sudo docker cp qr: CUSTOM_PATH_FILE spoiler/: 122
. CUSTOM_PATH_DIR xdebug on: 7
. CUSTOM_PATH_DIR xdebug off: 7
. CUSTOM_PATH_DIR ioncube on: 7
. CUSTOM_PATH_DIR ioncube off: 7
echo "MANUAL_REBUILD_ON_NIGHTLY=${{ github.event_name == 'workflow_dispatch' && contains(github.event.inputs.message, '[nightly branch]') }}" >> ENV_VAR: 6
echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> ENV_VAR: 7
echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> ENV_VAR: 7
cosign sign -y $(docker inspect FLAG='{{index .RepoDigests 0}}' aquasec CUSTOM_PATH_DIR: 6
msbuild -m $env:Solution_Path CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
pip${{ matrix.python-version }} install -e git+URL: 12
yarn set version 1.22.18: 8
TMP_KEYSTORE_DIR_PATH="ENV_VAR" CUSTOM_PATH_DIR: 6
TMP_KEYSTORE_FILE_PATH="ENV_VAR" CUSTOM_PATH_FILE: 6
python -m pip install FLAG pip && pip install tox: 6
sha256sum "ENV_VAR" > "ENV_VAR.sha256": 8
curl -J -L "ENV_VAR" -o idasdk83.zip: 6
unzip -P ENV_VAR idasdk83.zip: 6
conda activate psi4env: 11
cd host CUSTOM_PATH_DIR: 6
stat ${{ matrix.volume }} CUSTOM_PATH_FILE2w: 6
sudo sh -c "echo 0 > CUSTOM_PATH_DIR: 6
echo '{"hello": "World"}' | docker run -i FLAG tomwright CUSTOM_PATH_DIR -r json 'hello': 6
(cd . CUSTOM_PATH_DIR . CUSTOM_PATH_FILE): 10
chmod +x evtx-sigma-checker: 6
. CUSTOM_PATH_FILE findings.json .github CUSTOM_PATH_FILE: 6
melos pub get: 13
USES: ./.github/actions/setup-os: 7
rosdep init: 7
Copy-Item -Path . -Destination "C:\ungoogled-chromium-windows" -Recurse: 32
 CUSTOM_PATH_FILE FLAG: 13
cargo build FLAG relm-examples CUSTOM_PATH_FILE: 9
tag=${{ github.event.inputs.v6d_version }}-${arch}: 12
npm publish FLAG FLAG public packages CUSTOM_PATH_FILE: 8
cd . CUSTOM_PATH_DIR && php artisan dusk: 9
cat Packages CUSTOM_PATH_FILE: 6
dart test test CUSTOM_PATH_FILE: 9
export ASAN_OPTIONS=alloc_dealloc_mismatch=0,detect_leaks=0: 18
cp -rf release CUSTOM_PATH_DIR release CUSTOM_PATH_DIR: 8
echo "keepcache=1" >> CUSTOM_PATH_FILE: 10
tar xvf prep CUSTOM_PATH_FILE: 11
suricatasc -h: 17
suricata-update -V: 19
test -e CUSTOM_PATH_FILE: 34
cp prep CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR: 13
chmod 755 ENV_VAR CUSTOM_PATH_DIR: 14
tar xf prep CUSTOM_PATH_FILE: 54
python3 . CUSTOM_PATH_FILE -q FLAG: 16
test ! -e CUSTOM_PATH_FILE: 9
make install-headers: 6
bash __tests__ CUSTOM_PATH_FILE "${{ matrix.version }}" "${{ steps.setup-java.outputs.path }}": 6
conda info | grep active: 6
sh community_images CUSTOM_PATH_FILE yes: 6
python3 -m setup bdist_wheel FLAG macosx-10.6-x86_64 FLAG CUSTOM_PATH_DIR: 6
ctest -C ${{ matrix.build_type }} FLAG: 15
FLAG="${{ github.workspace }} CUSTOM_PATH_DIR \: 6
cd ESP32_AP-Flasher: 23
export PLATFORMIO_BUILD_FLAGS="-D BUILD_VERSION=${{ github.ref_name }} -D SHA=ENV_VAR": 8
cp ~ CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 8
cp .pio CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 32
USES: ./.github/actions/tegola-setup-env: 7
python3 scripts CUSTOM_PATH_FILE benchmark: 7
mv tmp CUSTOM_PATH_FILE output CUSTOM_PATH_FILE: 6
corepack enable && yarn install FLAG: 12
yarn workspace  CUSTOM_PATH_DIR lint:ci: 7
yarn test:conformance:generate-inputs FLAG: 7
cp lib CUSTOM_PATH_FILE electron-template CUSTOM_PATH_FILE: 6
New-Item -Path ". CUSTOM_PATH_DIR -Name "gh-gei" -ItemType "directory": 6
New-Item -Path ". CUSTOM_PATH_DIR -Name "gh-ado2gh" -ItemType "directory": 6
New-Item -Path ". CUSTOM_PATH_DIR -Name "gh-bbs2gh" -ItemType "directory": 6
Copy-Item . CUSTOM_PATH_FILE . CUSTOM_PATH_FILE: 6
gh extension install .: 6
source pykaldi_env CUSTOM_PATH_DIR: 6
cargo fmt FLAG FLAG=perf CUSTOM_PATH_FILE -- FLAG: 10
cargo fmt FLAG FLAG=examples CUSTOM_PATH_FILE -- FLAG: 21
cargo clippy FLAG FLAG=perf CUSTOM_PATH_FILE -- -D warnings: 10
cargo clippy FLAG FLAG=examples CUSTOM_PATH_FILE -- -D warnings: 21
component_tag=ENV_VAR CUSTOM_PATH_DIR needs.common_variables.outputs.NAVITIA_TAG }}: 8
USES: linuxwacom/libwacom/.github/actions/pkginstall: 7
echo "request_body $request_body": 7
cp release CUSTOM_PATH_FILE jcli-repo: 20
trivy FLAG 1 FLAG "ENV_VAR" ENV_VAR wso2 CUSTOM_PATH_DIR || EXIT_CODE=$?: 9
zypper FLAG FLAG ref: 7
cmake .. -DCMAKE_BUILD_TYPE=Debug -DBUILD_WERROR=ON: 10
mkdir -p ~ CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 13
cp strawberry-*.tar.xz CUSTOM_PATH_DIR: 7
cp strawberry-*.tar.xz ~ CUSTOM_PATH_DIR: 6
dpkg-buildpackage -b -d -uc -us -nc -j2: 9
cp CUSTOM_PATH_FILE} ENV_VAR CUSTOM_PATH_DIR: 10
makensis strawberry.nsi: 8
rm -f CUSTOM_PATH_FILE}: 8
7z x -o"${{github.workspace}} CUSTOM_PATH_DIR "${{github.workspace}} CUSTOM_PATH_FILE": 12
copy "${{github.workspace}} CUSTOM_PATH_FILE" "C: CUSTOM_PATH_DIR Files (x86) CUSTOM_PATH_DIR: 20
echo "is_parent_modified=ENV_VAR" >> ENV_VAR: 9
echo "IS_PARENT_MODIFIED=true" >> ENV_VAR: 20
python python_examples CUSTOM_PATH_FILE: 8
sudo python3 -m pip install -r plugins CUSTOM_PATH_FILE: 6
cd ci-image-diff: 7
php . CUSTOM_PATH_DIR FLAG: 9
USES: ./.github/actions/maximize-disk-space: 6
cp -r .github CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 6
flutter clean && cd example && flutter clean: 11
USES: ./.github/commands/dependencies/install_yarn_deps: 6
dart analyze FLAG  .: 10
sudo apt-get update -yq && sudo apt-get install webp: 8
USES: ./.github/actions/BuildAndTest: 24
tee CUSTOM_PATH_FILE CUSTOM_PATH_DIR > CUSTOM_PATH_DIR <<EOT: 7
rm -rf data: 11
USES: SSSD/sssd-ci-containers/actions/exec: 6
cat > . CUSTOM_PATH_DIR <<EOL: 7
FROM alpine: 7
yarn build:workspace: 6
docker exec -i pki ENV_VAR CUSTOM_PATH_FILE: 12
make -j8 -C lib CUSTOM_PATH_DIR all V=1 CFLAGS_WARN="-Werror": 6
bash tools CUSTOM_PATH_FILE ${{ matrix.BuildType }}: 20
"gipfl CUSTOM_PATH_DIR "dev-master as 99.x-dev" \: 50
. CUSTOM_PATH_DIR -I ENV_VAR CUSTOM_PATH_FILE -PchaincodeRepoDir=ENV_VAR CUSTOM_PATH_DIR publishShimPublicationToFabricRepository: 10
docker cp -a $container_id: CUSTOM_PATH_DIR build-${{matrix.ver}}-${{matrix.arch}}/: 11
docker build -t metrue CUSTOM_PATH_DIR -f . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 8
docker push metrue CUSTOM_PATH_DIR: 8
docker buildx imagetools inspect featureprobe CUSTOM_PATH_DIR: 7
USES: ./setup-buildx/: 7
tools CUSTOM_PATH_FILE1 -Config ${{ matrix.configuration }} -Arch ${{ matrix.platform }} -Verbose: 8
git config FLAG url."URL secrets.GH_TOKEN }} CUSTOM_PATH_FILE ssh: CUSTOM_PATH_FILE/: 9
ln -s ENV_VAR CUSTOM_PATH_DIR CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 11
cd packages CUSTOM_PATH_DIR && npm run test: 17
echo "BRANCH_OPTIONS=-Poss-snapshots -Dquarkus.version=999-SNAPSHOT" >> ENV_VAR: 6
docker exec ENV_VAR . CUSTOM_PATH_DIR analyse FLAG 1G FLAG=phpstan-components.neon FLAG=src CUSTOM_PATH_FILE src CUSTOM_PATH_DIR: 22
USES: konveyor/get-env-info: 8
source activate peft: 9
. CUSTOM_PATH_FILE Build: 10
make deps-backend: 12
tar zxvf generated_files.tar.gz: 10
apptainer exec ${{github.workspace}} CUSTOM_PATH_FILE \: 12
cmake3 -D CMAKE_CXX_STANDARD=ENV_VAR -P devel-tools CUSTOM_PATH_FILE: 6
pytest ${{ matrix.pytest-args }} tests CUSTOM_PATH_FILE: 10
cp sdk-specifications CUSTOM_PATH_FILE tests CUSTOM_PATH_DIR: 6
USES: ./.github/actions/install-xsltproc: 6
cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_WERROR=ON: 6
curl -f -O -L URL: 6
docker pull quay.io CUSTOM_PATH_DIR || true: 8
bash tool CUSTOM_PATH_FILE x64: 6
docker run FLAG build -v ENV_VAR: CUSTOM_PATH_DIR FLAG BUILD_NO="-ENV_VAR" sdrpp_build CUSTOM_PATH_FILE: 6
python3 files CUSTOM_PATH_FILE files CUSTOM_PATH_FILE src CUSTOM_PATH_FILE: 9
python3 files CUSTOM_PATH_FILE files CUSTOM_PATH_FILE files CUSTOM_PATH_FILE: 8
java -jar BitsNPicas.jar convertbitmap -f bdf -o dist CUSTOM_PATH_FILE src CUSTOM_PATH_FILE: 9
exit ${{ steps.compileindocker.outputs.out }}: 10
echo ::set-output name=version::$(echo ENV_VAR:10}): 7
echo ::set-output name=revision::1: 6
echo ::set-output name=path::$(pwd): 7
nix-shell FLAG true: 9
sudo make uninstall && rm -rf *: 64
USES: ./.github/actions/setup-and-cache: 13
yarn config set cache-folder CUSTOM_PATH_DIR: 6
dotnet publish -c Release -o .. CUSTOM_PATH_DIR: 7
zip -qq -r .. CUSTOM_PATH_FILE .. CUSTOM_PATH_DIR: 7
cp txt CUSTOM_PATH_FILE tmp CUSTOM_PATH_DIR: 10
MIX_ENV=test PROXY_DATABASE_TYPE=mysql PROXY_CLUSTER_STRATEGY=gossip PROXY_HTTP_PORT=9005 SPAWN_STATESTORE_KEY=3Jnb0hZiHIzHTOih7t2cTEPEpY98Tu1wvQkPfq CUSTOM_PATH_DIR elixir FLAG spawn -S mix test: 7
cp contracts CUSTOM_PATH_FILE ENV_VAR: 18
mv .. CUSTOM_PATH_DIR bin/: 6
USES: FuelLabs/.github/.github/actions/slack-notify-template: 7
swift .github CUSTOM_PATH_FILE set -go -p MIDIKit "Examples CUSTOM_PATH_FILE" -branch ${{ github.ref }}: 11
xcodebuild -project "Examples CUSTOM_PATH_FILE" -resolvePackageDependencies: 11
swift .github CUSTOM_PATH_FILE set -go -p MIDIKit "Examples CUSTOM_PATH_DIR Multiplatform CUSTOM_PATH_FILE" -branch ${{ github.ref }}: 6
xcodebuild -project "Examples CUSTOM_PATH_DIR Multiplatform CUSTOM_PATH_FILE" -resolvePackageDependencies: 6
bundle install && bundle exec rake test:rails: 6
echo "Not required": 11
#********************************************: 11
dotnet test -c Release FLAG:"console;verbosity=normal" FLAG Category!=Flaky: 15
USES: drusellers/publish-nuget: 32
USES: ./.github/actions/setup-bundler-for-testing: 8
cd resources: 6
cd resources CUSTOM_PATH_DIR: 13
.. CUSTOM_PATH_DIR compile-run examples CUSTOM_PATH_FILE3: 37
.. CUSTOM_PATH_DIR compile examples CUSTOM_PATH_FILE3: 26
export CLOUDSDK_PYTHON="python3": 6
 CUSTOM_PATH_DIR bootstrap github FLAG . CUSTOM_PATH_DIR \: 6
FLAG=fluxcd-testing \: 6
FLAG=${{ steps.vars.outputs.test_repo_name }} \: 6
FLAG=test-cluster \: 6
FLAG=team-z: 6
chmod +x . CUSTOM_PATH_FILE; . CUSTOM_PATH_FILE: 14
docker push 650140442593.dkr.ecr.us-west-2.amazonaws.com CUSTOM_PATH_DIR: 10
echo "y" | docker system prune -a: 8
FLAG=petastorm CUSTOM_PATH_FILE \: 6
examples CUSTOM_PATH_FILE \: 6
 CUSTOM_PATH_DIR `: 20
WORKSPACE="Bluetooth.xcworkspace": 8
if [[ ! -e "ENV_VAR" ]]: 8
WORKSPACE=".": 8
GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Bluetooth-Package || true)): 8
if [[ ENV_VAR != "" ]]: 8
SCHEME="Bluetooth-Package": 8
SCHEME="Bluetooth": 8
echo "set -o pipefail; export PATH='swift-latest:ENV_VAR'; WORKSPACE='ENV_VAR'; SCHEME='ENV_VAR'" > setup.sh: 8
source "setup.sh": 8
echo "Building workspace ENV_VAR scheme ENV_VAR.": 8
xcodebuild clean build -workspace "ENV_VAR" -scheme "ENV_VAR" -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs CUSTOM_PATH_FILE | xcpretty: 8
echo "prog=$prog" >> ENV_VAR: 6
version=`sed -E -n -e 's CUSTOM_PATH_DIR CUSTOM_PATH_DIR ENV_VAR`: 6
sudo rm -rf CUSTOM_PATH_DIR && sudo rm -rf CUSTOM_PATH_DIR && sudo rm -rf CUSTOM_PATH_DIR && sudo rm -rf " CUSTOM_PATH_DIR && sudo rm -rf "ENV_VAR": 6
mv -f target CUSTOM_PATH_DIR target CUSTOM_PATH_DIR: 6
chmod a+rx target CUSTOM_PATH_DIR: 16
USES: protocolbuffers/protobuf-ci/sccache: 8
yarn test:plugins:ci: 100
yarn test:plugins:upstream: 18
cd jskit CUSTOM_PATH_DIR: 6
python3 -m unittest discover . -p "test_*.py": 6
aws s3 sync s3: CUSTOM_PATH_DIR s3: CUSTOM_PATH_DIR: 40
. CUSTOM_PATH_FILE cpu: 6
. CUSTOM_PATH_FILE cuda: 6
. CUSTOM_PATH_DIR cert tests CUSTOM_PATH_FILE: 6
sed -i 's CUSTOM_PATH_DIR startup.sh: 6
wget ENV_VAR CUSTOM_PATH_FILE -P aif360 CUSTOM_PATH_DIR: 6
. CUSTOM_PATH_FILE ${{ env.PA_CONTAINER_NAME }} attribution: 7
. CUSTOM_PATH_FILE ${{ env.PL_CONTAINER_NAME }} lift: 8
wget -q -c 'URL: 6
FLAG=appdir CUSTOM_PATH_DIR \: 12
mkdir build | Out-Null: 6
cp C: CUSTOM_PATH_FILE .: 33
cp -Recurse C: CUSTOM_PATH_DIR .: 8
cd .. CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE ${{ github.run_id }} x86_64: 6
apk add FLAG ca-certificates curl file idn2-utils make: 13
npx -y npm-ci-please@^1.1.1: 6
export HOMEBREW_NO_INSTALL_FROM_API=1: 9
pushd $(cij_root) && source modules CUSTOM_PATH_FILE && popd: 8
source ${{ steps.cijoe-qemu.outputs.target-env }}: 7
wget URL -nv -O - | tar -C ${{env.dist-dir}} -xJf - &: 9
echo "::set-output name=local-bin::ENV_VAR CUSTOM_PATH_DIR: 13
echo "::set-output name=test-reports-dir::$out_dir": 10
COMPILER="$(echo '${{matrix.compiler}}' | cut -d' ' -f1 | sed -r 's CUSTOM_PATH_DIR | tr '[:upper:]' '[:lower:]')": 7
echo "::set-output name=outname::ENV_VAR": 7
source env-vars-testing.sh: 6
dotnet test FLAG FLAG "console;verbosity=normal" FLAG trx FLAG:"XPlat Code Coverage" FLAG Source CUSTOM_PATH_FILE Source CUSTOM_PATH_FILE: 6
cd ${{ env.CI_FOLDER }}: 15
python ${{ env.CI_UTILS_FOLDER }} CUSTOM_PATH_FILE FLAG ${{ env.CI_SAMPLES_CFG_FOLDER }} CUSTOM_PATH_FILE: 9
python3 ${{ env.CI_UTILS_FOLDER }} CUSTOM_PATH_FILE FLAG ${{ env.CI_SAMPLES_CFG_FOLDER }} CUSTOM_PATH_FILE: 18
export BRANCH=${{ steps.pr_branch.outputs.branch }}: 8
docker build . FLAG files CUSTOM_PATH_FILE FLAG FLAG BRANCH FLAG COMMIT FLAG ghcr.io CUSTOM_PATH_DIR: 6
cmake FLAG build FLAG ${{ env.CORES }}: 6
NOCONFIGURE=1 . CUSTOM_PATH_FILE: 7
cd OnnxBridge CUSTOM_PATH_DIR: 8
 ON: 6
pushd %TEMP%: 7
cd \conda_src: 6
composer require FLAG FLAG mysql-workbench-schema-exporter CUSTOM_PATH_DIR: 6
php -f example CUSTOM_PATH_FILE: 15
valgrind FLAG=1 FLAG=yes FLAG=full ENV_VAR CUSTOM_PATH_DIR: 11
sudo ENV_VAR CUSTOM_PATH_FILE: 6
pylint FLAG . CUSTOM_PATH_DIR . CUSTOM_PATH_DIR: 13
USES: ./.github/actions/git-diff/: 16
USES: ./.github/actions/setup-ts/: 10
helm install FLAG URL iter8 controller FLAG 0.18 FLAG logLevel=trace: 8
minikube image load FLAG istio CUSTOM_PATH_DIR: 8
dotnet pack . CUSTOM_PATH_FILE FLAG Release: 10
cp -r .. CUSTOM_PATH_DIR ENV_VAR/: 8
${{ env.ci_build_script }} dependencies: 7
${{ env.ci_build_script }} generate: 6
${{ env.ci_build_script }} build: 7
USES: docker://cloudposse/github-status-updater: 25
git clone FLAG v0.8.0 FLAG 1 URL ENV_VAR CUSTOM_PATH_DIR: 6
asdf plugin-add golang URL: 6
asdf install golang 1.16.7: 6
asdf global golang 1.16.7: 6
sudo swapoff FLAG FLAG: 6
sudo wipefs FLAG FLAG CUSTOM_PATH_DIR ' CUSTOM_PATH_DIR {print $1}'| head -1)1: 6
GOPATH=$(go env GOPATH) make clean && make -j$nproc IMAGES='ceph' VERSION=0 build: 6
aws s3 cp "ENV_VAR" CUSTOM_PATH_FILE s3: CUSTOM_PATH_FILE: 6
aws s3 cp "ENV_VAR" CUSTOM_PATH_FILE s3: CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 8
USES: ./.github/workflows/rafiki/env-setup: 9
echo "The terraform version was ${{ steps.terraform-version.outputs.terraform }}": 7
npm run app-release: 7
echo ENV_VARgithub | jq .: 10
echo ENV_VARneeds | jq .: 10
ref:$github_ref: 6
. CUSTOM_PATH_DIR FLAG | tee CUSTOM_PATH_DIR | grep -q "chezmoi version v": 7
make -C integration CUSTOM_PATH_DIR run: 23
. . CUSTOM_PATH_FILE ${{ steps.extract_pod_name.outputs.pod_name }} "ENV_VAR" "ENV_VAR" "ENV_VAR" "ENV_VAR" 0 0: 7
docker pull rapidfort CUSTOM_PATH_DIR: 72
scripts CUSTOM_PATH_FILE out CUSTOM_PATH_DIR '. CUSTOM_PATH_FILE FLAG out CUSTOM_PATH_DIR  FLAG FLAG "FLAG 1234 FLAG kvs1 FLAG json:out CUSTOM_PATH_FILE" FLAG "src CUSTOM_PATH_FILE" FLAG "FLAG admin_storage.json FLAG on-network FLAG 1234 FLAG 20202021 FLAG json:out CUSTOM_PATH_FILE FLAG perfetto:out CUSTOM_PATH_FILE"': 9
scripts CUSTOM_PATH_FILE out CUSTOM_PATH_DIR '. CUSTOM_PATH_FILE FLAG out CUSTOM_PATH_DIR  FLAG FLAG "FLAG 1234 FLAG kvs1 FLAG json:out CUSTOM_PATH_FILE" FLAG "src CUSTOM_PATH_FILE" FLAG "FLAG admin_storage.json FLAG on-network FLAG 1234 FLAG 20202021 FLAG src CUSTOM_PATH_DIR FLAG json:out CUSTOM_PATH_FILE FLAG perfetto:out CUSTOM_PATH_FILE"': 6
scripts CUSTOM_PATH_FILE out CUSTOM_PATH_DIR '. CUSTOM_PATH_FILE FLAG "src CUSTOM_PATH_FILE" FLAG out CUSTOM_PATH_DIR  FLAG FLAG "FLAG 1234 FLAG kvs1 FLAG json:out CUSTOM_PATH_FILE" FLAG "FLAG admin_storage.json FLAG on-network FLAG 1234 FLAG 20202021 FLAG src CUSTOM_PATH_DIR FLAG json:out CUSTOM_PATH_FILE FLAG perfetto:out CUSTOM_PATH_FILE"': 12
[[ "${{ steps.generated-files-cache.outputs.success }}" != "false" ]] || exit 1: 8
mv _build CUSTOM_PATH_FILE test-logs/ || true: 7
bundle check || bundle install FLAG .bundle: 6
echo "No run required": 6
sudo apt-get install -y byacc automake: 11
sudo update-alternatives FLAG yacc CUSTOM_PATH_DIR: 11
platformio run -d examples CUSTOM_PATH_DIR: 76
for i in $(ls -d1 ~ CUSTOM_PATH_FILE-info); do poetry run pip uninstall -y nautobot; done: 10
poetry run invoke unittest FLAG FLAG: 6
poetry run invoke unittest-coverage: 9
USES: YiiGuxing/close-issue: 6
cp packages CUSTOM_PATH_FILE dist-workspace CUSTOM_PATH_DIR: 6
mkdir -p summary CUSTOM_PATH_DIR: 15
\cp target CUSTOM_PATH_DIR src CUSTOM_PATH_DIR: 9
mkdir "${{ env.PORTABLE_DIR }} CUSTOM_PATH_DIR: 10
cp plugins CUSTOM_PATH_FILE "${{ env.PORTABLE_DIR }} CUSTOM_PATH_DIR: 8
mim install mmcv: 11
coverage run FLAG FLAG mmengine -m pytest tests/  FLAG tests CUSTOM_PATH_DIR: 7
USES: project-stacker/stacker-build-push-action: 8
tar FLAG zstd -cf reports-${{github.job}}.tzst `echo ${{env.REPORTS_LOCATIONS}}`: 6
echo ". CUSTOM_PATH_FILE": 7
echo "VCPKG_CACHE_7Z_URL=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 10
gh release upload "ENV_VAR" .. CUSTOM_PATH_FILE: 6
lakos . -i "{test CUSTOM_PATH_DIR | dot -Tsvg -o class-diagram.svg: 6
dotnet msbuild SDK CUSTOM_PATH_FILE -property:UseSharedCompilation=false -property:Configuration=Release CUSTOM_PATH_DIR -target:Build: 7
mv artifact CUSTOM_PATH_DIR .: 24
pushd xapian-core: 44
tar FLAG=1 -xf xapian-core-*.tar.xz: 23
pushd xapian-applications CUSTOM_PATH_DIR: 28
tar FLAG=1 -xf xapian-omega-*.tar.xz: 14
pushd xapian-letor: 42
tar FLAG=1 -xf xapian-letor-*.tar.xz: 21
export XAPIAN_CONFIG=ENV_VAR CUSTOM_PATH_DIR: 22
make -j2 -C xapian-core: 21
make -j2 -C xapian-applications CUSTOM_PATH_DIR: 13
make -j2 -C xapian-letor: 20
export AUTOMATED_TESTING=1: 21
make -j2 -C xapian-core check: 20
make -j2 -C xapian-applications CUSTOM_PATH_DIR check: 13
make -j2 -C xapian-letor check: 20
pushd xapian-bindings: 21
tar FLAG=1 -xf xapian-bindings-*.tar.xz: 11
export CC='ccache gcc': 7
export CXX='ccache g++': 7
make -j2 -C xapian-bindings: 9
make -j2 -C xapian-bindings check: 9
PATH= CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 25
mv build CUSTOM_PATH_FILE publish CUSTOM_PATH_FILE: 6
echo "GITHUB_REPOSITORY=${{github.event.inputs.use_repo}}" >> ENV_VAR: 27
echo "GITHUB_HEAD_REF=${{github.event.inputs.use_git_ref}}" >> ENV_VAR: 27
echo "skipjobs: ${{github.event.inputs.skipjobs}}": 27
echo "skiptests: ${{github.event.inputs.skiptests}}": 27
echo "test_args: ${{github.event.inputs.test_args}}": 27
echo "cluster_test_args: ${{github.event.inputs.cluster_test_args}}": 27
sudo apt-get install tcl8.6 tclx: 7
. CUSTOM_PATH_DIR FLAG FLAG FLAG ${{github.event.inputs.test_args}}: 12
. CUSTOM_PATH_DIR FLAG FLAG ${{github.event.inputs.test_args}}: 12
. CUSTOM_PATH_DIR ${{github.event.inputs.cluster_test_args}}: 27
make REDIS_CFLAGS='-Werror': 10
USES: ./.github/workflows/setup-node: 6
docker exec -w CUSTOM_PATH_DIR ENV_VAR CUSTOM_PATH_DIR process FLAG: 21
unzip . CUSTOM_PATH_FILE -d output: 8
cat output CUSTOM_PATH_FILE: 9
rm -r output: 8
python freeze CUSTOM_PATH_FILE: 11
USES: ./.github/workflows/pulser-setup: 6
mv models CUSTOM_PATH_FILE-10 models CUSTOM_PATH_FILE: 8
make all test-binaries: 7
set PYTHONPATH=${{ env.OPENVINO_REPO }}\tools\mo;${{ env.LAYER_TESTS_INSTALL_DIR }};%PYTHONPATH%: 12
call "${{ env.INSTALL_DIR }}\\setupvars.bat" && ${{ env.INSTALL_TEST_DIR }} CUSTOM_PATH_DIR FLAG_print_time=1 FLAG_output=xml:${{ env.INSTALL_TEST_DIR }} CUSTOM_PATH_FILE: 22
. CUSTOM_PATH_DIR 1e11 FLAG: 10
. CUSTOM_PATH_DIR 1e12 FLAG: 10
. CUSTOM_PATH_DIR 1e14 FLAG: 6
outputs() { step_id="${{ github.action }}"; for var in "$@" ; do echo steps.${step_id}.outputs.${var}="${!var}"; echo "${var}=${!var}" >> ENV_VAR; done; }: 6
export VINEYARD_DATA_DIR=`pwd` CUSTOM_PATH_DIR: 7
export TMPDIR="ENV_VAR:-$(dirname $(mktemp))}": 7
python3 test CUSTOM_PATH_FILE ENV_VAR FLAG: 6
${{ env.testbindir }} CUSTOM_PATH_DIR env.exe-ext }}: 10
export GITHUB_REF_NAME="${{ github.ref_name }}": 6
make configure config=debug: 6
make build config=debug: 10
Copy-Item -Path "Apps CUSTOM_PATH_FILE" -Destination TemporaryArtifactStorage: 8
lychee FLAG FLAG detailed $td CUSTOM_PATH_DIR: 7
\: 9
USES: ./.github/actions/sync-workspace: 12
sed -i 's|refs CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 6
cmake -B build -S . -DCMAKE_BUILD_TYPE=Release: 7
docker pull ghcr.io CUSTOM_PATH_DIR && docker tag ghcr.io CUSTOM_PATH_DIR local CUSTOM_PATH_DIR: 7
make build config=release: 7
(cd packages CUSTOM_PATH_DIR && python setup.py sdist bdist_wheel); cp packages CUSTOM_PATH_DIR dist: 8
echo ENV_VAR >> log_creds.txt: 9
sleep 1m;: 6
cp -L CUSTOM_PATH_FILE Vangers.app CUSTOM_PATH_DIR: 8
dotnet build src CUSTOM_PATH_FILE -t:BeforeBuildTasks FLAG -f:net8.0: 14
dotnet build src CUSTOM_PATH_FILE -p:Configuration=Release -p:GeneratePackageOnBuild=false -p:WarningLevel=0 -p:RunCodeAnalysis=false: 18
cd .. && rm -force -r build: 8
make -C lib CUSTOM_PATH_DIR check: 7
USES: jitsecurity-controls/jit-github-action: 21
$wine . CUSTOM_PATH_FILE FLAG: 12
STAT=$(gopogh -in . CUSTOM_PATH_FILE -out . CUSTOM_PATH_FILE -name "ENV_VAR ENV_VAR" -repo "ENV_VAR"  -details "ENV_VAR")  || true: 6
google-chrome FLAG FLAG \: 14
FLAG FLAG="${{ github.workspace }} CUSTOM_PATH_FILE" \: 8
${{ matrix.venv_activate }}: 8
${{ matrix.ld_libpath }}: 7
bash -e . CUSTOM_PATH_FILE: 6
python3 script CUSTOM_PATH_FILE -p linux -v: 6
wget URL -O vulkansdk-linux-x86_64-1.1.114.0.tar.gz: 6
tar -xf vulkansdk-linux-x86_64-1.1.114.0.tar.gz: 6
rm -rf 1.1.114.0 CUSTOM_PATH_DIR 1.1.114.0 CUSTOM_PATH_DIR: 6
find 1.1.114.0 -type f | grep -v -E 'vulkan|glslang' | xargs rm: 6
make -C bake CUSTOM_PATH_DIR: 14
bake CUSTOM_PATH_DIR setup: 14
bake FLAG: 10
bake run test CUSTOM_PATH_DIR -- -j 8: 6
yarn run build:esm: 7
cd testing-framework CUSTOM_PATH_DIR && terraform destroy -auto-approve: 9
cd testing-framework CUSTOM_PATH_DIR && docker-compose -f validator_docker_compose.yml up FLAG: 6
pip install -r builds CUSTOM_PATH_FILE pkt_kg: 10
docker build FLAG "gcr.io CUSTOM_PATH_DIR -f "ENV_VAR" . CUSTOM_PATH_DIR \: 8
FLAG "app_arg=ENV_VAR" FLAG "rel_arg=ENV_VAR" FLAG "owl_arg=ENV_VAR": 8
docker push "gcr.io CUSTOM_PATH_DIR: 10
gcloud compute instances create-with-container "ENV_VAR" FLAG="ENV_VAR" \: 8
FLAG "gcr.io CUSTOM_PATH_DIR FLAG=never \: 8
FLAG="ENV_VAR" FLAG="ENV_VAR" \: 8
FLAG="ENV_VAR" FLAG="ENV_VAR" FLAG FLAG=storage-rw: 8
python builds CUSTOM_PATH_FILE FLAG_type reg FLAG 3 FLAG 60 FLAG_dir "ENV_VAR" FLAG '' FLAG '': 8
chmod +x convert_graphdef_memmapped_format: 8
tar xf native_client.tar.xz: 8
ls -hal ${{ env.CI_TMP_DIR }}/: 38
python -m pip install coqui_stt_ctcdecoder-*.whl: 6
npm install FLAG ${{ env.CI_TMP_DIR }} CUSTOM_PATH_FILE: 7
npm install electron@${{ matrix.electronjs-version }}: 6
mkdir -p ENV_VAR || true: 6
USES: ./.github/actions/upload-release-asset: 7
USES: ./.github/actions/win-run-tests: 6
USES: ./.github/actions/multistrap: 7
cd tensorflow: 6
USES: team-alembic/staple-actions/actions/mix-task: 12
unzip -j -o . CUSTOM_PATH_FILE -d ${{env.BEBOPC_PATH}} CUSTOM_PATH_DIR: 6
pip uninstall -y typing-extensions  # what is this trash: 11
"-X 'github.com CUSTOM_PATH_FILE=true' \: 8
-X 'github.com CUSTOM_PATH_FILE=${{ steps.updated-version.outputs.version }}' \: 8
-X 'github.com CUSTOM_PATH_FILE=${{ github.sha }}' \: 8
cosign sign-blob -key=ENV_VAR \: 8
echo "DOCKER_ORG=ENV_VAR" >> ENV_VAR: 17
echo "PINNED_MAILU_VERSION=staging" >> ENV_VAR          : 7
call "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat": 18
Invoke-WebRequest -Uri "URL -OutFile ".\openssl.zip": 6
set CUSTOM_PATH_DIR OPENSSL_DIR=<openssl_dir.txt: 16
dir "%PROGRAMFILES%\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat": 10
set INCLUDE=%INCLUDE%;%OPENSSL_DIR%\include: 6
set LIB=%LIB%;%OPENSSL_DIR%\lib: 6
msbuild pjproject-vs14.sln CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 10
$env:OPENSSL_DIR = Get-Content .\openssl_dir.txt: 6
cd .. CUSTOM_PATH_DIR . CUSTOM_PATH_FILE: 11
wget -O ENV_VAR URL: 8
cd Examples CUSTOM_PATH_DIR && npm i: 8
sed -i "s CUSTOM_PATH_DIR services CUSTOM_PATH_FILE CUSTOM_PATH_DIR: 6
USES: ./.github/actions/read_keyvault: 14
rm -r node_modules: 8
npm run preinstall: 9
sudo apt-get update && sudo apt-get install -y chromium-browser: 6
make ci-test-all: 6
python3 make.py -clean_only: 15
echo "WGPU_NATIVE_VERSION=ENV_VAR CUSTOM_PATH_DIR >> ENV_VAR: 6
gunzip *.gz: 6
jest FLAG FLAG=false FLAG FLAG FLAG='^((?!).)*$' test CUSTOM_PATH_FILE: 14
make install_dependencies: 7
make dev_install: 7
Get-ChildItem . CUSTOM_PATH_FILE CUSTOM_PATH_DIR -Recurse | Remove-Item -Recurse -Confirm:$false: 8
git clone FLAG qwt-6.2 FLAG 1 URL .. CUSTOM_PATH_DIR: 8
cmake FLAG . FLAG ${{ matrix.build_type }} FLAG install: 8
USES: elastic/es-perf-github-status: 7
export UPX_CONFIG_DISABLE_C_STANDARD=ON UPX_CONFIG_DISABLE_CXX_STANDARD=ON: 8
docker load -i build CUSTOM_PATH_DIR github.run_id }}.tar: 6
rustc FLAG; cargo FLAG; rustup FLAG: 6
echo '::set-env name=LIBRA_DUMP_LOGS::1': 6
echo '::set-env name=CARGO_INCREMENTAL::0': 6
sudo apt-get install -y cmake curl clang llvm gcc-powerpc-linux-gnu: 6
docker push docker.io CUSTOM_PATH_DIR inputs.tag }}: 10
cp src CUSTOM_PATH_FILE build CUSTOM_PATH_DIR: 9
sudo apt-get autoclean: 15
sudo mv protoc CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 10
make protolint_install: 6
cd ${{ env.RESC_BACKEND_DIR }}: 7
USES: krpc/krpc-core/.github/actions/bazel-fetch: 17
USES: krpc/krpc-core/.github/actions/ksp-lib: 17
USES: krpc/krpc-core/.github/actions/upload-artifact: 13
docker buildx imagetools inspect localhost:5000 CUSTOM_PATH_DIR FLAG '{{json .}}': 7
cat > service_account_creds.json << EOF: 6
${{ secrets.GCP_CREDS }}: 6
USES: schickling-actions/checkout-and-install: 8
sleep 10s && for i in $(seq 1 20); do kubectl get pod -n vanus FLAG | grep -v Run || break;sleep 5s;done: 6
dotnet nuget push src CUSTOM_PATH_FILE -k ENV_VAR -s URL: 8
FAILED=0: 6
source samples CUSTOM_PATH_FILE: 8
. CUSTOM_PATH_DIR executeScreenshotTests: 6
. CUSTOM_PATH_DIR executeScreenshotTests -Precord: 6
echo "version=$(cat package.json | jq -r '.version')" >> ENV_VAR: 7
echo "$(cat package.json | jq '.version = .version + "-nightly"')" > package.json: 6
cd ENV_VAR CUSTOM_PATH_DIR && rm -rfv . CUSTOM_PATH_DIR && . CUSTOM_PATH_FILE ENV_VAR ${{ secrets.API_KEY }}: 8
env CUSTOM_PATH_DIR mycodo CUSTOM_PATH_FILE: 6
Remove-Item -ErrorAction SilentlyContinue          ~ CUSTOM_PATH_FILE: 24
Remove-Item -ErrorAction SilentlyContinue -Recurse ~ CUSTOM_PATH_DIR: 12
export ANDROID_NDK_ABI=23: 6
cat .. CUSTOM_PATH_FILE > test-connections.yaml: 8
. CUSTOM_PATH_FILE InTestsCore -e: 6
curl -LRo main CUSTOM_PATH_FILE URL: 7
gzip -df main CUSTOM_PATH_FILE;: 7
cp main CUSTOM_PATH_FILE release CUSTOM_PATH_DIR: 10
cp -r main CUSTOM_PATH_DIR release CUSTOM_PATH_DIR: 10
tar -Jcf release CUSTOM_PATH_FILE -C main source: 11
docker exec -i acme-sh acme.sh FLAG URL FLAG -d acme-sh.acme FLAG FLAG FLAG 3 FLAG: 12
USES: ./.github/actions/decrypt-file: 10
gunzip < freeipa-server-${{ matrix.os }}.tar.gz | docker load: 6
pushd bindings CUSTOM_PATH_DIR: 10
pip install -e plugins CUSTOM_PATH_DIR: 12
"github.com CUSTOM_PATH_DIR: 6
mkdir -p gitqlient_${{env.VERSION}}_amd64 CUSTOM_PATH_DIR: 10
cp . CUSTOM_PATH_FILE gitqlient_${{env.VERSION}}_amd64 CUSTOM_PATH_FILE: 10
echo "sleep 30 seconds to allow endpoint deletion": 8
DESTDIR=~ CUSTOM_PATH_DIR ninja -C build install: 6
unzip protoc-3.20.3-linux-x86_64.zip -d ENV_VAR CUSTOM_PATH_DIR: 6
pip3 install toml: 11
git checkout data: 6
mv data CUSTOM_PATH_DIR data_ci CUSTOM_PATH_DIR: 30
mv data_ci data: 6
echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} FLAG : 29
docker image pull erxes CUSTOM_PATH_DIR : 29
docker tag erxes CUSTOM_PATH_DIR erxes CUSTOM_PATH_DIR : 29
USES: ./.github/actions/process-linting-results: 6
yarn pr-check: 6
composer require "overtrue CUSTOM_PATH_DIR: 6
xvfb-run FLAG="-screen 0 1920x1080x16" yarn test:e2e src CUSTOM_PATH_FILE: 36
echo "Starting Benchmarks": 21
deno run -A FLAG bare.ts &: 13
sleep 15 && : 19
mkdir -p results &&: 20
autocannon -c 40 -d 10 -j URL > results CUSTOM_PATH_FILE &&: 21
kill $!: 21
echo "End Benchmarks": 21
echo "::set-output name=result_dir::ENV_VAR": 21
echo "::set-output name=result_path::ENV_VAR": 21
curl -s -o CUSTOM_PATH_DIR -w ''%{http_code}'\n' URL: 7
python -m pip install FLAG pip wheel 'setuptools!=58.5.*,<60': 8
coveralls FLAG=github || true: 7
cmake FLAG . FLAG %BUILD_TYPE% FLAG: 6
ant $env:OPTS -f php CUSTOM_PATH_FILE test: 24
pip install certifi: 6
python -m metadrive.pull_asset: 6
pip install ray: 6
cd metadrive/: 6
USES: ./.github/actions/set-up-bashcov: 6
docker push modelcpp CUSTOM_PATH_DIR: 6
echo '::endgroup': 12
USES: matomo-org/github-action-tests: 7
USES: kayac/ecspresso: 8
sudo apt-get install -qq gcc python3 python3-pip: 7
echo "::set-output name=VERSION_NAME::ENV_VAR": 7
echo "::set-output name=TXS_VERSION::ENV_VAR": 7
echo "::set-output name=GIT_VERSION::ENV_VAR": 6
MXEDIR=" CUSTOM_PATH_DIR: 6
MXETARGET="x86_64-w64-mingw32.shared": 6
docker cp pki1: CUSTOM_PATH_DIR CUSTOM_PATH_DIR: 6
source pygraphistry CUSTOM_PATH_DIR: 19
Write-Host (""): 6
USES: diem/actions/labels: 8
dotnet build src CUSTOM_PATH_DIR FLAG ${{ matrix.configuration }} FLAG FLAG FLAG net6.0 CUSTOM_PATH_DIR: 7
. CUSTOM_PATH_FILE "stream-applications" "applications CUSTOM_PATH_DIR matrix.app }}": 6
. CUSTOM_PATH_FILE FLAG test src CUSTOM_PATH_DIR FLAG FLAG=50% FLAG=. CUSTOM_PATH_FILE FLAG=false FLAG FLAG='["src CUSTOM_PATH_FILE","!src CUSTOM_PATH_DIR FLAG='{". CUSTOM_PATH_DIR: 14
USES: hypfer/upload-release-asset: 8
docker push opendilab CUSTOM_PATH_DIR: 6
tar FLAG zstd -xf riscv-gnu-toolchain.tzst: 6
ENV_VAR FLAG | grep -e "Cache hits\s*[1-9]": 12
cd $(brew FLAG homebrew CUSTOM_PATH_DIR: 6
if [ ! -d .git ]; then git init; fi; git remote add trac ${{ env.SAGE_TRAC_GIT }} && x=1 && while [ $x -le 5 ]; do x=$(( $x + 1 )); sleep $(( ENV_VAR % 60 + 1 )); if git-trac-command CUSTOM_PATH_DIR fetch ENV_VAR; then git merge FETCH_HEAD || echo "(ignored)"; exit 0; fi; sleep 40; done; exit 1: 8
cargo install FLAG FLAG FLAG . CUSTOM_PATH_DIR: 19
find . -path '*assignments*' -name '*.py' -print -exec python -m doctest '{}' \;: 10
echo "Skipped tests": 9
cp -r out CUSTOM_PATH_DIR app: 6
env CUSTOM_PATH_FILE: 22
USES: ./.github/actions/submodule: 19
USES: ./.github/actions/test_gem: 15
yarn build:binary: 6
brew install kubectl docker coreutils lima: 6
colima delete -f: 6
kubectl delete -f .ci CUSTOM_PATH_FILE: 7
cp 3d CUSTOM_PATH_FILE 3d CUSTOM_PATH_FILE: 17
start_this=$(date +%s.%3N): 9
end_this=$(date +%s.%3N): 8
${{ env.RUN_CMD }} py.test FLAG examples CUSTOM_PATH_DIR: 7
python -m pytest -rA pypots CUSTOM_PATH_FILE -n auto FLAG=pypots FLAG FLAG=loadgroup: 6
git config FLAG user.email 'changelog': 26
git config FLAG user.name 'Awesome Github action': 26
git add . && git commit FLAG -m 'feat: Added fake file so version will be bumped': 22
sudo dot -c: 6
sudo apt-get install libopenblas-dev texlive-latex-extra dvipng: 6
pip install FLAG pip wheel setuptools nox: 6
pip install -e .[all,docs]: 6
cd docker CUSTOM_PATH_DIR inputs.ubuntu }} CUSTOM_PATH_DIR: 10
USES: ./.github/actions/rune2etest: 11
.github CUSTOM_PATH_FILE valgrind: 12
docker load -i antrea-ubuntu.tar: 12
cd ttk-data: 14
set PV_PLUGIN_PATH=%TTK_DIR%\bin\plugins: 6
yarn install FLAG FLAG 500000 FLAG: 10
tar -zcvf ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz ${{ github.job }}-artifacts: 24
pip${{ env.current_python }} install poetry==${{ env.poetry_version }}: 6
. CUSTOM_PATH_DIR -skx -- . CUSTOM_PATH_DIR: 11
cargo run FLAG ntp-ctl -- -c . CUSTOM_PATH_FILE validate: 6
OPENBLAS_NUM_THREADS=2 qemu-mips64el . CUSTOM_PATH_DIR: 8
OPENBLAS_NUM_THREADS=2 qemu-mips64el . CUSTOM_PATH_DIR < . CUSTOM_PATH_DIR: 8
OPENBLAS_NUM_THREADS=1 OMP_NUM_THREADS=1 qemu-mips64el . CUSTOM_PATH_DIR < . CUSTOM_PATH_FILE: 8
OPENBLAS_NUM_THREADS=2 qemu-mips64el . CUSTOM_PATH_DIR < . CUSTOM_PATH_FILE: 8
pip install -e '.[testing]' FLAG editable_mode=strict: 8
script CUSTOM_PATH_DIR -prev: 8
bot-access.txt "$bot_token_secret": 7
botaccess=`cat bot-access.txt`: 26
scripts CUSTOM_PATH_FILE scripts CUSTOM_PATH_FILE \ bot-access.txt "$bot_token_secret": 24
cmake -S . -B build -DJSON_CI=On: 15
workspaces CUSTOM_PATH_DIR \: 9
npm run extract: 82
echo -n "ENV_VAR" | base64 FLAG > ENV_VAR: 6
export G_PID=$!: 6
cat "ci CUSTOM_PATH_FILE" | sed 's CUSTOM_PATH_DIR | xargs -I % cp ci CUSTOM_PATH_FILE ${artifact_dir} CUSTOM_PATH_FILE || :: 7
sha256sum ola-debian-stable-built-source-tree.tar.gz: 7
tar -xvzf ola-debian-stable-built-source-tree.tar.gz .: 6
rm ola-debian-stable-built-source-tree.tar.gz: 6
.github\set_up_esrp.ps1: 6
cd services: 277
ls -l j64: 7
rm -rf j64 CUSTOM_PATH_FILE: 6
cd tests CUSTOM_PATH_DIR && podman build -t appstream -f . CUSTOM_PATH_DIR .: 6
podman run -a stdout -a stderr -e COMPILER_VENDOR=ENV_VAR -e CC=gcc -e CXX=g++ -v `pwd`: CUSTOM_PATH_DIR appstream . CUSTOM_PATH_FILE: 8
$(pwd) CUSTOM_PATH_DIR . CUSTOM_PATH_FILE90 FLAG: 8
rm -f ${{ env.PACKAGENAME }}.zip: 15
zip -9 -y -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}: 12
7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}: 9
rm -rf ${{ env.PACKAGENAME }}: 10
python3 build.py -c examples CUSTOM_PATH_DIR -m learn -r ENV_VAR: 8
python3 build.py -c examples CUSTOM_PATH_DIR -m test -r ENV_VAR: 8
python3 build.py -c examples CUSTOM_PATH_DIR -m vanilla -r ENV_VAR: 8
USES: divnix/std-action/run: 7
tar xfz generated_app.tgz: 7
USES: ./.github/actions/create-prerelease: 11
if [[ -n ENV_VAR ]]; then echo "has_credentials=true" >> ENV_VAR; fi: 8
utils CUSTOM_PATH_FILE cmd CUSTOM_PATH_FILE application CUSTOM_PATH_DIR: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR -m pip install FLAG setuptools wheel numpy pip: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR -m pip install -U wheel FLAG: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR -m pip wheel . -w wheelhouse: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR -m pip install FLAG finufft -f fixed_wheel/: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR test CUSTOM_PATH_FILE: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR examples CUSTOM_PATH_FILE: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR -m pip install pytest: 6
 CUSTOM_PATH_FILE CUSTOM_PATH_DIR -m pytest test: 6
FLAG FLAG=". CUSTOM_PATH_FILE" \: 6
ls build CUSTOM_PATH_FILE: 14
ls build CUSTOM_PATH_FILE2: 10
git fetch FLAG FLAG FLAG=1 origin "ENV_VAR?}:ENV_VAR?}": 6
if [ "ENV_VAR" == "true" ]; then crates[${#crates[@]}]="\". CUSTOM_PATH_DIR fi: 9
crane cp ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.tag }} ENV_VAR CUSTOM_PATH_DIR needs.gather_changes.outputs.minorversion }}: 6
. CUSTOM_PATH_FILE all FLAG "ENV_VAR" | python3 . CUSTOM_PATH_FILE > "docs CUSTOM_PATH_FILE": 6
du -h tt_sif.mkv: 36
cat testutil CUSTOM_PATH_FILE: 8
grep "" testutil CUSTOM_PATH_DIR FLAG="*errors*": 16
pip install -r ansible_collections CUSTOM_PATH_FILE FLAG: 12
-only-testing "SpotifyAPIMainTests CUSTOM_PATH_DIR \: 33
DOCKER_CONTENT_TRUST=0 docker pull docker.io CUSTOM_PATH_DIR: 13
export PATH= CUSTOM_PATH_DIR matrix.go-version }} CUSTOM_PATH_DIR: 8
mkdir -p ${{ env.PACKAGENAME }}: 9
rm -rf openmp.framework: 14
mkdir -p openmp.framework CUSTOM_PATH_DIR: 28
ln -s A openmp.framework CUSTOM_PATH_DIR: 14
ln -s Versions CUSTOM_PATH_DIR openmp.framework CUSTOM_PATH_DIR: 42
sed -e 's CUSTOM_PATH_DIR -e 's CUSTOM_PATH_FILE CUSTOM_PATH_DIR -e 's CUSTOM_PATH_DIR Info.plist > openmp.framework CUSTOM_PATH_FILE: 14
ln -s Versions CUSTOM_PATH_DIR ncnn.framework CUSTOM_PATH_DIR: 6
mkdir build-x86; cd build-x86;: 8
mkdir build-x64; cd build-x64;: 8
.\VulkanSDK.exe FLAG FLAG FLAG install com.lunarg.vulkan.32bit: 8
mkdir build-x86; cd build-x86: 8
mkdir build-x64; cd build-x64: 8
mkdir ${{ env.PACKAGENAME }}: 8
mkdir ${{ env.PACKAGENAME }} CUSTOM_PATH_DIR: 24
Copy-Item -Verbose -Recurse -Path "build-x86\install\*" -Destination "${{ env.PACKAGENAME }}\x86": 8
Copy-Item -Verbose -Recurse -Path "build-x64\install\*" -Destination "${{ env.PACKAGENAME }}\x64": 8
patrol test -t integration_test CUSTOM_PATH_FILE: 9
kubectl cp sidecar: CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 10
kubectl cp sidecar-5xx: CUSTOM_PATH_FILE CUSTOM_PATH_FILE: 11
diff test CUSTOM_PATH_FILE CUSTOM_PATH_FILE &&: 6
kubectl exec sidecar -- sh -c "! test -e CUSTOM_PATH_FILE" && kubectl exec sidecar -- sh -c "test -e CUSTOM_PATH_FILE" &&: 6
python3 build CUSTOM_PATH_FILE test FLAG=. mononoke: 6
npx mocha -R dot test CUSTOM_PATH_FILE: 14
make clean all test: 6
docker cp soccerbot_simulator_1: CUSTOM_PATH_FILE soccerbot CUSTOM_PATH_DIR || echo "Unable to find logs": 12
